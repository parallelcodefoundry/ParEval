struct Element {
	size_t index;
  double value;
};

/* Compute z = alpha*x+y where x and y are sparse vectors of size Nx and Ny. Store the result in z.
   Use AMD HIP to compute in parallel. The kernel is launched with at least as many threads as values in x or y.
   Example:
   
   input: x=[{5, 12}, {8, 3}, {12, -1}], y=[{3, 1}, {5, -2}, {7, 1}, {8, -3}], alpha=1
   output: z=[{3, 1}, {5, 10}, {7, 1}, {12, -1}]
*/
__global__ void sparseAxpy(double alpha, const Element *x, const Element *y, double *z, size_t Nx, size_t Ny, size_t N) {