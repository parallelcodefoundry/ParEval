struct COOElement {
   size_t row, column;
   double value;
};

/* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.
   A is a sparse NxN matrix stored in COO format.
   Use MPI to compute in parallel. Assume MPI has already been initialized.
   Every rank has a complete copy of A. Store the result in L and U on rank 0.
   Example:

   input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]
   output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]
*/
void luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {