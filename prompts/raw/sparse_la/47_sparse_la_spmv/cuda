struct COOElement {
   size_t row, column;
   double value;
};

/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,
   and A is a sparse matrix stored in COO format with sizeA elements.
   A has dimensions MxN, x has N values, and y has M values.
   Use CUDA to parallelize. The kernel will be launched with at least sizeA threads.
   Example:

   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]
   output: y=[2, 3]
*/
__global__ void spmv(double alpha, const COOElement *A, size_t sizeA, const double *x, double beta, double *y, size_t M, size_t N) {