struct COOElement {
   size_t row, column;
   double value;
};

/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.
   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.
   Use MPI to compute in parallel. Assume MPI has already been initialized.
   Every rank has a complete copy of A and X. Store the result in Y on rank 0.
   Example:

   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]
   output: Y=[{-1,-4}, {1,0}]
*/
void spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {