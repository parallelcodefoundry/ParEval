struct Point {
	double x, y;
};

__device__ double distance(Point const& p1, Point const& p2) {
	return sqrt(pow(p2.x-p1.x, 2) + pow(p2.y-p1.y, 2));
}

/* Compute the perimeter of the smallest convex polygon that contains all the points in the vector points.
   Store the result in perimeter.
   Use AMD HIP to compute in parallel. The kernel is launched with at least as many threads as points.
   Example:

   input: [{0, 3}, {1, 1}, {2, 2}, {4, 4}, {0, 0}, {1, 2}, {3, 1}, {3, 3}]
   output: 13.4477
*/
__global__ void convexHullPerimeter(const Point *points, size_t numPoints, double *perimeter) {