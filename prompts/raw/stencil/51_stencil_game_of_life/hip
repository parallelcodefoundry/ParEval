/* Simulate one generation of Game of Life on `input`. Store the results in `output`.
   A cell is 1 if it is alive and 0 if it is dead.
   If a live cell has fewer than 2 live neighbors then it dies.
   If a live cell has 2 or 3 live neighbors then it lives on.
   If a live cell has more than 3 live neighbords then it dies.
   If a cell is dead and has exactly 3 live neighbors then it becomes alive.
   `input` and `output` are NxN grids stored in row-major.
   Use AMD HIP to compute in parallel. The kernel is launched on an NxN grid of threads.
   Example:

   input:  [[0, 0, 0, 0, 0],
					  [0, 1, 0, 0, 0],
            [0, 1, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 1, 0, 0, 0]]
   output: [[0, 0, 0, 0, 0],
					  [0, 1, 1, 0, 0],
            [0, 1, 0, 1, 0],
            [0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0]]
*/
__global__ void gameOfLife(const int *input, int *output, size_t N) {