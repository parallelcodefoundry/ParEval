const int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};

/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with
   the dot product of itself and its neighbors with the edge kernel.
   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.
   imageIn and imageOut are NxN grayscale images.
   Store the output of the computation in imageOut.
   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
   Example:

   input: [[112, 118, 141, 152],
           [93, 101, 119, 203],
           [45, 17, 16, 232],
           [82, 31, 49, 101]]
   output: [[255, 255, 255, 255],
            [255, 147, 0, 255],
            [36, 0, 0, 255],
            [255, 39, 0, 255]]
*/
void convolveKernel(Kokkos::View<const int**> &imageIn, Kokkos::View<int**> &imageOut, size_t N) {