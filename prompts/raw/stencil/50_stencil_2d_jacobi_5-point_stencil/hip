/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.
   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.
   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5
   Replace with 0 when reading past the boundaries of `input`.
   `input` and `output` are NxN grids stored in row-major.
   Use AMD HIP to compute in parallel. The kernel is launched on an NxN grid of threads.
   Example:

   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]
   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]
*/
__global__ void jacobi2D(const double *input, double *output, size_t N) {