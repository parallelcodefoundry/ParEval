prompt,name,problem_type,language,parallelism_model,temperature,top_p,do_sample,max_new_tokens,prompted,generated_output,did_build,is_source_valid,best_sequential_runtime,output_idx,run_idx,did_run,is_valid,runtime,num_threads,num_procs
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000302,0,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<size_t> result(""result"", 1);\n  Kokkos::parallel_for(""findFirstEven"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n      result(0) = i;\n      return;\n    }\n  });\n  Kokkos::fence();\n  return result(0);\n}",False,True,,1,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,2,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,3,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,4,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000302,5,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,6,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,7,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.0003,8,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.0003,9,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,10,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000302,11,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<size_t> result(""result"", 1);\n  Kokkos::parallel_for(\n      ""findFirstEven"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.size()),\n      KOKKOS_LAMBDA(const int i) {\n        if (x(i) % 2 == 0) {\n          result(0) = i;\n          return;\n        }\n      });\n  Kokkos::fence();\n  return result(0);\n}",False,True,,12,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.0003,13,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,14,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000302,15,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,16,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,17,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,18,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the first even number in the vector x.\n   Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(Kokkos::View<const int*> const& x) {",38_search_find_the_first_even_number,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.000301,19,0.0,True,False,0.0,1.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n},False,True,,0,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t i = 0;\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},False,True,,1,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n},False,True,,2,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t i = 0;\n  #pragma omp parallel for\n  for (i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      break;\n    }\n  }\n  return i;\n},False,True,,3,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n  #pragma omp parallel for reduction(min: result)\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,4,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (i < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,5,0.0,True,True,0.000136,1.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (i < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,5,1.0,True,True,7.8e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (i < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,5,2.0,True,True,4.7e-05,4.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (i < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,5,3.0,True,True,3.9e-05,8.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (i < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,5,4.0,True,True,7.1e-05,16.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (i < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,5,5.0,True,True,0.00011,32.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (i < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,5,6.0,True,True,0.000201,64.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,6,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n},False,True,,7,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,8,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t i = 0;\n  #pragma omp parallel for\n  for (size_t j = 0; j < x.size(); j++) {\n    if (x[j] % 2 == 0) {\n      i = j;\n      break;\n    }\n  }\n  return i;\n},False,True,,9,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,10,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n  #pragma omp parallel for reduction(min: result)\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,11,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,12,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,13,0.0,True,True,0.000138,1.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,13,1.0,True,True,7.4e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,13,2.0,True,True,4.9e-05,4.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,13,3.0,True,True,3.8e-05,8.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,13,4.0,True,True,7.8e-05,16.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,13,5.0,True,True,0.000117,32.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,13,6.0,True,True,0.000208,64.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n    #pragma omp parallel for\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n},False,True,,14,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,15,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,16,0.0,True,True,0.000139,1.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,16,1.0,True,True,7.7e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,16,2.0,True,True,4.9e-05,4.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,16,3.0,True,True,4.3e-05,8.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,16,4.0,True,True,6.3e-05,16.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,16,5.0,True,True,0.000128,32.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      #pragma omp critical\n      {\n        if (i < result) {\n          result = i;\n        }\n      }\n    }\n  }\n  return result;\n},True,True,3e-05,16,6.0,True,True,0.000214,64.0,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t i = 0;\n  #pragma omp parallel for\n  for (i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      break;\n    }\n  }\n  return i;\n},False,True,,17,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n  #pragma omp parallel for\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n},False,True,,18,,,,,,
"#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = x.size();\n    size_t i = 0;\n    #pragma omp parallel for\n    for (i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            #pragma omp critical\n            {\n                if (x[i] < result) {\n                    result = i;\n                }\n            }\n        }\n    }\n    return result;\n},True,True,3e-05,19,0.0,True,False,0.000164,1.0,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,0,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,1,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3.1e-05,2,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3e-05,3,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3e-05,4,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,5,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3e-05,6,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,7,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3e-05,8,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,9,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,10,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3e-05,11,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,12,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,13,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,14,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,15,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3e-05,16,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n},True,True,3e-05,17,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,18,0.0,True,True,3.5e-05,,
"/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n    return x.size();\n},True,True,3e-05,19,0.0,True,True,3.5e-05,,
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // number of even numbers in the vector\n    int even_count = 0;\n\n    // number of even numbers in the vector on the previous rank\n    int even_count_prev = 0;\n\n    // number of even numbers in the vector on the next rank\n    int even_count_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_prev_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_prev_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_next_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_next_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_next_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_next_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_prev_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_prev_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_prev_prev_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_prev_prev_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_prev_next_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_prev_next_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_next_next_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_next_next_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_next_prev_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_prev_next_prev_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_next_next_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_next_next_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_next_prev_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_next_prev_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_prev_prev_prev = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_prev_prev_next = 0;\n\n    // number of even numbers in the vector on the current rank\n    int even_count_curr_next_prev_next_next = 0;\n\n    // number of even numbers in the vector on the current",False,True,,0,,,,,,
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the offset of the first even number in the vector on each rank\n  int offset_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (int j = 0; j < x.size(); j++) {\n      if (x[j] % 2 == 0) {\n        offset_local++;\n      }\n    }\n  }\n\n  // calculate the offset of the first even number in the vector\n  int offset = 0;\n  for (int i = 0; i < rank; i++) {\n    for (int j = 0; j < x.size(); j++) {\n      if (x[j] % 2 == 0) {\n        offset++;\n      }\n    }\n  }\n\n  // calculate the number of even numbers in the vector on rank 0\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the offset of the first even number in the vector on rank 0\n  int offset_global = 0;\n  MPI_Reduce(&offset_local, &offset_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the index of the first even number in the vector on rank 0\n  if (rank == 0) {\n    result = offset_global + even_count_global;\n  }\n\n  return result;\n}",True,True,3e-05,1,0.0,True,False,0.000165,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,0.0,True,True,3.7e-05,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,1.0,True,True,3.4e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,2.0,True,True,0.000763,,4.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,3.0,True,True,0.00061,,8.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,4.0,True,True,0.000132,,16.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,5.0,True,True,0.000191,,32.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,6.0,True,True,9.4e-05,,64.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_local = n / world_size;\n\n  // get the start and end index of the local vector\n  int start = n_local * world_rank;\n  int end = start + n_local;\n\n  // find the first even number in the local vector\n  int first_even = -1;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      first_even = i;\n      break;\n    }\n  }\n\n  // find the first even number in the local vector\n  int first_even_global;\n  MPI_Reduce(&first_even, &first_even_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  return first_even_global;\n}",True,True,3e-05,2,7.0,False,,,,128.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the even numbers on each rank\n  int start_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (int j = 0; j < x.size(); j++) {\n      if (x[j] % 2 == 0) {\n        start_local++;\n      }\n    }\n  }\n\n  // calculate the starting index of the even numbers on each rank\n  int start_global = 0;\n  MPI_Reduce(&start_local, &start_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the even numbers on each rank\n  int start = 0;\n  if (rank == 0) {\n    start = 0;\n  } else {\n    start = start_global;\n  }\n\n  // calculate the ending index of the even numbers on each rank\n  int end_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (int j = 0; j < x.size(); j++) {\n      if (x[j] % 2 == 0) {\n        end_local++;\n      }\n    }\n  }\n\n  // calculate the ending index of the even numbers on each rank\n  int end_global = 0;\n  MPI_Reduce(&end_local, &end_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the ending index of the even numbers on each rank\n  int end = 0;\n  if (rank == 0) {\n    end = even_count;\n  } else {\n    end = end_global;\n  }\n\n  // find the index of the first even number on each rank\n  int index_local = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      index_local = i;\n      break;\n    }\n  }\n\n  // find the index of the first even number on each rank\n  int index_global = 0;\n  MPI_Reduce(&index_local, &index_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  // find the index of the first even number on each rank\n  int index = 0;\n  if (rank == 0) {\n    index = index_global;\n  }\n\n  return index;\n}",True,True,3e-05,3,0.0,True,True,0.00027,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the even numbers on each rank\n  int start_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (int j = 0; j < x.size(); j++) {\n      if (x[j] % 2 == 0) {\n        start_local++;\n      }\n    }\n  }\n\n  // calculate the starting index of the even numbers on each rank\n  int start_global = 0;\n  MPI_Reduce(&start_local, &start_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the even numbers on each rank\n  int start = 0;\n  if (rank == 0) {\n    start = 0;\n  } else {\n    start = start_global;\n  }\n\n  // calculate the ending index of the even numbers on each rank\n  int end_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (int j = 0; j < x.size(); j++) {\n      if (x[j] % 2 == 0) {\n        end_local++;\n      }\n    }\n  }\n\n  // calculate the ending index of the even numbers on each rank\n  int end_global = 0;\n  MPI_Reduce(&end_local, &end_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the ending index of the even numbers on each rank\n  int end = 0;\n  if (rank == 0) {\n    end = even_count;\n  } else {\n    end = end_global;\n  }\n\n  // find the index of the first even number on each rank\n  int index_local = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      index_local = i;\n      break;\n    }\n  }\n\n  // find the index of the first even number on each rank\n  int index_global = 0;\n  MPI_Reduce(&index_local, &index_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  // find the index of the first even number on each rank\n  int index = 0;\n  if (rank == 0) {\n    index = index_global;\n  }\n\n  return index;\n}",True,True,3e-05,3,1.0,True,False,0.000709,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int even_count = 0;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            even_count++;\n        }\n    }\n\n    int even_count_per_rank;\n    MPI_Reduce(&even_count, &even_count_per_rank, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_per_rank_local = even_count_per_rank / size;\n    int even_count_per_rank_global = 0;\n    MPI_Reduce(&even_count_per_rank_local, &even_count_per_rank_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_global = 0;\n    MPI_Reduce(&even_count, &even_count_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_local = 0;\n    if (rank == 0) {\n        even_count_local = even_count_global - even_count_per_rank_global * (size - 1);\n    }\n\n    int even_count_local_local = 0;\n    MPI_Reduce(&even_count_local, &even_count_local_local, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_local_global = 0;\n    MPI_Reduce(&even_count_local_local, &even_count_local_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_local_global_local = 0;\n    if (rank == 0) {\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] % 2 == 0) {\n                even_count_local_global_local++;\n            }\n        }\n    }\n\n    int even_count_local_global_local_local = 0;\n    MPI_Reduce(&even_count_local_global_local, &even_count_local_global_local_local, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_local_global_local_local_local = 0;\n    if (rank == 0) {\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] % 2 == 0) {\n                even_count_local_global_local_local++;\n            }\n        }\n    }\n\n    int even_count_local_global_local_local_local_local = 0;\n    MPI_Reduce(&even_count_local_global_local_local_local, &even_count_local_global_local_local_local_local, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_local_global_local_local_local_local_local = 0;\n    if (rank == 0) {\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] % 2 == 0) {\n                even_count_local_global_local_local_local_local++;\n            }\n        }\n    }\n\n    int even_count_local_global_local_local_local_local_local_local = 0;\n    MPI_Reduce(&even_count_local_global_local_local_local_local_local, &even_count_local_global_local_local_local_local_local_local, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    int even_count_local_global_local_local_local_local_local_local_local = 0;\n    if (rank == 0) {\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] % 2 == 0) {\n                even_count_local_global_local_local_local_local_local_local++;\n            }\n        }\n    }\n\n    int even_count_local_global_local_local_local_local_local_local_local_local = 0;",False,True,,4,,,,,,
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of even numbers\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // get the number of even numbers on each rank\n  int even_count_on_rank;\n  MPI_Reduce(&even_count, &even_count_on_rank, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the number of even numbers on each rank\n  int even_count_on_rank_before;\n  MPI_Scan(&even_count, &even_count_on_rank_before, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n  // get the index of the first even number on each rank\n  int first_even_index_on_rank = even_count_on_rank_before - even_count_on_rank;\n\n  // get the index of the first even number on rank 0\n  int first_even_index_on_rank_0;\n  MPI_Reduce(&first_even_index_on_rank, &first_even_index_on_rank_0, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the index of the first even number on rank 0\n  int first_even_index_on_rank_0_before;\n  MPI_Scan(&first_even_index_on_rank, &first_even_index_on_rank_0_before, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n  // get the index of the first even number\n  int first_even_index = first_even_index_on_rank_0_before - first_even_index_on_rank_0;\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return first_even_index;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,5,0.0,True,False,0.000163,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // sum up the even numbers on each rank\n  int even_count_sum = 0;\n  MPI_Allreduce(&even_count_local, &even_count_sum, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_index_local += even_count_local;\n  }\n\n  // sum up the starting index of the even numbers on each rank\n  int start_index_sum = 0;\n  MPI_Allreduce(&start_index_local, &start_index_sum, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the even numbers\n  int start_index = 0;\n  for (int i = 0; i < rank; i++) {\n    start_index += even_count;\n  }\n\n  // return the index of the first even number\n  return start_index + start_index_sum;\n}",True,True,3e-05,6,0.0,True,False,0.000188,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements per rank\n  int n = x.size() / size;\n  // number of elements in the last rank\n  int r = x.size() % size;\n\n  // rank 0 sends the first n + r elements to the other ranks\n  if (rank == 0) {\n    for (int i = 1; i < size; i++) {\n      MPI_Send(x.data() + i * n + std::min(i, r), n + std::min(i, r), MPI_INT, i, 0, MPI_COMM_WORLD);\n    }\n  }\n\n  // rank 0 receives the first n + r elements from the other ranks\n  if (rank == 0) {\n    int first_even = -1;\n    for (int i = 1; i < size; i++) {\n      int tmp;\n      MPI_Recv(&tmp, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n      if (tmp % 2 == 0) {\n        first_even = tmp;\n        break;\n      }\n    }\n    return first_even;\n  }\n\n  // rank 0 sends the first n + r elements to the other ranks\n  if (rank == 0) {\n    for (int i = 1; i < size; i++) {\n      MPI_Send(x.data() + i * n + std::min(i, r), n + std::min(i, r), MPI_INT, i, 0, MPI_COMM_WORLD);\n    }\n  }\n\n  // rank 0 receives the first n + r elements from the other ranks\n  if (rank == 0) {\n    int first_even = -1;\n    for (int i = 1; i < size; i++) {\n      int tmp;\n      MPI_Recv(&tmp, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n      if (tmp % 2 == 0) {\n        first_even = tmp;\n        break;\n      }\n    }\n    return first_even;\n  }\n\n  // rank 0 sends the first n + r elements to the other ranks\n  if (rank == 0) {\n    for (int i = 1; i < size; i++) {\n      MPI_Send(x.data() + i * n + std::min(i, r), n + std::min(i, r), MPI_INT, i, 0, MPI_COMM_WORLD);\n    }\n  }\n\n  // rank 0 receives the first n + r elements from the other ranks\n  if (rank == 0) {\n    int first_even = -1;\n    for (int i = 1; i < size; i++) {\n      int tmp;\n      MPI_Recv(&tmp, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n      if (tmp % 2 == 0) {\n        first_even = tmp;\n        break;\n      }\n    }\n    return first_even;\n  }\n\n  // rank 0 sends the first n + r elements to the other ranks\n  if (rank == 0) {\n    for (int i = 1; i < size; i++) {\n      MPI_Send(x.data() + i * n + std::min(i, r), n + std::min(i, r), MPI_INT, i, 0, MPI_COMM_WORLD);\n    }\n  }\n\n  // rank 0 receives the first n + r elements from the other ranks\n  if (rank == 0) {\n    int first_even = -1;\n    for (int i = 1; i < size; i++) {\n      int tmp;\n      MPI_Recv(&tmp, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n      if (tmp % 2 == 0) {\n        first_even = tmp;\n        break;\n      }\n    }\n    return first_even;\n  }\n\n  // rank 0 sends the first n + r elements to the other ranks\n  if (rank == 0) {\n    for (int i = 1; i < size; i++) {\n      MPI_Send(x.data() + i * n + std::min(i, r), n + std::min(i, r), MPI_INT, i, 0, MPI_COMM_WORLD);\n    }\n  }\n\n  // rank 0 receives the first n + r elements",False,True,,7,,,,,,
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_per_rank = even_count / size;\n  int remainder = even_count % size;\n\n  // calculate the starting index of the even numbers on each rank\n  int even_start_per_rank = even_count_per_rank * rank;\n  int remainder_start = even_count_per_rank * remainder;\n\n  // calculate the starting index of the even numbers on the remainder\n  int even_start_remainder = remainder_start + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 0\n  int even_start_rank0 = 0;\n\n  // calculate the starting index of the even numbers on rank 1\n  int even_start_rank1 = even_start_remainder + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 2\n  int even_start_rank2 = even_start_rank1 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 3\n  int even_start_rank3 = even_start_rank2 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 4\n  int even_start_rank4 = even_start_rank3 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 5\n  int even_start_rank5 = even_start_rank4 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 6\n  int even_start_rank6 = even_start_rank5 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 7\n  int even_start_rank7 = even_start_rank6 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 8\n  int even_start_rank8 = even_start_rank7 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 9\n  int even_start_rank9 = even_start_rank8 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 10\n  int even_start_rank10 = even_start_rank9 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 11\n  int even_start_rank11 = even_start_rank10 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 12\n  int even_start_rank12 = even_start_rank11 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 13\n  int even_start_rank13 = even_start_rank12 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 14\n  int even_start_rank14 = even_start_rank13 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 15\n  int even_start_rank15 = even_start_rank14 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 16\n  int even_start_rank16 = even_start_rank15 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 17\n  int even_start_rank17 = even_start_rank16 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 18\n  int even_start_rank18 = even_start_rank17 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 19\n  int even_start_rank19 = even_start_rank18 + even_count_per_rank;\n\n  // calculate the starting index of the even numbers on rank 20\n  int even_start_rank20 = even_start_",False,True,,8,,,,,,
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,0.0,True,True,3.5e-05,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,1.0,True,True,2.7e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,2.0,True,True,2.1e-05,,4.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,3.0,True,True,1.1e-05,,8.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,4.0,True,True,6e-06,,16.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,5.0,True,True,3e-06,,32.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,6.0,True,True,2e-06,,64.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,7.0,True,True,1e-06,,128.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_process = n / world_size;\n\n    // get the number of elements that are left\n    int n_left = n % world_size;\n\n    // get the start and end index of the process\n    int start = world_rank * n_per_process;\n    int end = start + n_per_process;\n\n    // if the process has elements left, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // search for the first even number in the process\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            return i;\n        }\n    }\n\n    // if no even number was found, return -1\n    return -1;\n}",True,True,3e-05,9,8.0,True,False,1e-06,,256.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,0.0,True,True,0.0002,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,1.0,True,True,0.00012,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,2.0,True,True,0.000865,,4.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,3.0,True,True,0.000567,,8.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,4.0,True,True,0.000142,,16.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,5.0,True,True,0.000218,,32.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,6.0,True,True,9.6e-05,,64.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each process\n  int n_local = n / world_size;\n\n  // get the starting index of the local vector\n  int start_local = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local = start_local + n_local;\n\n  // get the starting index of the global vector\n  int start_global = 0;\n\n  // get the ending index of the global vector\n  int end_global = n;\n\n  // get the number of even numbers in the local vector\n  int even_local = 0;\n\n  // loop through the local vector\n  for (int i = start_local; i < end_local; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // increment the number of even numbers\n      even_local++;\n    }\n  }\n\n  // get the number of even numbers in the global vector\n  int even_global;\n\n  // get the number of even numbers in the global vector\n  MPI_Reduce(&even_local, &even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // get the starting index of the local vector\n  int start_local_2 = n_local * world_rank;\n\n  // get the ending index of the local vector\n  int end_local_2 = start_local_2 + n_local;\n\n  // get the starting index of the global vector\n  int start_global_2 = 0;\n\n  // get the ending index of the global vector\n  int end_global_2 = n;\n\n  // get the index of the first even number in the local vector\n  int first_even_local = -1;\n\n  // loop through the local vector\n  for (int i = start_local_2; i < end_local_2; i++) {\n    // check if the current element is even\n    if (x[i] % 2 == 0) {\n      // set the index of the first even number\n      first_even_local = i;\n      break;\n    }\n  }\n\n  // get the index of the first even number in the global vector\n  int first_even_global;\n\n  // get the index of the first even number in the global vector\n  MPI_Reduce(&first_even_local, &first_even_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number in the global vector\n  return first_even_global;\n}",True,True,3e-05,10,7.0,False,,,,128.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // calculate the number of even numbers in the vector\n    int even_count = 0;\n    for (auto const& i : x) {\n        if (i % 2 == 0) {\n            even_count++;\n        }\n    }\n\n    // calculate the number of even numbers in the vector on each rank\n    int even_count_local = 0;\n    for (auto const& i : x) {\n        if (i % 2 == 0) {\n            even_count_local++;\n        }\n    }\n\n    // sum up the even numbers on each rank\n    int even_count_total = 0;\n    MPI_Reduce(&even_count_local, &even_count_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the starting index of the even numbers on each rank\n    int start_index_local = 0;\n    for (int i = 0; i < rank; i++) {\n        for (int j = 0; j < i; j++) {\n            if (x[j] % 2 == 0) {\n                start_index_local++;\n            }\n        }\n    }\n\n    // sum up the starting index of the even numbers on each rank\n    int start_index_total = 0;\n    MPI_Reduce(&start_index_local, &start_index_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the starting index of the even numbers\n    int start_index = 0;\n    for (int i = 0; i < rank; i++) {\n        for (int j = 0; j < i; j++) {\n            if (x[j] % 2 == 0) {\n                start_index++;\n            }\n        }\n    }\n\n    // calculate the index of the first even number on each rank\n    int index_local = start_index_local + even_count_local;\n\n    // sum up the index of the first even number on each rank\n    int index_total = start_index_total + even_count_total;\n\n    // calculate the index of the first even number\n    int index = start_index + even_count;\n\n    // return the index of the first even number on rank 0\n    if (rank == 0) {\n        return index;\n    } else {\n        return -1;\n    }\n}",True,True,,11,0.0,False,,,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int n_even = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_global;\n  MPI_Reduce(&n_even_local, &n_even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_local += n_even_local;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int start_global;\n  MPI_Reduce(&start_local, &start_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start = 0;\n  for (int i = 0; i < rank; i++) {\n    start += n_even;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int end = start + n_even_global;\n\n  // find the index of the first even number in the vector\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}",True,True,3e-05,12,0.0,True,True,0.000268,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int n_even = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_global;\n  MPI_Reduce(&n_even_local, &n_even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_local += n_even_local;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int start_global;\n  MPI_Reduce(&start_local, &start_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start = 0;\n  for (int i = 0; i < rank; i++) {\n    start += n_even;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int end = start + n_even_global;\n\n  // find the index of the first even number in the vector\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}",True,True,3e-05,12,1.0,True,True,0.000299,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int n_even = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_global;\n  MPI_Reduce(&n_even_local, &n_even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_local += n_even_local;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int start_global;\n  MPI_Reduce(&start_local, &start_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start = 0;\n  for (int i = 0; i < rank; i++) {\n    start += n_even;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int end = start + n_even_global;\n\n  // find the index of the first even number in the vector\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}",True,True,3e-05,12,2.0,True,True,0.00107,,4.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int n_even = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      n_even_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int n_even_global;\n  MPI_Reduce(&n_even_local, &n_even_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_local += n_even_local;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int start_global;\n  MPI_Reduce(&start_local, &start_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start = 0;\n  for (int i = 0; i < rank; i++) {\n    start += n_even;\n  }\n\n  // calculate the starting index of the vector on each rank\n  int end = start + n_even_global;\n\n  // find the index of the first even number in the vector\n  for (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}",True,True,3e-05,12,3.0,False,,,,8.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_per_proc = n / world_size;\n\n  // get the number of elements in the last process\n  int n_last_proc = n % world_size;\n\n  // get the starting index of the process\n  int start = world_rank * n_per_proc;\n\n  // get the ending index of the process\n  int end = (world_rank + 1) * n_per_proc;\n\n  // if the process is the last process, add the number of elements in the last process\n  if (world_rank == world_size - 1) {\n    end += n_last_proc;\n  }\n\n  // create a vector to store the even numbers\n  std::vector<int> even_numbers;\n\n  // loop over the elements in the vector\n  for (int i = start; i < end; i++) {\n    // if the element is even, add it to the vector\n    if (x[i] % 2 == 0) {\n      even_numbers.push_back(x[i]);\n    }\n  }\n\n  // get the number of even numbers\n  int n_even = even_numbers.size();\n\n  // get the number of even numbers per process\n  int n_even_per_proc = n_even / world_size;\n\n  // get the number of even numbers in the last process\n  int n_even_last_proc = n_even % world_size;\n\n  // get the starting index of the process\n  int start_even = world_rank * n_even_per_proc;\n\n  // get the ending index of the process\n  int end_even = (world_rank + 1) * n_even_per_proc;\n\n  // if the process is the last process, add the number of even numbers in the last process\n  if (world_rank == world_size - 1) {\n    end_even += n_even_last_proc;\n  }\n\n  // get the index of the first even number in the vector\n  int first_even = even_numbers[start_even];\n\n  // return the index of the first even number in the vector\n  return first_even;\n}",True,True,3.2e-05,13,0.0,True,False,8.9e-05,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int num_procs;\n  MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will handle\n  int n_local = n / num_procs;\n\n  // get the start and end indices of the local vector\n  int start = rank * n_local;\n  int end = start + n_local;\n\n  // get the local vector\n  std::vector<int> local_x(x.begin() + start, x.begin() + end);\n\n  // find the index of the first even number in the local vector\n  size_t index = 0;\n  for (size_t i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // get the global index of the first even number\n  int global_index = 0;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the global index\n  return global_index;\n}",True,True,3e-05,14,0.0,True,True,0.000127,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int num_procs;\n  MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will handle\n  int n_local = n / num_procs;\n\n  // get the start and end indices of the local vector\n  int start = rank * n_local;\n  int end = start + n_local;\n\n  // get the local vector\n  std::vector<int> local_x(x.begin() + start, x.begin() + end);\n\n  // find the index of the first even number in the local vector\n  size_t index = 0;\n  for (size_t i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // get the global index of the first even number\n  int global_index = 0;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the global index\n  return global_index;\n}",True,True,3e-05,14,1.0,True,False,8.4e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,0.0,True,True,0.000213,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,1.0,True,True,0.000384,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,2.0,True,True,0.001465,,4.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,3.0,True,True,0.001731,,8.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,4.0,True,True,0.002399,,16.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,5.0,True,True,0.003323,,32.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,6.0,True,True,0.005915,,64.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,7.0,True,True,0.011443,,128.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,8.0,True,True,0.022714,,256.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the start index of the even numbers on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the start index of the even numbers on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global + even_count_global;\n  }\n\n  // find the index of the first even number\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the index of the first even number on rank 0\n  int index_global = -1;\n  MPI_Reduce(&index, &index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n  // return the index of the first even number\n  if (rank == 0) {\n    return index_global;\n  } else {\n    return -1;\n  }\n}",True,True,3e-05,15,9.0,True,True,0.048244,,512.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_global = 0;\n  MPI_Allreduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the first even number in the vector\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_index_local += even_count_local;\n  }\n\n  // calculate the starting index of the first even number in the vector\n  int start_index_global = 0;\n  MPI_Allreduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the first even number in the vector\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = start_index_global;\n  }\n\n  // find the index of the first even number in the vector\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // find the index of the first even number in the vector\n  int index_global = -1;\n  MPI_Allreduce(&index, &index_global, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n  return index_global;\n}",True,True,3e-05,16,0.0,True,True,0.000234,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_global = 0;\n  MPI_Allreduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the first even number in the vector\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_index_local += even_count_local;\n  }\n\n  // calculate the starting index of the first even number in the vector\n  int start_index_global = 0;\n  MPI_Allreduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the first even number in the vector\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = start_index_global;\n  }\n\n  // find the index of the first even number in the vector\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // find the index of the first even number in the vector\n  int index_global = -1;\n  MPI_Allreduce(&index, &index_global, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n  return index_global;\n}",True,True,3e-05,16,1.0,True,True,0.000249,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_local = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_global = 0;\n  MPI_Allreduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the first even number in the vector\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    start_index_local += even_count_local;\n  }\n\n  // calculate the starting index of the first even number in the vector\n  int start_index_global = 0;\n  MPI_Allreduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM,\n                MPI_COMM_WORLD);\n\n  // calculate the starting index of the first even number in the vector\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = start_index_global;\n  }\n\n  // find the index of the first even number in the vector\n  int index = -1;\n  for (int i = start_index; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // find the index of the first even number in the vector\n  int index_global = -1;\n  MPI_Allreduce(&index, &index_global, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n  return index_global;\n}",True,True,3e-05,16,2.0,True,False,0.000693,,4.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int nproc;\n    MPI_Comm_size(MPI_COMM_WORLD, &nproc);\n\n    // get the rank of the process\n    int rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    // get the size of the vector\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_proc = n / nproc;\n\n    // get the remainder\n    int remainder = n % nproc;\n\n    // get the start and end index of the process\n    int start = rank * n_per_proc;\n    int end = start + n_per_proc;\n\n    // if the remainder is not zero, add the remainder to the end index\n    if (remainder > 0) {\n        end += remainder;\n    }\n\n    // get the local vector\n    std::vector<int> local_vec(x.begin() + start, x.begin() + end);\n\n    // find the first even number\n    int even_index = 0;\n    for (int i = 0; i < local_vec.size(); i++) {\n        if (local_vec[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n\n    // get the global even index\n    int global_even_index;\n    MPI_Reduce(&even_index, &global_even_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the global even index\n    return global_even_index;\n}",True,True,3e-05,17,0.0,True,True,0.000136,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int nproc;\n    MPI_Comm_size(MPI_COMM_WORLD, &nproc);\n\n    // get the rank of the process\n    int rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    // get the size of the vector\n    int n = x.size();\n\n    // get the number of elements per process\n    int n_per_proc = n / nproc;\n\n    // get the remainder\n    int remainder = n % nproc;\n\n    // get the start and end index of the process\n    int start = rank * n_per_proc;\n    int end = start + n_per_proc;\n\n    // if the remainder is not zero, add the remainder to the end index\n    if (remainder > 0) {\n        end += remainder;\n    }\n\n    // get the local vector\n    std::vector<int> local_vec(x.begin() + start, x.begin() + end);\n\n    // find the first even number\n    int even_index = 0;\n    for (int i = 0; i < local_vec.size(); i++) {\n        if (local_vec[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n\n    // get the global even index\n    int global_even_index;\n    MPI_Reduce(&even_index, &global_even_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the global even index\n    return global_even_index;\n}",True,True,3e-05,17,1.0,True,False,8.4e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the starting index of the vector on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global;\n  }\n\n  // calculate the ending index of the vector on each rank\n  int end_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        end_index_local++;\n      }\n    }\n  }\n\n  // calculate the ending index of the vector on each rank\n  int end_index_global = 0;\n  MPI_Reduce(&end_index_local, &end_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the ending index of the vector on each rank\n  int end_index = 0;\n  if (rank == 0) {\n    end_index = even_count;\n  } else {\n    end_index = end_index_global;\n  }\n\n  // find the index of the first even number in the vector on each rank\n  int index_local = 0;\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] % 2 == 0) {\n      index_local = i;\n      break;\n    }\n  }\n\n  // find the index of the first even number in the vector on each rank\n  int index_global = 0;\n  MPI_Reduce(&index_local, &index_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  // find the index of the first even number in the vector on each rank\n  int index = 0;\n  if (rank == 0) {\n    index = index_global;\n  }\n\n  return index;\n}",True,True,3e-05,18,0.0,True,True,0.000268,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of even numbers in the vector\n  int even_count = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_local = 0;\n  for (auto const& i : x) {\n    if (i % 2 == 0) {\n      even_count_local++;\n    }\n  }\n\n  // calculate the number of even numbers in the vector on each rank\n  int even_count_global = 0;\n  MPI_Reduce(&even_count_local, &even_count_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        start_index_local++;\n      }\n    }\n  }\n\n  // calculate the starting index of the vector on each rank\n  int start_index_global = 0;\n  MPI_Reduce(&start_index_local, &start_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the starting index of the vector on each rank\n  int start_index = 0;\n  if (rank == 0) {\n    start_index = 0;\n  } else {\n    start_index = start_index_global;\n  }\n\n  // calculate the ending index of the vector on each rank\n  int end_index_local = 0;\n  for (int i = 0; i < rank; i++) {\n    for (auto const& j : x) {\n      if (j % 2 == 0) {\n        end_index_local++;\n      }\n    }\n  }\n\n  // calculate the ending index of the vector on each rank\n  int end_index_global = 0;\n  MPI_Reduce(&end_index_local, &end_index_global, 1, MPI_INT, MPI_SUM, 0,\n             MPI_COMM_WORLD);\n\n  // calculate the ending index of the vector on each rank\n  int end_index = 0;\n  if (rank == 0) {\n    end_index = even_count;\n  } else {\n    end_index = end_index_global;\n  }\n\n  // find the index of the first even number in the vector on each rank\n  int index_local = 0;\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] % 2 == 0) {\n      index_local = i;\n      break;\n    }\n  }\n\n  // find the index of the first even number in the vector on each rank\n  int index_global = 0;\n  MPI_Reduce(&index_local, &index_global, 1, MPI_INT, MPI_MIN, 0,\n             MPI_COMM_WORLD);\n\n  // find the index of the first even number in the vector on each rank\n  int index = 0;\n  if (rank == 0) {\n    index = index_global;\n  }\n\n  return index;\n}",True,True,3e-05,18,1.0,True,False,0.00062,,2.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // compute the number of even numbers in the vector\n    int num_even = 0;\n    for (auto const& i : x) {\n        if (i % 2 == 0) {\n            num_even++;\n        }\n    }\n\n    // compute the number of even numbers in the vector on each rank\n    int num_even_local = 0;\n    for (auto const& i : x) {\n        if (i % 2 == 0) {\n            num_even_local++;\n        }\n    }\n\n    // compute the starting index of the vector on each rank\n    int start_local = 0;\n    for (int i = 0; i < rank; i++) {\n        start_local += num_even_local;\n    }\n\n    // compute the starting index of the vector on rank 0\n    int start = 0;\n    MPI_Reduce(&start_local, &start, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the ending index of the vector on each rank\n    int end_local = start_local + num_even_local;\n    int end = 0;\n    MPI_Reduce(&end_local, &end, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the ending index of the vector on rank 0\n    int num_even_total = 0;\n    MPI_Reduce(&num_even_local, &num_even_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the starting index of the vector on rank 0\n    int start_total = 0;\n    MPI_Reduce(&start_local, &start_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the ending index of the vector on rank 0\n    int end_total = start_total + num_even_total;\n\n    // find the index of the first even number in the vector on rank 0\n    size_t index = 0;\n    for (size_t i = start_total; i < end_total; i++) {\n        if (x[i] % 2 == 0) {\n            index = i;\n            break;\n        }\n    }\n\n    // broadcast the index of the first even number in the vector on each rank\n    int index_local = index;\n    MPI_Bcast(&index_local, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the index of the first even number in the vector on rank 0\n    return index_local;\n}",True,True,3e-05,19,0.0,True,True,0.000165,,1.0
"#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // compute the number of even numbers in the vector\n    int num_even = 0;\n    for (auto const& i : x) {\n        if (i % 2 == 0) {\n            num_even++;\n        }\n    }\n\n    // compute the number of even numbers in the vector on each rank\n    int num_even_local = 0;\n    for (auto const& i : x) {\n        if (i % 2 == 0) {\n            num_even_local++;\n        }\n    }\n\n    // compute the starting index of the vector on each rank\n    int start_local = 0;\n    for (int i = 0; i < rank; i++) {\n        start_local += num_even_local;\n    }\n\n    // compute the starting index of the vector on rank 0\n    int start = 0;\n    MPI_Reduce(&start_local, &start, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the ending index of the vector on each rank\n    int end_local = start_local + num_even_local;\n    int end = 0;\n    MPI_Reduce(&end_local, &end, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the ending index of the vector on rank 0\n    int num_even_total = 0;\n    MPI_Reduce(&num_even_local, &num_even_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the starting index of the vector on rank 0\n    int start_total = 0;\n    MPI_Reduce(&start_local, &start_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // compute the ending index of the vector on rank 0\n    int end_total = start_total + num_even_total;\n\n    // find the index of the first even number in the vector on rank 0\n    size_t index = 0;\n    for (size_t i = start_total; i < end_total; i++) {\n        if (x[i] % 2 == 0) {\n            index = i;\n            break;\n        }\n    }\n\n    // broadcast the index of the first even number in the vector on each rank\n    int index_local = index;\n    MPI_Bcast(&index_local, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the index of the first even number in the vector on rank 0\n    return index_local;\n}",True,True,3e-05,19,1.0,True,False,0.000176,,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    int even_index = -1;\n    int even_number = -1;\n    int even_number_count = 0;\n    int even_number_rank = 0;\n    int even_number_size = 0;\n    int even_number_index = 0;\n    int even_number_index_rank = 0;\n    int even_number_index_size = 0;\n    int even_number_index_count = 0;\n    int even_number_index_local = 0;\n    int even_number_index_local_rank = 0;\n    int even_number_index_local_size = 0;\n    int even_number_index_local_count = 0;\n    int even_number_index_local_max = 0;\n    int even_number_index_local_max_rank = 0;\n    int even_number_index_local_max_size = 0;\n    int even_number_index_local_max_count = 0;\n    int even_number_index_local_max_index = 0;\n    int even_number_index_local_max_index_rank = 0;\n    int even_number_index_local_max_index_size = 0;\n    int even_number_index_local_max_index_count = 0;\n    int even_number_index_local_max_index_local = 0;\n    int even_number_index_local_max_index_local_rank = 0;\n    int even_number_index_local_max_index_local_size = 0;\n    int even_number_index_local_max_index_local_count = 0;\n    int even_number_index_local_max_index_local_max = 0;\n    int even_number_index_local_max_index_local_max_rank = 0;\n    int even_number_index_local_max_index_local_max_size = 0;\n    int even_number_index_local_max_index_local_max_count = 0;\n    int even_number_index_local_max_index_local_max_index = 0;\n    int even_number_index_local_max_index_local_max_index_rank = 0;\n    int even_number_index_local_max_index_local_max_index_size = 0;\n    int even_number_index_local_max_index_local_max_index_count = 0;\n    int even_number_index_local_max_index_local_max_index_local = 0;\n    int even_number_index_local_max_index_local_max_index_local_rank = 0;\n    int even_number_index_local_max_index_local_max_index_local_size = 0;\n    int even_number_index_local_max_index_local_max_index_local_count = 0;\n    int even_number_index_local_max_index_local_max_index_local_max = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_rank = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_size = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_count = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_index = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_index_rank = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_index_size = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_index_count = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_index_local = 0;\n    int even_number_index_local_max_index_local_max_index_local_max_index_local_rank = 0;\n    int even_",False,False,,0,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// get the number of MPI processes\n  int nprocs;\n  MPI_Comm_size(MPI_COMM_WORLD, &nprocs);\n\n  // get the rank of the current process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of threads\n  int nthreads = omp_get_max_threads();\n\n  // get the number of elements in x\n  size_t n = x.size();\n\n  // get the number of elements per thread\n  size_t n_per_thread = n / nprocs;\n\n  // get the number of elements per thread on the last process\n  size_t n_last_thread = n_per_thread + n % nprocs;\n\n  // get the start and end indices of the current thread\n  size_t start = rank * n_per_thread;\n  size_t end = start + n_per_thread;\n\n  // get the start and end indices of the last thread\n  size_t start_last = rank * n_last_thread;\n  size_t end_last = start_last + n_last_thread;\n\n  // get the start and end indices of the current thread on the last process\n  size_t start_last_thread = rank * n_per_thread + n % nprocs;\n  size_t end_last_thread = start_last_thread + n % nprocs;\n\n  // get the number of even numbers in the current thread\n  size_t n_even_thread = 0;\n\n  // get the number of even numbers in the last thread\n  size_t n_even_last_thread = 0;\n\n  // get the number of even numbers in the current thread on the last process\n  size_t n_even_last_thread_last_process = 0;\n\n  // get the number of even numbers in the current process\n  size_t n_even_process = 0;\n\n  // get the number of even numbers in the last process\n  size_t n_even_last_process = 0;\n\n  // get the index of the first even number in the current thread\n  size_t first_even_thread = 0;\n\n  // get the index of the first even number in the last thread\n  size_t first_even_last_thread = 0;\n\n  // get the index of the first even number in the current thread on the last process\n  size_t first_even_last_thread_last_process = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_process = 0;\n\n  // get the index of the first even number in the last process\n  size_t first_even_last_process = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process_last_thread = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process_last_thread_last_process = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process_last_thread_last_process_last_thread = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process_last_thread_last_process_last_thread_last_process = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process_last_thread_last_process_last_thread_last_process_last_thread = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process_last_thread_last_process_last_thread_last_process_last_thread_last_process = 0;\n\n  // get the index of the first even number in the current process\n  size_t first_even_last_process_last_thread_last_process",False,False,,1,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int n = x.size();\n    int even_count = 0;\n    int even_index = -1;\n\n    // each rank has a complete copy of x\n    // rank 0 will return the result\n    if (rank == 0) {\n        for (int i = 0; i < n; i++) {\n            if (x[i] % 2 == 0) {\n                even_count++;\n                even_index = i;\n            }\n        }\n    }\n\n    // each rank will find the index of the first even number\n    // rank 0 will return the result\n    int local_even_index = -1;\n    int local_even_count = 0;\n    #pragma omp parallel for\n    for (int i = 0; i < n; i++) {\n        if (x[i] % 2 == 0) {\n            local_even_count++;\n            local_even_index = i;\n        }\n    }\n\n    // rank 0 will return the result\n    if (rank == 0) {\n        even_count = local_even_count;\n        even_index = local_even_index;\n    }\n\n    // gather the results from all ranks\n    MPI_Reduce(&even_count, &even_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n    MPI_Reduce(&even_index, &even_index, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    return even_index;\n}",True,True,,2,0.0,False,,,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,0.0,True,True,0.000129,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,1.0,True,True,0.000133,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,2.0,True,True,0.000131,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,3.0,True,True,0.00013,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,4.0,True,True,0.000131,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,5.0,True,True,0.000126,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,6.0,True,True,0.000129,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,7.0,True,True,0.000145,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,8.0,True,True,0.000153,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,9.0,True,True,0.000145,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,10.0,True,True,0.000146,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,11.0,True,True,0.000152,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,12.0,True,True,0.000151,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,13.0,True,True,0.000154,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,14.0,True,True,0.005808,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,15.0,True,True,0.000865,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,16.0,True,True,0.000906,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,17.0,True,True,0.000879,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,18.0,True,True,0.000935,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,19.0,True,True,0.00088,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number in the local copy\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result = 0;\n  MPI_Reduce(&index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,3e-05,3,20.0,True,True,0.000959,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // the number of even numbers in the vector\n    int n_even = 0;\n\n    // the index of the first even number in the vector\n    int first_even = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp_omp_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp_omp_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp_omp_omp_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp_omp_omp_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp_omp_omp_omp_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp_omp_omp_omp_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp_omp_omp_omp_omp_omp_omp_omp = 0;\n\n    // the index of the first even number in the vector on each rank\n    int first_even_local_mpi_omp_omp_omp_omp_omp_omp_omp_omp_omp_omp = -1;\n\n    // the number of even numbers in the vector on each rank\n    int n_even_local_mpi_omp_omp_omp",False,False,,4,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t even_index = 0;\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    int even_found = 0;\n    int even_found_global = 0;\n    int even_index_global = 0;\n    int even_index_local = 0;\n    int even_found_local = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x_size = x.size();\n    int x_size_local = x_size / size;\n    int x_size_remainder = x_size % size;\n    int x_size_local_remainder = x_size_local + x_size_remainder;\n    int x_size_local_remainder_start = x_size_local_remainder * rank;\n    int x_size_local_remainder_end = x_size_local_remainder * (rank + 1);\n    int x_size_local_remainder_end_start = x_size_local_remainder_end - x_size_remainder;\n    int x_size_local_remainder_end_end = x_size_local_remainder_end + x_size_remainder;\n    int x_size_local_remainder_end_start_start = x_size_local_remainder_end_start - x_size_remainder;\n    int x_size_local_remainder_end_start_end = x_size_local_remainder_end_start + x_size_remainder;\n    int x_size_local_remainder_end_end_start = x_size_local_remainder_end_end - x_size_remainder;\n    int x_size_local_remainder_end_end_end = x_size_local_remainder_end_end + x_size_remainder;\n    int x_size_local_remainder_end_end_end_start = x_size_local_remainder_end_end_end - x_size_remainder;\n    int x_size_local_remainder_end_end_end_end = x_size_local_remainder_end_end_end + x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_start = x_size_local_remainder_end_end_end_end - x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end = x_size_local_remainder_end_end_end_end + x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end_start = x_size_local_remainder_end_end_end_end_end - x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end_end = x_size_local_remainder_end_end_end_end_end + x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end_end_start = x_size_local_remainder_end_end_end_end_end_end - x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end_end_end = x_size_local_remainder_end_end_end_end_end_end + x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end_end_end_start = x_size_local_remainder_end_end_end_end_end_end_end - x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end_end_end_end = x_size_local_remainder_end_end_end_end_end_end_end + x_size_remainder;\n    int x_size_local_remainder_end_end_end_end_end_end_end_end_start = x_size_local_remainder_end_end_end_end_end_end_end_end - x",False,False,,5,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // each rank has a complete copy of x\n    std::vector<int> x_local(x);\n\n    // find the first even number in the local vector\n    size_t first_even_index = 0;\n    for (size_t i = 0; i < x_local.size(); ++i) {\n        if (x_local[i] % 2 == 0) {\n            first_even_index = i;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    int first_even_index_global;\n    MPI_Bcast(&first_even_index, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    return first_even_index_global;\n}",True,False,3e-05,6,0.0,True,False,0.000131,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> x_local = x;\n\n  // find the index of the first even number in x_local\n  size_t result = 0;\n  #pragma omp parallel for\n  for (size_t i = 0; i < x_local.size(); i++) {\n    if (x_local[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result_global;\n  MPI_Reduce(&result, &result_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result_global;\n}",False,True,,7,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t result = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for\n  for (size_t i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      result = i;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return result;\n}",False,True,,8,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the first even number\n    int local_result = -1;\n    #pragma omp parallel for\n    for (size_t i = 0; i < local_x.size(); i++) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",False,True,,9,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,0.0,True,True,0.000132,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,1.0,True,True,0.00013,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,2.0,True,True,0.00013,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,3.0,True,True,0.000129,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,4.0,True,True,0.000133,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,5.0,True,True,0.000133,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,6.0,True,True,0.000133,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,7.0,True,True,0.000147,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,8.0,True,True,0.00015,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,9.0,True,True,0.000151,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,10.0,True,True,0.000152,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,11.0,True,True,0.000156,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,12.0,True,True,0.00015,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,13.0,True,True,0.000156,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,14.0,True,True,0.007602,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,15.0,True,True,0.0009,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,16.0,True,True,0.000945,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,17.0,True,True,0.000927,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,18.0,True,True,0.00091,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,19.0,True,True,0.000969,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // find the index of the first even number in the local copy of x\n    size_t local_result = 0;\n    for (size_t i = 0; i < local_x.size(); ++i) {\n        if (local_x[i] % 2 == 0) {\n            local_result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result = -1;\n    MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,False,3e-05,10,20.0,True,True,0.000945,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // divide the vector into chunks\n    int chunkSize = x.size() / size;\n    std::vector<int> chunk(chunkSize);\n    for (int i = 0; i < chunkSize; i++) {\n        chunk[i] = x[i + rank * chunkSize];\n    }\n\n    // find the index of the first even number in the chunk\n    int result = -1;\n    #pragma omp parallel for\n    for (int i = 0; i < chunk.size(); i++) {\n        if (chunk[i] % 2 == 0) {\n            result = i;\n            break;\n        }\n    }\n\n    // gather the result from all ranks\n    int result_global;\n    MPI_Reduce(&result, &result_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the result\n    return result_global;\n}",False,True,,11,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // number of even numbers in x\n    int n_even = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank0 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank1 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank2 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank3 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank4 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank5 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank6 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank7 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank8 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank9 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank10 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank11 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank12 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank13 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank14 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank15 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank16 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank17 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank18 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank19 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank20 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank21 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank22 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank23 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank24 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank25 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank26 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank27 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank28 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank29 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank30 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank31 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank32 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank33 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank34 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank35 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank36 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank37 = 0;\n\n    // number of even numbers in x on rank 0\n    int n_even_rank38 = 0;\n\n    // number of",False,False,,12,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int even_count = 0;\n    int even_index = 0;\n\n    // count the number of even numbers in the vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            even_count++;\n            even_index = i;\n        }\n    }\n\n    // find the number of even numbers in the vector\n    int even_count_total = 0;\n    MPI_Reduce(&even_count, &even_count_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // find the index of the first even number in the vector\n    int even_index_total = 0;\n    MPI_Reduce(&even_index, &even_index_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // find the index of the first even number in the vector\n    int first_even_index = 0;\n    if (rank == 0) {\n        first_even_index = even_index_total / size;\n    }\n\n    return first_even_index;\n}",True,False,3e-05,13,0.0,True,False,0.000246,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t result = x.size();\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // each rank has a complete copy of x\n    // find the first even number in x\n    // send the result to rank 0\n    // rank 0 will return the result\n    int even_found = 0;\n    int even_index = -1;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            even_found = 1;\n            even_index = i;\n            break;\n        }\n    }\n\n    MPI_Reduce(&even_found, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n    MPI_Reduce(&even_index, &result, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    return result;\n}",False,True,,14,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// get the number of threads\n    int num_threads = omp_get_max_threads();\n    // get the number of processes\n    int num_procs;\n    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n    // get the rank of the process\n    int rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    // get the number of elements in the vector\n    int n = x.size();\n    // get the number of elements each process will have\n    int n_local = n / num_procs;\n    // get the number of elements that will be left over\n    int n_remainder = n % num_procs;\n    // get the starting index of the local vector\n    int start = rank * n_local;\n    // get the ending index of the local vector\n    int end = start + n_local;\n    // if the process has a remainder, add it to the end index\n    if (rank < n_remainder) {\n        end += 1;\n    }\n    // initialize the result to -1\n    int result = -1;\n    // get the number of even numbers in the local vector\n    int num_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_even = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_odd_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_odd_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_even_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_even_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_odd_even_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_odd_even_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_even_even_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_even_even_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_odd_odd_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_odd_odd_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_even_odd_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_even_odd_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_odd_even_even_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_odd_even_even_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_even_even_even_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_even_even_even_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_odd_odd_odd_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_odd_odd_odd_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_even_odd_odd_even = 0;\n    // get the number of odd numbers in the local vector\n    int num_local_result_even_odd_odd_odd = 0;\n    // get the number of even numbers in the local vector\n    int num_local_result_odd_even_even_even_even = 0;\n    // get the number of odd numbers in",False,False,,15,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n    size_t result = 0;\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    int n = x.size();\n    int chunk = n / size;\n    int start = rank * chunk;\n    int end = start + chunk;\n    if (rank == size - 1) {\n        end = n;\n    }\n    int even_count = 0;\n    for (int i = start; i < end; i++) {\n        if (x[i] % 2 == 0) {\n            even_count++;\n            if (rank == 0) {\n                result = i;\n            }\n        }\n    }\n    MPI_Reduce(&even_count, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n    return result;\n}",True,False,3e-05,16,0.0,True,False,0.000164,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    int even_count = 0;\n    int even_index = 0;\n    int even_found = 0;\n    int even_found_index = 0;\n    int even_found_rank = 0;\n    int even_found_size = 0;\n    int even_found_count = 0;\n    int even_found_index_rank = 0;\n    int even_found_index_size = 0;\n    int even_found_index_count = 0;\n    int even_found_index_rank_size = 0;\n    int even_found_index_rank_count = 0;\n    int even_found_index_rank_size_count = 0;\n    int even_found_index_rank_size_count_rank = 0;\n    int even_found_index_rank_size_count_size = 0;\n    int even_found_index_rank_size_count_count = 0;\n    int even_found_index_rank_size_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_count_count = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_count_count_rank = 0;\n    int even_found_index_rank_size_count_count_count_count_count_count_count_count_count_count_size = 0;\n    int even_found_index_rank_size_count_count_count_count",False,False,,17,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,0.0,True,True,0.00013,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,1.0,True,True,0.000133,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,2.0,True,True,0.000128,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,3.0,True,True,0.000131,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,4.0,True,True,0.000127,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,5.0,True,True,0.000128,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,6.0,True,True,0.000131,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,7.0,True,True,0.000149,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,8.0,True,True,0.00015,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,9.0,True,True,0.000152,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,10.0,True,True,0.000152,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,11.0,True,True,0.000152,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,12.0,True,True,0.000153,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,13.0,True,True,0.000159,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,14.0,True,True,0.005841,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,15.0,True,True,0.000859,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,16.0,True,True,0.000921,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,17.0,True,True,0.000885,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,18.0,True,True,0.000887,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,19.0,True,True,0.000876,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // every rank has a complete copy of x\n  std::vector<int> local_x = x;\n\n  // find the index of the first even number\n  size_t index = 0;\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] % 2 == 0) {\n      index = i;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  int global_index;\n  MPI_Reduce(&index, &global_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  return global_index;\n}",True,False,3e-05,18,20.0,True,True,0.000894,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI and OpenMP to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",38_search_find_the_first_even_number,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n    size_t even_index = 0;\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    if (rank == 0) {\n        int even_count = 0;\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] % 2 == 0) {\n                even_count++;\n            }\n        }\n        even_index = even_count;\n    }\n\n    int even_count = 0;\n    int even_index_local = 0;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            even_count++;\n        }\n    }\n    even_index_local = even_count;\n\n    MPI_Reduce(&even_index_local, &even_index, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    return even_index;\n}",True,False,3e-05,19,0.0,True,False,6.5e-05,1.0,1.0
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.00064,0,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n      KOKKOS_LAMBDA(int i, bool& update) { update = (x(i) == target); },\n      Kokkos::LOR<bool>(result));\n  return result();\n}",False,True,,1,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n      KOKKOS_LAMBDA(int i, bool& result_local) {\n        result_local = (x(i) == target);\n      },\n      result);\n  return result();\n}",False,True,,2,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"");\n  Kokkos::parallel_reduce(\n      ""contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.size()),\n      KOKKOS_LAMBDA(int i, bool& result) { result = x(i) == target; },\n      result);\n  return result();\n}",False,True,,3,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.00064,4,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.000639,5,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"");\n  Kokkos::parallel_reduce(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n                          KOKKOS_LAMBDA(int i, bool& result) {\n    result = result || (x(i) == target);\n  }, result);\n  return result();\n}",False,True,,6,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.000643,7,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.00064,8,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.size()),\n      KOKKOS_LAMBDA(int i, bool& result_local) {\n        result_local = (x(i) == target);\n      },\n      result);\n  return result();\n}",False,True,,9,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.00064,10,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.000641,11,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n                          KOKKOS_LAMBDA(const int i, bool& update) {\n                            update = update || (x(i) == target);\n                          },\n                          result);\n  return result(0);\n}",False,True,,12,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.00064,13,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n      KOKKOS_LAMBDA(int i, bool& result_local) {\n        result_local = (x(i) == target);\n      },\n      result);\n  return result();\n}",False,True,,14,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n      KOKKOS_LAMBDA(int i, bool& result_local) {\n        result_local = (x(i) == target);\n      },\n      result);\n  return result(0);\n}",False,True,,15,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.00064,16,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n      KOKKOS_LAMBDA(int i, bool& lresult) {\n        if (x(i) == target) {\n          lresult = true;\n        }\n      },\n      result);\n  return result();\n}",False,True,,17,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},True,True,0.000641,18,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"int n = x.extent(0);\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", n);\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) { result(i) = false; });\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {\n    if (x(i) == target) {\n      result(i) = true;\n    }\n  });\n  Kokkos::fence();\n  bool result_host = false;\n  for (int i = 0; i < n; i++) {\n    if (result(i)) {\n      result_host = true;\n    }\n  }\n  return result_host;\n}",True,True,0.000571,19,0.0,True,True,0.004522,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"int n = x.extent(0);\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", n);\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) { result(i) = false; });\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {\n    if (x(i) == target) {\n      result(i) = true;\n    }\n  });\n  Kokkos::fence();\n  bool result_host = false;\n  for (int i = 0; i < n; i++) {\n    if (result(i)) {\n      result_host = true;\n    }\n  }\n  return result_host;\n}",True,True,0.000571,19,1.0,True,True,0.002915,2.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"int n = x.extent(0);\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", n);\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) { result(i) = false; });\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {\n    if (x(i) == target) {\n      result(i) = true;\n    }\n  });\n  Kokkos::fence();\n  bool result_host = false;\n  for (int i = 0; i < n; i++) {\n    if (result(i)) {\n      result_host = true;\n    }\n  }\n  return result_host;\n}",True,True,0.000571,19,2.0,True,True,0.002119,4.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"int n = x.extent(0);\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", n);\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) { result(i) = false; });\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {\n    if (x(i) == target) {\n      result(i) = true;\n    }\n  });\n  Kokkos::fence();\n  bool result_host = false;\n  for (int i = 0; i < n; i++) {\n    if (result(i)) {\n      result_host = true;\n    }\n  }\n  return result_host;\n}",True,True,0.000571,19,3.0,True,True,0.001729,8.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"int n = x.extent(0);\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", n);\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) { result(i) = false; });\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {\n    if (x(i) == target) {\n      result(i) = true;\n    }\n  });\n  Kokkos::fence();\n  bool result_host = false;\n  for (int i = 0; i < n; i++) {\n    if (result(i)) {\n      result_host = true;\n    }\n  }\n  return result_host;\n}",True,True,0.000571,19,4.0,True,True,0.001532,16.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"int n = x.extent(0);\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", n);\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) { result(i) = false; });\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {\n    if (x(i) == target) {\n      result(i) = true;\n    }\n  });\n  Kokkos::fence();\n  bool result_host = false;\n  for (int i = 0; i < n; i++) {\n    if (result(i)) {\n      result_host = true;\n    }\n  }\n  return result_host;\n}",True,True,0.000571,19,5.0,True,True,0.002225,32.0,
"#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<int*> &x, int target) {",36_search_check_if_array_contains_value,search,cpp,kokkos,0.2,0.95,True,1024,True,"int n = x.extent(0);\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", n);\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) { result(i) = false; });\n  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {\n    if (x(i) == target) {\n      result(i) = true;\n    }\n  });\n  Kokkos::fence();\n  bool result_host = false;\n  for (int i = 0; i < n; i++) {\n    if (result(i)) {\n      result_host = true;\n    }\n  }\n  return result_host;\n}",True,True,0.000571,19,6.0,False,,,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n\n  return found;\n},True,True,3e-05,0,0.0,True,True,5.3e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n\n  return found;\n},True,True,3e-05,0,1.0,True,True,4e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n\n  return found;\n},True,True,3e-05,0,2.0,True,True,2.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n\n  return found;\n},True,True,3e-05,0,3.0,True,True,3.9e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n\n  return found;\n},True,True,3e-05,0,4.0,True,True,4.7e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n\n  return found;\n},True,True,3e-05,0,5.0,True,True,9.3e-05,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n\n  return found;\n},True,True,3e-05,0,6.0,True,True,0.000184,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n    #pragma omp parallel for reduction(|:result)\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] == target) {\n            result = true;\n        }\n    }\n    return result;\n},True,True,2.6e-05,1,0.0,True,True,9.1e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n    #pragma omp parallel for reduction(|:result)\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] == target) {\n            result = true;\n        }\n    }\n    return result;\n},True,True,2.6e-05,1,1.0,True,True,4.9e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n    #pragma omp parallel for reduction(|:result)\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] == target) {\n            result = true;\n        }\n    }\n    return result;\n},True,True,2.6e-05,1,2.0,True,True,4.8e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n    #pragma omp parallel for reduction(|:result)\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] == target) {\n            result = true;\n        }\n    }\n    return result;\n},True,True,2.6e-05,1,3.0,True,True,3.6e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n    #pragma omp parallel for reduction(|:result)\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] == target) {\n            result = true;\n        }\n    }\n    return result;\n},True,True,2.6e-05,1,4.0,True,True,8.2e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n    #pragma omp parallel for reduction(|:result)\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] == target) {\n            result = true;\n        }\n    }\n    return result;\n},True,True,2.6e-05,1,5.0,True,True,0.00013,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n    #pragma omp parallel for reduction(|:result)\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] == target) {\n            result = true;\n        }\n    }\n    return result;\n},True,True,2.6e-05,1,6.0,True,True,0.000223,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,2,0.0,True,True,0.000123,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,2,1.0,True,True,7.1e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,2,2.0,True,True,4.4e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,2,3.0,True,True,4e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,2,4.0,True,True,6.4e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,2,5.0,True,True,0.000141,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,2,6.0,True,True,0.000241,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n},False,True,,3,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,4,0.0,True,True,0.000132,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,4,1.0,True,True,6.7e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,4,2.0,True,True,4.8e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,4,3.0,True,True,3.8e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,4,4.0,True,True,6.8e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,4,5.0,True,True,0.000122,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n    }\n  }\n  return found;\n},True,True,2.6e-05,4,6.0,True,True,0.000671,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static)\n    for (int i = 0; i < num_threads; i++) {\n        start = i * chunk_size;\n        end = (i == num_threads - 1)? n : (i + 1) * chunk_size;\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            break;\n        }\n    }\n    return found;\n},False,True,,5,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static) num_threads(num_threads)\n    for (int i = 0; i < num_threads; i++) {\n        if (i < remainder) {\n            end = start + chunk_size + 1;\n        } else {\n            end = start + chunk_size;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        start = end;\n    }\n    return found;\n},True,True,2.9e-05,6,0.0,True,True,5.7e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static) num_threads(num_threads)\n    for (int i = 0; i < num_threads; i++) {\n        if (i < remainder) {\n            end = start + chunk_size + 1;\n        } else {\n            end = start + chunk_size;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        start = end;\n    }\n    return found;\n},True,True,2.9e-05,6,1.0,True,True,4.2e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static) num_threads(num_threads)\n    for (int i = 0; i < num_threads; i++) {\n        if (i < remainder) {\n            end = start + chunk_size + 1;\n        } else {\n            end = start + chunk_size;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        start = end;\n    }\n    return found;\n},True,True,2.9e-05,6,2.0,True,True,2.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static) num_threads(num_threads)\n    for (int i = 0; i < num_threads; i++) {\n        if (i < remainder) {\n            end = start + chunk_size + 1;\n        } else {\n            end = start + chunk_size;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        start = end;\n    }\n    return found;\n},True,True,2.9e-05,6,3.0,True,True,3.9e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static) num_threads(num_threads)\n    for (int i = 0; i < num_threads; i++) {\n        if (i < remainder) {\n            end = start + chunk_size + 1;\n        } else {\n            end = start + chunk_size;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        start = end;\n    }\n    return found;\n},True,True,2.9e-05,6,4.0,True,True,5.7e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static) num_threads(num_threads)\n    for (int i = 0; i < num_threads; i++) {\n        if (i < remainder) {\n            end = start + chunk_size + 1;\n        } else {\n            end = start + chunk_size;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        start = end;\n    }\n    return found;\n},True,True,2.9e-05,6,5.0,True,True,9.9e-05,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n    int start = 0;\n    int end = 0;\n    bool found = false;\n    #pragma omp parallel for schedule(static) num_threads(num_threads)\n    for (int i = 0; i < num_threads; i++) {\n        if (i < remainder) {\n            end = start + chunk_size + 1;\n        } else {\n            end = start + chunk_size;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                found = true;\n                break;\n            }\n        }\n        start = end;\n    }\n    return found;\n},True,True,2.9e-05,6,6.0,True,True,0.000196,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n},False,True,,7,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    int n = x.size();\n    int sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int i = 0; i < n; i++){\n        if(x[i] == target){\n            sum++;\n        }\n    }\n    if(sum == 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n},True,True,2.6e-05,8,0.0,True,True,4.7e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    int n = x.size();\n    int sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int i = 0; i < n; i++){\n        if(x[i] == target){\n            sum++;\n        }\n    }\n    if(sum == 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n},True,True,2.6e-05,8,1.0,True,True,2.8e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    int n = x.size();\n    int sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int i = 0; i < n; i++){\n        if(x[i] == target){\n            sum++;\n        }\n    }\n    if(sum == 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n},True,True,2.6e-05,8,2.0,True,True,2.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    int n = x.size();\n    int sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int i = 0; i < n; i++){\n        if(x[i] == target){\n            sum++;\n        }\n    }\n    if(sum == 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n},True,True,2.6e-05,8,3.0,True,True,3.6e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    int n = x.size();\n    int sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int i = 0; i < n; i++){\n        if(x[i] == target){\n            sum++;\n        }\n    }\n    if(sum == 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n},True,True,2.6e-05,8,4.0,True,True,6.7e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    int n = x.size();\n    int sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int i = 0; i < n; i++){\n        if(x[i] == target){\n            sum++;\n        }\n    }\n    if(sum == 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n},True,True,2.6e-05,8,5.0,True,True,0.000124,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    int n = x.size();\n    int sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int i = 0; i < n; i++){\n        if(x[i] == target){\n            sum++;\n        }\n    }\n    if(sum == 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n},True,True,2.6e-05,8,6.0,True,True,0.000222,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool result = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:result)\n  for (int i = 0; i < num_threads; i++) {\n    if (i == num_threads - 1) {\n      end = start + chunk_size + remainder;\n    } else {\n      end = start + chunk_size;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        result = true;\n        break;\n      }\n    }\n    start = end;\n  }\n  return result;\n},True,True,3e-05,9,0.0,True,True,9.9e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool result = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:result)\n  for (int i = 0; i < num_threads; i++) {\n    if (i == num_threads - 1) {\n      end = start + chunk_size + remainder;\n    } else {\n      end = start + chunk_size;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        result = true;\n        break;\n      }\n    }\n    start = end;\n  }\n  return result;\n},True,True,3e-05,9,1.0,True,True,5.8e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool result = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:result)\n  for (int i = 0; i < num_threads; i++) {\n    if (i == num_threads - 1) {\n      end = start + chunk_size + remainder;\n    } else {\n      end = start + chunk_size;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        result = true;\n        break;\n      }\n    }\n    start = end;\n  }\n  return result;\n},True,True,3e-05,9,2.0,True,True,3.8e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool result = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:result)\n  for (int i = 0; i < num_threads; i++) {\n    if (i == num_threads - 1) {\n      end = start + chunk_size + remainder;\n    } else {\n      end = start + chunk_size;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        result = true;\n        break;\n      }\n    }\n    start = end;\n  }\n  return result;\n},True,True,3e-05,9,3.0,True,True,3.9e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool result = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:result)\n  for (int i = 0; i < num_threads; i++) {\n    if (i == num_threads - 1) {\n      end = start + chunk_size + remainder;\n    } else {\n      end = start + chunk_size;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        result = true;\n        break;\n      }\n    }\n    start = end;\n  }\n  return result;\n},True,True,3e-05,9,4.0,True,True,5.6e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool result = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:result)\n  for (int i = 0; i < num_threads; i++) {\n    if (i == num_threads - 1) {\n      end = start + chunk_size + remainder;\n    } else {\n      end = start + chunk_size;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        result = true;\n        break;\n      }\n    }\n    start = end;\n  }\n  return result;\n},True,True,3e-05,9,5.0,True,True,0.000104,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool result = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:result)\n  for (int i = 0; i < num_threads; i++) {\n    if (i == num_threads - 1) {\n      end = start + chunk_size + remainder;\n    } else {\n      end = start + chunk_size;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        result = true;\n        break;\n      }\n    }\n    start = end;\n  }\n  return result;\n},True,True,3e-05,9,6.0,True,True,0.000191,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = chunk_size;\n  bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < num_threads; i++) {\n    if (found) {\n      break;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    start = end;\n    end = end + chunk_size;\n  }\n  return found;\n},False,True,,10,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            found = true;\n        }\n    }\n    return found;\n},True,True,2.6e-05,11,0.0,True,True,0.000124,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            found = true;\n        }\n    }\n    return found;\n},True,True,2.6e-05,11,1.0,True,True,7e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            found = true;\n        }\n    }\n    return found;\n},True,True,2.6e-05,11,2.0,True,True,4.8e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            found = true;\n        }\n    }\n    return found;\n},True,True,2.6e-05,11,3.0,True,True,4e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            found = true;\n        }\n    }\n    return found;\n},True,True,2.6e-05,11,4.0,True,True,7.8e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            found = true;\n        }\n    }\n    return found;\n},True,True,2.6e-05,11,5.0,True,True,0.000125,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            found = true;\n        }\n    }\n    return found;\n},True,True,2.6e-05,11,6.0,True,True,0.000228,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      break;\n    }\n  }\n  return found;\n},False,True,,12,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n\n    bool result = false;\n\n    #pragma omp parallel for schedule(static) reduction(|:result)\n    for (int i = 0; i < num_threads; i++) {\n        int start = i * chunk_size;\n        int end = (i + 1) * chunk_size;\n        if (i == num_threads - 1) {\n            end += remainder;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    return result;\n},True,True,2.6e-05,13,0.0,True,True,5.5e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n\n    bool result = false;\n\n    #pragma omp parallel for schedule(static) reduction(|:result)\n    for (int i = 0; i < num_threads; i++) {\n        int start = i * chunk_size;\n        int end = (i + 1) * chunk_size;\n        if (i == num_threads - 1) {\n            end += remainder;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    return result;\n},True,True,2.6e-05,13,1.0,True,True,3.7e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n\n    bool result = false;\n\n    #pragma omp parallel for schedule(static) reduction(|:result)\n    for (int i = 0; i < num_threads; i++) {\n        int start = i * chunk_size;\n        int end = (i + 1) * chunk_size;\n        if (i == num_threads - 1) {\n            end += remainder;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    return result;\n},True,True,2.6e-05,13,2.0,True,True,2.8e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n\n    bool result = false;\n\n    #pragma omp parallel for schedule(static) reduction(|:result)\n    for (int i = 0; i < num_threads; i++) {\n        int start = i * chunk_size;\n        int end = (i + 1) * chunk_size;\n        if (i == num_threads - 1) {\n            end += remainder;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    return result;\n},True,True,2.6e-05,13,3.0,True,True,3.7e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n\n    bool result = false;\n\n    #pragma omp parallel for schedule(static) reduction(|:result)\n    for (int i = 0; i < num_threads; i++) {\n        int start = i * chunk_size;\n        int end = (i + 1) * chunk_size;\n        if (i == num_threads - 1) {\n            end += remainder;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    return result;\n},True,True,2.6e-05,13,4.0,True,True,6.4e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n\n    bool result = false;\n\n    #pragma omp parallel for schedule(static) reduction(|:result)\n    for (int i = 0; i < num_threads; i++) {\n        int start = i * chunk_size;\n        int end = (i + 1) * chunk_size;\n        if (i == num_threads - 1) {\n            end += remainder;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    return result;\n},True,True,2.6e-05,13,5.0,True,True,0.000115,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int remainder = n % num_threads;\n\n    bool result = false;\n\n    #pragma omp parallel for schedule(static) reduction(|:result)\n    for (int i = 0; i < num_threads; i++) {\n        int start = i * chunk_size;\n        int end = (i + 1) * chunk_size;\n        if (i == num_threads - 1) {\n            end += remainder;\n        }\n        for (int j = start; j < end; j++) {\n            if (x[j] == target) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    return result;\n},True,True,2.6e-05,13,6.0,True,True,0.000203,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:found)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return found;\n},True,True,2.6e-05,14,0.0,True,True,5.6e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:found)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return found;\n},True,True,2.6e-05,14,1.0,True,True,4e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:found)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return found;\n},True,True,2.6e-05,14,2.0,True,True,3.3e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:found)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return found;\n},True,True,2.6e-05,14,3.0,True,True,3.2e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:found)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return found;\n},True,True,2.6e-05,14,4.0,True,True,6.1e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:found)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return found;\n},True,True,2.6e-05,14,5.0,True,True,0.000121,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int remainder = n % num_threads;\n  int start = 0;\n  int end = 0;\n  bool found = false;\n  #pragma omp parallel for schedule(static) num_threads(num_threads) reduction(|:found)\n  for (int i = 0; i < num_threads; i++) {\n    start = i * chunk_size;\n    end = start + chunk_size;\n    if (i == num_threads - 1) {\n      end += remainder;\n    }\n    for (int j = start; j < end; j++) {\n      if (x[j] == target) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return found;\n},True,True,2.6e-05,14,6.0,True,True,0.000204,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool result = false;\n\n#pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  return result;\n},False,True,,15,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  bool found = false;\n\n#pragma omp parallel for\n  for (int i = 0; i < n; ++i) {\n    if (x[i] == target) {\n      found = true;\n      break;\n    }\n  }\n\n  return found;\n},False,True,,16,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = 0;\n  int i = 0;\n  bool found = false;\n\n  #pragma omp parallel num_threads(num_threads)\n  {\n    #pragma omp for schedule(static)\n    for (i = 0; i < num_threads; i++) {\n      start = i * chunk_size;\n      end = (i + 1) * chunk_size;\n      for (int j = start; j < end; j++) {\n        if (x[j] == target) {\n          found = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return found;\n},True,True,2.6e-05,17,0.0,True,True,5.6e-05,1.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = 0;\n  int i = 0;\n  bool found = false;\n\n  #pragma omp parallel num_threads(num_threads)\n  {\n    #pragma omp for schedule(static)\n    for (i = 0; i < num_threads; i++) {\n      start = i * chunk_size;\n      end = (i + 1) * chunk_size;\n      for (int j = start; j < end; j++) {\n        if (x[j] == target) {\n          found = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return found;\n},True,True,2.6e-05,17,1.0,True,True,4.3e-05,2.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = 0;\n  int i = 0;\n  bool found = false;\n\n  #pragma omp parallel num_threads(num_threads)\n  {\n    #pragma omp for schedule(static)\n    for (i = 0; i < num_threads; i++) {\n      start = i * chunk_size;\n      end = (i + 1) * chunk_size;\n      for (int j = start; j < end; j++) {\n        if (x[j] == target) {\n          found = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return found;\n},True,True,2.6e-05,17,2.0,True,True,2.9e-05,4.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = 0;\n  int i = 0;\n  bool found = false;\n\n  #pragma omp parallel num_threads(num_threads)\n  {\n    #pragma omp for schedule(static)\n    for (i = 0; i < num_threads; i++) {\n      start = i * chunk_size;\n      end = (i + 1) * chunk_size;\n      for (int j = start; j < end; j++) {\n        if (x[j] == target) {\n          found = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return found;\n},True,True,2.6e-05,17,3.0,True,True,3.7e-05,8.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = 0;\n  int i = 0;\n  bool found = false;\n\n  #pragma omp parallel num_threads(num_threads)\n  {\n    #pragma omp for schedule(static)\n    for (i = 0; i < num_threads; i++) {\n      start = i * chunk_size;\n      end = (i + 1) * chunk_size;\n      for (int j = start; j < end; j++) {\n        if (x[j] == target) {\n          found = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return found;\n},True,True,2.6e-05,17,4.0,True,True,6.6e-05,16.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = 0;\n  int i = 0;\n  bool found = false;\n\n  #pragma omp parallel num_threads(num_threads)\n  {\n    #pragma omp for schedule(static)\n    for (i = 0; i < num_threads; i++) {\n      start = i * chunk_size;\n      end = (i + 1) * chunk_size;\n      for (int j = start; j < end; j++) {\n        if (x[j] == target) {\n          found = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return found;\n},True,True,2.6e-05,17,5.0,True,True,0.000109,32.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int num_threads = omp_get_max_threads();\n  int chunk_size = n / num_threads;\n  int start = 0;\n  int end = 0;\n  int i = 0;\n  bool found = false;\n\n  #pragma omp parallel num_threads(num_threads)\n  {\n    #pragma omp for schedule(static)\n    for (i = 0; i < num_threads; i++) {\n      start = i * chunk_size;\n      end = (i + 1) * chunk_size;\n      for (int j = start; j < end; j++) {\n        if (x[j] == target) {\n          found = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return found;\n},True,True,2.6e-05,17,6.0,True,True,0.000212,64.0,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n},False,True,,18,,,,,,
"#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int num_threads = omp_get_max_threads();\n    int chunk_size = n / num_threads;\n    int start = 0;\n    int end = chunk_size;\n    int thread_id = 0;\n    bool found = false;\n    #pragma omp parallel shared(found) private(thread_id)\n    {\n        thread_id = omp_get_thread_num();\n        #pragma omp for schedule(static)\n        for (int i = start; i < end; i++) {\n            if (x[i] == target) {\n                found = true;\n                break;\n            }\n        }\n    }\n    return found;\n},False,True,,19,,,,,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.7e-05,0,0.0,True,True,6.5e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            return true;\n        }\n    }\n    return false;\n},True,True,2.7e-05,1,0.0,True,True,5.2e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.8e-05,2,0.0,True,True,4.9e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (auto i : x) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.8e-05,3,0.0,True,True,5.7e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), target)!= x.end();\n}",True,True,3.1e-05,4,0.0,True,True,3.2e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (auto const& i : x) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.7e-05,5,0.0,True,True,4.9e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,// TODO: implement this function\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            return true;\n        }\n    }\n    return false;\n},True,True,2.6e-05,6,0.0,True,True,5.4e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            return true;\n        }\n    }\n    return false;\n},True,True,2.6e-05,7,0.0,True,True,5.2e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.7e-05,8,0.0,True,True,6.4e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (auto const& i : x) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.6e-05,9,0.0,True,True,5.8e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), target)!= x.end();\n}",True,True,3e-05,10,0.0,True,True,3.1e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.5e-05,11,0.0,True,True,6e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.7e-05,12,0.0,True,True,5.7e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.6e-05,13,0.0,True,True,5.9e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.6e-05,14,0.0,True,True,5.5e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            return true;\n        }\n    }\n    return false;\n},True,True,2.7e-05,15,0.0,True,True,5.5e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (auto i : x) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.7e-05,16,0.0,True,True,4.9e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (auto const& i : x) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n},True,True,2.6e-05,17,0.0,True,True,6.2e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            return true;\n        }\n    }\n    return false;\n},True,True,2.6e-05,18,0.0,True,True,5.2e-05,,
"/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), target)!= x.end();\n}",True,True,3.1e-05,19,0.0,True,True,3.1e-05,,
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,0.0,True,True,5.5e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,1.0,True,True,6.7e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,2.0,True,True,6.4e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,3.0,True,True,8.9e-05,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,4.0,True,True,0.000206,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,5.0,True,True,0.000124,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,6.0,True,True,0.001777,,64.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,7.0,True,True,0.000293,,128.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,8.0,True,True,0.000249,,256.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_result = -1;\n  if (rank == 0) {\n    local_target = target;\n  }\n  MPI_Bcast(&local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n  MPI_Bcast(&local_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  return local_result == 1;\n}",True,True,2.8e-05,0,9.0,True,True,0.000116,,512.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // calculate the number of elements per rank\n  int n_per_rank = n / size;\n\n  // calculate the number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // calculate the starting index of the current rank\n  int start = n_per_rank * rank;\n\n  // calculate the end index of the current rank\n  int end = n_per_rank * (rank + 1);\n\n  // if the current rank is the last rank, add the number of elements in the last rank\n  if (rank == size - 1) {\n    end += n_last_rank;\n  }\n\n  // create a vector of the elements in the current rank\n  std::vector<int> local_x(x.begin() + start, x.begin() + end);\n\n  // search for the target in the local vector\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the target is not found, return false\n  return false;\n}",True,True,2.7e-05,1,0.0,True,True,0.000148,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // calculate the number of elements per rank\n  int n_per_rank = n / size;\n\n  // calculate the number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // calculate the starting index of the current rank\n  int start = n_per_rank * rank;\n\n  // calculate the end index of the current rank\n  int end = n_per_rank * (rank + 1);\n\n  // if the current rank is the last rank, add the number of elements in the last rank\n  if (rank == size - 1) {\n    end += n_last_rank;\n  }\n\n  // create a vector of the elements in the current rank\n  std::vector<int> local_x(x.begin() + start, x.begin() + end);\n\n  // search for the target in the local vector\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the target is not found, return false\n  return false;\n}",True,True,2.7e-05,1,1.0,True,True,8e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // calculate the number of elements per rank\n  int n_per_rank = n / size;\n\n  // calculate the number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // calculate the starting index of the current rank\n  int start = n_per_rank * rank;\n\n  // calculate the end index of the current rank\n  int end = n_per_rank * (rank + 1);\n\n  // if the current rank is the last rank, add the number of elements in the last rank\n  if (rank == size - 1) {\n    end += n_last_rank;\n  }\n\n  // create a vector of the elements in the current rank\n  std::vector<int> local_x(x.begin() + start, x.begin() + end);\n\n  // search for the target in the local vector\n  for (int i = 0; i < local_x.size(); i++) {\n    if (local_x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the target is not found, return false\n  return false;\n}",True,True,2.7e-05,1,2.0,False,,,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int start = rank * local_size;\n  int end = start + local_size;\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,2,0.0,True,True,5.4e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int start = rank * local_size;\n  int end = start + local_size;\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,2,1.0,True,True,3.4e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int start = rank * local_size;\n  int end = start + local_size;\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,2,2.0,True,True,1.5e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int start = rank * local_size;\n  int end = start + local_size;\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,2,3.0,True,True,7e-06,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int start = rank * local_size;\n  int end = start + local_size;\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,2,4.0,True,True,4e-06,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int start = rank * local_size;\n  int end = start + local_size;\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,2,5.0,True,False,2e-06,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int size = x.size();\n  int rank = 0;\n  int result = 0;\n\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int start = rank * size / 2;\n  int end = (rank + 1) * size / 2;\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      result = 1;\n      break;\n    }\n  }\n\n  int global_result = 0;\n  MPI_Reduce(&result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result == 1;\n}",True,True,2.9e-05,3,0.0,True,False,1e-06,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = (rank + 1) * chunk_size;\n\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.8e-05,4,0.0,True,True,5.3e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = (rank + 1) * chunk_size;\n\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.8e-05,4,1.0,True,True,3.1e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = (rank + 1) * chunk_size;\n\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.8e-05,4,2.0,True,True,1.6e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = (rank + 1) * chunk_size;\n\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.8e-05,4,3.0,True,True,8e-06,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = (rank + 1) * chunk_size;\n\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.8e-05,4,4.0,True,True,5e-06,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = (rank + 1) * chunk_size;\n\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.8e-05,4,5.0,True,False,2e-06,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will search\n  int n_local = n / world_size;\n\n  // get the starting index of the process in the vector\n  int start = n_local * world_rank;\n\n  // get the ending index of the process in the vector\n  int end = start + n_local;\n\n  // search the vector in the process\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the process did not find the target, send a message to the other processes\n  // that they should search their own vector\n  MPI_Request request;\n  MPI_Status status;\n  if (world_rank!= 0) {\n    MPI_Isend(&target, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &request);\n  }\n\n  // if the process is not rank 0, receive a message from the process with rank 0\n  // that they should search their own vector\n  if (world_rank!= 0) {\n    MPI_Recv(&target, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);\n  }\n\n  // if the process is rank 0, search the vector in the process\n  if (world_rank == 0) {\n    for (int i = 0; i < n; i++) {\n      if (x[i] == target) {\n        return true;\n      }\n    }\n  }\n\n  // return false if the process did not find the target\n  return false;\n}",True,True,2.6e-05,5,0.0,True,True,0.000116,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will search\n  int n_local = n / world_size;\n\n  // get the starting index of the process in the vector\n  int start = n_local * world_rank;\n\n  // get the ending index of the process in the vector\n  int end = start + n_local;\n\n  // search the vector in the process\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the process did not find the target, send a message to the other processes\n  // that they should search their own vector\n  MPI_Request request;\n  MPI_Status status;\n  if (world_rank!= 0) {\n    MPI_Isend(&target, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &request);\n  }\n\n  // if the process is not rank 0, receive a message from the process with rank 0\n  // that they should search their own vector\n  if (world_rank!= 0) {\n    MPI_Recv(&target, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);\n  }\n\n  // if the process is rank 0, search the vector in the process\n  if (world_rank == 0) {\n    for (int i = 0; i < n; i++) {\n      if (x[i] == target) {\n        return true;\n      }\n    }\n  }\n\n  // return false if the process did not find the target\n  return false;\n}",True,True,2.6e-05,5,1.0,False,,,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int local_start = local_size * rank;\n  int local_end = local_start + local_size;\n\n  for (int i = local_start; i < local_end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,6,0.0,True,True,5.5e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int local_start = local_size * rank;\n  int local_end = local_start + local_size;\n\n  for (int i = local_start; i < local_end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,6,1.0,True,True,2.9e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int local_start = local_size * rank;\n  int local_end = local_start + local_size;\n\n  for (int i = local_start; i < local_end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,6,2.0,True,True,1.5e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int local_start = local_size * rank;\n  int local_end = local_start + local_size;\n\n  for (int i = local_start; i < local_end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.7e-05,6,3.0,False,,,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements in the vector that each rank will search\n  int num_elements = x.size() / size;\n  // compute the number of elements that rank 0 will search\n  int num_elements_rank0 = x.size() % size;\n\n  // compute the start and end indices of the elements that rank `rank` will search\n  int start = rank * num_elements;\n  int end = (rank + 1) * num_elements;\n  if (rank == 0) {\n    end += num_elements_rank0;\n  }\n\n  // search for the target in the elements that rank `rank` will search\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the target is not found, return false\n  return false;\n}",True,True,2.7e-05,7,0.0,True,True,5.6e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements in the vector that each rank will search\n  int num_elements = x.size() / size;\n  // compute the number of elements that rank 0 will search\n  int num_elements_rank0 = x.size() % size;\n\n  // compute the start and end indices of the elements that rank `rank` will search\n  int start = rank * num_elements;\n  int end = (rank + 1) * num_elements;\n  if (rank == 0) {\n    end += num_elements_rank0;\n  }\n\n  // search for the target in the elements that rank `rank` will search\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the target is not found, return false\n  return false;\n}",True,True,2.7e-05,7,1.0,False,,,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_result = 0;\n    int local_size = x.size();\n\n    MPI_Scatter(&local_target, 1, MPI_INT, &local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Scatter(&local_size, 1, MPI_INT, &local_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int i = 0; i < local_size; i++) {\n        if (x[i] == local_target) {\n            local_result = 1;\n            break;\n        }\n    }\n\n    int global_result;\n    MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    return global_result == 1;\n}",True,True,2.7e-05,8,0.0,True,True,5.4e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_result = 0;\n    int local_size = x.size();\n\n    MPI_Scatter(&local_target, 1, MPI_INT, &local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Scatter(&local_size, 1, MPI_INT, &local_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int i = 0; i < local_size; i++) {\n        if (x[i] == local_target) {\n            local_result = 1;\n            break;\n        }\n    }\n\n    int global_result;\n    MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    return global_result == 1;\n}",True,True,2.7e-05,8,1.0,True,True,3.7e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_result = 0;\n    int local_size = x.size();\n\n    MPI_Scatter(&local_target, 1, MPI_INT, &local_target, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Scatter(&local_size, 1, MPI_INT, &local_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int i = 0; i < local_size; i++) {\n        if (x[i] == local_target) {\n            local_result = 1;\n            break;\n        }\n    }\n\n    int global_result;\n    MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    return global_result == 1;\n}",True,True,2.7e-05,8,2.0,False,,,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,0.0,True,True,5e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,1.0,True,True,6.1e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,2.0,True,True,6.1e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,3.0,True,True,8.1e-05,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,4.0,True,True,0.000244,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,5.0,True,True,8.7e-05,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,6.0,True,True,0.000223,,64.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,7.0,True,True,0.000227,,128.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,8.0,True,True,0.000241,,256.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_found = 0;\n\n    // find the target in the local vector\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_found = 1;\n            break;\n        }\n    }\n\n    // broadcast the result to all ranks\n    MPI_Bcast(&local_found, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // return the result on rank 0\n    if (rank == 0) {\n        return local_found;\n    } else {\n        return false;\n    }\n}",True,True,2.7e-05,9,9.0,True,True,0.00012,,512.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements per rank\n  int elements_per_rank = x.size() / size;\n\n  // calculate the number of elements that are left over\n  int elements_left_over = x.size() % size;\n\n  // calculate the start and end index of the elements that this rank has\n  int start = rank * elements_per_rank;\n  int end = start + elements_per_rank;\n\n  // if this is the last rank, then add the elements left over\n  if (rank == size - 1) {\n    end += elements_left_over;\n  }\n\n  // search for the target in the elements that this rank has\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, then the target was not found\n  return false;\n}",True,True,2.7e-05,10,0.0,True,True,5.5e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements per rank\n  int elements_per_rank = x.size() / size;\n\n  // calculate the number of elements that are left over\n  int elements_left_over = x.size() % size;\n\n  // calculate the start and end index of the elements that this rank has\n  int start = rank * elements_per_rank;\n  int end = start + elements_per_rank;\n\n  // if this is the last rank, then add the elements left over\n  if (rank == size - 1) {\n    end += elements_left_over;\n  }\n\n  // search for the target in the elements that this rank has\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, then the target was not found\n  return false;\n}",True,True,2.7e-05,10,1.0,True,True,3.4e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements per rank\n  int elements_per_rank = x.size() / size;\n\n  // calculate the number of elements that are left over\n  int elements_left_over = x.size() % size;\n\n  // calculate the start and end index of the elements that this rank has\n  int start = rank * elements_per_rank;\n  int end = start + elements_per_rank;\n\n  // if this is the last rank, then add the elements left over\n  if (rank == size - 1) {\n    end += elements_left_over;\n  }\n\n  // search for the target in the elements that this rank has\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, then the target was not found\n  return false;\n}",True,True,2.7e-05,10,2.0,True,True,1.4e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements per rank\n  int elements_per_rank = x.size() / size;\n\n  // calculate the number of elements that are left over\n  int elements_left_over = x.size() % size;\n\n  // calculate the start and end index of the elements that this rank has\n  int start = rank * elements_per_rank;\n  int end = start + elements_per_rank;\n\n  // if this is the last rank, then add the elements left over\n  if (rank == size - 1) {\n    end += elements_left_over;\n  }\n\n  // search for the target in the elements that this rank has\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, then the target was not found\n  return false;\n}",True,True,2.7e-05,10,3.0,True,True,8e-06,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements per rank\n  int elements_per_rank = x.size() / size;\n\n  // calculate the number of elements that are left over\n  int elements_left_over = x.size() % size;\n\n  // calculate the start and end index of the elements that this rank has\n  int start = rank * elements_per_rank;\n  int end = start + elements_per_rank;\n\n  // if this is the last rank, then add the elements left over\n  if (rank == size - 1) {\n    end += elements_left_over;\n  }\n\n  // search for the target in the elements that this rank has\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, then the target was not found\n  return false;\n}",True,True,2.7e-05,10,4.0,True,True,4e-06,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements per rank\n  int elements_per_rank = x.size() / size;\n\n  // calculate the number of elements that are left over\n  int elements_left_over = x.size() % size;\n\n  // calculate the start and end index of the elements that this rank has\n  int start = rank * elements_per_rank;\n  int end = start + elements_per_rank;\n\n  // if this is the last rank, then add the elements left over\n  if (rank == size - 1) {\n    end += elements_left_over;\n  }\n\n  // search for the target in the elements that this rank has\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, then the target was not found\n  return false;\n}",True,True,2.7e-05,10,5.0,True,False,2e-06,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vector into chunks\n  int chunk_size = x.size() / size;\n  int remainder = x.size() % size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, the value was not found\n  return false;\n}",True,True,2.7e-05,11,0.0,True,True,5.4e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vector into chunks\n  int chunk_size = x.size() / size;\n  int remainder = x.size() % size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, the value was not found\n  return false;\n}",True,True,2.7e-05,11,1.0,True,True,2.9e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vector into chunks\n  int chunk_size = x.size() / size;\n  int remainder = x.size() % size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, the value was not found\n  return false;\n}",True,True,2.7e-05,11,2.0,True,True,1.5e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vector into chunks\n  int chunk_size = x.size() / size;\n  int remainder = x.size() % size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, the value was not found\n  return false;\n}",True,True,2.7e-05,11,3.0,True,True,8e-06,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vector into chunks\n  int chunk_size = x.size() / size;\n  int remainder = x.size() % size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, the value was not found\n  return false;\n}",True,True,2.7e-05,11,4.0,True,True,4e-06,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vector into chunks\n  int chunk_size = x.size() / size;\n  int remainder = x.size() % size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if we get here, the value was not found\n  return false;\n}",True,True,2.7e-05,11,5.0,True,False,2e-06,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_result = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result == 1;\n}",True,True,2.7e-05,12,0.0,True,True,5.4e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_result = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result == 1;\n}",True,True,2.7e-05,12,1.0,True,False,6.8e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int size, rank;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,13,0.0,True,True,5.4e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int size, rank;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,13,1.0,True,True,3.1e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int size, rank;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,13,2.0,True,True,1.6e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int size, rank;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,13,3.0,True,True,7e-06,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int size, rank;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,13,4.0,True,True,4e-06,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int size, rank;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  int n = x.size();\n  int chunk_size = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank < remainder) {\n    end++;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,13,5.0,True,False,2e-06,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.5e-05,14,0.0,True,True,5.8e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.5e-05,14,1.0,True,True,2.9e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.5e-05,14,2.0,True,True,1.6e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.5e-05,14,3.0,True,True,8e-06,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.5e-05,14,4.0,True,True,4e-06,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.5e-05,14,5.0,True,False,2e-06,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_result = 0;\n\n    // find the local target\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            local_target = i;\n            break;\n        }\n    }\n\n    // find the local result\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_result = 1;\n            break;\n        }\n    }\n\n    int global_result = 0;\n    MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    return global_result == 1;\n}",True,True,2.6e-05,15,0.0,True,True,0.000149,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_target = target;\n    int local_result = 0;\n\n    // find the local target\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == target) {\n            local_target = i;\n            break;\n        }\n    }\n\n    // find the local result\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == local_target) {\n            local_result = 1;\n            break;\n        }\n    }\n\n    int global_result = 0;\n    MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    return global_result == 1;\n}",True,True,2.6e-05,15,1.0,True,False,0.000155,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements in each subarray\n  int n_per_rank = n / size;\n\n  // number of elements in the last subarray\n  int n_last = n % size;\n\n  // rank of the last subarray\n  int rank_last = size - 1;\n\n  // rank of the first subarray\n  int rank_first = 0;\n\n  // number of elements in the first subarray\n  int n_first = n_per_rank + n_last;\n\n  // number of elements in the last subarray\n  int n_last_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank = rank_first;\n\n  // number of elements in the first subarray\n  int n_first_rank = n_per_rank;\n\n  // number of elements in the last subarray\n  int n_last_rank_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank_rank = rank_first;\n\n  // number of elements in the first subarray\n  int n_first_rank_rank = n_per_rank;\n\n  // number of elements in the last subarray\n  int n_last_rank_rank_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank_rank_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank_rank_rank = rank_first;\n\n  // number of elements in the first subarray\n  int n_first_rank_rank_rank = n_per_rank;\n\n  // number of elements in the last subarray\n  int n_last_rank_rank_rank_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank_rank_rank_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank_rank_rank_rank = rank_first;\n\n  // number of elements in the first subarray\n  int n_first_rank_rank_rank_rank = n_per_rank;\n\n  // number of elements in the last subarray\n  int n_last_rank_rank_rank_rank_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank_rank_rank_rank_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank_rank_rank_rank_rank = rank_first;\n\n  // number of elements in the first subarray\n  int n_first_rank_rank_rank_rank_rank = n_per_rank;\n\n  // number of elements in the last subarray\n  int n_last_rank_rank_rank_rank_rank_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank_rank_rank_rank_rank_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank_rank_rank_rank_rank_rank = rank_first;\n\n  // number of elements in the first subarray\n  int n_first_rank_rank_rank_rank_rank_rank = n_per_rank;\n\n  // number of elements in the last subarray\n  int n_last_rank_rank_rank_rank_rank_rank_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank_rank_rank_rank_rank_rank_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank_rank_rank_rank_rank_rank_rank = rank_first;\n\n  // number of elements in the first subarray\n  int n_first_rank_rank_rank_rank_rank_rank_rank = n_per_rank;\n\n  // number of elements in the last subarray\n  int n_last_rank_rank_rank_rank_rank_rank_rank_rank = n_last;\n\n  // rank of the last subarray\n  int rank_last_rank_rank_rank_rank_rank_rank_rank_rank = rank_last;\n\n  // rank of the first subarray\n  int rank_first_rank_rank_rank_rank_rank_rank_rank_",False,True,,16,,,,,,
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // divide the vector into equal parts\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  // get the start and end index of the chunk\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  // if the remainder is not zero, add the remainder to the end index\n  if (remainder!= 0) {\n    end += remainder;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the chunk does not contain the target, search in the next chunk\n  if (rank < size - 1) {\n    return contains(x, target);\n  }\n\n  // if the chunk does not contain the target, return false\n  return false;\n}",True,True,2.7e-05,17,0.0,True,True,4.9e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // divide the vector into equal parts\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  // get the start and end index of the chunk\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  // if the remainder is not zero, add the remainder to the end index\n  if (remainder!= 0) {\n    end += remainder;\n  }\n\n  // search in the chunk\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  // if the chunk does not contain the target, search in the next chunk\n  if (rank < size - 1) {\n    return contains(x, target);\n  }\n\n  // if the chunk does not contain the target, return false\n  return false;\n}",True,True,2.7e-05,17,1.0,False,,,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements each rank will search\n  int elements_per_rank = x.size() / size;\n\n  // compute the number of elements that will be left over\n  int elements_left_over = x.size() % size;\n\n  // compute the starting index of the elements that this rank will search\n  int start_index = rank * elements_per_rank;\n\n  // compute the ending index of the elements that this rank will search\n  int end_index = (rank + 1) * elements_per_rank;\n\n  // if this rank is the last rank, then it will search the remaining elements\n  if (rank == size - 1) {\n    end_index += elements_left_over;\n  }\n\n  // search the elements that this rank will search\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,18,0.0,True,True,5.8e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements each rank will search\n  int elements_per_rank = x.size() / size;\n\n  // compute the number of elements that will be left over\n  int elements_left_over = x.size() % size;\n\n  // compute the starting index of the elements that this rank will search\n  int start_index = rank * elements_per_rank;\n\n  // compute the ending index of the elements that this rank will search\n  int end_index = (rank + 1) * elements_per_rank;\n\n  // if this rank is the last rank, then it will search the remaining elements\n  if (rank == size - 1) {\n    end_index += elements_left_over;\n  }\n\n  // search the elements that this rank will search\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,18,1.0,True,True,3.3e-05,,2.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements each rank will search\n  int elements_per_rank = x.size() / size;\n\n  // compute the number of elements that will be left over\n  int elements_left_over = x.size() % size;\n\n  // compute the starting index of the elements that this rank will search\n  int start_index = rank * elements_per_rank;\n\n  // compute the ending index of the elements that this rank will search\n  int end_index = (rank + 1) * elements_per_rank;\n\n  // if this rank is the last rank, then it will search the remaining elements\n  if (rank == size - 1) {\n    end_index += elements_left_over;\n  }\n\n  // search the elements that this rank will search\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,18,2.0,True,True,1.5e-05,,4.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements each rank will search\n  int elements_per_rank = x.size() / size;\n\n  // compute the number of elements that will be left over\n  int elements_left_over = x.size() % size;\n\n  // compute the starting index of the elements that this rank will search\n  int start_index = rank * elements_per_rank;\n\n  // compute the ending index of the elements that this rank will search\n  int end_index = (rank + 1) * elements_per_rank;\n\n  // if this rank is the last rank, then it will search the remaining elements\n  if (rank == size - 1) {\n    end_index += elements_left_over;\n  }\n\n  // search the elements that this rank will search\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,18,3.0,True,True,7e-06,,8.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements each rank will search\n  int elements_per_rank = x.size() / size;\n\n  // compute the number of elements that will be left over\n  int elements_left_over = x.size() % size;\n\n  // compute the starting index of the elements that this rank will search\n  int start_index = rank * elements_per_rank;\n\n  // compute the ending index of the elements that this rank will search\n  int end_index = (rank + 1) * elements_per_rank;\n\n  // if this rank is the last rank, then it will search the remaining elements\n  if (rank == size - 1) {\n    end_index += elements_left_over;\n  }\n\n  // search the elements that this rank will search\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,18,4.0,True,True,4e-06,,16.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements each rank will search\n  int elements_per_rank = x.size() / size;\n\n  // compute the number of elements that will be left over\n  int elements_left_over = x.size() % size;\n\n  // compute the starting index of the elements that this rank will search\n  int start_index = rank * elements_per_rank;\n\n  // compute the ending index of the elements that this rank will search\n  int end_index = (rank + 1) * elements_per_rank;\n\n  // if this rank is the last rank, then it will search the remaining elements\n  if (rank == size - 1) {\n    end_index += elements_left_over;\n  }\n\n  // search the elements that this rank will search\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,2.6e-05,18,5.0,True,False,2e-06,,32.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size();\n  int local_target = target;\n\n  int local_result = 0;\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return global_result == 1;\n  } else {\n    return false;\n  }\n}",True,True,2.7e-05,19,0.0,True,True,5.8e-05,,1.0
"#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size();\n  int local_target = target;\n\n  int local_result = 0;\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return global_result == 1;\n  } else {\n    return false;\n  }\n}",True,True,2.7e-05,19,1.0,True,False,6.8e-05,,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_size = x.size() / size;\n    int start = rank * local_size;\n    int end = start + local_size;\n\n    std::vector<int> local_x(x.begin() + start, x.begin() + end);\n\n    bool result = false;\n    #pragma omp parallel for\n    for (int i = 0; i < local_x.size(); i++) {\n        if (local_x[i] == target) {\n            result = true;\n            break;\n        }\n    }\n\n    int global_result;\n    MPI_Reduce(&result, &global_result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n    return global_result;\n}",False,True,,0,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_size = x.size() / size;\n    int start = local_size * rank;\n    int end = start + local_size;\n\n    bool result = false;\n    #pragma omp parallel for\n    for (int i = start; i < end; i++) {\n        if (x[i] == target) {\n            result = true;\n            break;\n        }\n    }\n\n    int global_result;\n    MPI_Reduce(&result, &global_result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n    return global_result;\n}",False,True,,1,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  bool found = false;\n  #pragma omp parallel for\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      found = true;\n      break;\n    }\n  }\n\n  bool result;\n  MPI_Reduce(&found, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n  return result;\n}",False,True,,2,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_size = x.size() / size;\n    int local_start = rank * local_size;\n    int local_end = local_start + local_size;\n\n    bool result = false;\n    #pragma omp parallel for\n    for (int i = local_start; i < local_end; i++) {\n        if (x[i] == target) {\n            result = true;\n            break;\n        }\n    }\n\n    int result_int = result;\n    MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n    return result;\n}",False,True,,3,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int start = rank * chunk;\n  int end = start + chunk;\n\n  bool result = false;\n\n  #pragma omp parallel for reduction(|:result)\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",False,True,,4,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  int local_size = x.size() / size;\n  int local_start = rank * local_size;\n  int local_end = local_start + local_size;\n  int local_target = target;\n  bool found = false;\n  #pragma omp parallel for\n  for (int i = local_start; i < local_end; i++) {\n    if (x[i] == local_target) {\n      found = true;\n      break;\n    }\n  }\n  bool global_found;\n  MPI_Reduce(&found, &global_found, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n  return global_found;\n}",False,True,,5,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // each rank gets a chunk of the data\n    int chunk_size = n / size;\n    int start = rank * chunk_size;\n    int end = (rank + 1) * chunk_size;\n    if (rank == size - 1) {\n        end = n;\n    }\n\n    // search in parallel\n    bool result = false;\n    #pragma omp parallel for\n    for (int i = start; i < end; i++) {\n        if (x[i] == target) {\n            result = true;\n            break;\n        }\n    }\n\n    // gather results\n    int result_int = result;\n    MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n    return result;\n}",False,True,,6,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to search in parallel\n  // we can use OpenMP to parallelize the search\n  // we can use MPI to distribute the work across the ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the target value to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast the result to all ranks\n  // we can use MPI to collect the results on rank 0\n  // we can use MPI to broadcast",False,False,,7,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,0.0,True,True,5.8e-05,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,1.0,True,True,5.6e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,2.0,True,True,5.4e-05,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,3.0,True,True,5.8e-05,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,4.0,True,True,5.3e-05,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,5.0,True,True,5.5e-05,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,6.0,True,True,6.2e-05,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = target;\n  int local_result = 0;\n\n  // search for the target in the local vector\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == local_target) {\n      local_result = 1;\n      break;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return (rank == 0)? (global_result == 1) : false;\n}",True,False,2.6e-05,8,7.0,True,False,6.4e-05,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per rank\n  int n_per_rank = n / size;\n\n  // get the number of elements that are left over\n  int n_left_over = n % size;\n\n  // get the start and end indices for this rank\n  int start = rank * n_per_rank;\n  int end = start + n_per_rank;\n\n  // if this rank has any elements left over, add them to the end\n  if (rank < n_left_over) {\n    end++;\n  }\n\n  // initialize the result\n  bool result = false;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // reduce the result across all ranks\n  MPI_Reduce(&result, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",False,True,,9,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,0.0,True,True,3.2e-05,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,1.0,True,True,3.3e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,2.0,True,True,3.3e-05,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,3.0,True,True,3.3e-05,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,4.0,True,True,3.3e-05,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,5.0,True,True,3.4e-05,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,6.0,True,True,3.3e-05,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  bool result = false;\n  if (rank == 0) {\n    for (int i = 0; i < size; i++) {\n      int start_i = i * chunk_size;\n      int end_i = start_i + chunk_size;\n      if (std::find(x.begin() + start_i, x.begin() + end_i, target)!= x.end()) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  MPI_Bcast(&result, 1, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n  return result;\n}",True,False,3e-05,10,7.0,True,False,1.8e-05,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_size = x.size() / size;\n  int local_start = local_size * rank;\n  int local_end = local_start + local_size;\n\n  bool result = false;\n  #pragma omp parallel for\n  for (int i = local_start; i < local_end; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n  return result;\n}",False,True,,11,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements in each chunk\n  int chunk_size = n / size;\n\n  // get the number of elements in the last chunk\n  int last_chunk_size = n % size;\n\n  // get the start and end indices of the chunk\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n\n  // if this is the last chunk, adjust the end index\n  if (rank == size - 1) {\n    end = start + last_chunk_size;\n  }\n\n  // get the chunk\n  std::vector<int> chunk(x.begin() + start, x.begin() + end);\n\n  // search the chunk\n  bool found = false;\n#pragma omp parallel for\n  for (int i = 0; i < chunk.size(); i++) {\n    if (chunk[i] == target) {\n      found = true;\n    }\n  }\n\n  // gather the results\n  bool result;\n  MPI_Reduce(&found, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,True,2.7e-05,12,0.0,True,False,2e-06,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,0.0,True,True,5.1e-05,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,1.0,True,True,5.1e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,2.0,True,True,5e-05,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,3.0,True,True,5e-05,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,4.0,True,True,5e-05,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,5.0,True,True,5e-05,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,6.0,True,True,5.1e-05,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,7.0,True,True,3.1e-05,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,8.0,True,True,3e-05,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,9.0,True,True,3e-05,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,10.0,True,True,3.3e-05,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,11.0,True,True,3.3e-05,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,12.0,True,True,3.3e-05,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,13.0,True,True,3.8e-05,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,14.0,True,True,0.000217,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,15.0,True,True,0.000242,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,16.0,True,True,0.000232,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,17.0,True,True,0.000271,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,18.0,True,True,0.000242,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,19.0,True,True,0.000278,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x\n  int n = x.size();\n\n  // number of elements per rank\n  int n_per_rank = n / size;\n\n  // number of elements in the last rank\n  int n_last_rank = n % size;\n\n  // start index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // start index of the last rank\n  int start_index_last_rank = start_index + n_per_rank;\n\n  // end index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // end index of the last rank\n  int end_index_last_rank = start_index_last_rank + n_last_rank;\n\n  // result of the search\n  bool result = false;\n\n  // search in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  // search in the last rank\n  if (!result) {\n    for (int i = start_index_last_rank; i < end_index_last_rank; i++) {\n      if (x[i] == target) {\n        result = true;\n        break;\n      }\n    }\n  }\n\n  // gather the result from all ranks\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,False,2.9e-05,13,20.0,True,True,0.000267,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,0.0,True,True,0.00017,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,1.0,True,True,0.000171,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,2.0,True,True,0.000171,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,3.0,True,True,0.000171,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,4.0,True,True,0.000173,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,5.0,True,True,0.000171,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,6.0,True,True,0.000174,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,7.0,True,True,9e-05,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,8.0,True,True,9.1e-05,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,9.0,True,True,9.2e-05,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,10.0,True,True,9.2e-05,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,11.0,True,True,9e-05,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,12.0,True,True,9.2e-05,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,13.0,True,True,9.4e-05,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,14.0,True,True,0.005972,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,15.0,True,True,0.000257,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,16.0,True,True,0.000293,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,17.0,True,True,0.000278,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,18.0,True,True,0.000261,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,19.0,True,True,0.00032,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int chunk_size = n / size;\n  int start = rank * chunk_size;\n  int end = start + chunk_size;\n  if (rank == size - 1) {\n    end = n;\n  }\n\n  int local_count = 0;\n  for (int i = start; i < end; i++) {\n    if (x[i] == target) {\n      local_count++;\n    }\n  }\n\n  int global_count = 0;\n  MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_count > 0;\n}",True,False,2.6e-05,14,20.0,True,True,0.000323,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_size = x.size() / size;\n    int start = local_size * rank;\n    int end = start + local_size;\n\n    bool result = false;\n    #pragma omp parallel for\n    for (int i = start; i < end; i++) {\n        if (x[i] == target) {\n            result = true;\n            break;\n        }\n    }\n\n    int global_result;\n    MPI_Reduce(&result, &global_result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n    return global_result;\n}",False,True,,15,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // every rank has a complete copy of x\n    std::vector<int> local_x = x;\n\n    // compute the number of elements in the local vector\n    int local_size = local_x.size();\n\n    // compute the number of elements in the local vector\n    int local_target = target;\n\n    // compute the number of elements in the local vector\n    int local_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found_target_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found_target_result_found = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found_target_result_found_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found_target_result_found_target_result = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found_target_result_found_target_result_found = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_result_found_target_result_found_target_result_found_target = 0;\n\n    // compute the number of elements in the local vector\n    int local_found_result_target_result_found_target_result_found_target_result_found_target_",False,False,,16,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,0.0,True,True,4.4e-05,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,1.0,True,True,3.4e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,2.0,True,True,3.9e-05,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,3.0,True,True,5.4e-05,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,4.0,True,True,9.5e-05,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,5.0,True,True,0.000165,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,6.0,True,True,0.000285,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,7.0,True,True,5.9e-05,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,8.0,True,True,5.9e-05,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,9.0,True,True,4.6e-05,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,10.0,True,True,6.1e-05,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,11.0,True,True,9.5e-05,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,12.0,True,True,0.000163,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,13.0,True,True,0.001589,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,14.0,True,True,0.000399,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,15.0,True,True,0.000268,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,16.0,True,True,0.000271,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,17.0,True,True,0.007691,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,18.0,True,True,0.047374,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,19.0,True,True,0.051734,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // each rank has a complete copy of x\n  // we can use this to parallelize the search\n  int local_size = x.size();\n  int local_target = target;\n  int local_result = 0;\n\n  // use OpenMP to parallelize the search\n  #pragma omp parallel for reduction(+:local_result)\n  for (int i = 0; i < local_size; i++) {\n    if (x[i] == local_target) {\n      local_result++;\n    }\n  }\n\n  // sum up the results from all ranks\n  int global_result = 0;\n  MPI_Reduce(&local_result, &global_result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  return global_result > 0;\n}",True,True,2.9e-05,17,20.0,True,True,0.015916,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int chunk = n / size;\n  int remainder = n % size;\n\n  int start = rank * chunk;\n  int end = start + chunk;\n  if (rank == size - 1) {\n    end += remainder;\n  }\n\n  bool result = false;\n  #pragma omp parallel for\n  for (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n      result = true;\n      break;\n    }\n  }\n\n  int result_int = result;\n  MPI_Reduce(&result_int, &result, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",False,True,,18,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,0.0,True,True,5.3e-05,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,1.0,True,True,5.5e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,2.0,True,True,5.4e-05,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,3.0,True,True,5.3e-05,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,4.0,True,True,5.3e-05,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,5.0,True,True,5.8e-05,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,6.0,True,True,5.7e-05,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",36_search_check_if_array_contains_value,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_target = -1;\n  int local_n = 0;\n  int local_result = 0;\n\n  // find the target in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_target = i;\n      break;\n    }\n  }\n\n  // count the number of elements in the local vector\n  for (int i = 0; i < n; i++) {\n    if (x[i] == target) {\n      local_n++;\n    }\n  }\n\n  // check if the target is in the local vector\n  if (local_target!= -1) {\n    local_result = 1;\n  }\n\n  // gather the results from all ranks\n  int result = 0;\n  MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  // return the result\n  if (rank == 0) {\n    return result == 1;\n  } else {\n    return false;\n  }\n}",True,False,2.6e-05,19,7.0,True,False,6.4e-05,1.0,2.0
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<int*> x_xor_y(""x_xor_y"", x.size() + y.size());\n  Kokkos::parallel_for(""xor_contains"", x.size(), KOKKOS_LAMBDA(const int i) {\n    x_xor_y(i) = x(i);\n  });\n  for (auto& v : y) {\n    Kokkos::parallel_for(""xor_contains"", x.size(), KOKKOS_LAMBDA(const int i) {\n      x_xor_y(i) ^= *v;\n    });\n  }\n  Kokkos::View<int> result(""result"", 1);\n  Kokkos::parallel_reduce(""xor_contains"", x.size(), KOKKOS_LAMBDA(const int i, int& lsum) {\n    lsum += x_xor_y(i) == val;\n  }, result);\n  return result() == 1;\n}",False,True,,0,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},False,True,,1,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> x_view(""x"", x.extent(0));\n  Kokkos::View<const int*> y_view(""y"", y.size());\n  Kokkos::View<const int*> val_view(""val"", 1);\n  Kokkos::deep_copy(x_view, x);\n  Kokkos::deep_copy(y_view, y);\n  Kokkos::deep_copy(val_view, val);\n\n  Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(""xorContains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, 1), KOKKOS_LAMBDA(int, bool& result, const bool& final_result) {\n    bool found = false;\n    for (int i = 0; i < x_view.extent(0); ++i) {\n      if (x_view(i) == val_view(0)) {\n        found = true;\n        break;\n      }\n    }\n    for (int i = 0; i < y_view.extent(0); ++i) {\n      if (y_view(i) == val_view(0)) {\n        found = true;\n        break;\n      }\n    }\n    result = found;\n    final_result = result || final_result;\n  }, result);\n\n  bool result_val;\n  Kokkos::deep_copy(result_val, result);\n  return result_val;\n}",False,True,,2,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*, Kokkos::HostSpace> x_host(""x_host"", x.extent(0));\n  Kokkos::deep_copy(x_host, x);\n  for (auto const& v : y) {\n    for (int i = 0; i < x.extent(0); ++i) {\n      if (x_host(i) == val) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",False,True,,3,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> all_x(""all_x"", x.extent(0) + y.size());\n  Kokkos::View<const int*> all_y(""all_y"", y.size());\n  Kokkos::deep_copy(all_x, x);\n  Kokkos::deep_copy(all_y, y);\n  Kokkos::View<bool> found(""found"", 1);\n  Kokkos::parallel_reduce(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, all_x.extent(0)),\n                          KOKKOS_LAMBDA(int i, bool& f) {\n                            f |= (all_x(i) == val) ^ (std::find(all_y.data(), all_y.data() + all_y.extent(0), all_x(i))!= all_y.data() + all_y.extent(0));\n                          },\n                          found);\n  bool result;\n  Kokkos::deep_copy(result, found);\n  return result;\n}",False,True,,4,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> x_view(""x_view"", x.size());\n  Kokkos::View<const int*> y_view(""y_view"", y.size());\n  Kokkos::deep_copy(x_view, x);\n  Kokkos::deep_copy(y_view, y);\n  Kokkos::View<bool, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""xor_contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.size()),\n      KOKKOS_LAMBDA(int i, bool& result_local) {\n        result_local = (std::find(y.begin(), y.end(), &x_view(i))!= y.end()) ^\n                      (std::find(y.begin(), y.end(), &y_view(i))!= y.end());\n      },\n      result);\n  return result();\n}",False,True,,5,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},False,True,,6,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(""xorContains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)), KOKKOS_LAMBDA(int i, bool& lresult) {\n    bool result = false;\n    for (auto const& v : y) {\n      result |= (v[i] == val);\n    }\n    lresult |= result;\n  }, result);\n  return result();\n}",False,True,,7,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<int*> x_xor_y(""x_xor_y"", x.size() + y.size());\n  Kokkos::parallel_for(""xor_contains"", x.size() + y.size(), KOKKOS_LAMBDA(int i) {\n    x_xor_y(i) = x(i) ^ y[i % y.size()][i];\n  });\n  Kokkos::fence();\n  for (int i = 0; i < x_xor_y.size(); i++) {\n    if (x_xor_y(i) == val) {\n      return true;\n    }\n  }\n  return false;\n}",False,True,,8,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*, Kokkos::HostSpace> x_host(""x_host"", x.extent(0));\n  Kokkos::deep_copy(x_host, x);\n\n  bool found = false;\n  for (auto const& y_i : y) {\n    for (auto const& x_i : x_host) {\n      if (x_i == val) {\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      break;\n    }\n  }\n  return found;\n}",False,True,,9,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> vals(""vals"", 2);\n  vals(0) = val;\n  vals(1) = val;\n\n  Kokkos::View<bool*> result(""result"", 1);\n  Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, 1),\n                       KOKKOS_LAMBDA(const int i) {\n                         result(i) = false;\n                       });\n  Kokkos::fence();\n\n  Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n                       KOKKOS_LAMBDA(const int i) {\n                         if (std::find(y.begin(), y.end(), &x(i))!= y.end()) {\n                           result(0) = true;\n                         }\n                       });\n  Kokkos::fence();\n\n  Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, vals.extent(0)),\n                       KOKKOS_LAMBDA(const int i) {\n                         if (std::find(y.begin(), y.end(), &vals(i))!= y.end()) {\n                           result(0) = true;\n                         }\n                       });\n  Kokkos::fence();\n\n  bool res = false;\n  Kokkos::deep_copy(res, result(0));\n  return res;\n}",False,True,,10,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> y_view(""y_view"", y.size());\n  Kokkos::deep_copy(y_view, y);\n  Kokkos::View<bool> result(""result"", 1);\n  Kokkos::parallel_reduce(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n                          KOKKOS_LAMBDA(int i, bool& lresult) {\n                            lresult = (std::find(y_view.data(), y_view.data() + y_view.extent(0), x(i))!= y_view.data() + y_view.extent(0)) ^ (x(i) == val);\n                          },\n                          result);\n  bool result_h;\n  Kokkos::deep_copy(result_h, result);\n  return result_h;\n}",False,True,,11,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> x_view(""x_view"", x.size());\n  Kokkos::View<const int*> y_view(""y_view"", y.size());\n  Kokkos::View<int> result(""result"", 1);\n  Kokkos::deep_copy(x_view, x);\n  Kokkos::deep_copy(y_view, y);\n  Kokkos::deep_copy(result, 0);\n\n  Kokkos::parallel_for(""xor_contains"", x.size() + y.size(), KOKKOS_LAMBDA(int i) {\n    if (i < x.size()) {\n      result() = result() || (x_view(i) == val);\n    } else {\n      result() = result() || (y_view(i - x.size()) == val);\n    }\n  });\n\n  int result_val;\n  Kokkos::deep_copy(result_val, result);\n  return result_val;\n}",False,True,,12,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> vals(""vals"", 2);\n  vals(0) = val;\n  vals(1) = val;\n\n  Kokkos::View<bool*> result(""result"", 1);\n  Kokkos::parallel_for(""xorContains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, 1), KOKKOS_LAMBDA(int i) {\n    result(i) = false;\n    for (auto const& v : y) {\n      if (std::find(x.data(), x.data() + x.extent(0), *v)!= x.data() + x.extent(0)) {\n        result(i) = true;\n        break;\n      }\n    }\n  });\n\n  return result(0);\n}",False,True,,13,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0) + y.size()),\n      KOKKOS_LAMBDA(const int i, bool& result) {\n        result = result || (x(i) == val);\n        for (auto const& y_i : y) {\n          result = result || (y_i[i] == val);\n        }\n      },\n      result);\n  return result();\n}",False,True,,14,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(""xorContains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)), KOKKOS_LAMBDA(int i, bool& lresult) {\n    bool result = false;\n    for (auto& y_i : y) {\n      result = result || (x(i) == *y_i);\n    }\n    lresult = lresult || result;\n  }, result);\n  return result();\n}",False,True,,15,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<int*, Kokkos::HostSpace> x_host(""x_host"", x.extent(0));\n  Kokkos::deep_copy(x_host, x);\n  std::vector<int*> y_host(y.size());\n  for (int i = 0; i < y.size(); ++i) {\n    y_host[i] = new int[y[i].extent(0)];\n    Kokkos::deep_copy(y_host[i], y[i]);\n  }\n  Kokkos::View<int*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""xor_contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n      KOKKOS_LAMBDA(const int i, bool& result) {\n        result = (std::find(y_host.begin(), y_host.end(), &x_host(i))!= y_host.end()) ^\n                 (std::find(y_host.begin(), y_host.end(), &val)!= y_host.end());\n      },\n      result);\n  return result();\n}",False,True,,16,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return false;\n},False,True,,17,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<bool*, Kokkos::HostSpace> result(""result"", 1);\n  Kokkos::parallel_reduce(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, 1),\n                          KOKKOS_LAMBDA(int, bool& result, const int& i) {\n                            result = false;\n                            for (auto const& v : y) {\n                              if (std::find(v, v + 6, val)!= v + 6) {\n                                result = true;\n                                break;\n                              }\n                            }\n                          },\n                          result);\n  return result();\n}",False,True,,18,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, std::vector<const int*> const& y, int val) {",39_search_xor_contains,search,cpp,kokkos,0.2,0.95,True,1024,True,"Kokkos::View<const int*> x_view(""x"", x.size());\n  Kokkos::View<const int*> y_view(""y"", y.size());\n  Kokkos::View<const int*> val_view(""val"", 1);\n  Kokkos::deep_copy(x_view, x);\n  Kokkos::deep_copy(y_view, y);\n  Kokkos::deep_copy(val_view, val);\n\n  Kokkos::View<bool> result(""result"", 1);\n  Kokkos::parallel_reduce(\n      ""xor_contains"", Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x_view.size() + y_view.size()),\n      KOKKOS_LAMBDA(const int i, bool& result) {\n        if (x_view(i) == val_view(0)) {\n          result = true;\n        } else if (std::find(y.begin(), y.end(), &x_view(i))!= y.end()) {\n          result = true;\n        }\n      },\n      result);\n  Kokkos::deep_copy(result, result);\n  return result();\n}",False,True,,19,,,,,,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,0,0.0,True,True,5.3e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,0,1.0,True,True,5.1e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,0,2.0,True,True,5.9e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,0,3.0,True,True,6.3e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,0,4.0,True,True,9e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,0,5.0,True,True,0.000149,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,0,6.0,True,True,0.00026,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,1,0.0,True,True,6.9e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,1,1.0,True,True,5.3e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,1,2.0,True,True,4.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,1,3.0,True,True,5.5e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,1,4.0,True,True,8.9e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,1,5.0,True,True,0.00017,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,1,6.0,True,True,0.000287,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,2,0.0,True,True,6.6e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,2,1.0,True,True,5.3e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,2,2.0,True,True,6.6e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,2,3.0,True,True,6.6e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,2,4.0,True,True,9.2e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,2,5.0,True,True,0.000153,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  for (int i = 0; i < y.size(); i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,7e-06,2,6.0,True,True,0.000256,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,3,0.0,True,True,7.2e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,3,1.0,True,True,5.8e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,3,2.0,True,True,4.6e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,3,3.0,True,True,5.3e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,3,4.0,True,True,9.2e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,3,5.0,True,True,0.00018,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,3,6.0,True,True,0.000284,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,4,0.0,True,True,7.3e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,4,1.0,True,True,4.8e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,4,2.0,True,True,4.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,4,3.0,True,True,5.4e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,4,4.0,True,True,9.4e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,4,5.0,True,True,0.000169,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,4,6.0,True,True,0.000282,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,5,0.0,True,True,6.7e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,5,1.0,True,True,5.8e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,5,2.0,True,True,4.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,5,3.0,True,True,5.5e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,5,4.0,True,True,9.4e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,5,5.0,True,True,0.000652,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,5,6.0,True,True,0.000283,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,6,0.0,True,True,7.6e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,6,1.0,True,True,4.9e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,6,2.0,True,True,4.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,6,3.0,True,True,5.3e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,6,4.0,True,True,9.2e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,6,5.0,True,True,0.000167,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n  return count == 1;\n},True,True,6e-06,6,6.0,True,True,0.000299,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int found = 0;\n    #pragma omp parallel\n    {\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] == val) {\n                found++;\n            }\n        }\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < y.size(); i++) {\n            if (y[i] == val) {\n                found++;\n            }\n        }\n    }\n    return found == 1;\n},True,True,6e-06,7,0.0,True,True,4.8e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int found = 0;\n    #pragma omp parallel\n    {\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] == val) {\n                found++;\n            }\n        }\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < y.size(); i++) {\n            if (y[i] == val) {\n                found++;\n            }\n        }\n    }\n    return found == 1;\n},True,True,6e-06,7,1.0,True,True,5.2e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int found = 0;\n    #pragma omp parallel\n    {\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] == val) {\n                found++;\n            }\n        }\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < y.size(); i++) {\n            if (y[i] == val) {\n                found++;\n            }\n        }\n    }\n    return found == 1;\n},True,True,6e-06,7,2.0,True,True,4.3e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int found = 0;\n    #pragma omp parallel\n    {\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] == val) {\n                found++;\n            }\n        }\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < y.size(); i++) {\n            if (y[i] == val) {\n                found++;\n            }\n        }\n    }\n    return found == 1;\n},True,True,6e-06,7,3.0,True,True,5.6e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int found = 0;\n    #pragma omp parallel\n    {\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] == val) {\n                found++;\n            }\n        }\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < y.size(); i++) {\n            if (y[i] == val) {\n                found++;\n            }\n        }\n    }\n    return found == 1;\n},True,True,6e-06,7,4.0,True,True,9.1e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int found = 0;\n    #pragma omp parallel\n    {\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] == val) {\n                found++;\n            }\n        }\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < y.size(); i++) {\n            if (y[i] == val) {\n                found++;\n            }\n        }\n    }\n    return found == 1;\n},True,True,6e-06,7,5.0,True,True,0.000174,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int found = 0;\n    #pragma omp parallel\n    {\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < x.size(); i++) {\n            if (x[i] == val) {\n                found++;\n            }\n        }\n        #pragma omp for reduction(+:found)\n        for (int i = 0; i < y.size(); i++) {\n            if (y[i] == val) {\n                found++;\n            }\n        }\n    }\n    return found == 1;\n},True,True,6e-06,7,6.0,True,True,0.000292,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,8,0.0,True,True,6.9e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,8,1.0,True,True,4.8e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,8,2.0,True,True,4.6e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,8,3.0,True,True,5.5e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,8,4.0,True,True,9.3e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,8,5.0,True,True,0.000169,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,8,6.0,True,True,0.000291,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for reduction(|:found)\n  for (int i = 0; i < x.size(); i++) {\n    found |= (x[i] == val);\n  }\n  #pragma omp parallel for reduction(|:found)\n  for (int i = 0; i < y.size(); i++) {\n    found |= (y[i] == val);\n  }\n  return found;\n},True,True,6e-06,9,0.0,True,False,0.000326,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for reduction(|:found)\n  for (int i = 0; i < x.size(); i++) {\n    found |= (x[i] == val);\n  }\n  #pragma omp parallel for reduction(|:found)\n  for (int i = 0; i < y.size(); i++) {\n    found |= (y[i] == val);\n  }\n  return found;\n},True,True,6e-06,10,0.0,True,False,0.000327,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,11,0.0,True,True,8.1e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,11,1.0,True,True,5.2e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,11,2.0,True,True,4.4e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,11,3.0,True,True,5.4e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,11,4.0,True,True,9.2e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,11,5.0,True,True,0.000166,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,11,6.0,True,True,0.000292,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,12,0.0,True,True,7.3e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,12,1.0,True,True,4.9e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,12,2.0,True,True,4.5e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,12,3.0,True,True,5.2e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,12,4.0,True,True,9.3e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,12,5.0,True,True,0.00017,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,12,6.0,True,True,0.000901,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,13,0.0,True,True,7.2e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,13,1.0,True,True,4.5e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,13,2.0,True,True,4.9e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,13,3.0,True,True,5.7e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,13,4.0,True,True,9.4e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,13,5.0,True,True,0.000169,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,13,6.0,True,True,0.000283,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,14,0.0,True,True,8.3e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,14,1.0,True,True,5e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,14,2.0,True,True,4.9e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,14,3.0,True,True,5.7e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,14,4.0,True,True,9.5e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,14,5.0,True,True,0.000173,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,14,6.0,True,True,0.000294,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,15,0.0,True,True,6.9e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,15,1.0,True,True,5e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,15,2.0,True,True,4.5e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,15,3.0,True,True,5.7e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,15,4.0,True,True,9.2e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,15,5.0,True,True,0.000654,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,15,6.0,True,True,0.000306,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,16,0.0,True,True,7.5e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,16,1.0,True,True,4.8e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,16,2.0,True,True,4.2e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,16,3.0,True,True,5.4e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,16,4.0,True,True,9.4e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,16,5.0,True,True,0.000172,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int count = 0;\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < n; i++) {\n    if (x[i] == val) {\n      count++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:count)\n  for (int i = 0; i < m; i++) {\n    if (y[i] == val) {\n      count++;\n    }\n  }\n\n  return count == 1;\n},True,True,6e-06,16,6.0,True,True,0.000294,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,17,0.0,True,True,6.7e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,17,1.0,True,True,5.5e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,17,2.0,True,True,4.7e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,17,3.0,True,True,5.2e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,17,4.0,True,True,9.6e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,17,5.0,True,True,0.000166,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int count = 0;\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < n; i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < m; i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n\n    return count == 1;\n},True,True,6e-06,17,6.0,True,True,0.000288,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < y.size(); i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,18,0.0,True,True,5.8e-05,1.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < y.size(); i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,18,1.0,True,True,4.9e-05,2.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < y.size(); i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,18,2.0,True,True,4.4e-05,4.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < y.size(); i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,18,3.0,True,True,5.6e-05,8.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < y.size(); i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,18,4.0,True,True,9.5e-05,16.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < y.size(); i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,18,5.0,True,True,0.00017,32.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,int count = 0;\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] == val) {\n            count++;\n        }\n    }\n    #pragma omp parallel for reduction(+:count)\n    for (int i = 0; i < y.size(); i++) {\n        if (y[i] == val) {\n            count++;\n        }\n    }\n    return count == 1;\n},True,True,6e-06,18,6.0,True,True,0.000289,64.0,
"#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,omp,0.2,0.95,True,1024,True,bool found = false;\n  #pragma omp parallel for reduction(|:found)\n  for (int i = 0; i < x.size(); i++) {\n    found |= (x[i] == val);\n  }\n  #pragma omp parallel for reduction(|:found)\n  for (int i = 0; i < y.size(); i++) {\n    found |= (y[i] == val);\n  }\n  return found;\n},True,True,6e-06,19,0.0,True,False,0.000327,1.0,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,for (int i : x) {\n    if (i == val) {\n      return true;\n    }\n  }\n  for (int i : y) {\n    if (i == val) {\n      return true;\n    }\n  }\n  return false;\n},True,True,7e-06,0,0.0,True,False,7e-06,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,1,0.0,True,True,1.1e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,2,0.0,True,True,1.2e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,for (auto const& i : x) {\n    if (i == val) {\n      return true;\n    }\n  }\n  for (auto const& i : y) {\n    if (i == val) {\n      return true;\n    }\n  }\n  return false;\n},True,True,7e-06,3,0.0,True,False,7e-06,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^ std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,4,0.0,True,True,1.1e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,5,0.0,True,True,1.2e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^ std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,6,0.0,True,True,1.2e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,for (auto i : x) {\n    if (i == val) {\n      return true;\n    }\n  }\n  for (auto i : y) {\n    if (i == val) {\n      return true;\n    }\n  }\n  return false;\n},True,True,7e-06,7,0.0,True,False,7e-06,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,for (int i : x) {\n        if (i == val) {\n            return true;\n        }\n    }\n    for (int i : y) {\n        if (i == val) {\n            return true;\n        }\n    }\n    return false;\n},True,True,7e-06,8,0.0,True,False,7e-06,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"// xor of two vectors is the same as xor of their elements\n  // xor of two elements is the same as xor of their bits\n  // xor of two bits is 0 if they are the same, 1 if they are different\n  // so if we xor the two vectors, we get the xor of their elements\n  // and if we xor that with val, we get the xor of their elements and val\n  // if the xor of their elements and val is 0, then val is not in both vectors\n  // if the xor of their elements and val is not 0, then val is in both vectors\n  return (std::accumulate(x.begin(), x.end(), 0) ^ std::accumulate(y.begin(), y.end(), 0) ^ val) == 0;\n}",True,True,6e-06,9,0.0,True,True,6.4e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,10,0.0,True,True,1.2e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,for (int i : x) {\n        if (i == val) {\n            return true;\n        }\n    }\n    for (int i : y) {\n        if (i == val) {\n            return true;\n        }\n    }\n    return false;\n},True,True,7e-06,11,0.0,True,False,8e-06,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"// XOR of two vectors is the set of elements that are in one of the vectors, but not both\n    // XOR of two sets is the set of elements that are in one of the sets, but not both\n    // XOR of two numbers is the number that is in one of the numbers, but not both\n    // XOR of two booleans is the boolean that is in one of the booleans, but not both\n    // XOR of two characters is the character that is in one of the characters, but not both\n    // XOR of two strings is the string that is in one of the strings, but not both\n    // XOR of two pointers is the pointer that is in one of the pointers, but not both\n    // XOR of two references is the reference that is in one of the references, but not both\n    // XOR of two arrays is the array that is in one of the arrays, but not both\n    // XOR of two functions is the function that is in one of the functions, but not both\n    // XOR of two classes is the class that is in one of the classes, but not both\n    // XOR of two structs is the struct that is in one of the structs, but not both\n    // XOR of two unions is the union that is in one of the unions, but not both\n    // XOR of two enumerations is the enumeration that is in one of the enumerations, but not both\n    // XOR of two namespaces is the namespace that is in one of the namespaces, but not both\n    // XOR of two typedefs is the typedef that is in one of the typedefs, but not both\n    // XOR of two templates is the template that is in one of the templates, but not both\n    // XOR of two macros is the macro that is in one of the macros, but not both\n    // XOR of two preprocessor directives is the preprocessor directive that is in one of the preprocessor directives, but not both\n    // XOR of two labels is the label that is in one of the labels, but not both\n    // XOR of two statements is the statement that is in one of the statements, but not both\n    // XOR of two expressions is the expression that is in one of the expressions, but not both\n    // XOR of two types is the type that is in one of the types, but not both\n    // XOR of two variables is the variable that is in one of the variables, but not both\n    // XOR of two constants is the constant that is in one of the constants, but not both\n    // XOR of two literals is the literal that is in one of the literals, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of two attributes is the attribute that is in one of the attributes, but not both\n    // XOR of",False,True,,12,,,,,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^\n           std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,13,0.0,True,True,1.1e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,14,0.0,True,True,1.2e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^ std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,15,0.0,True,True,1.2e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^ std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,16,0.0,True,True,1.3e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,for (auto const& i : x) {\n        if (i == val) {\n            return true;\n        }\n    }\n    for (auto const& i : y) {\n        if (i == val) {\n            return true;\n        }\n    }\n    return false;\n},True,True,7e-06,17,0.0,True,False,7e-06,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,// xor of two vectors is the same as xor of their sums\n    int sum_x = 0;\n    int sum_y = 0;\n\n    for (int i = 0; i < x.size(); i++) {\n        sum_x += x[i];\n    }\n\n    for (int i = 0; i < y.size(); i++) {\n        sum_y += y[i];\n    }\n\n    return (sum_x ^ sum_y) == val;\n},True,True,6e-06,18,0.0,True,True,6.2e-05,,
"/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,serial,0.2,0.95,True,1024,True,"return std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",True,True,6e-06,19,0.0,True,True,1.1e-05,,
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int x_size = x.size();\n  int y_size = y.size();\n\n  int x_local_size = x_size / size;\n  int y_local_size = y_size / size;\n\n  int x_start = x_local_size * rank;\n  int y_start = y_local_size * rank;\n\n  int x_end = x_start + x_local_size;\n  int y_end = y_start + y_local_size;\n\n  if (rank == 0) {\n    x_end = x_size;\n    y_end = y_size;\n  }\n\n  int x_local_size_with_remainder = x_end - x_start;\n  int y_local_size_with_remainder = y_end - y_start;\n\n  std::vector<int> x_local(x_local_size_with_remainder);\n  std::vector<int> y_local(y_local_size_with_remainder);\n\n  MPI_Scatter(&x[x_start], x_local_size_with_remainder, MPI_INT, &x_local[0], x_local_size_with_remainder, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Scatter(&y[y_start], y_local_size_with_remainder, MPI_INT, &y_local[0], y_local_size_with_remainder, MPI_INT, 0, MPI_COMM_WORLD);\n\n  bool result = false;\n  for (int i = 0; i < x_local_size_with_remainder; i++) {\n    if (x_local[i] == val) {\n      result = true;\n      break;\n    }\n  }\n\n  for (int i = 0; i < y_local_size_with_remainder; i++) {\n    if (y_local[i] == val) {\n      result = true;\n      break;\n    }\n  }\n\n  int result_int = result;\n  int result_int_local;\n\n  MPI_Reduce(&result_int, &result_int_local, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n\n  return result_int_local;\n}",True,True,6e-06,0,0.0,True,False,0.000635,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> xChunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> yChunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunk\n  bool found = false;\n  for (int i = 0; i < xChunk.size(); i++) {\n    if (xChunk[i] == val || yChunk[i] == val) {\n      found = true;\n      break;\n    }\n  }\n\n  // gather the results\n  bool result;\n  MPI_Reduce(&found, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",True,True,6e-06,1,0.0,True,False,0.000604,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // send the size of the vectors to all ranks\n  int x_size = x.size();\n  int y_size = y.size();\n  MPI_Bcast(&x_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Bcast(&y_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // send the vectors to all ranks\n  std::vector<int> x_local(x_size);\n  std::vector<int> y_local(y_size);\n  MPI_Scatter(x.data(), x_size, MPI_INT, x_local.data(), x_size, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Scatter(y.data(), y_size, MPI_INT, y_local.data(), y_size, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // search for the value in the local vectors\n  bool found = false;\n  for (int i = 0; i < x_size; i++) {\n    if (x_local[i] == val) {\n      found = true;\n      break;\n    }\n  }\n  for (int i = 0; i < y_size; i++) {\n    if (y_local[i] == val) {\n      found = true;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  bool found_global;\n  MPI_Reduce(&found, &found_global, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return found_global;\n}",True,True,6e-06,2,0.0,True,False,0.000737,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // send the size of the vectors to all ranks\n  int x_size = x.size();\n  int y_size = y.size();\n  MPI_Bcast(&x_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Bcast(&y_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // send the vectors to all ranks\n  std::vector<int> x_local(x_size);\n  std::vector<int> y_local(y_size);\n  MPI_Scatter(x.data(), x_size, MPI_INT, x_local.data(), x_size, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Scatter(y.data(), y_size, MPI_INT, y_local.data(), y_size, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // search for val in x_local and y_local\n  bool found = false;\n  for (int i = 0; i < x_size; i++) {\n    if (x_local[i] == val) {\n      found = true;\n      break;\n    }\n  }\n  for (int i = 0; i < y_size; i++) {\n    if (y_local[i] == val) {\n      found = true;\n      break;\n    }\n  }\n\n  // gather the results from all ranks\n  bool found_global;\n  MPI_Reduce(&found, &found_global, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return found_global;\n}",True,True,6e-06,3,0.0,True,False,0.000571,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int x_size = x.size();\n  int y_size = y.size();\n\n  int x_start = x_size * rank / size;\n  int x_end = x_size * (rank + 1) / size;\n\n  int y_start = y_size * rank / size;\n  int y_end = y_size * (rank + 1) / size;\n\n  for (int i = x_start; i < x_end; i++) {\n    if (x[i] == val) {\n      return true;\n    }\n  }\n\n  for (int i = y_start; i < y_end; i++) {\n    if (y[i] == val) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,6e-06,4,0.0,True,False,8e-06,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in x\n  int x_size = x.size();\n\n  // get the number of elements in y\n  int y_size = y.size();\n\n  // get the number of elements in x and y\n  int total_size = x_size + y_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_size = 0;\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] == val) {\n      local_size++;\n    }\n  }\n\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] == val) {\n      local_size++;\n    }\n  }\n\n  // get the number of elements in x and y that are in the current process\n  int local_x_size = 0;\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] == val) {\n      local_x_size++;\n    }\n  }\n\n  // get the number of elements in x and y that are in the current process\n  int local_y_size = 0;\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] == val) {\n      local_y_size++;\n    }\n  }\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_size = local_x_size + local_y_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_size = local_x_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_y_size = local_y_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_size = local_xor_x_size + local_xor_y_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_size = local_xor_x_y_size - local_xor_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_x_size = local_xor_x_y_xor_size - local_xor_x_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_y_size = local_xor_x_y_xor_size - local_xor_y_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_x_y_size = local_xor_x_y_xor_x_size + local_xor_x_y_xor_y_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_x_y_xor_size = local_xor_x_y_xor_x_y_size - local_xor_x_y_xor_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_x_y_xor_x_size = local_xor_x_y_xor_x_y_xor_size - local_xor_x_y_xor_x_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_x_y_xor_y_size = local_xor_x_y_xor_x_y_xor_size - local_xor_x_y_xor_y_size;\n\n  // get the number of elements in x and y that are in the current process\n  int local_xor_x_y_xor_x_y_xor_x_y_size = local_xor_x_y_xor_x_y_xor_x_size + local_xor_x_y_xor_x_y_xor_y_size;\n\n  // get the number of elements in",False,True,,5,,,,,,
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_x_size = x.size();\n    int local_y_size = y.size();\n\n    int local_x_start = 0;\n    int local_y_start = 0;\n\n    int local_x_end = local_x_size;\n    int local_y_end = local_y_size;\n\n    int global_x_size = 0;\n    int global_y_size = 0;\n\n    int global_x_start = 0;\n    int global_y_start = 0;\n\n    int global_x_end = 0;\n    int global_y_end = 0;\n\n    MPI_Allreduce(&local_x_size, &global_x_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_size, &global_y_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_start, &global_x_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_start, &global_y_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_end, &global_x_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_end, &global_y_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    int local_x_index = 0;\n    int local_y_index = 0;\n\n    int global_x_index = 0;\n    int global_y_index = 0;\n\n    for (int i = 0; i < rank; i++) {\n        local_x_index += x[i];\n        local_y_index += y[i];\n    }\n\n    for (int i = 0; i < global_x_start; i++) {\n        global_x_index += x[i];\n    }\n\n    for (int i = 0; i < global_y_start; i++) {\n        global_y_index += y[i];\n    }\n\n    int local_x_xor_y = 0;\n    int global_x_xor_y = 0;\n\n    for (int i = global_x_start; i < global_x_end; i++) {\n        local_x_xor_y ^= x[i];\n    }\n\n    for (int i = global_y_start; i < global_y_end; i++) {\n        local_x_xor_y ^= y[i];\n    }\n\n    MPI_Allreduce(&local_x_xor_y, &global_x_xor_y, 1, MPI_INT, MPI_BOR, MPI_COMM_WORLD);\n\n    if (global_x_xor_y == val) {\n        return true;\n    } else {\n        return false;\n    }\n}",True,True,6e-06,6,0.0,True,True,0.000253,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_x_size = x.size();\n    int local_y_size = y.size();\n\n    int local_x_start = 0;\n    int local_y_start = 0;\n\n    int local_x_end = local_x_size;\n    int local_y_end = local_y_size;\n\n    int global_x_size = 0;\n    int global_y_size = 0;\n\n    int global_x_start = 0;\n    int global_y_start = 0;\n\n    int global_x_end = 0;\n    int global_y_end = 0;\n\n    MPI_Allreduce(&local_x_size, &global_x_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_size, &global_y_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_start, &global_x_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_start, &global_y_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_end, &global_x_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_end, &global_y_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    int local_x_index = 0;\n    int local_y_index = 0;\n\n    int global_x_index = 0;\n    int global_y_index = 0;\n\n    for (int i = 0; i < rank; i++) {\n        local_x_index += x[i];\n        local_y_index += y[i];\n    }\n\n    for (int i = 0; i < global_x_start; i++) {\n        global_x_index += x[i];\n    }\n\n    for (int i = 0; i < global_y_start; i++) {\n        global_y_index += y[i];\n    }\n\n    int local_x_xor_y = 0;\n    int global_x_xor_y = 0;\n\n    for (int i = global_x_start; i < global_x_end; i++) {\n        local_x_xor_y ^= x[i];\n    }\n\n    for (int i = global_y_start; i < global_y_end; i++) {\n        local_x_xor_y ^= y[i];\n    }\n\n    MPI_Allreduce(&local_x_xor_y, &global_x_xor_y, 1, MPI_INT, MPI_BOR, MPI_COMM_WORLD);\n\n    if (global_x_xor_y == val) {\n        return true;\n    } else {\n        return false;\n    }\n}",True,True,6e-06,6,1.0,True,True,0.000519,,2.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_x_size = x.size();\n    int local_y_size = y.size();\n\n    int local_x_start = 0;\n    int local_y_start = 0;\n\n    int local_x_end = local_x_size;\n    int local_y_end = local_y_size;\n\n    int global_x_size = 0;\n    int global_y_size = 0;\n\n    int global_x_start = 0;\n    int global_y_start = 0;\n\n    int global_x_end = 0;\n    int global_y_end = 0;\n\n    MPI_Allreduce(&local_x_size, &global_x_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_size, &global_y_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_start, &global_x_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_start, &global_y_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_end, &global_x_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_end, &global_y_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    int local_x_index = 0;\n    int local_y_index = 0;\n\n    int global_x_index = 0;\n    int global_y_index = 0;\n\n    for (int i = 0; i < rank; i++) {\n        local_x_index += x[i];\n        local_y_index += y[i];\n    }\n\n    for (int i = 0; i < global_x_start; i++) {\n        global_x_index += x[i];\n    }\n\n    for (int i = 0; i < global_y_start; i++) {\n        global_y_index += y[i];\n    }\n\n    int local_x_xor_y = 0;\n    int global_x_xor_y = 0;\n\n    for (int i = global_x_start; i < global_x_end; i++) {\n        local_x_xor_y ^= x[i];\n    }\n\n    for (int i = global_y_start; i < global_y_end; i++) {\n        local_x_xor_y ^= y[i];\n    }\n\n    MPI_Allreduce(&local_x_xor_y, &global_x_xor_y, 1, MPI_INT, MPI_BOR, MPI_COMM_WORLD);\n\n    if (global_x_xor_y == val) {\n        return true;\n    } else {\n        return false;\n    }\n}",True,True,6e-06,6,2.0,True,True,0.001198,,4.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_x_size = x.size();\n    int local_y_size = y.size();\n\n    int local_x_start = 0;\n    int local_y_start = 0;\n\n    int local_x_end = local_x_size;\n    int local_y_end = local_y_size;\n\n    int global_x_size = 0;\n    int global_y_size = 0;\n\n    int global_x_start = 0;\n    int global_y_start = 0;\n\n    int global_x_end = 0;\n    int global_y_end = 0;\n\n    MPI_Allreduce(&local_x_size, &global_x_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_size, &global_y_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_start, &global_x_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_start, &global_y_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_end, &global_x_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_end, &global_y_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    int local_x_index = 0;\n    int local_y_index = 0;\n\n    int global_x_index = 0;\n    int global_y_index = 0;\n\n    for (int i = 0; i < rank; i++) {\n        local_x_index += x[i];\n        local_y_index += y[i];\n    }\n\n    for (int i = 0; i < global_x_start; i++) {\n        global_x_index += x[i];\n    }\n\n    for (int i = 0; i < global_y_start; i++) {\n        global_y_index += y[i];\n    }\n\n    int local_x_xor_y = 0;\n    int global_x_xor_y = 0;\n\n    for (int i = global_x_start; i < global_x_end; i++) {\n        local_x_xor_y ^= x[i];\n    }\n\n    for (int i = global_y_start; i < global_y_end; i++) {\n        local_x_xor_y ^= y[i];\n    }\n\n    MPI_Allreduce(&local_x_xor_y, &global_x_xor_y, 1, MPI_INT, MPI_BOR, MPI_COMM_WORLD);\n\n    if (global_x_xor_y == val) {\n        return true;\n    } else {\n        return false;\n    }\n}",True,True,6e-06,6,3.0,True,True,0.00298,,8.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_x_size = x.size();\n    int local_y_size = y.size();\n\n    int local_x_start = 0;\n    int local_y_start = 0;\n\n    int local_x_end = local_x_size;\n    int local_y_end = local_y_size;\n\n    int global_x_size = 0;\n    int global_y_size = 0;\n\n    int global_x_start = 0;\n    int global_y_start = 0;\n\n    int global_x_end = 0;\n    int global_y_end = 0;\n\n    MPI_Allreduce(&local_x_size, &global_x_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_size, &global_y_size, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_start, &global_x_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_start, &global_y_start, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    MPI_Allreduce(&local_x_end, &global_x_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n    MPI_Allreduce(&local_y_end, &global_y_end, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\n    int local_x_index = 0;\n    int local_y_index = 0;\n\n    int global_x_index = 0;\n    int global_y_index = 0;\n\n    for (int i = 0; i < rank; i++) {\n        local_x_index += x[i];\n        local_y_index += y[i];\n    }\n\n    for (int i = 0; i < global_x_start; i++) {\n        global_x_index += x[i];\n    }\n\n    for (int i = 0; i < global_y_start; i++) {\n        global_y_index += y[i];\n    }\n\n    int local_x_xor_y = 0;\n    int global_x_xor_y = 0;\n\n    for (int i = global_x_start; i < global_x_end; i++) {\n        local_x_xor_y ^= x[i];\n    }\n\n    for (int i = global_y_start; i < global_y_end; i++) {\n        local_x_xor_y ^= y[i];\n    }\n\n    MPI_Allreduce(&local_x_xor_y, &global_x_xor_y, 1, MPI_INT, MPI_BOR, MPI_COMM_WORLD);\n\n    if (global_x_xor_y == val) {\n        return true;\n    } else {\n        return false;\n    }\n}",True,True,6e-06,6,4.0,False,,,,16.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // create a vector of size size that will store the result of each rank\n  std::vector<bool> result(size);\n\n  // get the size of the vectors\n  int x_size = x.size();\n  int y_size = y.size();\n\n  // get the start and end index of the subvector that this rank will search\n  int start = (x_size * rank) / size;\n  int end = (x_size * (rank + 1)) / size;\n\n  // search for the value in the subvector\n  for (int i = start; i < end; i++) {\n    if (x[i] == val) {\n      result[rank] = true;\n      break;\n    }\n  }\n\n  // search for the value in the subvector\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] == val) {\n      result[rank] = true;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, result.data(), 1, MPI_C_BOOL, MPI_COMM_WORLD);\n\n  // return the result on rank 0\n  return result[0];\n}",False,True,,7,,,,,,
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // send the length of the vectors to all ranks\n  int x_len = x.size();\n  int y_len = y.size();\n  MPI_Bcast(&x_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Bcast(&y_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // send the vectors to all ranks\n  std::vector<int> x_send(x.begin(), x.end());\n  std::vector<int> y_send(y.begin(), y.end());\n  MPI_Bcast(x_send.data(), x_len, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Bcast(y_send.data(), y_len, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // search for val in x and y\n  bool found = false;\n  for (int i = 0; i < x_len; i++) {\n    if (x_send[i] == val) {\n      found = true;\n      break;\n    }\n  }\n  for (int i = 0; i < y_len; i++) {\n    if (y_send[i] == val) {\n      found = true;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  bool found_all;\n  MPI_Reduce(&found, &found_all, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return found_all;\n}",True,True,6e-06,8,0.0,True,False,0.000551,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int x_size = x.size();\n    int y_size = y.size();\n\n    int x_start = 0;\n    int x_end = x_size;\n    int y_start = 0;\n    int y_end = y_size;\n\n    int x_size_per_rank = x_size / size;\n    int y_size_per_rank = y_size / size;\n\n    int x_start_per_rank = x_start + x_size_per_rank * rank;\n    int x_end_per_rank = x_start_per_rank + x_size_per_rank;\n    int y_start_per_rank = y_start + y_size_per_rank * rank;\n    int y_end_per_rank = y_start_per_rank + y_size_per_rank;\n\n    int x_size_per_rank_local = x_end_per_rank - x_start_per_rank;\n    int y_size_per_rank_local = y_end_per_rank - y_start_per_rank;\n\n    int x_start_local = x_start_per_rank;\n    int x_end_local = x_end_per_rank;\n    int y_start_local = y_start_per_rank;\n    int y_end_local = y_end_per_rank;\n\n    int x_size_local = x_end_local - x_start_local;\n    int y_size_local = y_end_local - y_start_local;\n\n    int x_local[x_size_local];\n    int y_local[y_size_local];\n\n    MPI_Scatter(x.data() + x_start_local, x_size_per_rank_local, MPI_INT, x_local, x_size_per_rank_local, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Scatter(y.data() + y_start_local, y_size_per_rank_local, MPI_INT, y_local, y_size_per_rank_local, MPI_INT, 0, MPI_COMM_WORLD);\n\n    bool result = false;\n\n    for (int i = 0; i < x_size_local; i++) {\n        for (int j = 0; j < y_size_local; j++) {\n            if (x_local[i] == val || y_local[j] == val) {\n                result = true;\n                break;\n            }\n        }\n    }\n\n    int result_local = result;\n    int result_global;\n\n    MPI_Reduce(&result_local, &result_global, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n    return result_global;\n}",True,True,,9,0.0,False,,,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements in x and y\n  int x_size = x.size();\n  int y_size = y.size();\n\n  // compute the number of elements in x and y that are less than val\n  int x_less_than_val = 0;\n  int y_less_than_val = 0;\n\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] < val) {\n      x_less_than_val++;\n    }\n  }\n\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] < val) {\n      y_less_than_val++;\n    }\n  }\n\n  // compute the number of elements in x and y that are greater than val\n  int x_greater_than_val = x_size - x_less_than_val;\n  int y_greater_than_val = y_size - y_less_than_val;\n\n  // compute the number of elements in x and y that are equal to val\n  int x_equal_to_val = 0;\n  int y_equal_to_val = 0;\n\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] == val) {\n      x_equal_to_val++;\n    }\n  }\n\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] == val) {\n      y_equal_to_val++;\n    }\n  }\n\n  // compute the number of elements in x and y that are less than val\n  int x_less_than_val_on_rank = 0;\n  int y_less_than_val_on_rank = 0;\n\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] < val && rank == 0) {\n      x_less_than_val_on_rank++;\n    }\n  }\n\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] < val && rank == 0) {\n      y_less_than_val_on_rank++;\n    }\n  }\n\n  // compute the number of elements in x and y that are greater than val\n  int x_greater_than_val_on_rank = x_size - x_less_than_val_on_rank;\n  int y_greater_than_val_on_rank = y_size - y_less_than_val_on_rank;\n\n  // compute the number of elements in x and y that are equal to val\n  int x_equal_to_val_on_rank = 0;\n  int y_equal_to_val_on_rank = 0;\n\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] == val && rank == 0) {\n      x_equal_to_val_on_rank++;\n    }\n  }\n\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] == val && rank == 0) {\n      y_equal_to_val_on_rank++;\n    }\n  }\n\n  // compute the number of elements in x and y that are less than val\n  int x_less_than_val_on_rank_minus_1 = 0;\n  int y_less_than_val_on_rank_minus_1 = 0;\n\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] < val && rank == size - 1) {\n      x_less_than_val_on_rank_minus_1++;\n    }\n  }\n\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] < val && rank == size - 1) {\n      y_less_than_val_on_rank_minus_1++;\n    }\n  }\n\n  // compute the number of elements in x and y that are greater than val\n  int x_greater_than_val_on_rank_minus_1 = x_size - x_less_than_val_on_rank_minus_1;\n  int y_greater_than_val_on_rank_minus_1 = y_size - y_less_than_val_on_rank_minus_1",False,True,,10,,,,,,
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // send the size of the vectors to all ranks\n  int xSize = x.size();\n  int ySize = y.size();\n  MPI_Bcast(&xSize, 1, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Bcast(&ySize, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // send the vectors to all ranks\n  std::vector<int> xLocal(xSize);\n  std::vector<int> yLocal(ySize);\n  MPI_Scatter(x.data(), xSize, MPI_INT, xLocal.data(), xSize, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Scatter(y.data(), ySize, MPI_INT, yLocal.data(), ySize, MPI_INT, 0, MPI_COMM_WORLD);\n\n  // search for val in xLocal and yLocal\n  bool found = false;\n  for (int i = 0; i < xSize; i++) {\n    if (xLocal[i] == val) {\n      found = true;\n      break;\n    }\n  }\n  for (int i = 0; i < ySize; i++) {\n    if (yLocal[i] == val) {\n      found = true;\n      break;\n    }\n  }\n\n  // gather the result from all ranks\n  bool foundGlobal;\n  MPI_Gather(&found, 1, MPI_C_BOOL, &foundGlobal, 1, MPI_C_BOOL, 0, MPI_COMM_WORLD);\n\n  return foundGlobal;\n}",True,True,6e-06,11,0.0,True,False,0.000725,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int size;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the length of the vectors\n  int x_len = x.size();\n  int y_len = y.size();\n\n  // get the length of the smaller vector\n  int min_len = std::min(x_len, y_len);\n\n  // get the length of the larger vector\n  int max_len = std::max(x_len, y_len);\n\n  // create a vector to store the result\n  std::vector<int> result(size, 0);\n\n  // get the number of elements in the smaller vector\n  int num_elements = min_len / size;\n\n  // get the number of elements in the larger vector\n  int num_elements_extra = max_len - num_elements * size;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank = num_elements + (rank < num_elements_extra);\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank = num_elements_extra + (rank >= num_elements_extra);\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_x = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_x = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_y = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_y = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_result = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_result = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_x_result = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_x_result = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_y_result = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_y_result = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_result_result = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_result_result = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_x_result_result = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_x_result_result = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_y_result_result = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_y_result_result = num_elements_extra_in_rank;\n\n  // get the number of elements in the smaller vector that are in the current rank\n  int num_elements_in_rank_result_result_result = num_elements_in_rank;\n\n  // get the number of elements in the larger vector that are in the current rank\n  int num_elements_extra_in_rank_result_result_result = num_elements_extra_in_rank;\n\n  // get the number",False,True,,12,,,,,,
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int x_size = x.size();\n    int y_size = y.size();\n\n    int x_start = x_size * rank / size;\n    int x_end = x_size * (rank + 1) / size;\n    int y_start = y_size * rank / size;\n    int y_end = y_size * (rank + 1) / size;\n\n    int x_local_size = x_end - x_start;\n    int y_local_size = y_end - y_start;\n\n    std::vector<int> x_local(x_local_size);\n    std::vector<int> y_local(y_local_size);\n\n    MPI_Scatter(&x[x_start], x_local_size, MPI_INT, &x_local[0], x_local_size, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Scatter(&y[y_start], y_local_size, MPI_INT, &y_local[0], y_local_size, MPI_INT, 0, MPI_COMM_WORLD);\n\n    bool result = false;\n    for (int i = 0; i < x_local_size; i++) {\n        if (x_local[i] == val) {\n            result = true;\n            break;\n        }\n    }\n    for (int i = 0; i < y_local_size; i++) {\n        if (y_local[i] == val) {\n            result = true;\n            break;\n        }\n    }\n\n    int result_local = result;\n    MPI_Reduce(&result_local, &result, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,True,6e-06,13,0.0,True,False,0.00076,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int x_size = x.size();\n  int y_size = y.size();\n\n  int x_local_size = x_size / size;\n  int y_local_size = y_size / size;\n\n  int x_local_start = x_local_size * rank;\n  int y_local_start = y_local_size * rank;\n\n  int x_local_end = x_local_start + x_local_size;\n  int y_local_end = y_local_start + y_local_size;\n\n  std::vector<int> x_local(x_local_end - x_local_start);\n  std::vector<int> y_local(y_local_end - y_local_start);\n\n  MPI_Scatter(&x[x_local_start], x_local_size, MPI_INT, &x_local[0], x_local_size, MPI_INT, 0, MPI_COMM_WORLD);\n  MPI_Scatter(&y[y_local_start], y_local_size, MPI_INT, &y_local[0], y_local_size, MPI_INT, 0, MPI_COMM_WORLD);\n\n  bool result = false;\n\n  for (int i = 0; i < x_local.size(); i++) {\n    if (x_local[i] == val) {\n      result = true;\n      break;\n    }\n  }\n\n  for (int i = 0; i < y_local.size(); i++) {\n    if (y_local[i] == val) {\n      result = true;\n      break;\n    }\n  }\n\n  int result_local = result;\n  int result_global;\n\n  MPI_Reduce(&result_local, &result_global, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result_global;\n}",True,True,6e-06,14,0.0,True,False,0.00058,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // compute the number of elements in x and y\n  int x_size = x.size();\n  int y_size = y.size();\n\n  // compute the number of elements in x and y that are less than val\n  int x_less = 0;\n  int y_less = 0;\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] < val) {\n      x_less++;\n    }\n  }\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] < val) {\n      y_less++;\n    }\n  }\n\n  // compute the number of elements in x and y that are greater than val\n  int x_greater = 0;\n  int y_greater = 0;\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] > val) {\n      x_greater++;\n    }\n  }\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] > val) {\n      y_greater++;\n    }\n  }\n\n  // compute the number of elements in x and y that are equal to val\n  int x_equal = 0;\n  int y_equal = 0;\n  for (int i = 0; i < x_size; i++) {\n    if (x[i] == val) {\n      x_equal++;\n    }\n  }\n  for (int i = 0; i < y_size; i++) {\n    if (y[i] == val) {\n      y_equal++;\n    }\n  }\n\n  // compute the number of elements in x and y that are not equal to val\n  int x_not_equal = x_size - x_equal;\n  int y_not_equal = y_size - y_equal;\n\n  // compute the number of elements in x and y that are greater than val\n  int x_greater_equal = x_size - x_less;\n  int y_greater_equal = y_size - y_less;\n\n  // compute the number of elements in x and y that are less than val\n  int x_less_equal = x_greater_equal - x_greater;\n  int y_less_equal = y_greater_equal - y_greater;\n\n  // compute the number of elements in x and y that are not less than val\n  int x_not_less = x_less_equal - x_less;\n  int y_not_less = y_less_equal - y_less;\n\n  // compute the number of elements in x and y that are not greater than val\n  int x_not_greater = x_greater - x_greater_equal;\n  int y_not_greater = y_greater - y_greater_equal;\n\n  // compute the number of elements in x and y that are not equal to val\n  int x_not_equal_equal = x_not_equal - x_equal;\n  int y_not_equal_equal = y_not_equal - y_equal;\n\n  // compute the number of elements in x and y that are not less than val\n  int x_not_less_less = x_not_less - x_less;\n  int y_not_less_less = y_not_less - y_less;\n\n  // compute the number of elements in x and y that are not greater than val\n  int x_not_greater_greater = x_not_greater - x_greater;\n  int y_not_greater_greater = y_not_greater - y_greater;\n\n  // compute the number of elements in x and y that are not equal to val\n  int x_not_equal_not_equal = x_not_equal_equal - x_equal;\n  int y_not_equal_not_equal = y_not_equal_equal - y_equal;\n\n  // compute the number of elements in x and y that are not less than val\n  int x_not_less_not_less = x_not_less_less - x_less;\n  int y_not_less_not_less = y_not_less_less - y_less;\n\n  // compute the number of elements in x and y that are not greater than val\n  int x_not_greater_not_greater = x_not_greater_greater - x_greater;\n  int y_not_greater_not_greater = y_not_greater_greater - y_greater;\n\n  // compute the",False,True,,15,,,,,,
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the input vectors into sub-vectors\n  std::vector<int> x_sub(x.begin() + rank, x.begin() + rank + size);\n  std::vector<int> y_sub(y.begin() + rank, y.begin() + rank + size);\n\n  // find the xor of the sub-vectors\n  std::vector<int> x_xor(x_sub.size());\n  std::vector<int> y_xor(y_sub.size());\n  std::transform(x_sub.begin(), x_sub.end(), y_sub.begin(), x_xor.begin(), std::bit_xor<int>());\n\n  // find the rank of the xor value\n  int x_xor_rank = std::distance(x_xor.begin(), std::find(x_xor.begin(), x_xor.end(), val));\n  int y_xor_rank = std::distance(y_xor.begin(), std::find(y_xor.begin(), y_xor.end(), val));\n\n  // return true if the xor value is in only one of the sub-vectors\n  return x_xor_rank!= y_xor_rank;\n}",True,True,6e-06,16,0.0,True,True,1e-06,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the input vectors into sub-vectors\n  std::vector<int> x_sub(x.begin() + rank, x.begin() + rank + size);\n  std::vector<int> y_sub(y.begin() + rank, y.begin() + rank + size);\n\n  // find the xor of the sub-vectors\n  std::vector<int> x_xor(x_sub.size());\n  std::vector<int> y_xor(y_sub.size());\n  std::transform(x_sub.begin(), x_sub.end(), y_sub.begin(), x_xor.begin(), std::bit_xor<int>());\n\n  // find the rank of the xor value\n  int x_xor_rank = std::distance(x_xor.begin(), std::find(x_xor.begin(), x_xor.end(), val));\n  int y_xor_rank = std::distance(y_xor.begin(), std::find(y_xor.begin(), y_xor.end(), val));\n\n  // return true if the xor value is in only one of the sub-vectors\n  return x_xor_rank!= y_xor_rank;\n}",True,True,6e-06,16,1.0,True,True,1e-06,,2.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the input vectors into sub-vectors\n  std::vector<int> x_sub(x.begin() + rank, x.begin() + rank + size);\n  std::vector<int> y_sub(y.begin() + rank, y.begin() + rank + size);\n\n  // find the xor of the sub-vectors\n  std::vector<int> x_xor(x_sub.size());\n  std::vector<int> y_xor(y_sub.size());\n  std::transform(x_sub.begin(), x_sub.end(), y_sub.begin(), x_xor.begin(), std::bit_xor<int>());\n\n  // find the rank of the xor value\n  int x_xor_rank = std::distance(x_xor.begin(), std::find(x_xor.begin(), x_xor.end(), val));\n  int y_xor_rank = std::distance(y_xor.begin(), std::find(y_xor.begin(), y_xor.end(), val));\n\n  // return true if the xor value is in only one of the sub-vectors\n  return x_xor_rank!= y_xor_rank;\n}",True,True,6e-06,16,2.0,True,False,1e-06,,4.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int x_size = x.size();\n  int y_size = y.size();\n\n  int x_start = x_size * rank / size;\n  int x_end = x_size * (rank + 1) / size;\n\n  int y_start = y_size * rank / size;\n  int y_end = y_size * (rank + 1) / size;\n\n  bool found = false;\n  for (int i = x_start; i < x_end; i++) {\n    if (x[i] == val) {\n      found = true;\n      break;\n    }\n  }\n  for (int i = y_start; i < y_end; i++) {\n    if (y[i] == val) {\n      found = true;\n      break;\n    }\n  }\n\n  int found_int = found? 1 : 0;\n  int result;\n  MPI_Reduce(&found_int, &result, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n  return result == 1;\n}",True,True,6e-06,17,0.0,True,False,1.8e-05,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int x_size = x.size();\n  int y_size = y.size();\n\n  int x_start = x_size / size * rank;\n  int x_end = x_size / size * (rank + 1);\n  int y_start = y_size / size * rank;\n  int y_end = y_size / size * (rank + 1);\n\n  std::vector<int> x_local(x.begin() + x_start, x.begin() + x_end);\n  std::vector<int> y_local(y.begin() + y_start, y.begin() + y_end);\n\n  std::vector<int> x_local_xor(x_local.size());\n  std::vector<int> y_local_xor(y_local.size());\n\n  for (int i = 0; i < x_local.size(); i++) {\n    x_local_xor[i] = x_local[i] ^ val;\n  }\n\n  for (int i = 0; i < y_local.size(); i++) {\n    y_local_xor[i] = y_local[i] ^ val;\n  }\n\n  std::vector<int> x_local_xor_all(x_local_xor.size());\n  std::vector<int> y_local_xor_all(y_local_xor.size());\n\n  MPI_Allreduce(x_local_xor.data(), x_local_xor_all.data(), x_local_xor.size(), MPI_INT, MPI_BOR, MPI_COMM_WORLD);\n  MPI_Allreduce(y_local_xor.data(), y_local_xor_all.data(), y_local_xor.size(), MPI_INT, MPI_BOR, MPI_COMM_WORLD);\n\n  for (int i = 0; i < x_local_xor_all.size(); i++) {\n    if (x_local_xor_all[i] == 0) {\n      return true;\n    }\n  }\n\n  for (int i = 0; i < y_local_xor_all.size(); i++) {\n    if (y_local_xor_all[i] == 0) {\n      return true;\n    }\n  }\n\n  return false;\n}",True,True,6e-06,18,0.0,True,False,0.002065,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,0.0,True,True,0.000554,,1.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,1.0,True,True,0.000303,,2.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,2.0,True,True,0.000293,,4.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,3.0,True,True,0.000754,,8.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,4.0,True,True,0.000188,,16.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,5.0,True,True,0.000373,,32.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,6.0,True,True,5.5e-05,,64.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,7.0,True,True,0.000278,,128.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,8.0,True,True,8.8e-05,,256.0
"#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the vectors into equal chunks\n  int chunkSize = x.size() / size;\n  std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n  std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n  // search for the value in the chunks\n  bool in_x = std::find(x_chunk.begin(), x_chunk.end(), val)!= x_chunk.end();\n  bool in_y = std::find(y_chunk.begin(), y_chunk.end(), val)!= y_chunk.end();\n\n  // reduce the results to rank 0\n  int in_x_int = in_x;\n  int in_y_int = in_y;\n  MPI_Reduce(&in_x_int, &in_x, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&in_y_int, &in_y, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  // return the result\n  return in_x!= in_y;\n}",True,True,6e-06,19,9.0,True,True,2.5e-05,,512.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // get the size of the vectors\n    int x_size = x.size();\n    int y_size = y.size();\n\n    // get the number of elements in each vector\n    int x_elements = x_size / size;\n    int y_elements = y_size / size;\n\n    // get the number of elements in the last vector\n    int x_last_elements = x_size - x_elements * (size - 1);\n    int y_last_elements = y_size - y_elements * (size - 1);\n\n    // get the start and end index of the current rank\n    int x_start = rank * x_elements;\n    int x_end = x_start + x_elements;\n    int y_start = rank * y_elements;\n    int y_end = y_start + y_elements;\n\n    // get the last rank\n    int last_rank = size - 1;\n\n    // get the start and end index of the last rank\n    int x_last_start = last_rank * x_elements;\n    int x_last_end = x_last_start + x_last_elements;\n    int y_last_start = last_rank * y_elements;\n    int y_last_end = y_last_start + y_last_elements;\n\n    // get the result of the current rank\n    bool result = false;\n    if (rank == last_rank) {\n        result = xorContains(x.begin() + x_last_start, x.begin() + x_last_end, y.begin() + y_last_start, y.begin() + y_last_end, val);\n    } else {\n        result = xorContains(x.begin() + x_start, x.begin() + x_end, y.begin() + y_start, y.begin() + y_end, val);\n    }\n\n    // get the result of all ranks\n    bool result_all;\n    MPI_Allreduce(&result, &result_all, 1, MPI_C_BOOL, MPI_LOR, MPI_COMM_WORLD);\n\n    return result_all;\n}",False,False,,0,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the data into chunks\n  int chunkSize = x.size() / size;\n  int remainder = x.size() % size;\n  int start = rank * (chunkSize + (rank < remainder? 1 : 0));\n  int end = start + chunkSize + (rank < remainder? 1 : 0);\n\n  // get the chunk\n  std::vector<int> chunk(x.begin() + start, x.begin() + end);\n\n  // search in parallel\n  bool found = false;\n  #pragma omp parallel for\n  for (int i = 0; i < chunk.size(); i++) {\n    if (chunk[i] == val) {\n      found = true;\n      break;\n    }\n  }\n\n  // reduce the result\n  bool result;\n  MPI_Reduce(&found, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n  return result;\n}",False,True,,1,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements in x and y\n  int n_x = x.size();\n  int n_y = y.size();\n\n  // get the number of elements in x and y that are less than or equal to val\n  int n_x_less_than_or_equal_to_val = 0;\n  int n_y_less_than_or_equal_to_val = 0;\n\n  #pragma omp parallel for reduction(+:n_x_less_than_or_equal_to_val)\n  for (int i = 0; i < n_x; i++) {\n    if (x[i] <= val) {\n      n_x_less_than_or_equal_to_val++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:n_y_less_than_or_equal_to_val)\n  for (int i = 0; i < n_y; i++) {\n    if (y[i] <= val) {\n      n_y_less_than_or_equal_to_val++;\n    }\n  }\n\n  // get the number of elements in x and y that are greater than val\n  int n_x_greater_than_val = n_x - n_x_less_than_or_equal_to_val;\n  int n_y_greater_than_val = n_y - n_y_less_than_or_equal_to_val;\n\n  // get the number of elements in x and y that are equal to val\n  int n_x_equal_to_val = 0;\n  int n_y_equal_to_val = 0;\n\n  #pragma omp parallel for reduction(+:n_x_equal_to_val)\n  for (int i = 0; i < n_x; i++) {\n    if (x[i] == val) {\n      n_x_equal_to_val++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+:n_y_equal_to_val)\n  for (int i = 0; i < n_y; i++) {\n    if (y[i] == val) {\n      n_y_equal_to_val++;\n    }\n  }\n\n  // get the number of elements in x and y that are less than val\n  int n_x_less_than_val = n_x_less_than_or_equal_to_val - n_x_equal_to_val;\n  int n_y_less_than_val = n_y_less_than_or_equal_to_val - n_y_equal_to_val;\n\n  // get the number of elements in x and y that are greater than or equal to val\n  int n_x_greater_than_or_equal_to_val = n_x - n_x_less_than_val;\n  int n_y_greater_than_or_equal_to_val = n_y - n_y_less_than_val;\n\n  // get the number of elements in x and y that are not equal to val\n  int n_x_not_equal_to_val = n_x_equal_to_val - n_x_less_than_val;\n  int n_y_not_equal_to_val = n_y_equal_to_val - n_y_less_than_val;\n\n  // get the number of elements in x and y that are not less than val\n  int n_x_not_less_than_val = n_x_less_than_or_equal_to_val - n_x_equal_to_val;\n  int n_y_not_less_than_val = n_y_less_than_or_equal_to_val - n_y_equal_to_val;\n\n  // get the number of elements in x and y that are not greater than val\n  int n_x_not_greater_than_val = n_x_greater_than_or_equal_to_val - n_x_equal_to_val;\n  int n_y_not_greater_than_val = n_y_greater_than_or_equal_to_val - n_y_equal_to_val;\n\n  // get the number of elements in x and y that are not less than or equal to val\n  int n_x_not_less_than_or_equal_to_",False,True,,2,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_xor = 0;\n  for (int i = 0; i < x.size(); i++) {\n    local_xor ^= x[i];\n  }\n  for (int i = 0; i < y.size(); i++) {\n    local_xor ^= y[i];\n  }\n\n  int global_xor = 0;\n  MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (global_xor & val)!= 0;\n  } else {\n    return false;\n  }\n}",True,False,6e-06,3,0.0,True,False,0.000168,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,0.0,True,True,0.000617,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,1.0,True,True,0.000658,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,2.0,True,True,0.000582,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,3.0,True,True,0.000632,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,4.0,True,True,0.000787,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,5.0,True,True,0.000932,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,6.0,True,True,0.001161,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,7.0,True,True,0.00031,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,8.0,True,True,0.000331,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,9.0,True,True,0.000325,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,10.0,True,True,0.000359,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,11.0,True,True,0.000456,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,12.0,True,True,0.000543,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,13.0,True,True,0.000673,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,14.0,True,True,0.003833,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,15.0,True,True,0.000328,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,16.0,True,True,0.000348,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,17.0,True,True,0.008661,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,18.0,True,True,0.070462,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,19.0,True,True,0.149833,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n  int m = y.size();\n\n  int rank;\n  int size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n_local = n / size;\n  int m_local = m / size;\n\n  int start = n_local * rank;\n  int end = start + n_local;\n\n  std::vector<int> x_local(x.begin() + start, x.begin() + end);\n  std::vector<int> y_local(y.begin() + start, y.begin() + end);\n\n  int n_local_xor = 0;\n  int m_local_xor = 0;\n\n  #pragma omp parallel for reduction(+: n_local_xor)\n  for (int i = 0; i < n_local; i++) {\n    if (x_local[i] == val) {\n      n_local_xor++;\n    }\n  }\n\n  #pragma omp parallel for reduction(+: m_local_xor)\n  for (int i = 0; i < m_local; i++) {\n    if (y_local[i] == val) {\n      m_local_xor++;\n    }\n  }\n\n  int n_xor = 0;\n  int m_xor = 0;\n  MPI_Reduce(&n_local_xor, &n_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&m_local_xor, &m_xor, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (n_xor == 1) ^ (m_xor == 1);\n  } else {\n    return false;\n  }\n}",True,True,7e-06,4,20.0,True,True,0.030533,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,int n = x.size();\n    int m = y.size();\n    int nthreads = omp_get_max_threads();\n    int nprocs = 0;\n    int rank = 0;\n    int nperproc = 0;\n    int nleft = 0;\n    int nright = 0;\n    int nfound = 0;\n    int nfound_local = 0;\n    int nfound_global = 0;\n    int nfound_global_final = 0;\n    int nfound_local_final = 0;\n    int nfound_local_final_all = 0;\n    int nfound_global_final_all = 0;\n    int nfound_global_final_all_final = 0;\n    int nfound_local_final_all_final = 0;\n    int nfound_local_final_all_final_all = 0;\n    int nfound_global_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all_final_all_final_all_final_all = 0;\n    int nfound_global_final_all_final_all_final_all_final_all_final_all_final_all_final_all_final_all_final = 0;\n    int nfound_local_final_all_final_all_final_all_,False,False,,5,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int n = x.size();\n  int m = y.size();\n\n  int local_xor = 0;\n  for (int i = 0; i < n; i++) {\n    local_xor ^= x[i];\n  }\n  for (int i = 0; i < m; i++) {\n    local_xor ^= y[i];\n  }\n\n  int global_xor = 0;\n  MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (global_xor & val)!= 0;\n  } else {\n    return false;\n  }\n}",True,False,7e-06,6,0.0,True,False,0.000169,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n    int m = y.size();\n    int rank;\n    int nprocs;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &nprocs);\n    int chunk = n / nprocs;\n    int start = rank * chunk;\n    int end = start + chunk;\n    if (rank == nprocs - 1) {\n        end = n;\n    }\n    std::vector<int> local_x(x.begin() + start, x.begin() + end);\n    std::vector<int> local_y(y.begin() + start, y.begin() + end);\n    int local_xor = 0;\n    #pragma omp parallel for reduction(|:local_xor)\n    for (int i = 0; i < local_x.size(); i++) {\n        local_xor |= local_x[i] ^ local_y[i];\n    }\n    int global_xor = 0;\n    MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n    return (global_xor & val)!= 0;\n}",True,True,7e-06,7,0.0,True,False,0.000638,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_xor = 0;\n    #pragma omp parallel for reduction(|:local_xor)\n    for (int i = 0; i < x.size(); i++) {\n        local_xor |= (x[i] == val) ^ (y[i] == val);\n    }\n\n    int global_xor = 0;\n    MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n\n    return global_xor;\n}",True,True,6e-06,8,0.0,True,False,5.1e-05,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // get the size of the smaller vector\n    int x_size = x.size();\n    int y_size = y.size();\n    int min_size = x_size < y_size? x_size : y_size;\n\n    // get the size of the larger vector\n    int max_size = x_size > y_size? x_size : y_size;\n\n    // get the number of elements that are in the smaller vector\n    int num_in_x = 0;\n    int num_in_y = 0;\n    #pragma omp parallel for reduction(+:num_in_x)\n    for (int i = 0; i < min_size; i++) {\n        if (x[i] == val) {\n            num_in_x++;\n        }\n        if (y[i] == val) {\n            num_in_y++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_max = 0;\n    #pragma omp parallel for reduction(+:num_in_max)\n    for (int i = min_size; i < max_size; i++) {\n        if (x[i] == val) {\n            num_in_max++;\n        }\n        if (y[i] == val) {\n            num_in_max++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_min = 0;\n    #pragma omp parallel for reduction(+:num_in_min)\n    for (int i = min_size; i < max_size; i++) {\n        if (x[i] == val) {\n            num_in_min++;\n        }\n        if (y[i] == val) {\n            num_in_min++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_both = 0;\n    #pragma omp parallel for reduction(+:num_in_both)\n    for (int i = min_size; i < max_size; i++) {\n        if (x[i] == val) {\n            num_in_both++;\n        }\n        if (y[i] == val) {\n            num_in_both++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_neither = 0;\n    #pragma omp parallel for reduction(+:num_in_neither)\n    for (int i = min_size; i < max_size; i++) {\n        if (x[i] == val) {\n            num_in_neither++;\n        }\n        if (y[i] == val) {\n            num_in_neither++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_one = 0;\n    #pragma omp parallel for reduction(+:num_in_one)\n    for (int i = min_size; i < max_size; i++) {\n        if (x[i] == val) {\n            num_in_one++;\n        }\n        if (y[i] == val) {\n            num_in_one++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_both_or_neither = 0;\n    #pragma omp parallel for reduction(+:num_in_both_or_neither)\n    for (int i = min_size; i < max_size; i++) {\n        if (x[i] == val) {\n            num_in_both_or_neither++;\n        }\n        if (y[i] == val) {\n            num_in_both_or_neither++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_both_or_one = 0;\n    #pragma omp parallel for reduction(+:num_in_both_or_one)\n    for (int i = min_size; i < max_size; i++) {\n        if (x[i] == val) {\n            num_in_both_or_one++;\n        }\n        if (y[i] == val) {\n            num_in_both_or_one++;\n        }\n    }\n\n    // get the number of elements that are in the larger vector\n    int num_in_one_or_neither = 0;\n    #pragma omp parallel for reduction(+:num_in_one_or_neither)\n    for (int i",False,True,,9,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int x_size = x.size();\n  int y_size = y.size();\n\n  int x_start = x_size * rank / size;\n  int x_end = x_size * (rank + 1) / size;\n  int y_start = y_size * rank / size;\n  int y_end = y_size * (rank + 1) / size;\n\n  int x_local_size = x_end - x_start;\n  int y_local_size = y_end - y_start;\n\n  std::vector<int> x_local(x_local_size);\n  std::vector<int> y_local(y_local_size);\n\n  std::copy(x.begin() + x_start, x.begin() + x_end, x_local.begin());\n  std::copy(y.begin() + y_start, y.begin() + y_end, y_local.begin());\n\n  bool result = false;\n  #pragma omp parallel for\n  for (int i = 0; i < x_local_size; i++) {\n    if (x_local[i] == val) {\n      result = true;\n      break;\n    }\n  }\n\n  #pragma omp parallel for\n  for (int i = 0; i < y_local_size; i++) {\n    if (y_local[i] == val) {\n      result = true;\n      break;\n    }\n  }\n\n  int result_local = result;\n  MPI_Reduce(&result_local, &result, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result;\n}",False,True,,10,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // number of elements in x and y\n  int n_x = x.size();\n  int n_y = y.size();\n\n  // number of elements in x and y that are less than val\n  int n_less_x = 0;\n  int n_less_y = 0;\n\n  // number of elements in x and y that are greater than val\n  int n_greater_x = 0;\n  int n_greater_y = 0;\n\n  // number of elements in x and y that are equal to val\n  int n_equal_x = 0;\n  int n_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not less than val\n  int n_not_less_x = 0;\n  int n_not_less_y = 0;\n\n  // number of elements in x and y that are not greater than val\n  int n_not_greater_x = 0;\n  int n_not_greater_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;\n  int n_not_equal_y = 0;\n\n  // number of elements in x and y that are not equal to val\n  int n_not_equal_x = 0;",False,False,,11,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int local_xor = 0;\n    #pragma omp parallel for reduction(|:local_xor)\n    for (int i = 0; i < x.size(); i++) {\n        local_xor |= (x[i] == val) ^ (y[i] == val);\n    }\n\n    int global_xor = 0;\n    MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n\n    return global_xor;\n}",True,True,6e-06,12,0.0,True,False,5e-05,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_xor = 0;\n  for (int i = 0; i < x.size(); i++) {\n    local_xor ^= x[i];\n  }\n  for (int i = 0; i < y.size(); i++) {\n    local_xor ^= y[i];\n  }\n\n  int global_xor = 0;\n  MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return global_xor & val;\n  } else {\n    return false;\n  }\n}",True,False,6e-06,13,0.0,True,False,0.000168,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  int local_xor = 0;\n  for (int i = 0; i < x.size(); i++) {\n    local_xor ^= x[i];\n  }\n  for (int i = 0; i < y.size(); i++) {\n    local_xor ^= y[i];\n  }\n\n  int global_xor = 0;\n  MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n\n  if (rank == 0) {\n    return (global_xor & val)!= 0;\n  } else {\n    return false;\n  }\n}",True,False,6e-06,14,0.0,True,False,0.000168,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,int n = x.size();\n  int m = y.size();\n  int nthreads = omp_get_max_threads();\n  int nprocs = 0;\n  int rank = 0;\n  int nperproc = 0;\n  int nperthread = 0;\n  int nperproc_x = 0;\n  int nperproc_y = 0;\n  int nperthread_x = 0;\n  int nperthread_y = 0;\n  int nperproc_x_start = 0;\n  int nperproc_y_start = 0;\n  int nperthread_x_start = 0;\n  int nperthread_y_start = 0;\n  int nperproc_x_end = 0;\n  int nperproc_y_end = 0;\n  int nperthread_x_end = 0;\n  int nperthread_y_end = 0;\n  int nperproc_x_offset = 0;\n  int nperproc_y_offset = 0;\n  int nperthread_x_offset = 0;\n  int nperthread_y_offset = 0;\n  int nperproc_x_local = 0;\n  int nperproc_y_local = 0;\n  int nperthread_x_local = 0;\n  int nperthread_y_local = 0;\n  int nperproc_x_local_start = 0;\n  int nperproc_y_local_start = 0;\n  int nperthread_x_local_start = 0;\n  int nperthread_y_local_start = 0;\n  int nperproc_x_local_end = 0;\n  int nperproc_y_local_end = 0;\n  int nperthread_x_local_end = 0;\n  int nperthread_y_local_end = 0;\n  int nperproc_x_local_offset = 0;\n  int nperproc_y_local_offset = 0;\n  int nperthread_x_local_offset = 0;\n  int nperthread_y_local_offset = 0;\n  int nperproc_x_local_index = 0;\n  int nperproc_y_local_index = 0;\n  int nperthread_x_local_index = 0;\n  int nperthread_y_local_index = 0;\n  int nperproc_x_local_index_start = 0;\n  int nperproc_y_local_index_start = 0;\n  int nperthread_x_local_index_start = 0;\n  int nperthread_y_local_index_start = 0;\n  int nperproc_x_local_index_end = 0;\n  int nperproc_y_local_index_end = 0;\n  int nperthread_x_local_index_end = 0;\n  int nperthread_y_local_index_end = 0;\n  int nperproc_x_local_index_offset = 0;\n  int nperproc_y_local_index_offset = 0;\n  int nperthread_x_local_index_offset = 0;\n  int nperthread_y_local_index_offset = 0;\n  int nperproc_x_local_index_start_offset = 0;\n  int nperproc_y_local_index_start_offset = 0;\n  int nperthread_x_local_index_start_offset = 0;\n  int nperthread_y_local_index_start_offset = 0;\n  int nperproc_x_local_index_end_offset = 0;\n  int nperproc_y_local_index_end_offset = 0;\n  int nperthread_x_local_index_end_offset = 0;\n  int nperthread_y_local_index_end_offset = 0;\n  int nperproc_x_local_index_offset_offset = 0;\n  int nperproc_y_local_index_offset_offset = 0;\n  int nperthread_x_local_index_offset_offset = 0;\n  int nperthread_y_local_index_offset_offset = 0;\n  int nperproc_x_local_index_start_offset_offset = 0;\n  int nperproc_y_local_index_start_offset_offset,False,False,,15,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // split the input vectors into `size` chunks\n  int chunkSize = x.size() / size;\n  int remainder = x.size() % size;\n\n  // get the start and end indices of the chunk\n  int start = rank * chunkSize;\n  int end = start + chunkSize;\n\n  // add the remainder to the end index\n  if (rank < remainder) {\n    end++;\n  }\n\n  // get the chunk of x and y\n  std::vector<int> chunkX(x.begin() + start, x.begin() + end);\n  std::vector<int> chunkY(y.begin() + start, y.begin() + end);\n\n  // get the result of the xor operation\n  bool result = false;\n  #pragma omp parallel for reduction(|:result)\n  for (int i = 0; i < chunkX.size(); i++) {\n    result |= (chunkX[i] == val) ^ (chunkY[i] == val);\n  }\n\n  // get the result from rank 0\n  int result_int = 0;\n  MPI_Reduce(&result, &result_int, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n  return result_int;\n}",True,True,6e-06,16,0.0,True,False,0.000813,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n    int m = y.size();\n    int nprocs, rank;\n    MPI_Comm_size(MPI_COMM_WORLD, &nprocs);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    int chunk = n / nprocs;\n    int start = rank * chunk;\n    int end = start + chunk;\n    if (rank == nprocs - 1) {\n        end = n;\n    }\n    int local_xor = 0;\n    for (int i = start; i < end; i++) {\n        local_xor ^= x[i];\n    }\n    for (int i = 0; i < m; i++) {\n        local_xor ^= y[i];\n    }\n    int global_xor = 0;\n    MPI_Reduce(&local_xor, &global_xor, 1, MPI_INT, MPI_BOR, 0, MPI_COMM_WORLD);\n    return global_xor & val;\n}",True,False,6e-06,17,0.0,True,False,0.000169,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int n = x.size();\n    int m = y.size();\n    int rank;\n    int size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    int local_xor = 0;\n    int local_xor_count = 0;\n    int local_xor_count_total = 0;\n    int local_xor_count_total_all = 0;\n    int local_xor_count_total_all_all = 0;\n    int local_xor_count_total_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all_all = 0;\n    int local_xor_count_total_all_all_all_all_all_all_all",False,False,,18,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",39_search_xor_contains,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // split the input vectors into chunks\n    int chunkSize = x.size() / size;\n    std::vector<int> x_chunk(x.begin() + rank * chunkSize, x.begin() + (rank + 1) * chunkSize);\n    std::vector<int> y_chunk(y.begin() + rank * chunkSize, y.begin() + (rank + 1) * chunkSize);\n\n    // search for val in x_chunk and y_chunk in parallel\n    bool found = false;\n    #pragma omp parallel for\n    for (int i = 0; i < x_chunk.size(); i++) {\n        if (x_chunk[i] == val || y_chunk[i] == val) {\n            found = true;\n        }\n    }\n\n    // gather the results from all ranks\n    bool result;\n    MPI_Reduce(&found, &result, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n    return result;\n}",True,True,6e-06,19,0.0,True,False,0.000761,1.0,1.0
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& result) {\n      if (books(i).pages < 100) {\n         result = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.00042,0,0.0,True,True,0.001629,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& result) {\n      if (books(i).pages < 100) {\n         result = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.00042,0,1.0,True,True,0.000818,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& result) {\n      if (books(i).pages < 100) {\n         result = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.00042,0,2.0,True,True,0.000413,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& result) {\n      if (books(i).pages < 100) {\n         result = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.00042,0,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& result) {\n      if (books(i).pages < 100) {\n         result = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.00042,0,4.0,True,True,0.000107,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& result) {\n      if (books(i).pages < 100) {\n         result = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.00042,0,5.0,True,True,0.000436,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& result) {\n      if (books(i).pages < 100) {\n         result = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.00042,0,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"auto last_short_book = Kokkos::View<size_t>(""last_short_book"", 1);\n   Kokkos::parallel_for(""find_last_short_book"", 0, books.extent(0), [&books, &last_short_book](size_t i) {\n      if (books(i).pages < 100) {\n         last_short_book() = i;\n      }\n   });\n   return last_short_book();\n}",False,True,,1,,,,,,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"auto last = Kokkos::View<size_t>(""last"", 1);\n   Kokkos::parallel_for(""findLastShortBook"", 0, books.extent(0), KOKKOS_LAMBDA(const size_t i) {\n      if (books(i).pages < 100) {\n         last() = i;\n      }\n   });\n   Kokkos::fence();\n   return last();\n}",False,True,,2,,,,,,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.00037,3,0.0,True,True,0.001724,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.00037,3,1.0,True,True,0.000855,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.00037,3,2.0,True,True,0.000429,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.00037,3,3.0,True,True,0.000217,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.00037,3,4.0,True,True,0.000111,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.00037,3,5.0,True,True,0.000443,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.00037,3,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000371,4,0.0,True,True,0.001707,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000371,4,1.0,True,True,0.000854,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000371,4,2.0,True,True,0.000431,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000371,4,3.0,True,True,0.000218,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000371,4,4.0,True,True,0.000111,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000371,4,5.0,True,True,0.000426,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.size(), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000371,4,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n   return 0;\n},True,True,0.000483,5,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n   return 0;\n},True,True,0.000484,6,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n   return 0;\n},True,True,0.000484,7,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000419,8,0.0,True,True,0.001632,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000419,8,1.0,True,True,0.000818,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000419,8,2.0,True,True,0.000411,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000419,8,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000419,8,4.0,True,True,0.000107,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000419,8,5.0,True,True,0.000443,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000419,8,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,9,0.0,True,True,0.00163,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,9,1.0,True,True,0.00082,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,9,2.0,True,True,0.00041,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,9,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,9,4.0,True,True,0.000127,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,9,5.0,True,True,0.000475,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,9,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,10,0.0,True,True,0.001632,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,10,1.0,True,True,0.000818,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,10,2.0,True,True,0.000411,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,10,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,10,4.0,True,True,0.000107,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,10,5.0,True,True,0.009891,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,10,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n   return 0;\n},True,True,0.000484,11,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,12,0.0,True,True,0.00163,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,12,1.0,True,True,0.00082,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,12,2.0,True,True,0.000412,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,12,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,12,4.0,True,True,0.000107,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,12,5.0,True,True,0.000413,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,12,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000423,13,0.0,True,True,0.001649,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000423,13,1.0,True,True,0.000817,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000423,13,2.0,True,True,0.000411,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000423,13,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000423,13,4.0,True,True,0.000108,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000423,13,5.0,True,True,0.012433,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(const size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000423,13,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n   return 0;\n},True,True,0.000484,14,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,15,0.0,True,True,0.001632,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,15,1.0,True,True,0.000847,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,15,2.0,True,True,0.000413,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,15,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,15,4.0,True,True,0.000108,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,15,5.0,True,True,0.009645,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,15,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,16,0.0,True,True,0.001632,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,16,1.0,True,True,0.000817,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,16,2.0,True,True,0.000411,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,16,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,16,4.0,True,True,0.000108,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,16,5.0,True,True,0.001214,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t result = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& max_i) {\n      if (books(i).pages < 100) {\n         max_i = i;\n      }\n   }, Kokkos::Max<size_t>(result));\n   return result;\n}",True,True,0.000422,16,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n   return 0;\n},True,True,0.000483,17,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n   return 0;\n},True,True,0.000484,18,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,19,0.0,True,True,0.001638,1.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,19,1.0,True,True,0.000817,2.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,19,2.0,True,True,0.000411,4.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,19,3.0,True,True,0.000208,8.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,19,4.0,True,True,0.000107,16.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,19,5.0,True,True,0.000553,32.0,
"#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,kokkos,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   Kokkos::parallel_reduce(books.extent(0), KOKKOS_LAMBDA(size_t i, size_t& last_short_book) {\n      if (books(i).pages < 100) {\n         last_short_book = i;\n      }\n   }, Kokkos::Max<size_t>(last_short_book));\n   return last_short_book;\n}",True,True,0.000421,19,6.0,False,,,64.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBook = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   return lastShortBook;\n},True,True,0.000164,0,0.0,True,True,0.000214,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBook = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   return lastShortBook;\n},True,True,0.000164,0,1.0,True,True,0.000207,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBook = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   return lastShortBook;\n},True,True,0.000164,0,2.0,True,False,0.000209,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,1,0.0,True,True,0.000216,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,1,1.0,True,True,0.000198,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,1,2.0,True,False,0.000208,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,2,0.0,True,True,0.000223,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,2,1.0,True,True,0.000199,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,2,2.0,True,False,0.000208,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,3,0.0,True,True,0.000208,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,3,1.0,True,True,0.000199,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,3,2.0,True,False,0.000211,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,4,0.0,True,True,0.00021,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,4,1.0,True,True,0.000199,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,4,2.0,True,False,0.000202,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,5,0.0,True,True,0.000217,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,5,1.0,True,True,0.000211,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,5,2.0,True,False,0.000211,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,6,0.0,True,True,0.000212,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,6,1.0,True,True,0.000211,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,6,2.0,True,False,0.000206,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,7,0.0,True,True,0.000202,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,7,1.0,True,True,0.000207,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,7,2.0,True,False,0.000212,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBookIndex = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBookIndex = i;\n      }\n   }\n   return lastShortBookIndex;\n},True,True,0.000164,8,0.0,True,True,0.000213,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBookIndex = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBookIndex = i;\n      }\n   }\n   return lastShortBookIndex;\n},True,True,0.000164,8,1.0,True,True,0.000206,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBookIndex = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBookIndex = i;\n      }\n   }\n   return lastShortBookIndex;\n},True,True,0.000164,8,2.0,True,False,0.000204,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for reduction(max:result)\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,9,0.0,True,True,0.000197,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for reduction(max:result)\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,9,1.0,True,True,0.000197,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for reduction(max:result)\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,9,2.0,True,True,0.000207,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for reduction(max:result)\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,9,3.0,True,True,0.00021,8.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for reduction(max:result)\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,9,4.0,True,True,0.000277,16.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for reduction(max:result)\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,9,5.0,True,True,0.000424,32.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for reduction(max:result)\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,9,6.0,True,True,0.000559,64.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBook = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   return lastShortBook;\n},True,True,0.000164,10,0.0,True,True,0.000218,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBook = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   return lastShortBook;\n},True,True,0.000164,10,1.0,True,True,0.000212,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t lastShortBook = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   return lastShortBook;\n},True,True,0.000164,10,2.0,True,False,0.000209,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,11,0.0,True,True,0.000231,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,11,1.0,True,True,0.000202,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t result = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n   return result;\n},True,True,0.000164,11,2.0,True,False,0.000209,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,12,0.0,True,True,0.000209,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,12,1.0,True,True,0.000196,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,12,2.0,True,False,0.000206,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,13,0.0,True,True,0.000255,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,13,1.0,True,True,0.0002,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,13,2.0,True,False,0.00021,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,14,0.0,True,True,0.000213,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,14,1.0,True,True,0.000198,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,14,2.0,True,False,0.000206,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,15,0.0,True,True,0.000209,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,15,1.0,True,True,0.000202,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,15,2.0,True,False,0.000211,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,16,0.0,True,True,0.000207,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,16,1.0,True,True,0.000198,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,16,2.0,True,False,0.000208,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000165,17,0.0,True,True,0.000202,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000165,17,1.0,True,True,0.000201,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000165,17,2.0,True,False,0.000208,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,18,0.0,True,True,0.00021,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,18,1.0,True,True,0.000204,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000164,18,2.0,True,False,0.00021,4.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,19,0.0,True,True,0.000215,1.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,19,1.0,True,True,0.000203,2.0,
"#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,omp,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   #pragma omp parallel for\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000164,19,2.0,True,False,0.000205,4.0,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,0,0.0,True,True,0.000204,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book = books.size() - 1;\n   while (last_short_book > 0 && books[last_short_book].pages >= 100) {\n      --last_short_book;\n   }\n   return last_short_book;\n},True,True,0.000165,1,0.0,True,True,0.000168,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,"auto it = std::find_if(books.rbegin(), books.rend(), [](Book const& book) { return book.pages < 100; });\n   return std::distance(books.rbegin(), it);\n}",True,True,0.000165,2,0.0,True,False,0.000167,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,"auto it = std::find_if(books.rbegin(), books.rend(), [](Book const& b) { return b.pages < 100; });\n   return std::distance(books.rbegin(), it);\n}",True,True,0.000168,3,0.0,True,False,0.000164,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,4,0.0,True,True,0.000204,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000166,5,0.0,True,True,0.00022,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,6,0.0,True,True,0.000208,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n   return 0;\n},True,True,0.000164,7,0.0,True,True,0.000171,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,8,0.0,True,True,0.000208,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000165,9,0.0,True,True,0.000211,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t index = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         index = i;\n      }\n   }\n   return index;\n},True,True,0.000164,10,0.0,True,True,0.000208,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,11,0.0,True,True,0.000209,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000165,12,0.0,True,True,0.000203,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,"auto it = std::find_if(books.rbegin(), books.rend(), [](Book const& b) { return b.pages < 100; });\n   return std::distance(books.rbegin(), it);\n}",True,True,0.000165,13,0.0,True,False,0.000167,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book = books.size();\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n   return last_short_book;\n},True,True,0.000167,14,0.0,True,True,0.000218,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,"auto it = std::find_if(books.rbegin(), books.rend(), [](Book const& book) { return book.pages < 100; });\n   return std::distance(books.rbegin(), it);\n}",True,True,0.000165,15,0.0,True,False,0.000166,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book = books.size() - 1;\n   for (size_t i = books.size() - 1; i > 0; --i) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n         break;\n      }\n   }\n   return last_short_book;\n},True,True,0.000166,16,0.0,True,True,0.000171,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = books.size(); i > 0; --i) {\n      if (books[i - 1].pages < 100) {\n         return i - 1;\n      }\n   }\n   return 0;\n},True,True,0.000165,17,0.0,True,True,0.000165,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,for (size_t i = books.size(); i > 0; --i) {\n      if (books[i - 1].pages < 100) {\n         return i - 1;\n      }\n   }\n   return 0;\n},True,True,0.000166,18,0.0,True,True,0.000171,,
"struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,serial,0.2,0.95,True,1024,True,size_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n},True,True,0.000165,19,0.0,True,True,0.000208,,
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,0.0,True,True,0.000199,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,1.0,True,True,0.000216,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,2.0,True,True,0.000633,,4.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,3.0,True,True,0.001385,,8.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,4.0,True,True,0.00057,,16.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,5.0,True,True,0.002392,,32.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,6.0,True,True,0.002129,,64.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,7.0,True,True,0.010166,,128.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,8.0,True,True,0.00555,,256.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size();\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_index = i;\n      }\n   }\n\n   int global_index;\n   MPI_Allreduce(&local_index, &global_index, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,0,9.0,True,True,0.010049,,512.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages to search for\n   int pagesToSearch = 100;\n   int pagesToSearchPerRank = pagesToSearch / size;\n   int pagesToSearchRemainder = pagesToSearch % size;\n\n   // calculate the start and end index of the books to search for\n   int startIndex = rank * pagesToSearchPerRank;\n   int endIndex = startIndex + pagesToSearchPerRank;\n   if (rank < pagesToSearchRemainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBookIndex = 0;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBookIndex = i;\n      }\n   }\n\n   // gather the last short book index from all ranks\n   int lastShortBookIndexOnRank0;\n   MPI_Reduce(&lastShortBookIndex, &lastShortBookIndexOnRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookIndexOnRank0;\n}",True,True,0.000165,1,0.0,True,False,2e-06,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,0.0,True,True,0.00017,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,1.0,True,True,0.000179,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,2.0,True,True,0.000946,,4.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,3.0,True,True,0.000836,,8.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,4.0,True,True,0.00044,,16.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,5.0,True,True,0.000705,,32.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,6.0,True,True,0.000878,,64.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,7.0,True,True,0.001155,,128.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,8.0,True,True,0.001532,,256.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_index = books.size() - 1;\n   for (int i = books.size() - 1; i >= 0; i--) {\n      if (books[i].pages < 100) {\n         local_index = i;\n         break;\n      }\n   }\n\n   int global_index = -1;\n   MPI_Reduce(&local_index, &global_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return global_index;\n}",True,True,0.000165,2,9.0,True,True,0.003241,,512.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,0.0,True,True,0.000205,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,1.0,True,True,0.000218,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,2.0,True,True,0.000952,,4.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,3.0,True,True,0.000917,,8.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,4.0,True,True,0.00058,,16.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,5.0,True,True,0.000758,,32.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,6.0,True,True,0.0011,,64.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,7.0,True,True,0.001648,,128.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,8.0,True,True,0.00199,,256.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t result = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int local_result = 0;\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_result = i;\n      }\n   }\n\n   MPI_Reduce(&local_result, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,3,9.0,True,True,0.003404,,512.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int n = books.size();\n   int chunk = n / size;\n   int remainder = n % size;\n\n   int start = rank * chunk;\n   int end = start + chunk;\n\n   if (rank == size - 1) {\n      end += remainder;\n   }\n\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   return -1;\n}",True,True,0.000164,4,0.0,True,False,3e-05,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of ranks\n   int world_size;\n   MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n   // get the rank of the current process\n   int world_rank;\n   MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n   // get the number of items in the vector\n   int n = books.size();\n\n   // calculate the number of items each rank will process\n   int n_per_rank = n / world_size;\n\n   // calculate the number of items that will be left over after dividing up the items\n   int n_left_over = n % world_size;\n\n   // calculate the starting index of the current rank\n   int start_index = n_per_rank * world_rank;\n\n   // calculate the ending index of the current rank\n   int end_index = n_per_rank * (world_rank + 1);\n\n   // if the current rank is not the last rank, add the number of items that will be left over to the ending index\n   if (world_rank!= world_size - 1) {\n      end_index += n_left_over;\n   }\n\n   // create a vector of the books that will be processed by the current rank\n   std::vector<Book> books_per_rank(books.begin() + start_index, books.begin() + end_index);\n\n   // create a vector of the pages of the books that will be processed by the current rank\n   std::vector<int> pages_per_rank;\n   for (Book const& book : books_per_rank) {\n      pages_per_rank.push_back(book.pages);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a vector of the indices of the books that will be processed by the current rank\n   std::vector<int> indices_per_rank;\n   for (int i = start_index; i < end_index; i++) {\n      indices_per_rank.push_back(i);\n   }\n\n   // create a",False,True,,5,,,,,,
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages to search for\n   int pagesToSearch = 100;\n   int pagesToSearchPerRank = pagesToSearch / size;\n   int pagesToSearchForRank = pagesToSearchPerRank + (rank < pagesToSearch % size);\n\n   // calculate the start and end index of the search\n   int startIndex = books.size() * rank / size;\n   int endIndex = books.size() * (rank + 1) / size;\n\n   // search for the last book with less than pagesToSearchForRank pages\n   for (int i = endIndex - 1; i >= startIndex; --i) {\n      if (books[i].pages < pagesToSearchForRank) {\n         return i;\n      }\n   }\n\n   // if no book was found, return the end index\n   return endIndex;\n}",True,True,0.000167,6,0.0,True,True,0.000169,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages to search for\n   int pagesToSearch = 100;\n   int pagesToSearchPerRank = pagesToSearch / size;\n   int pagesToSearchForRank = pagesToSearchPerRank + (rank < pagesToSearch % size);\n\n   // calculate the start and end index of the search\n   int startIndex = books.size() * rank / size;\n   int endIndex = books.size() * (rank + 1) / size;\n\n   // search for the last book with less than pagesToSearchForRank pages\n   for (int i = endIndex - 1; i >= startIndex; --i) {\n      if (books[i].pages < pagesToSearchForRank) {\n         return i;\n      }\n   }\n\n   // if no book was found, return the end index\n   return endIndex;\n}",True,True,0.000167,6,1.0,True,False,9.9e-05,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will search\n   int books_per_rank = books.size() / size;\n   // calculate the number of books that the last rank will search\n   int last_rank_books = books.size() % size;\n\n   // calculate the start and end index of the books that each rank will search\n   int start_index = rank * books_per_rank;\n   int end_index = start_index + books_per_rank;\n\n   // if this is the last rank, then the end index is the end of the vector\n   if (rank == size - 1) {\n      end_index = books.size();\n   }\n\n   // search for the last short book\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // broadcast the last short book index to all ranks\n   MPI_Bcast(&last_short_book_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,7,0.0,True,True,0.000203,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will search\n   int books_per_rank = books.size() / size;\n   // calculate the number of books that the last rank will search\n   int last_rank_books = books.size() % size;\n\n   // calculate the start and end index of the books that each rank will search\n   int start_index = rank * books_per_rank;\n   int end_index = start_index + books_per_rank;\n\n   // if this is the last rank, then the end index is the end of the vector\n   if (rank == size - 1) {\n      end_index = books.size();\n   }\n\n   // search for the last short book\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // broadcast the last short book index to all ranks\n   MPI_Bcast(&last_short_book_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,7,1.0,True,False,0.000106,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n   int world_size;\n   MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n   // get the rank of the process\n   int world_rank;\n   MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n   // get the number of elements in the vector\n   int n = books.size();\n\n   // calculate the number of elements each process will work on\n   int n_per_process = n / world_size;\n\n   // calculate the number of elements each process will work on\n   int n_left = n % world_size;\n\n   // calculate the start index of the process\n   int start_index = n_per_process * world_rank;\n\n   // calculate the end index of the process\n   int end_index = start_index + n_per_process;\n\n   // if the process is not the last process, add the number of elements that are left\n   if (world_rank!= world_size - 1) {\n      end_index += n_left;\n   }\n\n   // iterate over the vector and find the last element where Book.pages < 100\n   for (int i = end_index - 1; i >= start_index; --i) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   // if no element was found, return -1\n   return -1;\n}",True,True,0.000164,8,0.0,True,True,0.000168,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n   int world_size;\n   MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n   // get the rank of the process\n   int world_rank;\n   MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n   // get the number of elements in the vector\n   int n = books.size();\n\n   // calculate the number of elements each process will work on\n   int n_per_process = n / world_size;\n\n   // calculate the number of elements each process will work on\n   int n_left = n % world_size;\n\n   // calculate the start index of the process\n   int start_index = n_per_process * world_rank;\n\n   // calculate the end index of the process\n   int end_index = start_index + n_per_process;\n\n   // if the process is not the last process, add the number of elements that are left\n   if (world_rank!= world_size - 1) {\n      end_index += n_left;\n   }\n\n   // iterate over the vector and find the last element where Book.pages < 100\n   for (int i = end_index - 1; i >= start_index; --i) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   // if no element was found, return -1\n   return -1;\n}",True,True,0.000164,8,1.0,True,False,8.7e-05,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages in the last book\n   int last_book_pages = books.back().pages;\n\n   // calculate the number of pages in the last book on each rank\n   int last_book_pages_on_rank = last_book_pages / size;\n   if (rank == size - 1) {\n      last_book_pages_on_rank += last_book_pages % size;\n   }\n\n   // calculate the number of books in the last book on each rank\n   int last_book_books_on_rank = books.size() / size;\n   if (rank == size - 1) {\n      last_book_books_on_rank += books.size() % size;\n   }\n\n   // calculate the index of the last book on each rank\n   int last_book_index_on_rank = last_book_books_on_rank - 1;\n\n   // calculate the index of the last book\n   int last_book_index = last_book_index_on_rank * size + rank;\n\n   // calculate the index of the last book on each rank\n   int last_book_pages_on_rank_index = last_book_index_on_rank * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_index = last_book_pages_on_rank_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_on_rank_index = last_book_index_on_rank * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_index = last_book_index_on_rank_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_on_rank_index_index = last_book_pages_on_rank_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_index_index = last_book_pages_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_on_rank_index_index = last_book_index_on_rank_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_index_index = last_book_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_on_rank_index_index_index = last_book_pages_on_rank_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_index_index_index = last_book_pages_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_on_rank_index_index_index = last_book_index_on_rank_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_index_index_index = last_book_index_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_on_rank_index_index_index_index = last_book_pages_on_rank_index_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_index_index_index_index = last_book_pages_index_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_on_rank_index_index_index_index = last_book_index_on_rank_index_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_index_index_index_index = last_book_index_index_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_on_rank_index_index_index_index_index = last_book_pages_on_rank_index_index_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_pages_index_index_index_index_index = last_book_pages_index_index_index_index * size + rank;\n\n   // calculate the index of the last book\n   int last_book_index_on_rank_index_index_index",False,True,,9,,,,,,
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages in the last book\n   int last_book_pages = books.back().pages;\n\n   // calculate the number of pages in the last book\n   int pages_per_rank = last_book_pages / size;\n\n   // calculate the number of pages in the last book\n   int remainder = last_book_pages % size;\n\n   // calculate the start index of the last book\n   int start_index = rank * pages_per_rank;\n\n   // calculate the end index of the last book\n   int end_index = start_index + pages_per_rank;\n\n   // if the remainder is not zero, add it to the end index\n   if (remainder!= 0) {\n      end_index += remainder;\n   }\n\n   // iterate through the books and find the last book with pages less than 100\n   for (size_t i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   // if no book was found, return the size of the vector\n   return books.size();\n}",True,True,0.000164,10,0.0,True,False,1e-06,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,0.0,True,True,0.000205,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,1.0,True,True,0.000205,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,2.0,True,True,0.000977,,4.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,3.0,True,True,0.000871,,8.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,4.0,True,True,0.000496,,16.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,5.0,True,True,0.000806,,32.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,6.0,True,True,0.00089,,64.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,7.0,True,True,0.001879,,128.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,8.0,True,True,0.001985,,256.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   // find the last short book in the local vector\n   for (size_t i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   // find the last short book in the global vector\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,11,9.0,True,True,0.003436,,512.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n   int size = books.size();\n   // get the rank of the process\n   int rank;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   // get the number of processes\n   int world_size;\n   MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n   // get the number of elements per process\n   int elements_per_process = size / world_size;\n   // get the remainder\n   int remainder = size % world_size;\n   // get the start index of the process\n   int start_index = rank * elements_per_process;\n   // get the end index of the process\n   int end_index = start_index + elements_per_process;\n   // if the remainder is not zero, add the remainder to the end index\n   if (remainder!= 0) {\n      end_index += remainder;\n   }\n   // get the last element of the process\n   Book last_element = books[end_index - 1];\n   // get the index of the last element of the process\n   int last_element_index = end_index - 1;\n   // get the index of the last element of the process\n   int last_short_book_index = -1;\n   // loop through the vector\n   for (int i = end_index - 2; i >= start_index; i--) {\n      // if the current element is less than 100 pages, set the index of the last short book\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   // if the last short book index is not equal to -1, set the last short book index to the last element index\n   if (last_short_book_index!= -1) {\n      last_short_book_index = last_element_index;\n   }\n   // get the result\n   int result;\n   // if the rank is 0, set the result to the last short book index\n   if (rank == 0) {\n      result = last_short_book_index;\n   }\n   // broadcast the result to all processes\n   MPI_Bcast(&result, 1, MPI_INT, 0, MPI_COMM_WORLD);\n   // return the result\n   return result;\n}",True,True,0.000165,12,0.0,True,False,0.000198,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // split books into chunks\n   std::vector<Book> chunks(size);\n   for (size_t i = 0; i < books.size(); i += size) {\n      chunks[i % size] = books[i];\n   }\n\n   // find the last book in the chunk\n   size_t last_book_index = 0;\n   for (size_t i = 0; i < chunks.size(); i++) {\n      if (chunks[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the last book index from all ranks\n   int last_book_index_global;\n   MPI_Reduce(&last_book_index, &last_book_index_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the last book index\n   return last_book_index_global;\n}",True,True,0.000164,13,0.0,True,False,0.002328,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,0.0,True,True,0.000205,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,1.0,True,True,0.000112,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,2.0,True,True,0.000847,,4.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,3.0,True,True,0.000598,,8.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,4.0,True,True,0.000191,,16.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,5.0,True,True,0.000218,,32.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,6.0,True,True,0.000143,,64.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,7.0,True,True,0.000136,,128.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,8.0,True,True,0.000126,,256.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books that each rank will process\n   int booksPerRank = books.size() / size;\n   // calculate the number of books that the last rank will process\n   int lastRankBooks = books.size() % size;\n\n   // calculate the start and end index of the books that this rank will process\n   int start = booksPerRank * rank;\n   int end = start + booksPerRank;\n\n   // if this is the last rank, process the remaining books\n   if (rank == size - 1) {\n      end += lastRankBooks;\n   }\n\n   // find the last book that is less than 100 pages\n   size_t lastShortBook = 0;\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int lastShortBookFromRank0 = 0;\n   MPI_Reduce(&lastShortBook, &lastShortBookFromRank0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result\n   return lastShortBookFromRank0;\n}",True,True,0.000165,14,9.0,True,True,0.000217,,512.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,0.0,True,True,0.000203,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,1.0,True,True,0.000117,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,2.0,True,True,0.000865,,4.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,3.0,True,True,0.000552,,8.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,4.0,True,True,0.000158,,16.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,5.0,True,True,0.000202,,32.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,6.0,True,True,0.000113,,64.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,7.0,True,True,0.000103,,128.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,8.0,True,True,0.000128,,256.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of books on each rank\n   int num_books_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // calculate the start and end index of the books on each rank\n   int start_index = num_books_per_rank * rank;\n   int end_index = start_index + num_books_per_rank;\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   // search for the last book on each rank\n   size_t last_book_index = 0;\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         last_book_index = i;\n      }\n   }\n\n   // gather the results from all ranks\n   int last_book_index_on_rank_0;\n   MPI_Reduce(&last_book_index, &last_book_index_on_rank_0, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   // return the result on rank 0\n   if (rank == 0) {\n      return last_book_index_on_rank_0;\n   } else {\n      return 0;\n   }\n}",True,True,0.000165,15,9.0,True,True,0.000158,,512.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages\n   int pages = books.size() / size;\n   if (rank == size - 1) {\n      pages += books.size() % size;\n   }\n\n   // calculate the start index\n   int start = rank * pages;\n\n   // calculate the end index\n   int end = start + pages;\n\n   // find the last book with pages less than 100\n   for (int i = end - 1; i >= start; i--) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   // if no book with pages less than 100 was found, return -1\n   return -1;\n}",True,True,0.000165,16,0.0,True,True,0.000168,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages\n   int pages = books.size() / size;\n   if (rank == size - 1) {\n      pages += books.size() % size;\n   }\n\n   // calculate the start index\n   int start = rank * pages;\n\n   // calculate the end index\n   int end = start + pages;\n\n   // find the last book with pages less than 100\n   for (int i = end - 1; i >= start; i--) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   // if no book with pages less than 100 was found, return -1\n   return -1;\n}",True,True,0.000165,16,1.0,True,False,8.6e-05,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // calculate the number of pages to search for\n   int pagesToSearch = books.size() / size;\n   if (rank == size - 1) {\n      pagesToSearch += books.size() % size;\n   }\n\n   // search for the last book with less than pagesToSearch pages\n   int lastBook = 0;\n   for (int i = 0; i < pagesToSearch; ++i) {\n      if (books[books.size() - 1 - i].pages < pagesToSearch) {\n         lastBook = books.size() - 1 - i;\n         break;\n      }\n   }\n\n   // gather the result from all ranks\n   int result = 0;\n   MPI_Reduce(&lastBook, &result, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,True,0.000165,17,0.0,True,False,3e-06,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,0.0,True,True,0.000201,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,1.0,True,True,0.000212,,2.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,2.0,True,True,0.001015,,4.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,3.0,True,True,0.00083,,8.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,4.0,True,True,0.000556,,16.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,5.0,True,True,0.00079,,32.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,6.0,True,True,0.000888,,64.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,7.0,True,True,0.001467,,128.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,8.0,True,True,0.002052,,256.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int last_short_book_index = -1;\n   int last_short_book_pages = -1;\n\n   int local_last_short_book_index = -1;\n   int local_last_short_book_pages = -1;\n\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n         local_last_short_book_pages = books[i].pages;\n      }\n   }\n\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   MPI_Reduce(&local_last_short_book_pages, &last_short_book_pages, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,18,9.0,True,True,0.003401,,512.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int num_books = books.size();\n   int num_books_per_rank = num_books / size;\n   int remainder = num_books % size;\n\n   int start_index = rank * num_books_per_rank;\n   int end_index = start_index + num_books_per_rank;\n\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   for (int i = end_index - 1; i >= start_index; i--) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   return -1;\n}",True,True,0.000165,19,0.0,True,True,0.000169,,1.0
"#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int num_books = books.size();\n   int num_books_per_rank = num_books / size;\n   int remainder = num_books % size;\n\n   int start_index = rank * num_books_per_rank;\n   int end_index = start_index + num_books_per_rank;\n\n   if (rank < remainder) {\n      end_index++;\n   }\n\n   for (int i = end_index - 1; i >= start_index; i--) {\n      if (books[i].pages < 100) {\n         return i;\n      }\n   }\n\n   return -1;\n}",True,True,0.000165,19,1.0,True,False,8.5e-05,,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t last_short_book_index = 0;\n   if (rank == 0) {\n      last_short_book_index = books.size() - 1;\n      for (int i = 1; i < size; ++i) {\n         int last_short_book_index_from_rank;\n         MPI_Recv(&last_short_book_index_from_rank, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n         if (last_short_book_index_from_rank < last_short_book_index) {\n            last_short_book_index = last_short_book_index_from_rank;\n         }\n      }\n   } else {\n      for (size_t i = 0; i < books.size(); ++i) {\n         if (books[i].pages < 100) {\n            last_short_book_index = i;\n         }\n      }\n      MPI_Send(&last_short_book_index, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n   }\n\n   return last_short_book_index;\n}",True,False,0.000164,0,0.0,True,False,0.0,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int num_threads = omp_get_max_threads();\n   int rank, num_ranks;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &num_ranks);\n   int num_books_per_rank = books.size() / num_ranks;\n   int num_books_left_over = books.size() % num_ranks;\n   int start_index = rank * num_books_per_rank;\n   int end_index = (rank + 1) * num_books_per_rank;\n   if (rank == num_ranks - 1) {\n      end_index += num_books_left_over;\n   }\n   int local_last_short_book_index = 0;\n   #pragma omp parallel for\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n      }\n   }\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return last_short_book_index;\n}",True,True,0.000165,1,0.0,True,True,0.000207,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int num_threads = omp_get_max_threads();\n   int rank, num_ranks;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &num_ranks);\n   int num_books_per_rank = books.size() / num_ranks;\n   int num_books_left_over = books.size() % num_ranks;\n   int start_index = rank * num_books_per_rank;\n   int end_index = (rank + 1) * num_books_per_rank;\n   if (rank == num_ranks - 1) {\n      end_index += num_books_left_over;\n   }\n   int local_last_short_book_index = 0;\n   #pragma omp parallel for\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n      }\n   }\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return last_short_book_index;\n}",True,True,0.000165,1,1.0,True,True,0.000216,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int num_threads = omp_get_max_threads();\n   int rank, num_ranks;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &num_ranks);\n   int num_books_per_rank = books.size() / num_ranks;\n   int num_books_left_over = books.size() % num_ranks;\n   int start_index = rank * num_books_per_rank;\n   int end_index = (rank + 1) * num_books_per_rank;\n   if (rank == num_ranks - 1) {\n      end_index += num_books_left_over;\n   }\n   int local_last_short_book_index = 0;\n   #pragma omp parallel for\n   for (int i = start_index; i < end_index; i++) {\n      if (books[i].pages < 100) {\n         local_last_short_book_index = i;\n      }\n   }\n   MPI_Reduce(&local_last_short_book_index, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return last_short_book_index;\n}",True,True,0.000165,1,2.0,True,False,0.000846,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n   // Hint: use MPI and OpenMP to search in parallel\n   // Hint: use MPI_Reduce to get the result from all ranks\n   // Hint: use MPI_Bcast to broadcast the result to all ranks\n\n   size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // TODO: implement this function\n   // Hint: use MPI and OpenMP to search in parallel\n   // Hint: use MPI_Reduce to get the result from all ranks\n   // Hint: use MPI_Bcast to broadcast the result to all ranks\n\n   if (rank == 0) {\n      last_short_book_index = books.size() - 1;\n      for (int i = 1; i < size; ++i) {\n         int temp;\n         MPI_Recv(&temp, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n         if (temp < last_short_book_index) {\n            last_short_book_index = temp;\n         }\n      }\n   } else {\n      int temp = books.size() - 1;\n      MPI_Send(&temp, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n   }\n\n   return last_short_book_index;\n}",True,False,0.000166,2,0.0,True,False,0.0,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // TODO: implement this function\n   // Hint: use MPI_Scatter and OpenMP to search in parallel\n   // Hint: use MPI_Reduce to get the result from all ranks\n   // Hint: use MPI_Bcast to broadcast the result from rank 0 to all ranks\n   // Hint: use MPI_Finalize to clean up MPI\n\n   return last_short_book_index;\n}",True,False,0.000165,3,0.0,True,False,0.0,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   int n = books.size();\n\n   // get the number of pages in the last book\n   int last_book_pages = books[n - 1].pages;\n\n   // get the number of pages in the last book\n   int last_book_index = n - 1;\n\n   // get the number of pages in the last book\n   int last_book_rank = 0;\n\n   // get the number of pages in the last book\n   int last_book_size = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_max = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local_max = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local_max = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local_max = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_min = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local_min = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local_min = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local_min = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_sum = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local_sum = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local_sum = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local_sum = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_prod = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local_prod = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local_prod = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local_prod = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_min_max = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local_min_max = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local_min_max = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local_min_max = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_min_sum = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local_min_sum = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local_min_sum = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local_min_sum = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_min_prod = 0;\n\n   // get the number of pages in the last book\n   int last_book_index_local_min_prod = 0;\n\n   // get the number of pages in the last book\n   int last_book_rank_local_min_prod = 0;\n\n   // get the number of pages in the last book\n   int last_book_size_local_min_prod = 1;\n\n   // get the number of pages in the last book\n   int last_book_pages_local_max_sum = 0",False,False,,4,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   int n = books.size();\n\n   // get the number of pages\n   int pages = 0;\n   for (auto const& book : books) {\n      pages += book.pages;\n   }\n\n   // get the number of pages on each rank\n   int pages_per_rank = pages / size;\n\n   // get the number of pages on the last rank\n   int pages_last_rank = pages - pages_per_rank * (size - 1);\n\n   // get the index of the last book on each rank\n   int last_book_index_per_rank = 0;\n   for (int i = 0; i < rank; i++) {\n      last_book_index_per_rank += books[i].pages;\n   }\n\n   // get the index of the last book on the last rank\n   int last_book_index_last_rank = last_book_index_per_rank + pages_per_rank;\n\n   // get the index of the last book on the last rank\n   int last_book_index = last_book_index_per_rank + pages_last_rank;\n\n   // get the index of the last book on the last rank\n   int last_book_index_local = 0;\n   for (int i = last_book_index_per_rank; i < last_book_index; i++) {\n      last_book_index_local++;\n   }\n\n   // get the index of the last book on the last rank\n   int last_book_index_global = 0;\n   MPI_Reduce(&last_book_index_local, &last_book_index_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n   // get the index of the last book on the last rank\n   int last_book_index_global_last_rank = 0;\n   MPI_Reduce(&last_book_index_last_rank, &last_book_index_global_last_rank, 1, MPI_INT, MPI_SUM, size - 1, MPI_COMM_WORLD);\n\n   // get the index of the last book on the last rank\n   int last_book_index_global_last_rank_local = 0;\n   MPI_Reduce(&last_book_index_last_rank, &last_book_index_global_last_rank_local, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n   // get the index of the last book on the last rank\n   int last_book_index_global_last_rank_global = 0;\n   MPI_Reduce(&last_book_index_global_last_rank_local, &last_book_index_global_last_rank_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n   // get the index of the last book on the last rank\n   int last_book_index_global_last_rank_global_local = 0;\n   MPI_Reduce(&last_book_index_global_last_rank_global, &last_book_index_global_last_rank_global_local, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n   // get the index of the last book on the last rank\n   int last_book_index_global_last_rank_global_global = 0;\n   MPI_Reduce(&last_book_index_global_last_rank_global_local, &last_book_index_global_last_rank_global_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n   // get the index of the last book on the last rank\n   int last_book_index_global_last_rank_global_global_local = 0;\n   MPI_Reduce(&last_book_index_global_last_rank_global_global, &last_book_index_global_last_rank_global_global_local, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n   // get the index of the last book on the last rank\n   int last_book_index_global_last_rank_global_global_global = 0;\n   MPI_Reduce(&last_book_index_global_last_rank_global_global_local, &last_book_index_global_last_rank_global_global_global, 1, MPI_INT",False,False,,5,,,,,,
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // divide the work among the ranks\n   int work_per_rank = books.size() / size;\n   int remainder = books.size() % size;\n\n   // rank 0 will search for the last book with pages less than 100\n   if (rank == 0) {\n      int last_book_index = work_per_rank + remainder;\n      for (int i = 1; i < size; ++i) {\n         MPI_Send(&last_book_index, 1, MPI_INT, i, 0, MPI_COMM_WORLD);\n      }\n   }\n\n   // every other rank will search for the last book with pages less than 100\n   if (rank > 0) {\n      int last_book_index;\n      MPI_Status status;\n      MPI_Recv(&last_book_index, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);\n\n      // search for the last book with pages less than 100\n      for (int i = work_per_rank; i < books.size(); ++i) {\n         if (books[i].pages < 100) {\n            last_book_index = i;\n         }\n      }\n\n      // send the result back to rank 0\n      MPI_Send(&last_book_index, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n   }\n\n   // rank 0 will receive the results from the other ranks\n   if (rank == 0) {\n      int last_book_index;\n      MPI_Status status;\n      for (int i = 1; i < size; ++i) {\n         MPI_Recv(&last_book_index, 1, MPI_INT, i, 0, MPI_COMM_WORLD, &status);\n         if (last_book_index > work_per_rank) {\n            work_per_rank = last_book_index;\n         }\n      }\n   }\n\n   return work_per_rank;\n}",True,False,0.000165,6,0.0,True,False,0.0,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,0.0,True,True,0.000201,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,1.0,True,True,0.000195,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,2.0,True,True,0.000204,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,3.0,True,True,0.000203,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,4.0,True,True,0.000203,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,5.0,True,True,0.000204,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,6.0,True,True,0.0002,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,7.0,True,True,0.000213,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,8.0,True,True,0.000215,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,9.0,True,True,0.000212,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,10.0,True,True,0.000207,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,11.0,True,True,0.000218,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,12.0,True,True,0.000212,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,13.0,True,True,0.000209,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,14.0,True,True,0.006996,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,15.0,True,True,0.001001,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,16.0,True,True,0.000918,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,17.0,True,True,0.000936,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,18.0,True,True,0.001014,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,19.0,True,True,0.001032,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t local_index = 0;\n   size_t local_result = 0;\n\n   for (auto const& book : books) {\n      if (book.pages < 100) {\n         local_result = local_index;\n      }\n      local_index++;\n   }\n\n   size_t result = 0;\n   MPI_Reduce(&local_result, &result, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return result;\n}",True,False,0.000164,7,20.0,True,True,0.001055,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // split the books vector into chunks\n   std::vector<Book> chunks;\n   for (int i = 0; i < size; ++i) {\n      chunks.push_back(books[i * books.size() / size]);\n   }\n\n   // find the last book in the chunk\n   size_t last_book_index = 0;\n   #pragma omp parallel for\n   for (int i = 0; i < size; ++i) {\n      for (int j = 0; j < chunks.size(); ++j) {\n         if (chunks[j].pages < 100) {\n            last_book_index = j;\n         }\n      }\n   }\n\n   // gather the last book index\n   int last_book_index_gathered;\n   MPI_Gather(&last_book_index, 1, MPI_INT, &last_book_index_gathered, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n   // return the last book index\n   return last_book_index_gathered;\n}",True,True,0.000167,8,0.0,True,False,3e-06,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   #pragma omp parallel for\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,9,0.0,True,True,0.000206,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   #pragma omp parallel for\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,9,1.0,True,True,0.000201,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   #pragma omp parallel for\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,9,2.0,True,False,0.000856,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t lastShortBook = 0;\n   int n = books.size();\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n   int chunk = n / size;\n   int remainder = n % size;\n   int start = rank * chunk;\n   int end = start + chunk;\n   if (rank == size - 1) {\n      end += remainder;\n   }\n   #pragma omp parallel for\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   int lastShortBook_global;\n   MPI_Reduce(&lastShortBook, &lastShortBook_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return lastShortBook_global;\n}",True,True,0.000167,10,0.0,True,True,0.000206,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t lastShortBook = 0;\n   int n = books.size();\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n   int chunk = n / size;\n   int remainder = n % size;\n   int start = rank * chunk;\n   int end = start + chunk;\n   if (rank == size - 1) {\n      end += remainder;\n   }\n   #pragma omp parallel for\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   int lastShortBook_global;\n   MPI_Reduce(&lastShortBook, &lastShortBook_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return lastShortBook_global;\n}",True,True,0.000167,10,1.0,True,True,0.00022,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t lastShortBook = 0;\n   int n = books.size();\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n   int chunk = n / size;\n   int remainder = n % size;\n   int start = rank * chunk;\n   int end = start + chunk;\n   if (rank == size - 1) {\n      end += remainder;\n   }\n   #pragma omp parallel for\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n   int lastShortBook_global;\n   MPI_Reduce(&lastShortBook, &lastShortBook_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return lastShortBook_global;\n}",True,True,0.000167,10,2.0,True,False,0.000228,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,0.0,True,True,0.000203,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,1.0,True,True,0.000195,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,2.0,True,True,0.000196,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,3.0,True,True,0.000203,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,4.0,True,True,0.000204,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,5.0,True,True,0.000198,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,6.0,True,True,0.000195,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book_index = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // compute the number of books to search for\n   size_t num_books_to_search = books.size() / size;\n   if (rank == size - 1) {\n      num_books_to_search += books.size() % size;\n   }\n\n   // search for the last short book\n   for (size_t i = 0; i < num_books_to_search; i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n\n   // gather the results\n   int last_short_book_index_local = last_short_book_index;\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,False,0.000164,11,7.0,True,False,0.000108,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t last_short_book_index = 0;\n   int last_short_book_index_local = 0;\n\n   #pragma omp parallel for\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,12,0.0,True,True,0.000206,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t last_short_book_index = 0;\n   int last_short_book_index_local = 0;\n\n   #pragma omp parallel for\n   for (int i = 0; i < books.size(); i++) {\n      if (books[i].pages < 100) {\n         last_short_book_index_local = i;\n      }\n   }\n\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000164,12,1.0,True,False,0.00022,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int chunk_size = books.size() / size;\n   int remainder = books.size() % size;\n\n   if (rank < remainder) {\n      chunk_size++;\n   }\n\n   std::vector<Book> local_books(books.begin() + rank * chunk_size, books.begin() + (rank + 1) * chunk_size);\n\n   #pragma omp parallel for\n   for (int i = 0; i < local_books.size(); i++) {\n      if (local_books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000168,13,0.0,True,True,0.00252,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int chunk_size = books.size() / size;\n   int remainder = books.size() % size;\n\n   if (rank < remainder) {\n      chunk_size++;\n   }\n\n   std::vector<Book> local_books(books.begin() + rank * chunk_size, books.begin() + (rank + 1) * chunk_size);\n\n   #pragma omp parallel for\n   for (int i = 0; i < local_books.size(); i++) {\n      if (local_books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000168,13,1.0,True,True,0.002527,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int chunk_size = books.size() / size;\n   int remainder = books.size() % size;\n\n   if (rank < remainder) {\n      chunk_size++;\n   }\n\n   std::vector<Book> local_books(books.begin() + rank * chunk_size, books.begin() + (rank + 1) * chunk_size);\n\n   #pragma omp parallel for\n   for (int i = 0; i < local_books.size(); i++) {\n      if (local_books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000168,13,2.0,True,False,0.002537,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"size_t last_short_book = 0;\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n   // TODO: implement the parallel search\n   // Hint: use MPI_Scatterv to distribute the work\n   // Hint: use OpenMP to parallelize the search\n   // Hint: use MPI_Gatherv to gather the results\n   // Hint: use MPI_Bcast to broadcast the result\n   return last_short_book;\n}",True,False,0.000164,14,0.0,True,False,0.0,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int n = books.size();\n   int n_per_rank = n / size;\n   int remainder = n % size;\n\n   int start = rank * n_per_rank;\n   int end = start + n_per_rank;\n\n   if (rank < remainder) {\n      end++;\n   }\n\n   int last_short_book = -1;\n\n   #pragma omp parallel for\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global = -1;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000166,15,0.0,True,True,0.000205,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int n = books.size();\n   int n_per_rank = n / size;\n   int remainder = n % size;\n\n   int start = rank * n_per_rank;\n   int end = start + n_per_rank;\n\n   if (rank < remainder) {\n      end++;\n   }\n\n   int last_short_book = -1;\n\n   #pragma omp parallel for\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global = -1;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000166,15,1.0,True,True,0.00022,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int n = books.size();\n   int n_per_rank = n / size;\n   int remainder = n % size;\n\n   int start = rank * n_per_rank;\n   int end = start + n_per_rank;\n\n   if (rank < remainder) {\n      end++;\n   }\n\n   int last_short_book = -1;\n\n   #pragma omp parallel for\n   for (int i = start; i < end; i++) {\n      if (books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global = -1;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000166,15,2.0,True,False,0.000225,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,0.0,True,True,0.000205,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,1.0,True,True,0.000204,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,2.0,True,True,0.000204,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,3.0,True,True,0.000195,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,4.0,True,True,0.000203,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,5.0,True,True,0.000201,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,6.0,True,True,0.000199,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,7.0,True,True,0.000109,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,8.0,True,True,0.000107,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,9.0,True,True,0.000109,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,10.0,True,True,0.000107,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,11.0,True,True,0.000109,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,12.0,True,True,0.000107,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,13.0,True,True,0.000106,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,14.0,True,True,0.007508,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,15.0,True,True,0.00083,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,16.0,True,True,0.000793,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,17.0,True,True,0.000789,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,18.0,True,True,0.000799,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,19.0,True,True,0.000837,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   size_t start = rank * books.size() / size;\n   size_t end = (rank + 1) * books.size() / size;\n\n   size_t result = 0;\n   for (size_t i = start; i < end; ++i) {\n      if (books[i].pages < 100) {\n         result = i;\n      }\n   }\n\n   int result_local = 0;\n   MPI_Reduce(&result, &result_local, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n   return result_local;\n}",True,False,0.000164,16,20.0,True,True,0.000849,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int num_threads = omp_get_max_threads();\n   int num_books = books.size();\n   int num_books_per_thread = num_books / num_threads;\n   int num_books_last_thread = num_books - num_books_per_thread * (num_threads - 1);\n\n   int start_book_index = rank * num_books_per_thread;\n   int end_book_index = (rank == num_threads - 1)? num_books : (rank + 1) * num_books_per_thread;\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   #pragma omp parallel num_threads(num_threads)\n   {\n      int thread_id = omp_get_thread_num();\n      int start_book_index_local = start_book_index + thread_id * num_books_per_thread;\n      int end_book_index_local = (thread_id == num_threads - 1)? end_book_index : (thread_id + 1) * num_books_per_thread;\n\n      for (int i = start_book_index_local; i < end_book_index_local; i++) {\n         if (books[i].pages < 100) {\n            last_short_book_index_local = i;\n         }\n      }\n   }\n\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,17,0.0,True,True,0.000206,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"// TODO: implement this function\n   int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int num_threads = omp_get_max_threads();\n   int num_books = books.size();\n   int num_books_per_thread = num_books / num_threads;\n   int num_books_last_thread = num_books - num_books_per_thread * (num_threads - 1);\n\n   int start_book_index = rank * num_books_per_thread;\n   int end_book_index = (rank == num_threads - 1)? num_books : (rank + 1) * num_books_per_thread;\n\n   int last_short_book_index = -1;\n   int last_short_book_index_local = -1;\n\n   #pragma omp parallel num_threads(num_threads)\n   {\n      int thread_id = omp_get_thread_num();\n      int start_book_index_local = start_book_index + thread_id * num_books_per_thread;\n      int end_book_index_local = (thread_id == num_threads - 1)? end_book_index : (thread_id + 1) * num_books_per_thread;\n\n      for (int i = start_book_index_local; i < end_book_index_local; i++) {\n         if (books[i].pages < 100) {\n            last_short_book_index_local = i;\n         }\n      }\n   }\n\n   MPI_Reduce(&last_short_book_index_local, &last_short_book_index, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_index;\n}",True,True,0.000165,17,1.0,True,False,0.000132,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int n = books.size();\n   int chunk = n / size;\n   int remainder = n % size;\n\n   int start = rank * chunk + std::min(rank, remainder);\n   int end = (rank + 1) * chunk + std::min(rank + 1, remainder);\n\n   std::vector<Book> local_books(books.begin() + start, books.begin() + end);\n\n   int last_short_book = -1;\n\n#pragma omp parallel for\n   for (int i = 0; i < local_books.size(); i++) {\n      if (local_books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global = -1;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000165,18,0.0,True,True,0.002717,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int n = books.size();\n   int chunk = n / size;\n   int remainder = n % size;\n\n   int start = rank * chunk + std::min(rank, remainder);\n   int end = (rank + 1) * chunk + std::min(rank + 1, remainder);\n\n   std::vector<Book> local_books(books.begin() + start, books.begin() + end);\n\n   int last_short_book = -1;\n\n#pragma omp parallel for\n   for (int i = 0; i < local_books.size(); i++) {\n      if (local_books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global = -1;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000165,18,1.0,True,True,0.002638,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   int n = books.size();\n   int chunk = n / size;\n   int remainder = n % size;\n\n   int start = rank * chunk + std::min(rank, remainder);\n   int end = (rank + 1) * chunk + std::min(rank + 1, remainder);\n\n   std::vector<Book> local_books(books.begin() + start, books.begin() + end);\n\n   int last_short_book = -1;\n\n#pragma omp parallel for\n   for (int i = 0; i < local_books.size(); i++) {\n      if (local_books[i].pages < 100) {\n         last_short_book = i;\n      }\n   }\n\n   int last_short_book_global = -1;\n   MPI_Reduce(&last_short_book, &last_short_book_global, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return last_short_book_global;\n}",True,True,0.000165,18,2.0,True,False,0.002699,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,0.0,True,True,0.000203,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,1.0,True,True,0.000203,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,2.0,True,True,0.000195,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,3.0,True,True,0.000204,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,4.0,True,True,0.0002,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,5.0,True,True,0.000203,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,6.0,True,True,0.0002,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,7.0,True,True,0.000112,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,8.0,True,True,0.000106,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,9.0,True,True,0.000111,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,10.0,True,True,0.000108,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,11.0,True,True,0.000109,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,12.0,True,True,0.000113,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,13.0,True,True,0.000109,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,14.0,True,True,0.010669,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,15.0,True,True,0.00083,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,16.0,True,True,0.000782,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,17.0,True,True,0.000811,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,18.0,True,True,0.00085,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,19.0,True,True,0.0008,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI and OpenMP to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n	 Example:\n\n   input: [{title=""Green Eggs and Ham"", pages=72}, {title=""gulliver's travels"", pages=362}, {title=""Stories of Your Life"", pages=54}, {title=""Hamilton"", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",35_search_search_for_last_struct_by_key,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"int rank, size;\n   MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n   MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n   // get the number of books\n   size_t numBooks = books.size();\n\n   // get the number of books per rank\n   size_t numBooksPerRank = numBooks / size;\n\n   // get the remainder\n   size_t remainder = numBooks % size;\n\n   // get the start index of the books for this rank\n   size_t startIndex = rank * numBooksPerRank;\n\n   // get the end index of the books for this rank\n   size_t endIndex = startIndex + numBooksPerRank;\n\n   // if this rank has a remainder, add it to the end index\n   if (rank < remainder) {\n      endIndex++;\n   }\n\n   // search for the last book with pages less than 100\n   size_t lastShortBook = startIndex;\n   for (size_t i = startIndex; i < endIndex; i++) {\n      if (books[i].pages < 100) {\n         lastShortBook = i;\n      }\n   }\n\n   // gather the results from all ranks\n   size_t lastShortBookGlobal;\n   MPI_Reduce(&lastShortBook, &lastShortBookGlobal, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n   return lastShortBookGlobal;\n}",True,False,0.000165,19,20.0,True,True,0.000858,64.0,4.0
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001352,0,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001357,1,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.extent(0); ++i) {\n    double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.001288,2,0.0,True,True,0.002763,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.extent(0); ++i) {\n    double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.001288,2,1.0,True,True,0.002765,2.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.extent(0); ++i) {\n    double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.001288,2,2.0,True,True,0.002763,4.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.extent(0); ++i) {\n    double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.001288,2,3.0,True,True,0.002775,8.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.extent(0); ++i) {\n    double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.001288,2,4.0,True,True,0.003856,16.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.extent(0); ++i) {\n    double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.001288,2,5.0,True,True,0.002762,32.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.extent(0); ++i) {\n    double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.001288,2,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.00134,3,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double closest_distance = std::abs(M_PI - x(0));\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    double distance = std::abs(M_PI - x(i));\n    if (distance < closest_distance) {\n      closest = i;\n      closest_distance = distance;\n    }\n  }\n  return closest;\n},True,True,0.001346,4,0.0,True,True,0.002683,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double closest_distance = std::abs(M_PI - x(0));\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    double distance = std::abs(M_PI - x(i));\n    if (distance < closest_distance) {\n      closest = i;\n      closest_distance = distance;\n    }\n  }\n  return closest;\n},True,True,0.001346,4,1.0,True,True,0.00271,2.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double closest_distance = std::abs(M_PI - x(0));\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    double distance = std::abs(M_PI - x(i));\n    if (distance < closest_distance) {\n      closest = i;\n      closest_distance = distance;\n    }\n  }\n  return closest;\n},True,True,0.001346,4,2.0,True,True,0.002681,4.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double closest_distance = std::abs(M_PI - x(0));\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    double distance = std::abs(M_PI - x(i));\n    if (distance < closest_distance) {\n      closest = i;\n      closest_distance = distance;\n    }\n  }\n  return closest;\n},True,True,0.001346,4,3.0,True,True,0.002682,8.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double closest_distance = std::abs(M_PI - x(0));\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    double distance = std::abs(M_PI - x(i));\n    if (distance < closest_distance) {\n      closest = i;\n      closest_distance = distance;\n    }\n  }\n  return closest;\n},True,True,0.001346,4,4.0,True,True,0.002688,16.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double closest_distance = std::abs(M_PI - x(0));\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    double distance = std::abs(M_PI - x(i));\n    if (distance < closest_distance) {\n      closest = i;\n      closest_distance = distance;\n    }\n  }\n  return closest;\n},True,True,0.001346,4,5.0,True,True,0.004758,32.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double closest_distance = std::abs(M_PI - x(0));\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    double distance = std::abs(M_PI - x(i));\n    if (distance < closest_distance) {\n      closest = i;\n      closest_distance = distance;\n    }\n  }\n  return closest;\n},True,True,0.001346,4,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001368,5,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001345,6,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001345,7,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001348,8,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001355,9,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.00136,10,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001345,11,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001397,12,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001346,13,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x(0) - M_PI);\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    const double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.001345,14,0.0,True,True,0.002684,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x(0) - M_PI);\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    const double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.001345,14,1.0,True,True,0.002688,2.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x(0) - M_PI);\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    const double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.001345,14,2.0,True,True,0.002682,4.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x(0) - M_PI);\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    const double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.001345,14,3.0,True,True,0.002687,8.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x(0) - M_PI);\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    const double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.001345,14,4.0,True,True,0.002698,16.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x(0) - M_PI);\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    const double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.001345,14,5.0,True,True,0.003765,32.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x(0) - M_PI);\n  for (size_t i = 1; i < x.extent(0); ++i) {\n    const double distance = std::abs(x(i) - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.001345,14,6.0,False,,,64.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001347,15,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001349,16,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,"double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n\n  Kokkos::parallel_reduce(\n      ""find_closest_to_pi"", x.extent(0), KOKKOS_LAMBDA(size_t i, double& min_distance, size_t& min_index) {\n        double distance = std::abs(x(i) - M_PI);\n        if (distance < min_distance) {\n          min_distance = distance;\n          min_index = i;\n        }\n      },\n      Kokkos::Min<double>(min_distance, min_index));\n\n  return min_index;\n}",False,True,,17,,,,,,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,True,0.001362,18,0.0,True,False,0.0,1.0,
"#include <Kokkos_Core.hpp>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(Kokkos::View<const double*> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,kokkos,0.2,0.95,True,1024,True,"double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  Kokkos::parallel_reduce(\n      Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, x.extent(0)),\n      KOKKOS_LAMBDA(const int i, double& min_distance, size_t& min_index) {\n        double distance = std::abs(x(i) - M_PI);\n        if (distance < min_distance) {\n          min_distance = distance;\n          min_index = i;\n        }\n      },\n      Kokkos::Min<double>(min_distance, min_index));\n  return min_index;\n}",False,True,,19,,,,,,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000162,0,0.0,True,True,0.000166,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000162,0,1.0,True,False,9.2e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,True,0.000162,1,0.0,True,True,0.000164,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,True,0.000162,1,1.0,True,False,9.2e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,2,0.0,True,True,0.000165,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,2,1.0,True,False,9.3e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n\n    #pragma omp parallel for reduction(min: closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n\n    return closest_index;\n},True,True,0.000163,3,0.0,True,True,0.000166,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n\n    #pragma omp parallel for reduction(min: closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n\n    return closest_index;\n},True,True,0.000163,3,1.0,True,False,9.2e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000168,4,0.0,True,True,0.00017,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000168,4,1.0,True,True,0.000168,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000168,4,2.0,True,True,0.000171,4.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000168,4,3.0,True,True,0.000171,8.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000168,4,4.0,True,True,0.00017,16.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000168,4,5.0,True,True,0.000168,32.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000168,4,6.0,True,True,0.000168,64.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,False,0.000167,5,0.0,True,True,0.000175,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,False,0.000167,5,1.0,True,True,0.000172,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,False,0.000167,5,2.0,True,True,0.000171,4.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,False,0.000167,5,3.0,True,True,0.000175,8.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,False,0.000167,5,4.0,True,True,0.000171,16.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,False,0.000167,5,5.0,True,True,0.000169,32.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,False,0.000167,5,6.0,True,True,0.000169,64.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    #pragma omp parallel for reduction(min: min_distance)\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,True,0.00017,6,0.0,True,True,0.00017,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    #pragma omp parallel for reduction(min: min_distance)\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,True,0.00017,6,1.0,True,False,9.2e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,7,0.0,True,True,0.000166,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,7,1.0,True,False,9.1e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,True,0.000164,8,0.0,True,True,0.000165,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,True,0.000164,8,1.0,True,False,9.1e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n\n  return closest;\n},True,True,0.000163,9,0.0,True,True,0.000168,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n\n  return closest;\n},True,True,0.000163,9,1.0,True,False,9e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    #pragma omp parallel for reduction(min:min_dist)\n    for (size_t i = 0; i < x.size(); ++i) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,True,0.000167,10,0.0,True,True,0.000166,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    #pragma omp parallel for reduction(min:min_dist)\n    for (size_t i = 0; i < x.size(); ++i) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,True,0.000167,10,1.0,True,False,9.2e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::numeric_limits<double>::max();\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 0; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000169,11,0.0,True,True,0.000166,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::numeric_limits<double>::max();\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 0; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000169,11,1.0,True,False,8.9e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,12,0.0,True,True,0.000165,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,12,1.0,True,False,9.3e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_value = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_value)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double value = std::abs(x[i] - M_PI);\n        if (value < closest_value) {\n            closest_value = value;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,True,0.000162,13,0.0,True,True,0.000165,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_value = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_value)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double value = std::abs(x[i] - M_PI);\n        if (value < closest_value) {\n            closest_value = value;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,True,0.000162,13,1.0,True,False,9.3e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:min_distance)\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            closest = i;\n        }\n    }\n    return closest;\n},True,True,0.000163,14,0.0,True,True,0.000165,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:min_distance)\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            closest = i;\n        }\n    }\n    return closest;\n},True,True,0.000163,14,1.0,True,False,9e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n\n    #pragma omp parallel for reduction(min: closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n\n    return closest_index;\n},True,True,0.000163,15,0.0,True,True,0.00017,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n\n    #pragma omp parallel for reduction(min: closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n\n    return closest_index;\n},True,True,0.000163,15,1.0,True,False,9.4e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n    size_t closest_index = 0;\n\n    #pragma omp parallel for reduction(min:min_distance) reduction(max:closest_index)\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            closest_index = i;\n        }\n    }\n\n    return closest_index;\n},True,True,0.000168,16,0.0,True,True,0.000171,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n    size_t closest_index = 0;\n\n    #pragma omp parallel for reduction(min:min_distance) reduction(max:closest_index)\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            closest_index = i;\n        }\n    }\n\n    return closest_index;\n},True,True,0.000168,16,1.0,True,False,9.5e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,False,0.000167,17,0.0,True,True,0.00017,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,False,0.000167,17,1.0,True,True,0.00017,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,False,0.000167,17,2.0,True,True,0.00017,4.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,False,0.000167,17,3.0,True,True,0.000171,8.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,False,0.000167,17,4.0,True,True,0.00017,16.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,False,0.000167,17,5.0,True,True,0.00017,32.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t index = 0;\n    double min_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            index = i;\n        }\n    }\n    return index;\n},True,False,0.000167,17,6.0,True,True,0.000169,64.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000162,18,0.0,True,True,0.000166,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000162,18,1.0,True,False,9.2e-05,2.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(M_PI - x[0]);\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(M_PI - x[i]);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,19,0.0,True,True,0.000165,1.0,
"#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(M_PI - x[0]);\n  #pragma omp parallel for reduction(min: min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(M_PI - x[i]);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n  return closest;\n},True,True,0.000163,19,1.0,True,False,9.3e-05,2.0,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n  size_t closest_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double dist = std::abs(x[i] - M_PI);\n    if (dist < min_dist) {\n      min_dist = dist;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,True,0.000169,0,0.0,True,True,0.000176,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    for (size_t i = 0; i < x.size(); ++i) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,True,0.000172,1,0.0,True,True,0.000176,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,True,0.00017,2,0.0,True,True,0.000176,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,True,0.00017,3,0.0,True,True,0.000171,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double dist = std::abs(x[i] - M_PI);\n    if (dist < min_dist) {\n      min_dist = dist;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,True,0.000169,4,0.0,True,True,0.000171,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min = std::numeric_limits<double>::max();\n  size_t index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (std::abs(x[i] - M_PI) < min) {\n      min = std::abs(x[i] - M_PI);\n      index = i;\n    }\n  }\n  return index;\n},True,True,0.000171,5,0.0,True,True,0.000173,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    for (size_t i = 0; i < x.size(); i++) {\n        if (std::abs(x[i] - M_PI) < min) {\n            min = std::abs(x[i] - M_PI);\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,True,0.000181,6,0.0,True,True,0.000181,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,size_t index = 0;\n    double min = std::abs(M_PI - x[0]);\n    for (size_t i = 1; i < x.size(); ++i) {\n        if (std::abs(M_PI - x[i]) < min) {\n            min = std::abs(M_PI - x[i]);\n            index = i;\n        }\n    }\n    return index;\n},True,True,0.000168,7,0.0,True,True,0.000167,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_diff = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    for (size_t i = 0; i < x.size(); ++i) {\n        double diff = std::abs(x[i] - M_PI);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,True,0.00017,8,0.0,True,True,0.000176,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,size_t index = 0;\n  double min_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      index = i;\n    }\n  }\n  return index;\n},True,True,0.00017,9,0.0,True,True,0.000175,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,size_t index = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    if (std::abs(x[i] - M_PI) < min) {\n      min = std::abs(x[i] - M_PI);\n      index = i;\n    }\n  }\n  return index;\n},True,True,0.00017,10,0.0,True,True,0.000171,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n\n    for (size_t i = 0; i < x.size(); ++i) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_index = i;\n        }\n    }\n\n    return min_index;\n},True,True,0.000169,11,0.0,True,True,0.00017,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,size_t index = 0;\n  double min_diff = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min_diff) {\n      min_diff = diff;\n      index = i;\n    }\n  }\n  return index;\n},True,True,0.000168,12,0.0,True,True,0.000168,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_diff = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,True,0.000171,13,0.0,True,True,0.000172,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,True,0.000171,14,0.0,True,True,0.000172,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_diff = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,True,0.000171,15,0.0,True,True,0.000171,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min = std::numeric_limits<double>::max();\n  size_t index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (std::abs(x[i] - M_PI) < min) {\n      min = std::abs(x[i] - M_PI);\n      index = i;\n    }\n  }\n  return index;\n},True,True,0.00017,16,0.0,True,True,0.000175,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_diff = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    for (size_t i = 0; i < x.size(); ++i) {\n        double diff = std::abs(x[i] - M_PI);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,True,0.000172,17,0.0,True,True,0.000176,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (std::abs(x[i] - M_PI) < min) {\n            min = std::abs(x[i] - M_PI);\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,True,0.000189,18,0.0,True,True,0.000171,,
"/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,serial,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double dist = std::abs(x[i] - M_PI);\n    if (dist < min_dist) {\n      min_dist = dist;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,True,0.000169,19,0.0,True,True,0.00017,,
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements in the vector\n    size_t n = x.size();\n\n    // calculate the number of elements each process will handle\n    size_t n_per_proc = n / world_size;\n\n    // calculate the start and end indices of the elements handled by this process\n    size_t start = n_per_proc * world_rank;\n    size_t end = start + n_per_proc;\n\n    // if this is the last process, handle the remaining elements\n    if (world_rank == world_size - 1) {\n        end = n;\n    }\n\n    // calculate the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n    size_t min_dist_index = 0;\n\n    // loop over the elements handled by this process\n    for (size_t i = start; i < end; ++i) {\n        // calculate the distance\n        double dist = std::abs(x[i] - M_PI);\n\n        // if this distance is smaller than the current minimum, update the minimum\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_dist_index = i;\n        }\n    }\n\n    // reduce the minimum distance to rank 0\n    double min_dist_global;\n    MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // reduce the minimum distance index to rank 0\n    size_t min_dist_index_global;\n    MPI_Reduce(&min_dist_index, &min_dist_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the minimum distance index\n    return min_dist_index_global;\n}",True,True,0.000169,0,0.0,True,True,0.00017,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements in the vector\n    size_t n = x.size();\n\n    // calculate the number of elements each process will handle\n    size_t n_per_proc = n / world_size;\n\n    // calculate the start and end indices of the elements handled by this process\n    size_t start = n_per_proc * world_rank;\n    size_t end = start + n_per_proc;\n\n    // if this is the last process, handle the remaining elements\n    if (world_rank == world_size - 1) {\n        end = n;\n    }\n\n    // calculate the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n    size_t min_dist_index = 0;\n\n    // loop over the elements handled by this process\n    for (size_t i = start; i < end; ++i) {\n        // calculate the distance\n        double dist = std::abs(x[i] - M_PI);\n\n        // if this distance is smaller than the current minimum, update the minimum\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_dist_index = i;\n        }\n    }\n\n    // reduce the minimum distance to rank 0\n    double min_dist_global;\n    MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // reduce the minimum distance index to rank 0\n    size_t min_dist_index_global;\n    MPI_Reduce(&min_dist_index, &min_dist_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the minimum distance index\n    return min_dist_index_global;\n}",True,True,0.000169,0,1.0,True,False,9.5e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will have\n  int n_per_process = n / world_size;\n\n  // get the start index of the process\n  int start_index = n_per_process * world_rank;\n\n  // get the end index of the process\n  int end_index = start_index + n_per_process;\n\n  // get the local vector\n  std::vector<double> local_x(x.begin() + start_index, x.begin() + end_index);\n\n  // find the index of the value in the vector that is closest to PI\n  size_t closest_index = 0;\n  double closest_distance = std::abs(M_PI - local_x[0]);\n  for (size_t i = 1; i < local_x.size(); ++i) {\n    double distance = std::abs(M_PI - local_x[i]);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n\n  // find the global index of the closest value\n  int global_closest_index;\n  MPI_Reduce(&closest_index, &global_closest_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the global index of the closest value\n  return global_closest_index + start_index;\n}",True,True,0.000169,1,0.0,True,True,0.000371,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will have\n  int n_per_process = n / world_size;\n\n  // get the start index of the process\n  int start_index = n_per_process * world_rank;\n\n  // get the end index of the process\n  int end_index = start_index + n_per_process;\n\n  // get the local vector\n  std::vector<double> local_x(x.begin() + start_index, x.begin() + end_index);\n\n  // find the index of the value in the vector that is closest to PI\n  size_t closest_index = 0;\n  double closest_distance = std::abs(M_PI - local_x[0]);\n  for (size_t i = 1; i < local_x.size(); ++i) {\n    double distance = std::abs(M_PI - local_x[i]);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n\n  // find the global index of the closest value\n  int global_closest_index;\n  MPI_Reduce(&closest_index, &global_closest_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the global index of the closest value\n  return global_closest_index + start_index;\n}",True,True,0.000169,1,1.0,True,False,0.000201,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will work with\n  int n_local = n / world_size;\n\n  // get the start and end indices of the local vector\n  int start = n_local * world_rank;\n  int end = n_local * (world_rank + 1);\n\n  // get the local vector\n  std::vector<double> local_x(x.begin() + start, x.begin() + end);\n\n  // get the local minimum\n  double min = *std::min_element(local_x.begin(), local_x.end());\n\n  // get the global minimum\n  double global_min;\n  MPI_Reduce(&min, &global_min, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the local minimum\n  int min_index = std::distance(local_x.begin(), std::min_element(local_x.begin(), local_x.end()));\n\n  // get the global index of the local minimum\n  int global_min_index;\n  MPI_Reduce(&min_index, &global_min_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the global index of the local minimum\n  return global_min_index + start;\n}",True,True,0.000169,2,0.0,True,True,0.000445,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process will work with\n  int n_local = n / world_size;\n\n  // get the start and end indices of the local vector\n  int start = n_local * world_rank;\n  int end = n_local * (world_rank + 1);\n\n  // get the local vector\n  std::vector<double> local_x(x.begin() + start, x.begin() + end);\n\n  // get the local minimum\n  double min = *std::min_element(local_x.begin(), local_x.end());\n\n  // get the global minimum\n  double global_min;\n  MPI_Reduce(&min, &global_min, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the local minimum\n  int min_index = std::distance(local_x.begin(), std::min_element(local_x.begin(), local_x.end()));\n\n  // get the global index of the local minimum\n  int global_min_index;\n  MPI_Reduce(&min_index, &global_min_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the global index of the local minimum\n  return global_min_index + start;\n}",True,True,0.000169,2,1.0,True,False,0.000237,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process should search\n  int n_per_proc = n / world_size;\n\n  // get the start and end index of the search range\n  int start = n_per_proc * world_rank;\n  int end = n_per_proc * (world_rank + 1);\n\n  // get the minimum distance\n  double min_dist = std::numeric_limits<double>::max();\n  size_t min_dist_idx = 0;\n\n  // search in the range of the process\n  for (int i = start; i < end; i++) {\n    double dist = std::abs(x[i] - M_PI);\n    if (dist < min_dist) {\n      min_dist = dist;\n      min_dist_idx = i;\n    }\n  }\n\n  // get the minimum distance from all processes\n  double min_dist_global;\n  MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the minimum distance from all processes\n  size_t min_dist_idx_global;\n  MPI_Reduce(&min_dist_idx, &min_dist_idx_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_dist_idx_global;\n}",True,True,0.000169,3,0.0,True,True,0.000248,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements each process should search\n  int n_per_proc = n / world_size;\n\n  // get the start and end index of the search range\n  int start = n_per_proc * world_rank;\n  int end = n_per_proc * (world_rank + 1);\n\n  // get the minimum distance\n  double min_dist = std::numeric_limits<double>::max();\n  size_t min_dist_idx = 0;\n\n  // search in the range of the process\n  for (int i = start; i < end; i++) {\n    double dist = std::abs(x[i] - M_PI);\n    if (dist < min_dist) {\n      min_dist = dist;\n      min_dist_idx = i;\n    }\n  }\n\n  // get the minimum distance from all processes\n  double min_dist_global;\n  MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the minimum distance from all processes\n  size_t min_dist_idx_global;\n  MPI_Reduce(&min_dist_idx, &min_dist_idx_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_dist_idx_global;\n}",True,True,0.000169,3,1.0,True,False,0.000134,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,0.0,True,True,0.000174,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,1.0,True,True,0.000177,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,2.0,True,True,0.000178,,4.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,3.0,True,True,0.000181,,8.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,4.0,True,True,0.000189,,16.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,5.0,True,True,0.000184,,32.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,6.0,True,True,0.000195,,64.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,7.0,True,True,0.000214,,128.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,8.0,True,True,0.000235,,256.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n    double min_distance = std::numeric_limits<double>::max();\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            result = i;\n        }\n    }\n    return result;\n},True,False,0.000162,4,9.0,True,True,0.000301,,512.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements each rank will process\n  size_t n = x.size() / size;\n  // calculate the number of elements that will be left over\n  size_t n_remainder = x.size() % size;\n\n  // calculate the start and end indices for this rank\n  size_t start = n * rank;\n  size_t end = start + n;\n  // if this is the last rank, add the remainder to the end\n  if (rank == size - 1) {\n    end += n_remainder;\n  }\n\n  // calculate the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n\n  // loop over the elements in this rank's vector\n  for (size_t i = start; i < end; i++) {\n    // calculate the distance between the current element and PI\n    double distance = std::abs(x[i] - M_PI);\n    // if the distance is less than the minimum distance, update the minimum distance and index\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // reduce the minimum distance to rank 0\n  double min_distance_global;\n  MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // reduce the minimum index to rank 0\n  size_t min_index_global;\n  MPI_Reduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the minimum index\n  return min_index_global;\n}",True,True,0.000168,5,0.0,True,True,0.00017,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // calculate the number of elements each rank will process\n  size_t n = x.size() / size;\n  // calculate the number of elements that will be left over\n  size_t n_remainder = x.size() % size;\n\n  // calculate the start and end indices for this rank\n  size_t start = n * rank;\n  size_t end = start + n;\n  // if this is the last rank, add the remainder to the end\n  if (rank == size - 1) {\n    end += n_remainder;\n  }\n\n  // calculate the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n\n  // loop over the elements in this rank's vector\n  for (size_t i = start; i < end; i++) {\n    // calculate the distance between the current element and PI\n    double distance = std::abs(x[i] - M_PI);\n    // if the distance is less than the minimum distance, update the minimum distance and index\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // reduce the minimum distance to rank 0\n  double min_distance_global;\n  MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // reduce the minimum index to rank 0\n  size_t min_index_global;\n  MPI_Reduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the minimum index\n  return min_index_global;\n}",True,True,0.000168,5,1.0,True,False,9.2e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in x\n  int n = x.size();\n\n  // get the number of elements each process will handle\n  int n_per_process = n / world_size;\n\n  // get the starting index of the process\n  int start = n_per_process * world_rank;\n\n  // get the ending index of the process\n  int end = start + n_per_process;\n\n  // if the process is the last one, it will handle the remaining elements\n  if (world_rank == world_size - 1) {\n    end = n;\n  }\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n\n  // loop through the elements of the process\n  for (int i = start; i < end; i++) {\n    // get the distance between the current element and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is smaller than the minimum distance, update the minimum distance and the index\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance from all processes\n  double min_distance_global;\n  MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the minimum distance from all processes\n  size_t min_index_global;\n  MPI_Reduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_index_global;\n}",True,True,0.000171,6,0.0,True,True,0.000168,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in x\n  int n = x.size();\n\n  // get the number of elements each process will handle\n  int n_per_process = n / world_size;\n\n  // get the starting index of the process\n  int start = n_per_process * world_rank;\n\n  // get the ending index of the process\n  int end = start + n_per_process;\n\n  // if the process is the last one, it will handle the remaining elements\n  if (world_rank == world_size - 1) {\n    end = n;\n  }\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n\n  // loop through the elements of the process\n  for (int i = start; i < end; i++) {\n    // get the distance between the current element and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is smaller than the minimum distance, update the minimum distance and the index\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance from all processes\n  double min_distance_global;\n  MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the minimum distance from all processes\n  size_t min_index_global;\n  MPI_Reduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_index_global;\n}",True,True,0.000171,6,1.0,True,False,9.2e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n  int n = x.size();\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of processes\n  int size;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements each process will handle\n  int n_per_proc = n / size;\n\n  // get the remainder\n  int remainder = n % size;\n\n  // get the start and end index of the vector handled by the process\n  int start = rank * n_per_proc;\n  int end = start + n_per_proc;\n\n  // if the process has a remainder, add it to the end index\n  if (rank < remainder) {\n    end += 1;\n  }\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n\n  // loop over the vector\n  for (int i = start; i < end; i++) {\n    // get the distance between the current value and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is smaller than the current minimum distance, update the minimum distance\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance from the root process\n  double min_distance_root;\n  MPI_Reduce(&min_distance, &min_distance_root, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the minimum index from the root process\n  size_t min_index_root;\n  MPI_Reduce(&min_index, &min_index_root, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the minimum index from the root process\n  return min_index_root;\n}",True,True,0.000169,7,0.0,True,True,0.000167,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n  int n = x.size();\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of processes\n  int size;\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // get the number of elements each process will handle\n  int n_per_proc = n / size;\n\n  // get the remainder\n  int remainder = n % size;\n\n  // get the start and end index of the vector handled by the process\n  int start = rank * n_per_proc;\n  int end = start + n_per_proc;\n\n  // if the process has a remainder, add it to the end index\n  if (rank < remainder) {\n    end += 1;\n  }\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n\n  // loop over the vector\n  for (int i = start; i < end; i++) {\n    // get the distance between the current value and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is smaller than the current minimum distance, update the minimum distance\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance from the root process\n  double min_distance_root;\n  MPI_Reduce(&min_distance, &min_distance_root, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the minimum index from the root process\n  size_t min_index_root;\n  MPI_Reduce(&min_index, &min_index_root, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the minimum index from the root process\n  return min_index_root;\n}",True,True,0.000169,7,1.0,True,False,9.2e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int nproc;\n    MPI_Comm_size(MPI_COMM_WORLD, &nproc);\n\n    // get the rank of the process\n    int rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    // get the number of elements in the vector\n    size_t n = x.size();\n\n    // get the number of elements each process will handle\n    size_t n_per_proc = n / nproc;\n\n    // get the index of the first element handled by the process\n    size_t first_index = rank * n_per_proc;\n\n    // get the index of the last element handled by the process\n    size_t last_index = first_index + n_per_proc - 1;\n\n    // if the process is not the last one, then it will handle one more element\n    if (rank!= nproc - 1) {\n        last_index += 1;\n    }\n\n    // the process with rank 0 will store the index of the closest value to PI\n    size_t closest_index = 0;\n\n    // the process with rank 0 will store the value of the closest value to PI\n    double closest_value = std::numeric_limits<double>::max();\n\n    // loop over the elements handled by the process\n    for (size_t i = first_index; i <= last_index; i++) {\n        // get the value of the element\n        double value = x[i];\n\n        // check if the value is closer to PI than the current closest value\n        if (std::abs(value - M_PI) < std::abs(closest_value - M_PI)) {\n            // if it is, then update the closest value and the index\n            closest_value = value;\n            closest_index = i;\n        }\n    }\n\n    // broadcast the index of the closest value to the other processes\n    MPI_Bcast(&closest_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n    // return the index of the closest value to PI\n    return closest_index;\n}",True,True,0.000169,8,0.0,True,True,0.000653,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int nproc;\n    MPI_Comm_size(MPI_COMM_WORLD, &nproc);\n\n    // get the rank of the process\n    int rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    // get the number of elements in the vector\n    size_t n = x.size();\n\n    // get the number of elements each process will handle\n    size_t n_per_proc = n / nproc;\n\n    // get the index of the first element handled by the process\n    size_t first_index = rank * n_per_proc;\n\n    // get the index of the last element handled by the process\n    size_t last_index = first_index + n_per_proc - 1;\n\n    // if the process is not the last one, then it will handle one more element\n    if (rank!= nproc - 1) {\n        last_index += 1;\n    }\n\n    // the process with rank 0 will store the index of the closest value to PI\n    size_t closest_index = 0;\n\n    // the process with rank 0 will store the value of the closest value to PI\n    double closest_value = std::numeric_limits<double>::max();\n\n    // loop over the elements handled by the process\n    for (size_t i = first_index; i <= last_index; i++) {\n        // get the value of the element\n        double value = x[i];\n\n        // check if the value is closer to PI than the current closest value\n        if (std::abs(value - M_PI) < std::abs(closest_value - M_PI)) {\n            // if it is, then update the closest value and the index\n            closest_value = value;\n            closest_index = i;\n        }\n    }\n\n    // broadcast the index of the closest value to the other processes\n    MPI_Bcast(&closest_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n    // return the index of the closest value to PI\n    return closest_index;\n}",True,True,0.000169,8,1.0,True,False,0.000328,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_per_process = n / world_size;\n\n  // get the starting index of the process\n  int start = n_per_process * world_rank;\n\n  // get the ending index of the process\n  int end = start + n_per_process;\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n\n  // get the index of the minimum distance\n  size_t min_index = 0;\n\n  // loop through the elements in the process\n  for (int i = start; i < end; i++) {\n    // get the distance between the element and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is less than the minimum distance\n    if (distance < min_distance) {\n      // set the minimum distance and the index\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance from all processes\n  double min_distance_global;\n  MPI_Allreduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\n  // get the index of the minimum distance from all processes\n  size_t min_index_global;\n  MPI_Allreduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_index_global;\n}",True,True,0.000169,9,0.0,True,True,0.000248,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the rank of the process\n  int world_rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements per process\n  int n_per_process = n / world_size;\n\n  // get the starting index of the process\n  int start = n_per_process * world_rank;\n\n  // get the ending index of the process\n  int end = start + n_per_process;\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n\n  // get the index of the minimum distance\n  size_t min_index = 0;\n\n  // loop through the elements in the process\n  for (int i = start; i < end; i++) {\n    // get the distance between the element and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is less than the minimum distance\n    if (distance < min_distance) {\n      // set the minimum distance and the index\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance from all processes\n  double min_distance_global;\n  MPI_Allreduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\n  // get the index of the minimum distance from all processes\n  size_t min_index_global;\n  MPI_Allreduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_index_global;\n}",True,True,0.000169,9,1.0,True,False,0.000133,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n  int n = x.size();\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the number of elements each process will handle\n  int n_per_process = n / world_size;\n\n  // get the index of the first element that this process will handle\n  int first_element = rank * n_per_process;\n\n  // get the index of the last element that this process will handle\n  int last_element = (rank + 1) * n_per_process;\n\n  // get the local vector\n  std::vector<double> local_x(x.begin() + first_element, x.begin() + last_element);\n\n  // get the index of the closest value to pi\n  size_t closest_index = 0;\n  double closest_value = std::abs(local_x[0] - M_PI);\n  for (size_t i = 1; i < local_x.size(); ++i) {\n    double current_value = std::abs(local_x[i] - M_PI);\n    if (current_value < closest_value) {\n      closest_index = i;\n      closest_value = current_value;\n    }\n  }\n\n  // get the index of the closest value to pi in the global vector\n  int global_closest_index;\n  MPI_Reduce(&closest_index, &global_closest_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the closest value to pi in the global vector\n  size_t global_closest_value;\n  MPI_Reduce(&closest_value, &global_closest_value, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the closest value to pi in the global vector\n  return global_closest_index + first_element;\n}",True,True,0.000169,10,0.0,True,True,0.000343,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n  int n = x.size();\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of processes\n  int world_size;\n  MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n  // get the number of elements each process will handle\n  int n_per_process = n / world_size;\n\n  // get the index of the first element that this process will handle\n  int first_element = rank * n_per_process;\n\n  // get the index of the last element that this process will handle\n  int last_element = (rank + 1) * n_per_process;\n\n  // get the local vector\n  std::vector<double> local_x(x.begin() + first_element, x.begin() + last_element);\n\n  // get the index of the closest value to pi\n  size_t closest_index = 0;\n  double closest_value = std::abs(local_x[0] - M_PI);\n  for (size_t i = 1; i < local_x.size(); ++i) {\n    double current_value = std::abs(local_x[i] - M_PI);\n    if (current_value < closest_value) {\n      closest_index = i;\n      closest_value = current_value;\n    }\n  }\n\n  // get the index of the closest value to pi in the global vector\n  int global_closest_index;\n  MPI_Reduce(&closest_index, &global_closest_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // get the index of the closest value to pi in the global vector\n  size_t global_closest_value;\n  MPI_Reduce(&closest_value, &global_closest_value, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the closest value to pi in the global vector\n  return global_closest_index + first_element;\n}",True,True,0.000169,10,1.0,True,False,0.000185,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // calculate the number of elements each rank will have\n    int n = x.size() / size;\n\n    // calculate the start and end index of the current rank\n    int start = rank * n;\n    int end = start + n;\n\n    // calculate the minimum distance to pi\n    double min_distance = std::numeric_limits<double>::max();\n    int min_index = 0;\n\n    // loop through the elements of the current rank\n    for (int i = start; i < end; i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            min_index = i;\n        }\n    }\n\n    // reduce the minimum distance to pi to rank 0\n    double global_min_distance;\n    MPI_Reduce(&min_distance, &global_min_distance, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // reduce the index of the minimum distance to pi to rank 0\n    int global_min_index;\n    MPI_Reduce(&min_index, &global_min_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance to pi on rank 0\n    return global_min_index;\n}",True,True,0.000171,11,0.0,True,True,0.000168,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // calculate the number of elements each rank will have\n    int n = x.size() / size;\n\n    // calculate the start and end index of the current rank\n    int start = rank * n;\n    int end = start + n;\n\n    // calculate the minimum distance to pi\n    double min_distance = std::numeric_limits<double>::max();\n    int min_index = 0;\n\n    // loop through the elements of the current rank\n    for (int i = start; i < end; i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            min_index = i;\n        }\n    }\n\n    // reduce the minimum distance to pi to rank 0\n    double global_min_distance;\n    MPI_Reduce(&min_distance, &global_min_distance, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // reduce the index of the minimum distance to pi to rank 0\n    int global_min_index;\n    MPI_Reduce(&min_index, &global_min_index, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance to pi on rank 0\n    return global_min_index;\n}",True,True,0.000171,11,1.0,True,False,9.2e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,0.0,True,True,0.000165,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,1.0,True,True,0.000169,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,2.0,True,True,0.000169,,4.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,3.0,True,True,0.00017,,8.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,4.0,True,True,0.000176,,16.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,5.0,True,True,0.000172,,32.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,6.0,True,True,0.000176,,64.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,7.0,True,True,0.000217,,128.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,8.0,True,True,0.000224,,256.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double diff = std::abs(x[i] - M_PI);\n    if (diff < min) {\n      min = diff;\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000163,12,9.0,True,True,0.000306,,512.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements in the vector\n    int n = x.size();\n\n    // get the number of elements each process will process\n    int n_per_proc = n / world_size;\n\n    // get the number of elements that will be left over\n    int n_left = n % world_size;\n\n    // get the start index of the elements that this process will process\n    int start = n_per_proc * world_rank;\n\n    // get the end index of the elements that this process will process\n    int end = start + n_per_proc;\n\n    // if this process has elements left over, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // get the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n\n    // get the index of the minimum distance\n    size_t min_dist_index = 0;\n\n    // loop through the elements that this process will process\n    for (int i = start; i < end; i++) {\n        // get the distance between the element and PI\n        double dist = std::abs(x[i] - M_PI);\n\n        // if the distance is less than the minimum distance, update the minimum distance and index\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_dist_index = i;\n        }\n    }\n\n    // get the minimum distance from rank 0\n    double min_dist_global;\n    MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // get the index of the minimum distance from rank 0\n    size_t min_dist_index_global;\n    MPI_Reduce(&min_dist_index, &min_dist_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance\n    return min_dist_index_global;\n}",True,True,0.000168,13,0.0,True,True,0.000165,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements in the vector\n    int n = x.size();\n\n    // get the number of elements each process will process\n    int n_per_proc = n / world_size;\n\n    // get the number of elements that will be left over\n    int n_left = n % world_size;\n\n    // get the start index of the elements that this process will process\n    int start = n_per_proc * world_rank;\n\n    // get the end index of the elements that this process will process\n    int end = start + n_per_proc;\n\n    // if this process has elements left over, add them to the end\n    if (world_rank < n_left) {\n        end++;\n    }\n\n    // get the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n\n    // get the index of the minimum distance\n    size_t min_dist_index = 0;\n\n    // loop through the elements that this process will process\n    for (int i = start; i < end; i++) {\n        // get the distance between the element and PI\n        double dist = std::abs(x[i] - M_PI);\n\n        // if the distance is less than the minimum distance, update the minimum distance and index\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_dist_index = i;\n        }\n    }\n\n    // get the minimum distance from rank 0\n    double min_dist_global;\n    MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // get the index of the minimum distance from rank 0\n    size_t min_dist_index_global;\n    MPI_Reduce(&min_dist_index, &min_dist_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance\n    return min_dist_index_global;\n}",True,True,0.000168,13,1.0,True,False,9.4e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // get the number of elements in the vector\n    int n = x.size();\n\n    // calculate the number of elements each rank will have\n    int n_local = n / size;\n\n    // calculate the start and end index of the local vector\n    int start = n_local * rank;\n    int end = start + n_local;\n\n    // calculate the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n    int min_dist_index = -1;\n\n    // calculate the distance to the math constant PI\n    for (int i = start; i < end; i++) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_dist_index = i;\n        }\n    }\n\n    // reduce the minimum distance to rank 0\n    double min_dist_global;\n    MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // reduce the index of the minimum distance to rank 0\n    int min_dist_index_global;\n    MPI_Reduce(&min_dist_index, &min_dist_index_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance\n    return min_dist_index_global;\n}",True,True,0.00017,14,0.0,True,True,0.000168,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // get the number of elements in the vector\n    int n = x.size();\n\n    // calculate the number of elements each rank will have\n    int n_local = n / size;\n\n    // calculate the start and end index of the local vector\n    int start = n_local * rank;\n    int end = start + n_local;\n\n    // calculate the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n    int min_dist_index = -1;\n\n    // calculate the distance to the math constant PI\n    for (int i = start; i < end; i++) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_dist_index = i;\n        }\n    }\n\n    // reduce the minimum distance to rank 0\n    double min_dist_global;\n    MPI_Reduce(&min_dist, &min_dist_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // reduce the index of the minimum distance to rank 0\n    int min_dist_index_global;\n    MPI_Reduce(&min_dist_index, &min_dist_index_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance\n    return min_dist_index_global;\n}",True,True,0.00017,14,1.0,True,False,9.3e-05,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements in the vector\n    int n = x.size();\n\n    // get the number of elements each process should work on\n    int n_per_process = n / world_size;\n\n    // get the start and end indices of the vector that this process should work on\n    int start = n_per_process * world_rank;\n    int end = start + n_per_process;\n\n    // find the minimum distance from the vector elements to the value of PI\n    double min_distance = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n\n    for (int i = start; i < end; ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            min_index = i;\n        }\n    }\n\n    // get the minimum distance from all processes\n    double min_distance_global;\n    MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // get the index of the minimum distance from all processes\n    size_t min_index_global;\n    MPI_Reduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance from all processes\n    return min_index_global;\n}",True,True,0.00017,15,0.0,True,True,0.000249,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements in the vector\n    int n = x.size();\n\n    // get the number of elements each process should work on\n    int n_per_process = n / world_size;\n\n    // get the start and end indices of the vector that this process should work on\n    int start = n_per_process * world_rank;\n    int end = start + n_per_process;\n\n    // find the minimum distance from the vector elements to the value of PI\n    double min_distance = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n\n    for (int i = start; i < end; ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            min_index = i;\n        }\n    }\n\n    // get the minimum distance from all processes\n    double min_distance_global;\n    MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // get the index of the minimum distance from all processes\n    size_t min_index_global;\n    MPI_Reduce(&min_index, &min_index_global, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance from all processes\n    return min_index_global;\n}",True,True,0.00017,15,1.0,True,False,0.000133,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    // get the number of elements in the vector\n    int n = x.size();\n\n    // calculate the number of elements each process will handle\n    int n_per_proc = n / world_size;\n\n    // calculate the start and end indices of the elements handled by this process\n    int start = n_per_proc * world_rank;\n    int end = start + n_per_proc;\n\n    // calculate the number of elements that are smaller than PI\n    int n_smaller = 0;\n    for (int i = start; i < end; i++) {\n        if (x[i] < M_PI) {\n            n_smaller++;\n        }\n    }\n\n    // calculate the number of elements that are larger than PI\n    int n_larger = 0;\n    for (int i = start; i < end; i++) {\n        if (x[i] > M_PI) {\n            n_larger++;\n        }\n    }\n\n    // calculate the number of elements that are equal to PI\n    int n_equal = 0;\n    for (int i = start; i < end; i++) {\n        if (x[i] == M_PI) {\n            n_equal++;\n        }\n    }\n\n    // calculate the number of elements that are smaller than PI\n    int n_smaller_total;\n    MPI_Reduce(&n_smaller, &n_smaller_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the number of elements that are larger than PI\n    int n_larger_total;\n    MPI_Reduce(&n_larger, &n_larger_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the number of elements that are equal to PI\n    int n_equal_total;\n    MPI_Reduce(&n_equal, &n_equal_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the total number of elements that are smaller than PI\n    int n_smaller_total_total;\n    MPI_Reduce(&n_smaller_total, &n_smaller_total_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the total number of elements that are larger than PI\n    int n_larger_total_total;\n    MPI_Reduce(&n_larger_total, &n_larger_total_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the total number of elements that are equal to PI\n    int n_equal_total_total;\n    MPI_Reduce(&n_equal_total, &n_equal_total_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the total number of elements\n    int n_total;\n    MPI_Reduce(&n, &n_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the number of elements that are smaller than PI\n    int n_smaller_total_total_total;\n    MPI_Reduce(&n_smaller_total_total, &n_smaller_total_total_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the number of elements that are larger than PI\n    int n_larger_total_total_total;\n    MPI_Reduce(&n_larger_total_total, &n_larger_total_total_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the number of elements that are equal to PI\n    int n_equal_total_total_total;\n    MPI_Reduce(&n_equal_total_total, &n_equal_total_total_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the number of elements that are smaller than PI\n    int n_smaller_total_total_total_total;\n    MPI_Reduce(&n_smaller_total_total_total, &n_smaller_total_total_total_total, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    // calculate the number of elements that are larger than",False,True,,16,,,,,,
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // find the index of the value in the vector x that is closest to the math constant PI\n  // use M_PI for the value of PI\n  // use MPI to search in parallel\n  // assume MPI has already been initialized\n  // every rank has a complete copy of x\n  // return the result on rank 0\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements that each rank will have\n  int n_per_rank = n / size;\n\n  // get the starting index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // get the ending index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n\n  // get the index of the minimum distance\n  int min_index = 0;\n\n  // loop through the elements in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    // get the current element\n    double current_element = x[i];\n\n    // get the distance between the current element and the math constant PI\n    double distance = std::abs(current_element - M_PI);\n\n    // if the distance is less than the minimum distance\n    if (distance < min_distance) {\n      // set the minimum distance to the current distance\n      min_distance = distance;\n\n      // set the minimum index to the current index\n      min_index = i;\n    }\n  }\n\n  // get the minimum index on rank 0\n  int min_index_on_rank_0;\n  MPI_Reduce(&min_index, &min_index_on_rank_0, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the minimum index on rank 0\n  return min_index_on_rank_0;\n}",True,True,0.000172,17,0.0,True,True,0.000248,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"int rank, size;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n  // find the index of the value in the vector x that is closest to the math constant PI\n  // use M_PI for the value of PI\n  // use MPI to search in parallel\n  // assume MPI has already been initialized\n  // every rank has a complete copy of x\n  // return the result on rank 0\n\n  // get the number of elements in the vector\n  int n = x.size();\n\n  // get the number of elements that each rank will have\n  int n_per_rank = n / size;\n\n  // get the starting index of the current rank\n  int start_index = rank * n_per_rank;\n\n  // get the ending index of the current rank\n  int end_index = start_index + n_per_rank;\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n\n  // get the index of the minimum distance\n  int min_index = 0;\n\n  // loop through the elements in the current rank\n  for (int i = start_index; i < end_index; i++) {\n    // get the current element\n    double current_element = x[i];\n\n    // get the distance between the current element and the math constant PI\n    double distance = std::abs(current_element - M_PI);\n\n    // if the distance is less than the minimum distance\n    if (distance < min_distance) {\n      // set the minimum distance to the current distance\n      min_distance = distance;\n\n      // set the minimum index to the current index\n      min_index = i;\n    }\n  }\n\n  // get the minimum index on rank 0\n  int min_index_on_rank_0;\n  MPI_Reduce(&min_index, &min_index_on_rank_0, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the minimum index on rank 0\n  return min_index_on_rank_0;\n}",True,True,0.000172,17,1.0,True,False,0.000132,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n  int size = x.size();\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of processes\n  int num_procs;\n  MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n\n  // get the number of elements each process should search\n  int num_elements = size / num_procs;\n\n  // get the remainder of the division\n  int remainder = size % num_procs;\n\n  // get the starting index of the process\n  int start_index = rank * num_elements;\n\n  // get the ending index of the process\n  int end_index = start_index + num_elements;\n\n  // if the process has a remainder, add it to the end index\n  if (rank < remainder) {\n    end_index++;\n  }\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n\n  // get the index of the minimum distance\n  int min_index = -1;\n\n  // loop through the vector\n  for (int i = start_index; i < end_index; i++) {\n    // get the distance between the current element and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is less than the minimum distance, set the minimum distance and index\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance\n  double min_distance_global;\n\n  // get the index of the minimum distance\n  int min_index_global;\n\n  // gather the minimum distance and index from all processes\n  MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&min_index, &min_index_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_index_global;\n}",True,True,0.000171,18,0.0,True,True,0.000247,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n  int size = x.size();\n\n  // get the rank of the process\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n  // get the number of processes\n  int num_procs;\n  MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n\n  // get the number of elements each process should search\n  int num_elements = size / num_procs;\n\n  // get the remainder of the division\n  int remainder = size % num_procs;\n\n  // get the starting index of the process\n  int start_index = rank * num_elements;\n\n  // get the ending index of the process\n  int end_index = start_index + num_elements;\n\n  // if the process has a remainder, add it to the end index\n  if (rank < remainder) {\n    end_index++;\n  }\n\n  // get the minimum distance\n  double min_distance = std::numeric_limits<double>::max();\n\n  // get the index of the minimum distance\n  int min_index = -1;\n\n  // loop through the vector\n  for (int i = start_index; i < end_index; i++) {\n    // get the distance between the current element and PI\n    double distance = std::abs(x[i] - M_PI);\n\n    // if the distance is less than the minimum distance, set the minimum distance and index\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n\n  // get the minimum distance\n  double min_distance_global;\n\n  // get the index of the minimum distance\n  int min_index_global;\n\n  // gather the minimum distance and index from all processes\n  MPI_Reduce(&min_distance, &min_distance_global, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n  MPI_Reduce(&min_index, &min_index_global, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n  // return the index of the minimum distance\n  return min_index_global;\n}",True,True,0.000171,18,1.0,True,False,0.000132,,2.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n    int n = x.size();\n\n    // get the rank of the process\n    int rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    // get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the number of elements each process should work on\n    int n_per_rank = n / world_size;\n\n    // get the number of elements each process should skip\n    int skip = n % world_size;\n\n    // get the start and end index of the process\n    int start = rank * n_per_rank + std::min(rank, skip);\n    int end = start + n_per_rank + (rank < skip? 1 : 0);\n\n    // get the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n\n    // loop over the elements of the process\n    for (int i = start; i < end; ++i) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_index = i;\n        }\n    }\n\n    // get the minimum distance on rank 0\n    double min_dist_0;\n    MPI_Reduce(&min_dist, &min_dist_0, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // get the index of the minimum distance on rank 0\n    size_t min_index_0;\n    MPI_Reduce(&min_index, &min_index_0, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance on rank 0\n    return min_index_0;\n}",True,True,0.00017,19,0.0,True,True,0.000168,,1.0
"#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi,0.2,0.95,True,1024,True,"// get the size of the vector\n    int n = x.size();\n\n    // get the rank of the process\n    int rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    // get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    // get the number of elements each process should work on\n    int n_per_rank = n / world_size;\n\n    // get the number of elements each process should skip\n    int skip = n % world_size;\n\n    // get the start and end index of the process\n    int start = rank * n_per_rank + std::min(rank, skip);\n    int end = start + n_per_rank + (rank < skip? 1 : 0);\n\n    // get the minimum distance\n    double min_dist = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n\n    // loop over the elements of the process\n    for (int i = start; i < end; ++i) {\n        double dist = std::abs(x[i] - M_PI);\n        if (dist < min_dist) {\n            min_dist = dist;\n            min_index = i;\n        }\n    }\n\n    // get the minimum distance on rank 0\n    double min_dist_0;\n    MPI_Reduce(&min_dist, &min_dist_0, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // get the index of the minimum distance on rank 0\n    size_t min_index_0;\n    MPI_Reduce(&min_index, &min_index_0, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    // return the index of the minimum distance on rank 0\n    return min_index_0;\n}",True,True,0.00017,19,1.0,True,False,9.3e-05,,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  // Hint: use MPI and OpenMP\n},True,False,,0,0.0,False,,,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n\n  #pragma omp parallel for reduction(min: closest_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n\n  return closest_index;\n},True,False,0.000163,1,0.0,True,True,0.000167,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n\n  #pragma omp parallel for reduction(min: closest_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n\n  return closest_index;\n},True,False,0.000163,1,1.0,True,False,0.000102,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t result = 0;\n    double min = std::numeric_limits<double>::max();\n\n    #pragma omp parallel for reduction(min:min)\n    for (size_t i = 0; i < x.size(); i++) {\n        if (std::abs(x[i] - M_PI) < min) {\n            min = std::abs(x[i] - M_PI);\n            result = i;\n        }\n    }\n\n    return result;\n},True,False,0.000168,2,0.0,True,True,0.000167,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t result = 0;\n    double min = std::numeric_limits<double>::max();\n\n    #pragma omp parallel for reduction(min:min)\n    for (size_t i = 0; i < x.size(); i++) {\n        if (std::abs(x[i] - M_PI) < min) {\n            min = std::abs(x[i] - M_PI);\n            result = i;\n        }\n    }\n\n    return result;\n},True,False,0.000168,2,1.0,True,False,0.000102,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,0.0,True,True,0.000165,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,1.0,True,True,0.000167,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,2.0,True,True,0.000165,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,3.0,True,True,0.000166,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,4.0,True,True,0.000163,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,5.0,True,True,0.000166,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,6.0,True,True,0.000166,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,7.0,True,True,0.000168,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,8.0,True,True,0.000168,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,9.0,True,True,0.000168,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,10.0,True,True,0.000167,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,11.0,True,True,0.000169,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,12.0,True,True,0.000168,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,13.0,True,True,0.000169,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,14.0,True,True,0.000172,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,15.0,True,True,0.000174,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,16.0,True,True,0.000172,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,17.0,True,True,0.000171,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,18.0,True,True,0.00017,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,19.0,True,True,0.00017,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,3,20.0,True,True,0.00017,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min: closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,4,0.0,True,True,0.000166,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min: closest_distance)\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,4,1.0,True,False,9.3e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::numeric_limits<double>::max();\n  #pragma omp parallel for reduction(min:min)\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (std::abs(x[i] - M_PI) < min) {\n      min = std::abs(x[i] - M_PI);\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000168,5,0.0,True,True,0.000167,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t result = 0;\n  double min = std::numeric_limits<double>::max();\n  #pragma omp parallel for reduction(min:min)\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (std::abs(x[i] - M_PI) < min) {\n      min = std::abs(x[i] - M_PI);\n      result = i;\n    }\n  }\n  return result;\n},True,False,0.000168,5,1.0,True,False,9.1e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  #pragma omp parallel for reduction(min:min_dist)\n  for (size_t i = 0; i < x.size(); i++) {\n    double dist = std::abs(x[i] - M_PI);\n    if (dist < min_dist) {\n      min_dist = dist;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,False,0.00017,6,0.0,True,True,0.000166,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,double min_dist = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  #pragma omp parallel for reduction(min:min_dist)\n  for (size_t i = 0; i < x.size(); i++) {\n    double dist = std::abs(x[i] - M_PI);\n    if (dist < min_dist) {\n      min_dist = dist;\n      min_index = i;\n    }\n  }\n  return min_index;\n},True,False,0.00017,6,1.0,True,False,9.5e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,0.0,True,True,0.000166,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,1.0,True,True,0.000165,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,2.0,True,True,0.000165,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,3.0,True,True,0.000166,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,4.0,True,True,0.000165,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,5.0,True,True,0.000166,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,6.0,True,True,0.000166,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,7.0,True,True,0.000168,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,8.0,True,True,0.000168,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,9.0,True,True,0.000168,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,10.0,True,True,0.00017,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,11.0,True,True,0.00017,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,12.0,True,True,0.000169,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,13.0,True,True,0.000168,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,14.0,True,True,0.000172,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,15.0,True,True,0.000174,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,16.0,True,True,0.000172,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,17.0,True,True,0.000171,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,18.0,True,True,0.00017,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,19.0,True,True,0.000169,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n    size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); i++) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_distance = distance;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000163,7,20.0,True,True,0.000169,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(M_PI - x[0]);\n\n  #pragma omp parallel for reduction(min:closest_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(M_PI - x[i]);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n\n  return closest_index;\n},True,False,0.000163,8,0.0,True,True,0.000169,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(M_PI - x[0]);\n\n  #pragma omp parallel for reduction(min:closest_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(M_PI - x[i]);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n\n  return closest_index;\n},True,False,0.000163,8,1.0,True,False,9.3e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  return 0;\n},True,False,0.000173,9,0.0,True,False,0.0,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(M_PI - x[0]);\n\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(M_PI - x[i]);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n\n  return closest;\n},True,False,0.000162,10,0.0,True,True,0.000167,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest = 0;\n  double min_distance = std::abs(M_PI - x[0]);\n\n  #pragma omp parallel for reduction(min:min_distance)\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(M_PI - x[i]);\n    if (distance < min_distance) {\n      min_distance = distance;\n      closest = i;\n    }\n  }\n\n  return closest;\n},True,False,0.000162,10,1.0,True,False,9.9e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,0.0,True,True,0.000167,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,1.0,True,True,0.000167,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,2.0,True,True,0.000165,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,3.0,True,True,0.000166,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,4.0,True,True,0.000165,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,5.0,True,True,0.000165,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,6.0,True,True,0.000166,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,7.0,True,True,0.000168,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,8.0,True,True,0.000168,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,9.0,True,True,0.000167,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,10.0,True,True,0.000168,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,11.0,True,True,0.000168,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,12.0,True,True,0.000168,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,13.0,True,True,0.000169,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,14.0,True,True,0.000177,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,15.0,True,True,0.000175,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,16.0,True,True,0.00017,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,17.0,True,True,0.000171,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,18.0,True,True,0.00017,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,19.0,True,True,0.000169,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,11,20.0,True,True,0.00017,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,double min = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    #pragma omp parallel for reduction(min:min)\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (std::abs(x[i] - M_PI) < min) {\n            min = std::abs(x[i] - M_PI);\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,False,0.00017,12,0.0,True,True,0.000168,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,double min = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n    #pragma omp parallel for reduction(min:min)\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (std::abs(x[i] - M_PI) < min) {\n            min = std::abs(x[i] - M_PI);\n            min_index = i;\n        }\n    }\n    return min_index;\n},True,False,0.00017,12,1.0,True,False,9.1e-05,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,0.0,True,True,0.000167,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,1.0,True,True,0.000166,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,2.0,True,True,0.000165,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,3.0,True,True,0.000165,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,4.0,True,True,0.000165,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,5.0,True,True,0.000165,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,6.0,True,True,0.000165,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,7.0,True,True,0.000167,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,8.0,True,True,0.000168,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,9.0,True,True,0.000168,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,10.0,True,True,0.000169,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,11.0,True,True,0.000168,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,12.0,True,True,0.000169,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,13.0,True,True,0.000168,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,14.0,True,True,0.000174,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,15.0,True,True,0.000171,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,16.0,True,True,0.000172,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,17.0,True,True,0.000171,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,18.0,True,True,0.000171,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,19.0,True,True,0.00017,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000163,13,20.0,True,True,0.00017,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,"double min_distance = std::numeric_limits<double>::max();\n    size_t min_index = 0;\n\n    #pragma omp parallel for reduction(min: min_distance, min_index)\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < min_distance) {\n            min_distance = distance;\n            min_index = i;\n        }\n    }\n\n    return min_index;\n}",True,False,0.000163,14,0.0,True,False,0.000176,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,0.0,True,True,0.000165,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,1.0,True,True,0.000165,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,2.0,True,True,0.000166,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,3.0,True,True,0.000167,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,4.0,True,True,0.000165,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,5.0,True,True,0.000165,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,6.0,True,True,0.000165,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,7.0,True,True,0.000168,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,8.0,True,True,0.000168,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,9.0,True,True,0.000168,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,10.0,True,True,0.000168,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,11.0,True,True,0.000169,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,12.0,True,True,0.000168,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,13.0,True,True,0.000166,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,14.0,True,True,0.000171,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,15.0,True,True,0.000171,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,16.0,True,True,0.00017,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,17.0,True,True,0.000172,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,18.0,True,True,0.000172,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,19.0,True,True,0.00017,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_distance = std::abs(x[0] - M_PI);\n    for (size_t i = 1; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < closest_distance) {\n            closest_index = i;\n            closest_distance = distance;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,15,20.0,True,True,0.000171,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,0.0,True,True,0.000166,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,1.0,True,True,0.000165,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,2.0,True,True,0.000165,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,3.0,True,True,0.000168,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,4.0,True,True,0.000165,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,5.0,True,True,0.000165,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,6.0,True,True,0.000163,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,7.0,True,True,0.000168,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,8.0,True,True,0.000168,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,9.0,True,True,0.000168,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,10.0,True,True,0.000168,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,11.0,True,True,0.000168,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,12.0,True,True,0.000168,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,13.0,True,True,0.000168,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,14.0,True,True,0.000174,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,15.0,True,True,0.000171,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,16.0,True,True,0.000173,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,17.0,True,True,0.000172,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,18.0,True,True,0.00017,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,19.0,True,True,0.00017,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,// TODO: implement this function\n  size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); i++) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_distance = distance;\n      closest_index = i;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,16,20.0,True,True,0.00017,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,0.0,True,True,0.000165,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,1.0,True,True,0.000166,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,2.0,True,True,0.000167,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,3.0,True,True,0.000168,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,4.0,True,True,0.000163,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,5.0,True,True,0.000167,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,6.0,True,True,0.000165,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,7.0,True,True,0.00017,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,8.0,True,True,0.000169,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,9.0,True,True,0.000168,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,10.0,True,True,0.000167,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,11.0,True,True,0.000168,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,12.0,True,True,0.000168,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,13.0,True,True,0.000169,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,14.0,True,True,0.000174,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,15.0,True,True,0.00017,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,16.0,True,True,0.000171,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,17.0,True,True,0.000171,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,18.0,True,True,0.00017,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,19.0,True,True,0.000171,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_distance = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < closest_distance) {\n      closest_index = i;\n      closest_distance = distance;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,17,20.0,True,True,0.00017,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,0.0,True,True,0.000166,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,1.0,True,True,0.000167,2.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,2.0,True,True,0.000166,4.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,3.0,True,True,0.000166,8.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,4.0,True,True,0.000166,16.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,5.0,True,True,0.000162,32.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,6.0,True,True,0.000165,64.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,7.0,True,True,0.000168,1.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,8.0,True,True,0.000168,2.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,9.0,True,True,0.000168,4.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,10.0,True,True,0.000168,8.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,11.0,True,True,0.000168,16.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,12.0,True,True,0.000167,32.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,13.0,True,True,0.000168,64.0,2.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,14.0,True,True,0.00017,1.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,15.0,True,True,0.000172,2.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,16.0,True,True,0.000172,4.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,17.0,True,True,0.000169,8.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,18.0,True,True,0.00017,16.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,19.0,True,True,0.000173,32.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n  double closest_value = std::abs(x[0] - M_PI);\n  for (size_t i = 1; i < x.size(); ++i) {\n    double value = std::abs(x[i] - M_PI);\n    if (value < closest_value) {\n      closest_index = i;\n      closest_value = value;\n    }\n  }\n  return closest_index;\n},True,False,0.000162,18,20.0,True,True,0.000169,64.0,4.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_value = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_value)\n    for (size_t i = 1; i < x.size(); i++) {\n        double value = std::abs(x[i] - M_PI);\n        if (value < closest_value) {\n            closest_value = value;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,19,0.0,True,True,0.000165,1.0,1.0
"#include <mpi.h>\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI and OpenMP to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",37_search_find_the_closest_number_to_pi,search,cpp,mpi+omp,0.2,0.95,True,1024,True,size_t closest_index = 0;\n    double closest_value = std::abs(x[0] - M_PI);\n    #pragma omp parallel for reduction(min:closest_value)\n    for (size_t i = 1; i < x.size(); i++) {\n        double value = std::abs(x[i] - M_PI);\n        if (value < closest_value) {\n            closest_value = value;\n            closest_index = i;\n        }\n    }\n    return closest_index;\n},True,False,0.000162,19,1.0,True,False,0.000106,2.0,1.0
