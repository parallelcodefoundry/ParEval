[
    {
        "problem_type": "geometry",
        "language": "cpp",
        "name": "12_geometry_smallest_triangle",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble triangleArea(Point const& A, Point const& B, Point const& C) {\n  return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n}\n\n/* Return the area of the smallest triangle that can be formed by any 3 points.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n   output: 5.5\n*/\ndouble smallestArea(std::vector<Point> const& points) {",
        "translation_prompt": "// Serial implementation of smallestArea\n// struct Point {\n// \tdouble x, y;\n// };\n// \n// double triangleArea(Point const& A, Point const& B, Point const& C) {\n//   return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n// }\n// \n// /* Return the area of the smallest triangle that can be formed by any 3 points.\n//    Example:\n// \n//    input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n//    output: 5.5\n// */\n// double smallestArea(std::vector<Point> const& points) {\n// double minArea = std::numeric_limits<double>::max();\n//   for (int i = 0; i < points.size(); ++i) {\n//     for (int j = i + 1; j < points.size(); ++j) {\n//       for (int k = j + 1; k < points.size(); ++k) {\n//         double area = triangleArea(points[i], points[j], points[k]);\n//         if (area < minArea) {\n//           minArea = area;\n//         }\n//       }\n//     }\n//   }\n//   return minArea;\n// }\n\n// OpenMP implementation of smallestArea\n#include <omp.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble triangleArea(Point const& A, Point const& B, Point const& C) {\n  return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n}\n\n/* Return the area of the smallest triangle that can be formed by any 3 points.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n   output: 5.5\n*/\ndouble smallestArea(std::vector<Point> const& points) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct Point {\n\tdouble x, y;\n};\n\ndouble triangleArea(Point const& A, Point const& B, Point const& C) {\n  return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n}\n\n/* Return the area of the smallest triangle that can be formed by any 3 points.\n   Example:\n\n   input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n   output: 5.5\n*/\ndouble smallestArea(std::vector<Point> const& points) {\ndouble minArea = std::numeric_limits<double>::max();\n  for (int i = 0; i < points.size(); ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n      for (int k = j + 1; k < points.size(); ++k) {\n        double area = triangleArea(points[i], points[j], points[k]);\n        if (area < minArea) {\n          minArea = area;\n        }\n      }\n    }\n  }\n  return minArea;\n}",
        "translation_function_name": "smallestArea",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      #pragma omp critical\n      {\n        if (area < minArea) {\n          minArea = area;\n        }\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      #pragma omp critical\n      {\n        if (area < minArea) {\n          minArea = area;\n        }\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      #pragma omp critical\n      {\n        if (area < minArea) {\n          minArea = area;\n        }\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      #pragma omp critical\n      {\n        if (area < minArea) {\n          minArea = area;\n        }\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}",
            "\ndouble minArea = std::numeric_limits<double>::max();\n#pragma omp parallel for collapse(2) reduction(min:minArea)\nfor (int i = 0; i < points.size(); ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < minArea) {\n        minArea = area;\n      }\n    }\n  }\n}\nreturn minArea;\n}"
        ]
    },
    {
        "problem_type": "geometry",
        "language": "cpp",
        "name": "14_geometry_closest_pair_1d",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\ndouble distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Use OpenMP to compute in parallel.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of closestPair\n// double distance(double x1, double x2) {\n// \treturn std::abs(x1 - x2);\n// }\n// \n// /* Return the distance between the closest two elements in the vector x.\n//    Example: \n// \n//    input: [7, 3, 9, 12, 31, 1]\n//    output: 2\n// */\n// double closestPair(std::vector<double> const& x) {\n// double min_dist = std::numeric_limits<double>::max();\n// \tfor (size_t i = 0; i < x.size(); ++i) {\n// \t\tfor (size_t j = i + 1; j < x.size(); ++j) {\n// \t\t\tdouble dist = distance(x[i], x[j]);\n// \t\t\tif (dist < min_dist) {\n// \t\t\t\tmin_dist = dist;\n// \t\t\t}\n// \t\t}\n// \t}\n// \treturn min_dist;\n// }\n\n// OpenMP implementation of closestPair\n#include <omp.h>\n\ndouble distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Use OpenMP to compute in parallel.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "double distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(std::vector<double> const& x) {\ndouble min_dist = std::numeric_limits<double>::max();\n\tfor (size_t i = 0; i < x.size(); ++i) {\n\t\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\t\tdouble dist = distance(x[i], x[j]);\n\t\t\tif (dist < min_dist) {\n\t\t\t\tmin_dist = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}",
        "translation_function_name": "closestPair",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n    for (size_t j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < min_dist) {\n            min_dist = dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n    for (size_t j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < min_dist) {\n            min_dist = dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tdouble local_min_dist = std::numeric_limits<double>::max();\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < local_min_dist) {\n\t\t\tlocal_min_dist = dist;\n\t\t}\n\t}\n\t#pragma omp critical\n\t{\n\t\tif (local_min_dist < min_dist) {\n\t\t\tmin_dist = local_min_dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}",
            "\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (size_t i = 0; i < x.size(); ++i) {\n\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\tdouble dist = distance(x[i], x[j]);\n\t\tif (dist < min_dist) {\n\t\t\tmin_dist = dist;\n\t\t}\n\t}\n}\nreturn min_dist;\n}"
        ]
    },
    {
        "problem_type": "geometry",
        "language": "cpp",
        "name": "13_geometry_closest_pair_2d",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble distance(Point const& p1, Point const& p2) {\n\treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n}\n\n/* Return the distance between the closest two points in the vector points.\n   Use OpenMP to compute in parallel.\n   Example: \n\n   input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n   output: 1.41421\n*/\ndouble closestPair(std::vector<Point> const& points) {",
        "translation_prompt": "// Serial implementation of closestPair\n// struct Point {\n// \tdouble x, y;\n// };\n// \n// double distance(Point const& p1, Point const& p2) {\n// \treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n// }\n// \n// /* Return the distance between the closest two points in the vector points.\n//    Example: \n// \n//    input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n//    output: 1.41421\n// */\n// double closestPair(std::vector<Point> const& points) {\n// if (points.size() < 2) {\n// \t\treturn 0;\n// \t}\n// \tdouble min_dist = std::numeric_limits<double>::max();\n// \tfor (int i = 0; i < points.size(); ++i) {\n// \t\tfor (int j = i + 1; j < points.size(); ++j) {\n// \t\t\tdouble dist = distance(points[i], points[j]);\n// \t\t\tif (dist < min_dist) {\n// \t\t\t\tmin_dist = dist;\n// \t\t\t}\n// \t\t}\n// \t}\n// \treturn min_dist;\n// }\n\n// OpenMP implementation of closestPair\n#include <omp.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble distance(Point const& p1, Point const& p2) {\n\treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n}\n\n/* Return the distance between the closest two points in the vector points.\n   Use OpenMP to compute in parallel.\n   Example: \n\n   input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n   output: 1.41421\n*/\ndouble closestPair(std::vector<Point> const& points) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct Point {\n\tdouble x, y;\n};\n\ndouble distance(Point const& p1, Point const& p2) {\n\treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n}\n\n/* Return the distance between the closest two points in the vector points.\n   Example: \n\n   input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n   output: 1.41421\n*/\ndouble closestPair(std::vector<Point> const& points) {\nif (points.size() < 2) {\n\t\treturn 0;\n\t}\n\tdouble min_dist = std::numeric_limits<double>::max();\n\tfor (int i = 0; i < points.size(); ++i) {\n\t\tfor (int j = i + 1; j < points.size(); ++j) {\n\t\t\tdouble dist = distance(points[i], points[j]);\n\t\t\tif (dist < min_dist) {\n\t\t\t\tmin_dist = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}",
        "translation_function_name": "closestPair",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (int i = 0; i < points.size(); ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < min_dist) {\n            min_dist = dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < points.size(); ++i) {\n    double local_min_dist = std::numeric_limits<double>::max();\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_dist < min_dist) {\n            min_dist = local_min_dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (int i = 0; i < points.size(); ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < min_dist) {\n            min_dist = dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (int i = 0; i < points.size(); ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < min_dist) {\n            min_dist = dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (int i = 0; i < points.size(); ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < min_dist) {\n            min_dist = dist;\n        }\n    }\n}\nreturn min_dist;\n}",
            "\nif (points.size() < 2) {\n    return 0;\n}\ndouble min_dist = std::numeric_limits<double>::max();\n#pragma omp parallel for reduction(min:min_dist)\nfor (int i = 0; i < points.size(); ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < min_dist) {\n            min_dist = dist;\n        }\n    }\n}\nreturn min_dist;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "16_graph_largest_component",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint largestComponent(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of largestComponent\n// /* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n//    output: 2\n// */\n// int largestComponent(std::vector<int> const& A, size_t N) {\n// std::vector<bool> visited(N, false);\n//   std::vector<int> component(N, 0);\n//   int max_component = 0;\n// \n//   for (size_t i = 0; i < N; i++) {\n//     if (!visited[i]) {\n//       int size = 0;\n//       std::queue<int> q;\n//       q.push(i);\n//       visited[i] = true;\n//       while (!q.empty()) {\n//         int v = q.front();\n//         q.pop();\n//         size++;\n//         for (size_t j = 0; j < N; j++) {\n//           if (A[v * N + j] == 1 &&!visited[j]) {\n//             q.push(j);\n//             visited[j] = true;\n//           }\n//         }\n//       }\n//       component[i] = size;\n//       max_component = std::max(max_component, size);\n//     }\n//   }\n// \n//   return max_component;\n// }\n\n// OpenMP implementation of largestComponent\n#include <omp.h>\n\n/* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint largestComponent(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint largestComponent(std::vector<int> const& A, size_t N) {\nstd::vector<bool> visited(N, false);\n  std::vector<int> component(N, 0);\n  int max_component = 0;\n\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      std::queue<int> q;\n      q.push(i);\n      visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 &&!visited[j]) {\n            q.push(j);\n            visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      max_component = std::max(max_component, size);\n    }\n  }\n\n  return max_component;\n}",
        "translation_function_name": "largestComponent",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    max_component = std::max(max_component, local_max_component);\n    for (size_t i = 0; i < N; i++) {\n      visited[i] = visited[i] || local_visited[i];\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max = std::max(local_max, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n      }\n    }\n    max_component = std::max(max_component, local_max);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n        max_component = std::max(max_component, component[i]);\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n        max_component = std::max(max_component, local_max_component);\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max = std::max(local_max, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n      }\n    }\n    max_component = std::max(max_component, local_max);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    max_component = std::max(max_component, local_max_component);\n    for (size_t i = 0; i < N; i++) {\n      visited[i] = visited[i] || local_visited[i];\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n      }\n    }\n    max_component = std::max(max_component, local_max_component);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n        max_component = std::max(max_component, component[i]);\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n        max_component = std::max(max_component, component[i]);\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n        max_component = std::max(max_component, component[i]);\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n      }\n    }\n    max_component = std::max(max_component, local_max_component);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n        max_component = std::max(max_component, component[i]);\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max = std::max(local_max, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n      }\n    }\n    max_component = std::max(max_component, local_max);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n      }\n    }\n    max_component = std::max(max_component, local_max_component);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::queue<int> q;\n  std::vector<bool> local_visited(N, false);\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n\n      #pragma omp critical\n      {\n        if (size > max_component) {\n          max_component = size;\n        }\n        for (size_t k = 0; k < N; ++k) {\n          if (local_visited[k]) {\n            visited[k] = true;\n          }\n        }\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    max_component = std::max(max_component, local_max_component);\n    for (size_t i = 0; i < N; i++) {\n      visited[i] = visited[i] || local_visited[i];\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n        max_component = std::max(max_component, component[i]);\n      }\n    }\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max = std::max(local_max, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      if (local_visited[i] && !visited[i]) {\n        visited[i] = true;\n      }\n    }\n    max_component = std::max(max_component, local_max);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    for (size_t i = 0; i < N; i++) {\n      visited[i] = visited[i] || local_visited[i];\n    }\n    max_component = std::max(max_component, local_max_component);\n  }\n}\n\nreturn max_component;\n}",
            "\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\n\n#pragma omp parallel\n{\n  std::vector<bool> local_visited(N, false);\n  std::queue<int> q;\n  int local_max_component = 0;\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      q.push(i);\n      local_visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 && !local_visited[j]) {\n            q.push(j);\n            local_visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      local_max_component = std::max(local_max_component, size);\n    }\n  }\n\n  #pragma omp critical\n  {\n    max_component = std::max(max_component, local_max_component);\n    for (size_t i = 0; i < N; i++) {\n      visited[i] = visited[i] || local_visited[i];\n    }\n  }\n}\n\nreturn max_component;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "18_graph_count_components",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n\t Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint componentCount(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of componentCount\n// /* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n//    output: 2\n// */\n// int componentCount(std::vector<int> const& A, size_t N) {\n// std::vector<bool> visited(N, false);\n//     int count = 0;\n// \n//     for (size_t i = 0; i < N; ++i) {\n//         if (!visited[i]) {\n//             ++count;\n//             std::stack<size_t> stack;\n//             stack.push(i);\n//             visited[i] = true;\n// \n//             while (!stack.empty()) {\n//                 size_t node = stack.top();\n//                 stack.pop();\n// \n//                 for (size_t j = 0; j < N; ++j) {\n//                     if (A[node * N + j] &&!visited[j]) {\n//                         stack.push(j);\n//                         visited[j] = true;\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// \n//     return count;\n// }\n\n// OpenMP implementation of componentCount\n#include <omp.h>\n\n/* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n\t Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint componentCount(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint componentCount(std::vector<int> const& A, size_t N) {\nstd::vector<bool> visited(N, false);\n    int count = 0;\n\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            std::stack<size_t> stack;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] &&!visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n\n    return count;\n}",
        "translation_function_name": "componentCount",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::vector<bool> local_visited(N, false);\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            std::stack<size_t> stack;\n            stack.push(i);\n            local_visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !local_visited[j]) {\n                        stack.push(j);\n                        local_visited[j] = true;\n                    }\n                }\n            }\n\n            #pragma omp critical\n            {\n                for (size_t k = 0; k < N; ++k) {\n                    if (local_visited[k] && !visited[k]) {\n                        visited[k] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::stack<size_t> stack;\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n}\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\nomp_lock_t lock;\nomp_init_lock(&lock);\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N; ++i) {\n    if (!visited[i]) {\n        omp_set_lock(&lock);\n        if (!visited[i]) {\n            ++count;\n            std::stack<size_t> stack;\n            stack.push(i);\n            visited[i] = true;\n            omp_unset_lock(&lock);\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j]) {\n                        omp_set_lock(&lock);\n                        if (!visited[j]) {\n                            stack.push(j);\n                            visited[j] = true;\n                        }\n                        omp_unset_lock(&lock);\n                    }\n                }\n            }\n        } else {\n            omp_unset_lock(&lock);\n        }\n    }\n}\n\nomp_destroy_lock(&lock);\nreturn count;\n}",
            "\nstd::vector<bool> visited(N, false);\nint count = 0;\n#pragma omp parallel\n{\n    std::vector<bool> local_visited(N, false);\n    #pragma omp for reduction(+:count)\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            std::stack<size_t> stack;\n            stack.push(i);\n            local_visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] && !local_visited[j]) {\n                        stack.push(j);\n                        local_visited[j] = true;\n                    }\n                }\n            }\n            #pragma omp critical\n            {\n                for (size_t k = 0; k < N; ++k) {\n                    if (local_visited[k]) visited[k] = true;\n                }\n            }\n        }\n    }\n}\nreturn count;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "15_graph_edge_count",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of edgeCount\n// /* Count the number of edges in the directed graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n//    Example:\n// \n// \t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n//    output: 3\n// */\n// int edgeCount(std::vector<int> const& A, size_t N) {\n// int count = 0;\n//   for (size_t i = 0; i < N; ++i) {\n//     for (size_t j = 0; j < N; ++j) {\n//       if (A[i * N + j] == 1) {\n//         ++count;\n//       }\n//     }\n//   }\n//   return count;\n// }\n\n// OpenMP implementation of edgeCount\n#include <omp.h>\n\n/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(std::vector<int> const& A, size_t N) {\nint count = 0;\n  for (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n      if (A[i * N + j] == 1) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}",
        "translation_function_name": "edgeCount",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      count++;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      count++;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}",
            "\nint count = 0;\n#pragma omp parallel for reduction(+:count)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++count;\n    }\n  }\n}\nreturn count;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "17_graph_highest_degree",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of maxDegree\n// /* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n//    output: 3\n// */\n// int maxDegree(std::vector<int> const& A, size_t N) {\n// int max_degree = 0;\n//   for (size_t i = 0; i < N; ++i) {\n//     int degree = 0;\n//     for (size_t j = 0; j < N; ++j) {\n//       if (A[i * N + j] == 1) {\n//         ++degree;\n//       }\n//     }\n//     if (degree > max_degree) {\n//       max_degree = degree;\n//     }\n//   }\n//   return max_degree;\n// }\n\n// OpenMP implementation of maxDegree\n#include <omp.h>\n\n/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(std::vector<int> const& A, size_t N) {\nint max_degree = 0;\n  for (size_t i = 0; i < N; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n      if (A[i * N + j] == 1) {\n        ++degree;\n      }\n    }\n    if (degree > max_degree) {\n      max_degree = degree;\n    }\n  }\n  return max_degree;\n}",
        "translation_function_name": "maxDegree",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  max_degree = max(degree, max_degree);\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}",
            "\nint max_degree = 0;\n#pragma omp parallel for reduction(max:max_degree)\nfor (size_t i = 0; i < N; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > max_degree) {\n    max_degree = degree;\n  }\n}\nreturn max_degree;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "19_graph_shortest_path",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {",
        "translation_prompt": "// Serial implementation of shortestPathLength\n// /* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n//    output: 2\n// */\n// int shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {\n// std::vector<int> dist(N, INT_MAX);\n// \tstd::vector<int> prev(N, -1);\n// \tstd::queue<int> q;\n// \tq.push(source);\n// \tdist[source] = 0;\n// \twhile (!q.empty()) {\n// \t\tint u = q.front();\n// \t\tq.pop();\n// \t\tfor (int v = 0; v < N; ++v) {\n// \t\t\tif (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n// \t\t\t\tdist[v] = dist[u] + 1;\n// \t\t\t\tprev[v] = u;\n// \t\t\t\tq.push(v);\n// \t\t\t}\n// \t\t}\n// \t}\n// \tif (dist[dest] == INT_MAX) {\n// \t\treturn -1;\n// \t}\n// \tint path_len = 0;\n// \twhile (prev[dest]!= -1) {\n// \t\tpath_len++;\n// \t\tdest = prev[dest];\n// \t}\n// \treturn path_len;\n// }\n\n// OpenMP implementation of shortestPathLength\n#include <omp.h>\n\n/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use OpenMP to compute in parallel.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {\nstd::vector<int> dist(N, INT_MAX);\n\tstd::vector<int> prev(N, -1);\n\tstd::queue<int> q;\n\tq.push(source);\n\tdist[source] = 0;\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int v = 0; v < N; ++v) {\n\t\t\tif (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n\t\t\t\tdist[v] = dist[u] + 1;\n\t\t\t\tprev[v] = u;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tif (dist[dest] == INT_MAX) {\n\t\treturn -1;\n\t}\n\tint path_len = 0;\n\twhile (prev[dest]!= -1) {\n\t\tpath_len++;\n\t\tdest = prev[dest];\n\t}\n\treturn path_len;\n}",
        "translation_function_name": "shortestPathLength",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nstd::vector<bool> inQueue(N, false);\nq.push(source);\ndist[source] = 0;\ninQueue[source] = true;\n\n#pragma omp parallel\n{\n    while (true) {\n        int u = -1;\n\n        #pragma omp single\n        {\n            if (!q.empty()) {\n                u = q.front();\n                q.pop();\n                inQueue[u] = false;\n            }\n        }\n\n        if (u == -1) {\n            break;\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (dist[v] > dist[u] + 1) {\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    if (!inQueue[v]) {\n                        #pragma omp critical\n                        {\n                            if (!inQueue[v]) {\n                                q.push(v);\n                                inQueue[v] = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\n\n#pragma omp parallel\n{\n\tstd::queue<int> local_q;\n\twhile (true) {\n\t\tint u = -1;\n\t\t#pragma omp single\n\t\t{\n\t\t\tif (!q.empty()) {\n\t\t\t\tu = q.front();\n\t\t\t\tq.pop();\n\t\t\t}\n\t\t}\n\t\tif (u == -1) break;\n\n\t\t#pragma omp for nowait\n\t\tfor (int v = 0; v < N; ++v) {\n\t\t\tif (A[u * N + v] == 1) {\n\t\t\t\tif (dist[v] == INT_MAX) {\n\t\t\t\t\tdist[v] = dist[u] + 1;\n\t\t\t\t\tprev[v] = u;\n\t\t\t\t\tlocal_q.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t#pragma omp barrier\n\t\t#pragma omp single\n\t\t{\n\t\t\twhile (!local_q.empty()) {\n\t\t\t\tq.push(local_q.front());\n\t\t\t\tlocal_q.pop();\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (dist[dest] == INT_MAX) {\n\treturn -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n\tpath_len++;\n\tdest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nstd::vector<bool> inQueue(N, false);\nomp_lock_t lock;\nomp_init_lock(&lock);\n\nq.push(source);\ndist[source] = 0;\ninQueue[source] = true;\n\n#pragma omp parallel\n{\n    while (true) {\n        int u = -1;\n        omp_set_lock(&lock);\n        if (!q.empty()) {\n            u = q.front();\n            q.pop();\n            inQueue[u] = false;\n        }\n        omp_unset_lock(&lock);\n\n        if (u == -1) {\n            break;\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                omp_set_lock(&lock);\n                if (dist[v] == INT_MAX) {\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    if (!inQueue[v]) {\n                        q.push(v);\n                        inQueue[v] = true;\n                    }\n                }\n                omp_unset_lock(&lock);\n            }\n        }\n    }\n}\n\nomp_destroy_lock(&lock);\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nbool done = false;\n\n#pragma omp parallel\n{\n\tstd::vector<int> local_prev(N, -1);\n\tstd::queue<int> local_q;\n\t#pragma omp single nowait\n\t{\n\t\twhile (!q.empty() && !done) {\n\t\t\tint u = q.front();\n\t\t\tq.pop();\n\t\t\t#pragma omp task firstprivate(u) shared(dist, prev, done, local_q, local_prev)\n\t\t\t{\n\t\t\t\tfor (int v = 0; v < N; ++v) {\n\t\t\t\t\tif (A[u * N + v] == 1) {\n\t\t\t\t\t\tif (dist[v] == INT_MAX) {\n\t\t\t\t\t\t\tbool expected = true;\n\t\t\t\t\t\t\tif (__atomic_compare_exchange_n(&dist[v], &expected, dist[u] + 1, false, __ATOMIC_RELAXED, __ATOMIC_RELAXED)) {\n\t\t\t\t\t\t\t\tlocal_prev[v] = u;\n\t\t\t\t\t\t\t\tlocal_q.push(v);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#pragma omp critical\n\t\t\t\t{\n\t\t\t\t\twhile (!local_q.empty()) {\n\t\t\t\t\t\tint local_u = local_q.front();\n\t\t\t\t\t\tlocal_q.pop();\n\t\t\t\t\t\tq.push(local_u);\n\t\t\t\t\t\tprev[local_u] = local_prev[local_u];\n\t\t\t\t\t\tif (local_u == dest) {\n\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t#pragma omp barrier\n}\n\nif (dist[dest] == INT_MAX) {\n\treturn -1;\n}\nint path_len = 0;\nwhile (prev[dest] != -1) {\n\tpath_len++;\n\tdest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (!visited[v]) {\n                    visited[v] = true;\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    #pragma omp critical\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nbool found = false;\n\ndist[source] = 0;\nq.push(source);\n\n#pragma omp parallel\n{\n\tstd::vector<int> local_prev(N, -1);\n\tstd::vector<int> local_dist(N, INT_MAX);\n\tstd::queue<int> local_q;\n\tbool local_found = false;\n\n\t#pragma omp single nowait\n\t{\n\t\twhile (!q.empty() && !found) {\n\t\t\tint u = q.front();\n\t\t\tq.pop();\n\n\t\t\t#pragma omp task firstprivate(u) shared(local_q, local_dist, local_prev, found)\n\t\t\t{\n\t\t\t\tfor (int v = 0; v < N; ++v) {\n\t\t\t\t\tif (A[u * N + v] == 1) {\n\t\t\t\t\t\tif (local_dist[v] == INT_MAX) {\n\t\t\t\t\t\t\tlocal_dist[v] = local_dist[u] + 1;\n\t\t\t\t\t\t\tlocal_prev[v] = u;\n\t\t\t\t\t\t\tlocal_q.push(v);\n\t\t\t\t\t\t\tif (v == dest) {\n\t\t\t\t\t\t\t\tlocal_found = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t#pragma omp taskwait\n\t\t\t{\n\t\t\t\twhile (!local_q.empty()) {\n\t\t\t\t\tint local_u = local_q.front();\n\t\t\t\t\tlocal_q.pop();\n\t\t\t\t\tif (dist[local_u] == INT_MAX) {\n\t\t\t\t\t\tdist[local_u] = local_dist[local_u];\n\t\t\t\t\t\tprev[local_u] = local_prev[local_u];\n\t\t\t\t\t\tq.push(local_u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (local_found) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (dist[dest] == INT_MAX) {\n\treturn -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n\tpath_len++;\n\tdest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nstd::vector<bool> in_queue(N, false);\nomp_lock_t lock;\nomp_init_lock(&lock);\n\nq.push(source);\ndist[source] = 0;\nin_queue[source] = true;\n\n#pragma omp parallel\n{\n    while (true) {\n        int u = -1;\n        omp_set_lock(&lock);\n        if (!q.empty()) {\n            u = q.front();\n            q.pop();\n            in_queue[u] = false;\n        }\n        omp_unset_lock(&lock);\n\n        if (u == -1) break;\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (dist[v] > dist[u] + 1) {\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    omp_set_lock(&lock);\n                    if (!in_queue[v]) {\n                        q.push(v);\n                        in_queue[v] = true;\n                    }\n                    omp_unset_lock(&lock);\n                }\n            }\n        }\n    }\n}\n\nomp_destroy_lock(&lock);\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\n\n#pragma omp parallel\n{\n\tstd::queue<int> local_q;\n\twhile (true) {\n\t\tint u = -1;\n\t\t#pragma omp single\n\t\t{\n\t\t\tif (!q.empty()) {\n\t\t\t\tu = q.front();\n\t\t\t\tq.pop();\n\t\t\t}\n\t\t}\n\t\tif (u == -1) break;\n\n\t\t#pragma omp for nowait\n\t\tfor (int v = 0; v < N; ++v) {\n\t\t\tif (A[u * N + v] == 1) {\n\t\t\t\tif (dist[v] == INT_MAX) {\n\t\t\t\t\tdist[v] = dist[u] + 1;\n\t\t\t\t\tprev[v] = u;\n\t\t\t\t\tlocal_q.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t#pragma omp barrier\n\t\t#pragma omp single\n\t\t{\n\t\t\twhile (!local_q.empty()) {\n\t\t\t\tq.push(local_q.front());\n\t\t\t\tlocal_q.pop();\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (dist[dest] == INT_MAX) {\n\treturn -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n\tpath_len++;\n\tdest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                #pragma omp critical\n                {\n                    if (!visited[v]) {\n                        visited[v] = true;\n                        dist[v] = dist[u] + 1;\n                        prev[v] = u;\n                        q.push(v);\n                    }\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single nowait\n        {\n            u = q.front();\n            q.pop();\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (!visited[v]) {\n                    visited[v] = true;\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    #pragma omp critical\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                bool expected = false;\n                if (visited[v].compare_exchange_strong(expected, true)) {\n                    int new_dist = dist[u] + 1;\n                    if (new_dist < dist[v]) {\n                        dist[v] = new_dist;\n                        prev[v] = u;\n                        #pragma omp critical\n                        q.push(v);\n                    }\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (!visited[v]) {\n                    visited[v] = true;\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    #pragma omp critical\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nstd::vector<bool> inQueue(N, false);\nomp_lock_t lock;\nomp_init_lock(&lock);\n\nq.push(source);\ndist[source] = 0;\ninQueue[source] = true;\n\n#pragma omp parallel\n{\n    while (true) {\n        int u = -1;\n        omp_set_lock(&lock);\n        if (!q.empty()) {\n            u = q.front();\n            q.pop();\n            inQueue[u] = false;\n        }\n        omp_unset_lock(&lock);\n\n        if (u == -1) break;\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (dist[v] > dist[u] + 1) {\n                    omp_set_lock(&lock);\n                    if (dist[v] > dist[u] + 1) {\n                        dist[v] = dist[u] + 1;\n                        prev[v] = u;\n                        if (!inQueue[v]) {\n                            q.push(v);\n                            inQueue[v] = true;\n                        }\n                    }\n                    omp_unset_lock(&lock);\n                }\n            }\n        }\n    }\n}\n\nomp_destroy_lock(&lock);\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (!visited[v]) {\n                    visited[v] = true;\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    #pragma omp critical\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nbool found = false;\n\ndist[source] = 0;\nq.push(source);\n\n#pragma omp parallel\n{\n    std::vector<int> local_prev(N, -1);\n    std::vector<int> local_dist(N, INT_MAX);\n    std::queue<int> local_q;\n\n    #pragma omp single\n    {\n        local_dist[source] = 0;\n    }\n\n    while (!found) {\n        int u = -1;\n\n        #pragma omp single\n        {\n            if (!q.empty()) {\n                u = q.front();\n                q.pop();\n            }\n        }\n\n        if (u == -1) {\n            break;\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (local_dist[v] == INT_MAX) {\n                    local_dist[v] = local_dist[u] + 1;\n                    local_prev[v] = u;\n                    #pragma omp critical\n                    {\n                        if (dist[v] == INT_MAX) {\n                            dist[v] = local_dist[v];\n                            prev[v] = local_prev[v];\n                            q.push(v);\n                            if (v == dest) {\n                                found = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (!visited[v]) {\n                    visited[v] = true;\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    #pragma omp critical\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nstd::vector<bool> in_queue(N, false);\nomp_lock_t lock;\nomp_init_lock(&lock);\n\nq.push(source);\ndist[source] = 0;\nin_queue[source] = true;\n\n#pragma omp parallel\n{\n    while (true) {\n        int u = -1;\n        omp_set_lock(&lock);\n        if (!q.empty()) {\n            u = q.front();\n            q.pop();\n            in_queue[u] = false;\n        }\n        omp_unset_lock(&lock);\n\n        if (u == -1) {\n            break;\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                omp_set_lock(&lock);\n                if (dist[v] == INT_MAX) {\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    if (!in_queue[v]) {\n                        q.push(v);\n                        in_queue[v] = true;\n                    }\n                }\n                omp_unset_lock(&lock);\n            }\n        }\n    }\n}\n\nomp_destroy_lock(&lock);\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (!visited[v]) {\n                    visited[v] = true;\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    #pragma omp critical\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::vector<bool> visited(N, false);\nstd::queue<int> q;\nq.push(source);\ndist[source] = 0;\nvisited[source] = true;\n\n#pragma omp parallel\n{\n    while (!q.empty()) {\n        int u;\n        #pragma omp single\n        {\n            u = q.front();\n            q.pop();\n        }\n        \n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (!visited[v]) {\n                    visited[v] = true;\n                    dist[v] = dist[u] + 1;\n                    prev[v] = u;\n                    #pragma omp critical\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}",
            "\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nstd::vector<bool> in_queue(N, false);\nomp_lock_t lock;\nomp_init_lock(&lock);\n\nq.push(source);\ndist[source] = 0;\nin_queue[source] = true;\n\n#pragma omp parallel\n{\n    while (true) {\n        int u = -1;\n        omp_set_lock(&lock);\n        if (!q.empty()) {\n            u = q.front();\n            q.pop();\n            in_queue[u] = false;\n        }\n        omp_unset_lock(&lock);\n\n        if (u == -1) {\n            break;\n        }\n\n        #pragma omp for nowait\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1) {\n                if (dist[v] > dist[u] + 1) {\n                    omp_set_lock(&lock);\n                    if (dist[v] > dist[u] + 1) {\n                        dist[v] = dist[u] + 1;\n                        prev[v] = u;\n                        if (!in_queue[v]) {\n                            q.push(v);\n                            in_queue[v] = true;\n                        }\n                    }\n                    omp_unset_lock(&lock);\n                }\n            }\n        }\n    }\n}\n\nomp_destroy_lock(&lock);\n\nif (dist[dest] == INT_MAX) {\n    return -1;\n}\n\nint path_len = 0;\nwhile (prev[dest] != -1) {\n    path_len++;\n    dest = prev[dest];\n}\n\nreturn path_len;\n}"
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "28_reduce_smallest_odd_number",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the value of the smallest odd number in the vector x.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(std::vector<int> const& x) {",
        "translation_prompt": "// Serial implementation of smallestOdd\n// /* Return the value of the smallest odd number in the vector x.\n//    Examples:\n// \n//    input: [7, 9, 5, 2, 8, 16, 4, 1]\n//    output: 1\n// \n//    input: [8, 36, 7, 2, 11]\n//    output: 7\n// */\n// int smallestOdd(std::vector<int> const& x) {\n// int smallest = x[0];\n//   for (int i = 1; i < x.size(); i++) {\n//     if (x[i] % 2 == 1 && x[i] < smallest) {\n//       smallest = x[i];\n//     }\n//   }\n//   return smallest;\n// }\n\n// OpenMP implementation of smallestOdd\n#include <omp.h>\n\n/* Return the value of the smallest odd number in the vector x.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(std::vector<int> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the value of the smallest odd number in the vector x.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(std::vector<int> const& x) {\nint smallest = x[0];\n  for (int i = 1; i < x.size(); i++) {\n    if (x[i] % 2 == 1 && x[i] < smallest) {\n      smallest = x[i];\n    }\n  }\n  return smallest;\n}",
        "translation_function_name": "smallestOdd",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned if no odd number is found.\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned when no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned when no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned when no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 as the default if no odd number is found.\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned when no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\n#pragma omp parallel for reduction(min:smallest)\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\nreturn smallest == INT_MAX ? 0 : smallest; // Assuming 0 is returned if no odd number is found\n}"
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "26_reduce_product_of_inverses",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the product of the vector x with every odd indexed element inverted.\n   i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n   Use OpenMP to compute product in parallel.\n   Example:\n\n   input: [4, 2, 10, 4, 5]\n   output: 25\n*/\ndouble productWithInverses(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of productWithInverses\n// /* Return the product of the vector x with every odd indexed element inverted.\n//    i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n//    Example:\n// \n//    input: [4, 2, 10, 4, 5]\n//    output: 25\n// */\n// double productWithInverses(std::vector<double> const& x) {\n// double result = 1;\n//   for (int i = 0; i < x.size(); i++) {\n//     if (i % 2 == 0) {\n//       result *= x[i];\n//     } else {\n//       result *= 1 / x[i];\n//     }\n//   }\n//   return result;\n// }\n\n// OpenMP implementation of productWithInverses\n#include <omp.h>\n\n/* Return the product of the vector x with every odd indexed element inverted.\n   i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n   Use OpenMP to compute product in parallel.\n   Example:\n\n   input: [4, 2, 10, 4, 5]\n   output: 25\n*/\ndouble productWithInverses(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the product of the vector x with every odd indexed element inverted.\n   i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n   Example:\n\n   input: [4, 2, 10, 4, 5]\n   output: 25\n*/\ndouble productWithInverses(std::vector<double> const& x) {\ndouble result = 1;\n  for (int i = 0; i < x.size(); i++) {\n    if (i % 2 == 0) {\n      result *= x[i];\n    } else {\n      result *= 1 / x[i];\n    }\n  }\n  return result;\n}",
        "translation_function_name": "productWithInverses",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}",
            "\ndouble result = 1.0;\n#pragma omp parallel for reduction(*:result)\nfor (int i = 0; i < x.size(); i++) {\n  if (i % 2 == 0) {\n    result *= x[i];\n  } else {\n    result *= 1 / x[i];\n  }\n}\nreturn result;\n}"
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "29_reduce_sum_of_min_of_pairs",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the sum of the minimum value at each index of vectors x and y for all indices.\n   i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n   Use OpenMP to sum in parallel.\n   Example:\n\n   input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n   output: 10\n*/\ndouble sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {",
        "translation_prompt": "// Serial implementation of sumOfMinimumElements\n// /* Return the sum of the minimum value at each index of vectors x and y for all indices.\n//    i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n//    Example:\n// \n//    input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n//    output: 10\n// */\n// double sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {\n// double sum = 0;\n//   for (int i = 0; i < x.size(); i++) {\n//     sum += std::min(x[i], y[i]);\n//   }\n//   return sum;\n// }\n\n// OpenMP implementation of sumOfMinimumElements\n#include <omp.h>\n\n/* Return the sum of the minimum value at each index of vectors x and y for all indices.\n   i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n   Use OpenMP to sum in parallel.\n   Example:\n\n   input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n   output: 10\n*/\ndouble sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the sum of the minimum value at each index of vectors x and y for all indices.\n   i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n   Example:\n\n   input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n   output: 10\n*/\ndouble sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {\ndouble sum = 0;\n  for (int i = 0; i < x.size(); i++) {\n    sum += std::min(x[i], y[i]);\n  }\n  return sum;\n}",
        "translation_function_name": "sumOfMinimumElements",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); i++) {\n  sum += std::min(x[i], y[i]);\n}\nreturn sum;\n}"
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "27_reduce_average",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the average of the vector x.\n   Use OpenMP to compute in parallel.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of average\n// /* Return the average of the vector x.\n//    Examples:\n// \t\t\n// \t input: [1, 8, 4, 5, 1]\n//    output: 3.8\n// \n//    input: [2, 2, 2, 3]\n//    output: 2.25\n// */\n// double average(std::vector<double> const& x) {\n// double sum = 0;\n// \tfor (double i : x) {\n// \t\tsum += i;\n// \t}\n// \treturn sum / x.size();\n// }\n\n// OpenMP implementation of average\n#include <omp.h>\n\n/* Return the average of the vector x.\n   Use OpenMP to compute in parallel.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the average of the vector x.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(std::vector<double> const& x) {\ndouble sum = 0;\n\tfor (double i : x) {\n\t\tsum += i;\n\t}\n\treturn sum / x.size();\n}",
        "translation_function_name": "average",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\nint n = x.size();\n\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < n; ++i) {\n    sum += x[i];\n}\n\nreturn sum / n;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\nint n = x.size();\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < n; ++i) {\n    sum += x[i];\n}\nreturn sum / n;\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (int i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}",
            "\ndouble sum = 0.0;\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += x[i];\n}\nreturn sum / x.size();\n}"
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "25_reduce_xor",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the logical XOR reduction of the vector of bools x.\n   Use OpenMP to reduce in parallel.\n   Example:\n\n   input: [false, false, false, true]\n   output: true\n*/\nbool reduceLogicalXOR(std::vector<bool> const& x) {",
        "translation_prompt": "// Serial implementation of reduceLogicalXOR\n// /* Return the logical XOR reduction of the vector of bools x.\n//    Example:\n// \n//    input: [false, false, false, true]\n//    output: true\n// */\n// bool reduceLogicalXOR(std::vector<bool> const& x) {\n// bool result = false;\n//   for (auto const& i : x) {\n//     result ^= i;\n//   }\n//   return result;\n// }\n\n// OpenMP implementation of reduceLogicalXOR\n#include <omp.h>\n\n/* Return the logical XOR reduction of the vector of bools x.\n   Use OpenMP to reduce in parallel.\n   Example:\n\n   input: [false, false, false, true]\n   output: true\n*/\nbool reduceLogicalXOR(std::vector<bool> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the logical XOR reduction of the vector of bools x.\n   Example:\n\n   input: [false, false, false, true]\n   output: true\n*/\nbool reduceLogicalXOR(std::vector<bool> const& x) {\nbool result = false;\n  for (auto const& i : x) {\n    result ^= i;\n  }\n  return result;\n}",
        "translation_function_name": "reduceLogicalXOR",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n    result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n    result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n    result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n    result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n    result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n    result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n    result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}",
            "\nbool result = false;\n#pragma omp parallel for reduction(^:result)\nfor (size_t i = 0; i < x.size(); ++i) {\n  result ^= x[i];\n}\nreturn result;\n}"
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "32_scan_sum_of_prefix_sum_array",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the prefix sum array of the vector x and return its sum.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [-7, 2, 1, 9, 4, 8]\n   output: 15\n*/\ndouble sumOfPrefixSum(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of sumOfPrefixSum\n// /* Compute the prefix sum array of the vector x and return its sum.\n//    Example:\n// \n//    input: [-7, 2, 1, 9, 4, 8]\n//    output: 15\n// */\n// double sumOfPrefixSum(std::vector<double> const& x) {\n// double sum = 0;\n//     std::vector<double> prefix_sum(x.size());\n// \n//     for (size_t i = 0; i < x.size(); ++i) {\n//         if (i == 0) {\n//             prefix_sum[i] = x[i];\n//         } else {\n//             prefix_sum[i] = prefix_sum[i - 1] + x[i];\n//         }\n//         sum += prefix_sum[i];\n//     }\n// \n//     return sum;\n// }\n\n// OpenMP implementation of sumOfPrefixSum\n#include <omp.h>\n\n/* Compute the prefix sum array of the vector x and return its sum.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [-7, 2, 1, 9, 4, 8]\n   output: 15\n*/\ndouble sumOfPrefixSum(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the prefix sum array of the vector x and return its sum.\n   Example:\n\n   input: [-7, 2, 1, 9, 4, 8]\n   output: 15\n*/\ndouble sumOfPrefixSum(std::vector<double> const& x) {\ndouble sum = 0;\n    std::vector<double> prefix_sum(x.size());\n\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (i == 0) {\n            prefix_sum[i] = x[i];\n        } else {\n            prefix_sum[i] = prefix_sum[i - 1] + x[i];\n        }\n        sum += prefix_sum[i];\n    }\n\n    return sum;\n}",
        "translation_function_name": "sumOfPrefixSum",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\nint i;\n\n#pragma omp parallel for schedule(static) private(i) shared(x, prefix_sum)\nfor (i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n}\n\n#pragma omp parallel for schedule(static) reduction(+:sum) private(i) shared(prefix_sum)\nfor (i = 0; i < prefix_sum.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0.0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0.0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0.0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0.0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n\n    #pragma omp critical\n    sum += sum_local;\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0.0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0.0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n\n    #pragma omp critical\n    sum += sum_local;\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\nint i;\n\n#pragma omp parallel for schedule(static) private(i) shared(prefix_sum, x) reduction(+:sum)\nfor (i = 0; i < static_cast<int>(x.size()); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < prefix_sum.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\nint i;\n\n#pragma omp parallel for shared(x, prefix_sum) private(i) reduction(+:sum)\nfor (i = 0; i < static_cast<int>(x.size()); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (i = 0; i < static_cast<int>(x.size()); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < prefix_sum.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n\n    #pragma omp critical\n    sum += sum_local;\n}\n\n// Adjust prefix sums since each thread has a local sum that doesn't include previous elements\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n// Calculate the final sum of prefix sums\nsum = 0;\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < prefix_sum.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\nint i;\n\n#pragma omp parallel for private(i) shared(prefix_sum, x) reduction(+:sum)\nfor (i = 0; i < static_cast<int>(x.size()); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    #pragma omp critical\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0.0;\nstd::vector<double> prefix_sum(x.size());\n\n#pragma omp parallel\n{\n    double sum_local = 0.0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        sum_local += x[i];\n        prefix_sum[i] = sum_local;\n    }\n\n    #pragma omp critical\n    sum += sum_local;\n}\n\nfor (size_t i = 1; i < x.size(); ++i) {\n    prefix_sum[i] += prefix_sum[i - 1];\n}\n\n#pragma omp parallel for reduction(+:sum)\nfor (size_t i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}",
            "\ndouble sum = 0;\nstd::vector<double> prefix_sum(x.size());\nsize_t i;\n\n#pragma omp parallel for private(i) shared(prefix_sum, x) reduction(+:sum)\nfor (i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n}\n\n#pragma omp parallel for private(i) reduction(+:sum)\nfor (i = 0; i < x.size(); ++i) {\n    sum += prefix_sum[i];\n}\n\nreturn sum;\n}"
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "31_scan_scan_with_min_function",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(std::vector<float> &x) {",
        "translation_prompt": "// Serial implementation of partialMinimums\n// /* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n//    Examples:\n// \n//    input: [8, 6, -1, 7, 3, 4, 4]\n//    output: [8, 6, -1, -1, -1, -1, -1]\n// \n//    input: [5, 4, 6, 4, 3, 6, 1, 1]\n//    output: [5, 4, 4, 4, 3, 3, 1, 1]\n// */\n// void partialMinimums(std::vector<float> &x) {\n// float min = x[0];\n//     for (int i = 0; i < x.size(); i++) {\n//         if (x[i] < min) {\n//             min = x[i];\n//         }\n//         x[i] = min;\n//     }\n// }\n\n// OpenMP implementation of partialMinimums\n#include <omp.h>\n\n/* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(std::vector<float> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(std::vector<float> &x) {\nfloat min = x[0];\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] < min) {\n            min = x[i];\n        }\n        x[i] = min;\n    }\n}",
        "translation_function_name": "partialMinimums",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint n = x.size();\nstd::vector<float> mins(n, std::numeric_limits<float>::max());\n\n#pragma omp parallel for\nfor (int i = 0; i < n; i++) {\n    float local_min = x[0];\n    for (int j = 0; j <= i; j++) {\n        if (x[j] < local_min) {\n            local_min = x[j];\n        }\n    }\n    mins[i] = local_min;\n}\n\n#pragma omp parallel for\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = std::numeric_limits<float>::max();\n    #pragma omp for\n    for (int i = 0; i < n; ++i) {\n        local_min = std::min(local_min, x[i]);\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the input vector\nfor (int i = 0; i < n; ++i) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the input vector\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the original vector\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the input vector\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint i, n = x.size();\nstd::vector<float> mins(n);\n\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; ++i) {\n    mins[i] = x[i];\n    for (int j = 0; j <= i; ++j) {\n        if (x[j] < mins[i]) {\n            mins[i] = x[j];\n        }\n    }\n}\n\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; ++i) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the original vector\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\nfloat global_min = x[0];\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 1; i < n; ++i) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n    #pragma omp critical\n    {\n        if (local_min < global_min) {\n            global_min = local_min;\n        }\n    }\n    #pragma omp barrier\n    #pragma omp for\n    for (int i = 0; i < n; ++i) {\n        x[i] = (i == 0) ? x[0] : std::min(mins[i], global_min);\n    }\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the original vector\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float min_val = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; ++i) {\n        if (x[i] < min_val) {\n            min_val = x[i];\n        }\n        mins[i] = min_val;\n    }\n}\n\n#pragma omp parallel for\nfor (int i = 0; i < n; ++i) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the original vector\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Sequentially write back the results\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n}\n// Copy the results back to the original vector\nfor (int i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint i, n = x.size();\nstd::vector<float> mins(n);\n\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; i++) {\n    mins[i] = x[i];\n    for (int j = 0; j <= i; j++) {\n        if (x[j] < mins[i]) {\n            mins[i] = x[j];\n        }\n    }\n}\n\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}",
            "\nint n = x.size();\nstd::vector<float> mins(n);\nfloat global_min = x[0];\n#pragma omp parallel\n{\n    float local_min = x[0];\n    #pragma omp for\n    for (int i = 1; i < n; i++) {\n        if (x[i] < local_min) {\n            local_min = x[i];\n        }\n        mins[i] = local_min;\n    }\n    #pragma omp critical\n    {\n        if (local_min < global_min) {\n            global_min = local_min;\n        }\n    }\n    #pragma omp barrier\n    #pragma omp for\n    for (int i = 1; i < n; i++) {\n        x[i] = (x[i] < global_min) ? x[i] : global_min;\n    }\n}\nx[0] = global_min;\n}",
            "\nint i, n = x.size();\nstd::vector<float> mins(n);\n\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; ++i) {\n    mins[i] = x[i];\n    for (int j = 0; j <= i; ++j) {\n        if (x[j] < mins[i]) {\n            mins[i] = x[j];\n        }\n    }\n}\n\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; ++i) {\n    x[i] = mins[i];\n}\n}",
            "\nint i, n = x.size();\nstd::vector<float> mins(n);\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; i++) {\n    mins[i] = x[i];\n    for (int j = 0; j <= i; j++) {\n        if (x[j] < mins[i]) {\n            mins[i] = x[j];\n        }\n    }\n}\n\n#pragma omp parallel for shared(x, mins) private(i)\nfor (i = 0; i < n; i++) {\n    x[i] = mins[i];\n}\n}"
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "30_scan_prefix_sum",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the prefix sum of the vector x into output.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(std::vector<double> const& x, std::vector<double> &output) {",
        "translation_prompt": "// Serial implementation of prefixSum\n// /* Compute the prefix sum of the vector x into output.\n//    Example:\n//    \n//    input: [1, 7, 4, 6, 6, 2]\n//    output: [1, 8, 12, 18, 24, 26]\n// */\n// void prefixSum(std::vector<double> const& x, std::vector<double> &output) {\n// output.resize(x.size());\n//   output[0] = x[0];\n//   for (int i = 1; i < x.size(); ++i) {\n//     output[i] = output[i-1] + x[i];\n//   }\n// }\n\n// OpenMP implementation of prefixSum\n#include <omp.h>\n\n/* Compute the prefix sum of the vector x into output.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(std::vector<double> const& x, std::vector<double> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the prefix sum of the vector x into output.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(std::vector<double> const& x, std::vector<double> &output) {\noutput.resize(x.size());\n  output[0] = x[0];\n  for (int i = 1; i < x.size(); ++i) {\n    output[i] = output[i-1] + x[i];\n  }\n}",
        "translation_function_name": "prefixSum",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\nint i;\n\n#pragma omp parallel\n{\n    int tid = omp_get_thread_num();\n    int nthreads = omp_get_num_threads();\n    int chunk_size = (n + nthreads - 1) / nthreads;\n    int start = tid * chunk_size;\n    int end = std::min(start + chunk_size, n);\n\n    // Compute partial sums for each chunk\n    for (i = start + 1; i < end; ++i) {\n        output[i] = output[i - 1] + x[i];\n    }\n\n    double last = output[end - 1];\n\n    #pragma omp barrier\n\n    // Compute offset for each chunk\n    double offset = 0;\n    for (i = 0; i < tid; ++i) {\n        offset += output[(i + 1) * chunk_size - 1];\n    }\n\n    // Apply offset to each element in the chunk\n    for (i = start; i < end; ++i) {\n        output[i] += offset;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\n#pragma omp parallel\n{\n    int i, tid, nthreads, istart, iend;\n    double sum;\n    tid = omp_get_thread_num();\n    nthreads = omp_get_num_threads();\n    istart = tid * n / nthreads;\n    iend = (tid + 1) * n / nthreads;\n\n    if (tid == 0) istart = 1; // First element is already copied\n\n    sum = x[istart - 1];\n    for (i = istart; i < iend; ++i) {\n        sum += x[i];\n        output[i] = sum;\n    }\n\n    #pragma omp barrier\n\n    double increment = 0.0;\n    for (i = 0; i < tid; ++i) {\n        increment += output[(i + 1) * n / nthreads - 1];\n    }\n\n    for (i = istart; i < iend; ++i) {\n        output[i] += increment;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\nint i;\n\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    int nthreads = omp_get_num_threads();\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i++) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n    double mysum = sum + x[n-1];\n    double lastsum = 0;\n    #pragma omp barrier\n    #pragma omp single\n    {\n        double temp;\n        for (i = 0; i < nthreads; i++) {\n            temp = lastsum + mysum;\n            mysum = lastsum;\n            lastsum = temp;\n        }\n    }\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i++) {\n        output[i] += mysum;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output.resize(num_threads + 1, 0);\n\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (int i = 0; i < n; i++) {\n        sum += x[i];\n        output[i] = sum;\n    }\n\n    int offset = 0;\n    for (int i = 0; i < (ithread+1)*n/num_threads; i++) {\n        offset += x[i];\n    }\n\n    #pragma omp barrier\n    #pragma omp for schedule(static)\n    for (int i = ithread*n/num_threads; i < (ithread+1)*n/num_threads; i++) {\n        output[i] += offset;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output[0] = x[0];\n    #pragma omp barrier\n\n    int i, start, end;\n    double sum = 0.0;\n    #pragma omp for schedule(static) nowait\n    for (i = 1; i < n; ++i) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n    #pragma omp single\n    for (i = 1; i < num_threads; ++i) {\n        output[i * (n / num_threads)] += output[(i - 1) * (n / num_threads) + (n / num_threads) - 1];\n    }\n    #pragma omp barrier\n\n    start = ithread * (n / num_threads) + 1;\n    end = (ithread + 1) * (n / num_threads);\n    if (ithread == num_threads - 1) end = n;\n    for (i = start; i < end; ++i) {\n        output[i] += output[start - 1];\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output.resize(num_threads + 1, 0);\n\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (int i = 0; i < n; i++) {\n        sum += x[i];\n        output[i] = sum;\n    }\n\n    int offset = 0;\n    for (int i = 0; i < (ithread + 1) * n / num_threads; i++) {\n        offset += x[i];\n    }\n\n    #pragma omp barrier\n    #pragma omp for schedule(static)\n    for (int i = ithread * n / num_threads; i < (ithread + 1) * n / num_threads; i++) {\n        output[i] += offset;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n#pragma omp parallel\n{\n    int thread_num = omp_get_thread_num();\n    int num_threads = omp_get_num_threads();\n    int start = thread_num * n / num_threads;\n    int end = (thread_num + 1) * n / num_threads;\n\n    // Compute partial sums for each section\n    output[start] = x[start];\n    for (int i = start + 1; i < end; ++i) {\n        output[i] = output[i - 1] + x[i];\n    }\n\n    double sum = 0;\n    #pragma omp barrier\n\n    // Compute the prefix sum for the first element of each section\n    #pragma omp for schedule(static) ordered\n    for (int i = 0; i < num_threads; ++i) {\n        sum += (i == 0) ? 0 : output[(i * n / num_threads) - 1];\n        #pragma omp ordered\n        {\n            if (i != 0) {\n                output[i * n / num_threads] += sum;\n            }\n        }\n    }\n\n    // Update the rest of the elements in each section\n    for (int i = start + 1; i < end; ++i) {\n        output[i] += sum;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output[0] = x[0];\n    #pragma omp barrier\n    int i;\n    for (i = 1; i < n; i <<= 1) {\n        if (ithread >= i) output[ithread] = x[ithread] + output[ithread - i];\n        else output[ithread] = x[ithread];\n        #pragma omp barrier\n    }\n}\n\nfor (int i = 1; i < num_threads; i <<= 1) {\n    #pragma omp parallel for\n    for (int j = i; j < num_threads; j += i << 1) {\n        output[(j + 1) * i - 1] += output[j * i - 1];\n    }\n}\n\n#pragma omp parallel for\nfor (int i = 0; i < num_threads; ++i) {\n    int start = i * n / num_threads;\n    int end = (i + 1) * n / num_threads;\n    for (int j = start + 1; j < end; ++j) {\n        output[j] += output[start];\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\n#pragma omp parallel\n{\n    int i, tid, nthreads, istart, iend;\n    double sum;\n    tid = omp_get_thread_num();\n    nthreads = omp_get_num_threads();\n    istart = tid * n / nthreads;\n    iend = (tid + 1) * n / nthreads;\n\n    if (tid > 0) {\n        sum = x[istart];\n        output[istart] = sum;\n        for (i = istart + 1; i < iend; ++i) {\n            sum += x[i];\n            output[i] = sum;\n        }\n    } else {\n        sum = output[0];\n        for (i = 1; i < iend; ++i) {\n            sum += x[i];\n            output[i] = sum;\n        }\n    }\n\n    #pragma omp barrier\n\n    double increment = 0;\n    for (i = 0; i < tid; ++i) {\n        increment += output[(i + 1) * n / nthreads - 1];\n    }\n\n    if (tid > 0) {\n        for (i = istart; i < iend; ++i) {\n            output[i] += increment;\n        }\n    }\n}\n}\n",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\nint i;\n\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    int nthreads = omp_get_num_threads();\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i++) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n    double mysum = sum + x[n-1];\n\n    #pragma omp barrier\n    double offset = 0;\n    for (i = 0; i < ithread; i++) {\n        offset += output[n-1 + i*nthreads - n];\n    }\n\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i++) {\n        output[i] += offset;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output[0] = x[0];\n    #pragma omp barrier\n\n    int i, start, end;\n    double sum = 0.0;\n    #pragma omp for schedule(static) nowait\n    for (i = 1; i < n; ++i) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n\n    double last = 0.0;\n    if (ithread == num_threads - 1) last = x[n-1];\n\n    #pragma omp barrier\n    double offset = 0.0;\n    for (i = 0; i < ithread; ++i) {\n        offset += output[n - num_threads + i];\n    }\n\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; ++i) {\n        output[i] += offset;\n    }\n\n    if (ithread == 0) {\n        for (i = n - num_threads; i < n; ++i) {\n            output[i] += output[i-1];\n        }\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\nint i;\n\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    int nthreads = omp_get_num_threads();\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i++) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n    double my_sum = sum + x[n-1];\n    double last_sum;\n    #pragma omp barrier\n    #pragma omp single\n    {\n        double running_total = 0;\n        for (i = 0; i < nthreads; i++) {\n            last_sum = running_total + my_sum;\n            running_total = last_sum;\n        }\n    }\n    #pragma omp barrier\n    #pragma omp for schedule(static)\n    for (i = ithread; i < n; i += nthreads) {\n        output[i] += last_sum;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output[0] = x[0];\n    #pragma omp barrier\n\n    int i, start, end;\n    double sum = 0.0;\n    #pragma omp for schedule(static) nowait\n    for (i = 1; i < n; ++i) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n    #pragma omp barrier\n    double last = 0.0;\n    if (ithread > 0) {\n        last = output[n - 1];\n        #pragma omp for schedule(static)\n        for (i = 1; i < n; ++i) {\n            output[i] += last;\n        }\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\nint i;\n\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    int nthreads = omp_get_num_threads();\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i++) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n    double mysum = sum + x[n-1];\n\n    double offset = 0;\n    for (int j = 0; j < ithread; j++) {\n        #pragma omp barrier\n        #pragma omp single\n        {\n            offset += mysum;\n        }\n    }\n\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i++) {\n        output[i] += offset;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output.resize(num_threads + 1, 0);\n\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (int i = 0; i < n; i++) {\n        sum += x[i];\n        output[ithread + 1] = sum;\n    }\n\n    #pragma omp barrier\n    double prefix_sum = 0;\n    for (int i = 0; i < (ithread + 1); i++) {\n        prefix_sum += output[i];\n    }\n\n    #pragma omp for schedule(static)\n    for (int i = 0; i < n; i++) {\n        output[i] += prefix_sum;\n        if (i > 0) output[i] -= x[i];\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output.resize(num_threads + 1, 0);\n\n    double sum = 0;\n    #pragma omp for schedule(static)\n    for (int i = 0; i < n; i++) {\n        sum += x[i];\n        output[ithread+1] = sum;\n    }\n\n    #pragma omp barrier\n    double prefix_sum = 0;\n    for (int i = 0; i < (ithread+1); i++) {\n        prefix_sum += output[i];\n    }\n\n    #pragma omp for schedule(static)\n    for (int i = 0; i < n; i++) {\n        output[i] += prefix_sum;\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output[0] = x[0];\n    #pragma omp barrier\n\n    int i, start, end;\n    double sum = 0.0;\n    #pragma omp for schedule(static) reduction(+:sum)\n    for (i = 1; i < n; ++i) {\n        sum += x[i-1];\n        output[i] = sum + x[i];\n    }\n\n    double last = 0.0;\n    if (ithread > 0) {\n        last = output[i-1];\n    }\n    #pragma omp barrier\n\n    #pragma omp single\n    for (i = 1; i < num_threads; ++i) {\n        start = i * (n / num_threads);\n        end = (i == num_threads - 1) ? n : start + (n / num_threads);\n        for (int j = start; j < end; ++j) {\n            output[j] += last;\n        }\n        if (i < num_threads - 1) {\n            last += output[end - 1];\n        }\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\nint num_threads;\n#pragma omp parallel\n{\n    int ithread = omp_get_thread_num();\n    num_threads = omp_get_num_threads();\n    if (ithread == 0) output[0] = x[0];\n    #pragma omp barrier\n\n    int i, start, end;\n    double sum = 0.0;\n    #pragma omp for schedule(static) reduction(+:sum)\n    for (i = 1; i < n; ++i) {\n        sum += x[i-1];\n        output[i] = sum;\n    }\n    #pragma omp barrier\n\n    double last = 0.0;\n    if (ithread > 0) {\n        last = output[n/num_threads*ithread];\n    }\n    #pragma omp barrier\n\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; ++i) {\n        output[i] += last;\n        if (i % (n/num_threads) == 0 && ithread < num_threads - 1) {\n            last += output[i];\n        }\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\n#pragma omp parallel\n{\n    int i, t_id, nthreads, start, end;\n    double sum;\n    t_id = omp_get_thread_num();\n    nthreads = omp_get_num_threads();\n    int chunk_size = (n + nthreads - 1) / nthreads;\n    start = t_id * chunk_size;\n    end = std::min(start + chunk_size, n);\n\n    sum = 0.0;\n    if (start < n) {\n        for (i = start; i < end; ++i) {\n            sum += x[i];\n            output[i] = sum;\n        }\n    }\n\n    #pragma omp barrier\n\n    double increment = 0.0;\n    for (i = 0; i < t_id; ++i) {\n        increment += output[(i + 1) * chunk_size - 1];\n    }\n\n    if (start < n) {\n        for (i = start; i < end; ++i) {\n            output[i] += increment;\n        }\n    }\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\nif (n == 0) return;\n\noutput[0] = x[0];\n#pragma omp parallel\n{\n    int i, j;\n    #pragma omp for schedule(static)\n    for (i = 1; i < n; i <<= 1) {\n        for (j = i; j < n; j++) {\n            output[j] = output[j - i] + x[j];\n        }\n        #pragma omp barrier\n    }\n\n    for (i >>= 1; i > 0; i >>= 1) {\n        #pragma omp for schedule(static)\n        for (j = i; j < n; j++) {\n            if (j >= (i << 1)) {\n                output[j] += output[j - i];\n            }\n        }\n        #pragma omp barrier\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "56_transform_negate_odds",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* In the vector x negate the odd values and divide the even values by 2.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(std::vector<int> &x) {",
        "translation_prompt": "// Serial implementation of negateOddsAndHalveEvens\n// /* In the vector x negate the odd values and divide the even values by 2.\n//    Example:\n// \n//    input: [16, 11, 12, 14, 1, 0, 5]\n//    output: [8, -11, 6, 7, -1, 0, -5]\n// */\n// void negateOddsAndHalveEvens(std::vector<int> &x) {\n// for (int i = 0; i < x.size(); i++) {\n//         if (x[i] % 2 == 0) {\n//             x[i] /= 2;\n//         } else {\n//             x[i] = -x[i];\n//         }\n//     }\n// }\n\n// OpenMP implementation of negateOddsAndHalveEvens\n#include <omp.h>\n\n/* In the vector x negate the odd values and divide the even values by 2.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(std::vector<int> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* In the vector x negate the odd values and divide the even values by 2.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(std::vector<int> &x) {\nfor (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            x[i] /= 2;\n        } else {\n            x[i] = -x[i];\n        }\n    }\n}",
        "translation_function_name": "negateOddsAndHalveEvens",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "59_transform_map_function",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nbool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {",
        "translation_prompt": "// Serial implementation of mapPowersOfTwo\n// bool isPowerOfTwo(int x) {\n// \treturn (x > 0) && !(x & (x - 1));\n// }\n// \n// /* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n//    Example:\n// \n//    input: [8, 0, 9, 7, 15, 64, 3]\n//    output: [true, false, false, false, false, true, false]\n// */\n// void mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {\n// for (int i = 0; i < x.size(); i++) {\n// \t\tmask[i] = isPowerOfTwo(x[i]);\n// \t}\n// }\n\n// OpenMP implementation of mapPowersOfTwo\n#include <omp.h>\n\nbool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "bool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {\nfor (int i = 0; i < x.size(); i++) {\n\t\tmask[i] = isPowerOfTwo(x[i]);\n\t}\n}",
        "translation_function_name": "mapPowersOfTwo",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n\tmask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    mask[i] = isPowerOfTwo(x[i]);\n}\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "57_transform_inverse_offset",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Replace every element of the vector x with 1-1/x.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(std::vector<double> &x) {",
        "translation_prompt": "// Serial implementation of oneMinusInverse\n// /* Replace every element of the vector x with 1-1/x.\n//    Example:\n// \n//    input: [2, 4, 1, 12, -2]\n//    output: [0.5, 0.75, 0, 0.91666666, 1.5]\n// */\n// void oneMinusInverse(std::vector<double> &x) {\n// for (auto &e : x) {\n//     e = 1.0 - 1.0 / e;\n//   }\n// }\n\n// OpenMP implementation of oneMinusInverse\n#include <omp.h>\n\n/* Replace every element of the vector x with 1-1/x.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(std::vector<double> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Replace every element of the vector x with 1-1/x.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(std::vector<double> &x) {\nfor (auto &e : x) {\n    e = 1.0 - 1.0 / e;\n  }\n}",
        "translation_function_name": "oneMinusInverse",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "55_transform_relu",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(std::vector<double> &x) {",
        "translation_prompt": "// Serial implementation of relu\n// /* Compute the ReLU function on every element of x. Elements less than zero become zero,\n//    while elements greater than zero stay the same.\n//    Example:\n// \n//    input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n//    output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n// */\n// void relu(std::vector<double> &x) {\n// for (int i = 0; i < x.size(); i++) {\n//         if (x[i] < 0) {\n//             x[i] = 0;\n//         }\n//     }\n// }\n\n// OpenMP implementation of relu\n#include <omp.h>\n\n/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(std::vector<double> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(std::vector<double> &x) {\nfor (int i = 0; i < x.size(); i++) {\n        if (x[i] < 0) {\n            x[i] = 0;\n        }\n    }\n}",
        "translation_function_name": "relu",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "58_transform_squaring",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Replace every element of x with the square of its value.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(std::vector<int> &x) {",
        "translation_prompt": "// Serial implementation of squareEach\n// /* Replace every element of x with the square of its value.\n//    Example:\n// \n//    input: [5, 1, 2, -4, 8]\n//    output: [25, 1, 4, 16, 64]\n// */\n// void squareEach(std::vector<int> &x) {\n// for (int i = 0; i < x.size(); i++) {\n//         x[i] = x[i] * x[i];\n//     }\n// }\n\n// OpenMP implementation of squareEach\n#include <omp.h>\n\n/* Replace every element of x with the square of its value.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(std::vector<int> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Replace every element of x with the square of its value.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(std::vector<int> &x) {\nfor (int i = 0; i < x.size(); i++) {\n        x[i] = x[i] * x[i];\n    }\n}",
        "translation_function_name": "squareEach",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    x[i] = x[i] * x[i];\n}\n}"
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "47_sparse_la_spmv",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Use OpenMP to parallelize.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {",
        "translation_prompt": "// Serial implementation of spmv\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n//    and A is a sparse matrix stored in COO format.\n//    A has dimensions MxN, x has N values, and y has M values.\n//    Example:\n// \n//    input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n//    output: y=[2, 3]\n// */\n// void spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {\n// for (size_t i = 0; i < M; ++i) {\n//       y[i] *= beta;\n//    }\n// \n//    for (size_t i = 0; i < A.size(); ++i) {\n//       y[A[i].row] += alpha * A[i].value * x[A[i].column];\n//    }\n// }\n\n// OpenMP implementation of spmv\n#include <omp.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Use OpenMP to parallelize.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {\nfor (size_t i = 0; i < M; ++i) {\n      y[i] *= beta;\n   }\n\n   for (size_t i = 0; i < A.size(); ++i) {\n      y[A[i].row] += alpha * A[i].value * x[A[i].column];\n   }\n}",
        "translation_function_name": "spmv",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n   y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n   double temp = alpha * A[i].value * x[A[i].column];\n   #pragma omp atomic\n   y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n   y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n   double temp = alpha * A[i].value * x[A[i].column];\n   #pragma omp atomic\n   y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n   y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n   #pragma omp atomic\n   y[A[i].row] += alpha * A[i].value * x[A[i].column];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n   y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n   double temp = alpha * A[i].value * x[A[i].column];\n   #pragma omp atomic\n   y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    y[i] *= beta;\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    double temp = alpha * A[i].value * x[A[i].column];\n    #pragma omp atomic\n    y[A[i].row] += temp;\n}\n}"
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "46_sparse_la_spmm",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {",
        "translation_prompt": "// Serial implementation of spmm\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n//    X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n//    Example:\n// \n//    input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n//    output: Y=[{-1,-4}, {1,0}]\n// */\n// void spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {\n// std::vector<double> Ytemp(M*N, 0.0);\n//    for (auto const& a : A) {\n//       for (auto const& x : X) {\n//          if (a.column == x.row) {\n//             Ytemp[a.row*N + x.column] += a.value * x.value;\n//          }\n//       }\n//    }\n//    Y = std::move(Ytemp);\n// }\n\n// OpenMP implementation of spmm\n#include <omp.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {\nstd::vector<double> Ytemp(M*N, 0.0);\n   for (auto const& a : A) {\n      for (auto const& x : X) {\n         if (a.column == x.row) {\n            Ytemp[a.row*N + x.column] += a.value * x.value;\n         }\n      }\n   }\n   Y = std::move(Ytemp);\n}",
        "translation_function_name": "spmm",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row*N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row*N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\n\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for\nfor (size_t i = 0; i < A.size(); ++i) {\n    auto const& a = A[i];\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            #pragma omp atomic\n            Ytemp[a.row*N + x.column] += a.value * x.value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row*N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\n\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\n\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row*N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for shared(A, X, Ytemp, M, N)\nfor (size_t i = 0; i < A.size(); ++i) {\n    auto const& a = A[i];\n    for (size_t j = 0; j < X.size(); ++j) {\n        auto const& x = X[j];\n        if (a.column == x.row) {\n            #pragma omp atomic\n            Ytemp[a.row*N + x.column] += a.value * x.value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row*N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row*N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for shared(A, X, Ytemp, M, N)\nfor (size_t i = 0; i < A.size(); ++i) {\n    auto const& a = A[i];\n    for (size_t j = 0; j < X.size(); ++j) {\n        auto const& x = X[j];\n        if (a.column == x.row) {\n            #pragma omp atomic\n            Ytemp[a.row*N + x.column] += a.value * x.value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row*N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < A.size(); ++i) {\n    for (size_t j = 0; j < X.size(); ++j) {\n        if (A[i].column == X[j].row) {\n            #pragma omp atomic\n            Ytemp[A[i].row * N + X[j].column] += A[i].value * X[j].value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}",
            "\nstd::vector<double> Ytemp(M*N, 0.0);\n#pragma omp parallel for shared(A, X, Ytemp, M, N)\nfor (size_t i = 0; i < A.size(); ++i) {\n    auto const& a = A[i];\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            #pragma omp atomic\n            Ytemp[a.row*N + x.column] += a.value * x.value;\n        }\n    }\n}\nY = std::move(Ytemp);\n}"
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "49_sparse_la_sparse_lu_decomp",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   A is a sparse NxN matrix stored in COO format.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n   output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n*/\nvoid luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {",
        "translation_prompt": "// Serial implementation of luFactorize\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n//    A is a sparse NxN matrix stored in COO format.\n//    Example:\n// \n//    input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n//    output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n// */\n// void luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {\n// \n// // Assuming A is sorted by row and then by column\n// L.clear();\n// U.clear();\n// \n// // Initialize L and U with zeros\n// L.resize(N * N, 0);\n// U.resize(N * N, 0);\n// \n// // Create a map for quick access to A's elements\n// std::map<std::pair<size_t, size_t>, double> A_map;\n// for (const auto& elem : A) {\n//     A_map[{elem.row, elem.column}] = elem.value;\n// }\n// \n// // LU decomposition algorithm\n// for (size_t i = 0; i < N; ++i) {\n//     // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n//     for (size_t k = i; k < N; ++k) {\n//         double sum = 0.0;\n//         for (size_t j = 0; j < i; ++j) {\n//             sum += L[i * N + j] * U[j * N + k];\n//         }\n//         U[i * N + k] = A_map[{i, k}] - sum;\n//     }\n// \n//     // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n//     for (size_t k = i + 1; k < N; ++k) {\n//         double sum = 0.0;\n//         for (size_t j = 0; j < i; ++j) {\n//             sum += L[k * N + j] * U[j * N + i];\n//         }\n//         L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n//     }\n// \n//     // L(i, i) = 1\n//     L[i * N + i] = 1.0;\n// }\n// }\n\n// OpenMP implementation of luFactorize\n#include <omp.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   A is a sparse NxN matrix stored in COO format.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n   output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n*/\nvoid luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   A is a sparse NxN matrix stored in COO format.\n   Example:\n\n   input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n   output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n*/\nvoid luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {\n\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
        "translation_function_name": "luFactorize",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for shared(A_map, L, U, i, N) default(none)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for shared(A_map, L, U, i, N) default(none)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for default(shared)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for default(shared)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for default(shared) schedule(static)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for default(shared) schedule(static)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for shared(A_map, L, U, i, N)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for shared(A_map, L, U, i, N)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for shared(A_map, L, U, i, N) default(none)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for shared(A_map, L, U, i, N) default(none)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for default(shared)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for default(shared)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for schedule(static)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for schedule(static)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for default(shared) schedule(static)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        #pragma omp parallel for reduction(+:sum) schedule(static)\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for default(shared) schedule(static)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        #pragma omp parallel for reduction(+:sum) schedule(static)\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
            "\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    #pragma omp parallel for default(shared)\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        #pragma omp parallel for reduction(+:sum) default(shared)\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    #pragma omp parallel for default(shared)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        #pragma omp parallel for reduction(+:sum) default(shared)\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "23_histogram_first_letter_counts",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {",
        "translation_prompt": "// Serial implementation of firstLetterCounts\n// /* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n//    Assume all strings are in lower case. Store the output in `bins` array.\n//    Example:\n// \n//    input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n//    output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n// */\n// void firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {\n// for (auto const& str : s) {\n//         bins[str[0] - 'a']++;\n//     }\n// }\n\n// OpenMP implementation of firstLetterCounts\n#include <omp.h>\n\n/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {\nfor (auto const& str : s) {\n        bins[str[0] - 'a']++;\n    }\n}",
        "translation_function_name": "firstLetterCounts",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 26> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < s.size(); ++i) {\n        local_bins[s[i][0] - 'a']++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 26; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 26> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < s.size(); ++i) {\n        local_bins[s[i][0] - 'a']++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 26; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 26> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < s.size(); ++i) {\n        local_bins[s[i][0] - 'a']++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 26; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < s.size(); ++i) {\n    #pragma omp atomic\n    bins[s[i][0] - 'a']++;\n}\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "21_histogram_bin_0-100",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {",
        "translation_prompt": "// Serial implementation of binsBy10Count\n// /* Vector x contains values between 0 and 100, inclusive. Count the number of\n//    values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n//    Example:\n// \n//    input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n//    output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n// */\n// void binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {\n// for (auto const& value : x) {\n//     if (value < 10) {\n//       bins[0]++;\n//     } else if (value < 20) {\n//       bins[1]++;\n//     } else if (value < 30) {\n//       bins[2]++;\n//     } else if (value < 40) {\n//       bins[3]++;\n//     } else if (value < 50) {\n//       bins[4]++;\n//     } else if (value < 60) {\n//       bins[5]++;\n//     } else if (value < 70) {\n//       bins[6]++;\n//     } else if (value < 80) {\n//       bins[7]++;\n//     } else if (value < 90) {\n//       bins[8]++;\n//     } else {\n//       bins[9]++;\n//     }\n//   }\n// }\n\n// OpenMP implementation of binsBy10Count\n#include <omp.h>\n\n/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {\nfor (auto const& value : x) {\n    if (value < 10) {\n      bins[0]++;\n    } else if (value < 20) {\n      bins[1]++;\n    } else if (value < 30) {\n      bins[2]++;\n    } else if (value < 40) {\n      bins[3]++;\n    } else if (value < 50) {\n      bins[4]++;\n    } else if (value < 60) {\n      bins[5]++;\n    } else if (value < 70) {\n      bins[6]++;\n    } else if (value < 80) {\n      bins[7]++;\n    } else if (value < 90) {\n      bins[8]++;\n    } else {\n      bins[9]++;\n    }\n  }\n}",
        "translation_function_name": "binsBy10Count",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  if (binIndex >= 10) binIndex = 9; // Ensure values of 100 go into the last bin\n  #pragma omp atomic\n  bins[binIndex]++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    int binIndex = static_cast<int>(x[i] / 10);\n    #pragma omp atomic\n    bins[binIndex < 10 ? binIndex : 9]++;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  if (binIndex >= 10) binIndex = 9; // Ensure values of 100 go into the last bin\n  #pragma omp atomic\n  bins[binIndex]++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  if (binIndex >= 10) binIndex = 9; // Ensure values of 100 go into the last bin\n  #pragma omp atomic\n  ++bins[binIndex];\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  #pragma omp atomic\n  bins[binIndex < 10 ? binIndex : 9]++;\n}\n}",
            "\n#pragma omp parallel\n{\n  std::array<size_t, 10> local_bins = {0};\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < x.size(); ++i) {\n    int bin_index = static_cast<int>(x[i] / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure the index is within bounds\n    local_bins[bin_index]++;\n  }\n\n  #pragma omp critical\n  for (size_t i = 0; i < 10; ++i) {\n    bins[i] += local_bins[i];\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  if (binIndex >= 10) binIndex = 9; // Ensure values of 100 go into the last bin\n  #pragma omp atomic\n  bins[binIndex]++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  if (binIndex >= 10) binIndex = 9; // Ensure values of 100 go into the last bin\n  #pragma omp atomic\n  bins[binIndex]++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  #pragma omp atomic\n  bins[binIndex < 10 ? binIndex : 9]++;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  if (binIndex >= 10) binIndex = 9; // Ensure values of 100 go into the last bin\n  #pragma omp atomic\n  bins[binIndex]++;\n}\n}",
            "\n#pragma omp parallel\n{\n  std::array<size_t, 10> local_bins = {0};\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < x.size(); ++i) {\n    int bin_index = static_cast<int>(x[i] / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure the index is within bounds\n    local_bins[bin_index]++;\n  }\n\n  #pragma omp critical\n  for (size_t i = 0; i < 10; ++i) {\n    bins[i] += local_bins[i];\n  }\n}\n}",
            "\n#pragma omp parallel\n{\n  std::array<size_t, 10> local_bins = {0};\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < x.size(); ++i) {\n    int bin_index = static_cast<int>(x[i] / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure the index is within bounds\n    local_bins[bin_index]++;\n  }\n\n  #pragma omp critical\n  for (size_t i = 0; i < 10; ++i) {\n    bins[i] += local_bins[i];\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    int binIndex = static_cast<int>(x[i] / 10);\n    #pragma omp atomic\n    bins[binIndex < 10 ? binIndex : 9]++;\n}\n}",
            "\n#pragma omp parallel\n{\n  std::array<size_t, 10> local_bins = {0};\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < x.size(); ++i) {\n    int bin = static_cast<int>(x[i] / 10);\n    if (bin >= 10) bin = 9; // Ensure values of 100 go into the last bin\n    local_bins[bin]++;\n  }\n\n  #pragma omp critical\n  for (size_t i = 0; i < 10; ++i) {\n    bins[i] += local_bins[i];\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  if (binIndex >= 10) binIndex = 9; // Ensure the index is within bounds\n  #pragma omp atomic\n  bins[binIndex]++;\n}\n}",
            "\n#pragma omp parallel\n{\n  std::array<size_t, 10> local_bins = {0};\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < x.size(); ++i) {\n    size_t bin_index = static_cast<size_t>(x[i] / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure values of 100 go into the last bin\n    local_bins[bin_index]++;\n  }\n\n  #pragma omp critical\n  for (size_t i = 0; i < 10; ++i) {\n    bins[i] += local_bins[i];\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  int binIndex = static_cast<int>(x[i] / 10);\n  #pragma omp atomic\n  bins[binIndex < 10 ? binIndex : 9]++;\n}\n}",
            "\n#pragma omp parallel\n{\n  std::array<size_t, 10> local_bins = {0};\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < x.size(); ++i) {\n    size_t bin_index = static_cast<size_t>(x[i] / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure values of 100 go into the last bin.\n    local_bins[bin_index]++;\n  }\n\n  #pragma omp critical\n  for (size_t i = 0; i < 10; ++i) {\n    bins[i] += local_bins[i];\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    int binIndex = static_cast<int>(x[i] / 10);\n    #pragma omp atomic\n    bins[binIndex < 10 ? binIndex : 9]++;\n}\n}",
            "\n#pragma omp parallel\n{\n  std::array<size_t, 10> local_bins = {0};\n\n  #pragma omp for nowait\n  for (size_t i = 0; i < x.size(); ++i) {\n    int bin_index = static_cast<int>(x[i] / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure values of 100 go into the last bin\n    local_bins[bin_index]++;\n  }\n\n  #pragma omp critical\n  for (size_t i = 0; i < 10; ++i) {\n    bins[i] += local_bins[i];\n  }\n}\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "22_histogram_count_quadrants",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Use OpenMP to count in parallel.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {",
        "translation_prompt": "// Serial implementation of countQuadrants\n// struct Point {\n//    double x, y;\n// };\n// \n// /* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n//    Store the counts in `bins`.\n//    Example:\n// \n//    input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n//    output: [3, 1, 0, 2]\n// */\n// void countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {\n// for (auto const& point : points) {\n//       if (point.x > 0 && point.y > 0) {\n//          bins[0]++;\n//       } else if (point.x < 0 && point.y > 0) {\n//          bins[1]++;\n//       } else if (point.x < 0 && point.y < 0) {\n//          bins[2]++;\n//       } else {\n//          bins[3]++;\n//       }\n//    }\n// }\n\n// OpenMP implementation of countQuadrants\n#include <omp.h>\n\nstruct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Use OpenMP to count in parallel.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {\nfor (auto const& point : points) {\n      if (point.x > 0 && point.y > 0) {\n         bins[0]++;\n      } else if (point.x < 0 && point.y > 0) {\n         bins[1]++;\n      } else if (point.x < 0 && point.y < 0) {\n         bins[2]++;\n      } else {\n         bins[3]++;\n      }\n   }\n}",
        "translation_function_name": "countQuadrants",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n   std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n   #pragma omp for nowait\n   for (size_t i = 0; i < points.size(); ++i) {\n      if (points[i].x > 0 && points[i].y > 0) {\n         local_bins[0]++;\n      } else if (points[i].x < 0 && points[i].y > 0) {\n         local_bins[1]++;\n      } else if (points[i].x < 0 && points[i].y < 0) {\n         local_bins[2]++;\n      } else {\n         local_bins[3]++;\n      }\n   }\n\n   #pragma omp critical\n   for (int i = 0; i < 4; ++i) {\n      bins[i] += local_bins[i];\n   }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n   std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n   #pragma omp for nowait\n   for (size_t i = 0; i < points.size(); ++i) {\n      if (points[i].x > 0 && points[i].y > 0) {\n         local_bins[0]++;\n      } else if (points[i].x < 0 && points[i].y > 0) {\n         local_bins[1]++;\n      } else if (points[i].x < 0 && points[i].y < 0) {\n         local_bins[2]++;\n      } else {\n         local_bins[3]++;\n      }\n   }\n\n   #pragma omp critical\n   for (size_t i = 0; i < 4; ++i) {\n      bins[i] += local_bins[i];\n   }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n   std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n   #pragma omp for nowait\n   for (size_t i = 0; i < points.size(); ++i) {\n      if (points[i].x > 0 && points[i].y > 0) {\n         local_bins[0]++;\n      } else if (points[i].x < 0 && points[i].y > 0) {\n         local_bins[1]++;\n      } else if (points[i].x < 0 && points[i].y < 0) {\n         local_bins[2]++;\n      } else {\n         local_bins[3]++;\n      }\n   }\n\n   #pragma omp critical\n   for (size_t i = 0; i < 4; ++i) {\n      bins[i] += local_bins[i];\n   }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n   std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n   #pragma omp for nowait\n   for (size_t i = 0; i < points.size(); ++i) {\n      if (points[i].x > 0 && points[i].y > 0) {\n         local_bins[0]++;\n      } else if (points[i].x < 0 && points[i].y > 0) {\n         local_bins[1]++;\n      } else if (points[i].x < 0 && points[i].y < 0) {\n         local_bins[2]++;\n      } else {\n         local_bins[3]++;\n      }\n   }\n   #pragma omp critical\n   {\n      bins[0] += local_bins[0];\n      bins[1] += local_bins[1];\n      bins[2] += local_bins[2];\n      bins[3] += local_bins[3];\n   }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n   std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n   #pragma omp for nowait\n   for (size_t i = 0; i < points.size(); ++i) {\n      if (points[i].x > 0 && points[i].y > 0) {\n         local_bins[0]++;\n      } else if (points[i].x < 0 && points[i].y > 0) {\n         local_bins[1]++;\n      } else if (points[i].x < 0 && points[i].y < 0) {\n         local_bins[2]++;\n      } else {\n         local_bins[3]++;\n      }\n   }\n\n   #pragma omp critical\n   for (size_t i = 0; i < 4; ++i) {\n      bins[i] += local_bins[i];\n   }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n   std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n   #pragma omp for nowait\n   for (size_t i = 0; i < points.size(); ++i) {\n      if (points[i].x > 0 && points[i].y > 0) {\n         local_bins[0]++;\n      } else if (points[i].x < 0 && points[i].y > 0) {\n         local_bins[1]++;\n      } else if (points[i].x < 0 && points[i].y < 0) {\n         local_bins[2]++;\n      } else {\n         local_bins[3]++;\n      }\n   }\n\n   #pragma omp critical\n   for (int i = 0; i < 4; ++i) {\n      bins[i] += local_bins[i];\n   }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < points.size(); ++i) {\n        if (points[i].x > 0 && points[i].y > 0) {\n            local_bins[0]++;\n        } else if (points[i].x < 0 && points[i].y > 0) {\n            local_bins[1]++;\n        } else if (points[i].x < 0 && points[i].y < 0) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n   std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n   #pragma omp for nowait\n   for (size_t i = 0; i < points.size(); ++i) {\n      if (points[i].x > 0 && points[i].y > 0) {\n         local_bins[0]++;\n      } else if (points[i].x < 0 && points[i].y > 0) {\n         local_bins[1]++;\n      } else if (points[i].x < 0 && points[i].y < 0) {\n         local_bins[2]++;\n      } else {\n         local_bins[3]++;\n      }\n   }\n\n   #pragma omp critical\n   for (size_t i = 0; i < 4; ++i) {\n      bins[i] += local_bins[i];\n   }\n}\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "24_histogram_count_quartile",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {",
        "translation_prompt": "// Serial implementation of countQuartiles\n// /* Count the number of doubles in the vector x that have a fractional part \n//    in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n//    Examples:\n// \n//    input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n//    output: [2, 1, 2, 2]\n// \n//    input: [1.9, 0.2, 0.6, 10.1, 7.4]\n//    output: [2, 1, 1, 1]\n// */\n// void countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {\n// for (double num : x) {\n//         double fractional_part = num - std::floor(num);\n//         if (fractional_part < 0.25) {\n//             bins[0]++;\n//         } else if (fractional_part < 0.5) {\n//             bins[1]++;\n//         } else if (fractional_part < 0.75) {\n//             bins[2]++;\n//         } else {\n//             bins[3]++;\n//         }\n//     }\n// }\n\n// OpenMP implementation of countQuartiles\n#include <omp.h>\n\n/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {\nfor (double num : x) {\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            bins[0]++;\n        } else if (fractional_part < 0.5) {\n            bins[1]++;\n        } else if (fractional_part < 0.75) {\n            bins[2]++;\n        } else {\n            bins[3]++;\n        }\n    }\n}",
        "translation_function_name": "countQuartiles",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double fractional_part = x[i] - std::floor(x[i]);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n#pragma omp parallel\n{\n    std::array<size_t, 4> private_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            private_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            private_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            private_bins[2]++;\n        } else {\n            private_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += private_bins[0];\n        bins[1] += private_bins[1];\n        bins[2] += private_bins[2];\n        bins[3] += private_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double fractional_part = x[i] - std::floor(x[i]);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double fractional_part = x[i] - std::floor(x[i]);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double fractional_part = x[i] - std::floor(x[i]);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double fractional_part = x[i] - std::floor(x[i]);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double fractional_part = x[i] - std::floor(x[i]);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 4> local_bins = {0, 0, 0, 0};\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double num = x[i];\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            local_bins[0]++;\n        } else if (fractional_part < 0.5) {\n            local_bins[1]++;\n        } else if (fractional_part < 0.75) {\n            local_bins[2]++;\n        } else {\n            local_bins[3]++;\n        }\n    }\n    #pragma omp critical\n    {\n        bins[0] += local_bins[0];\n        bins[1] += local_bins[1];\n        bins[2] += local_bins[2];\n        bins[3] += local_bins[3];\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "20_histogram_pixel_histogram",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Use OpenMP to count in parallel.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {",
        "translation_prompt": "// Serial implementation of pixelCounts\n// /* Count the number of pixels in image with each grayscale intensity.\n//    The vector `image` is a grayscale image with values 0-255.\n//    Store the results in `bins`.\n//    Example:\n//    \n//    input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n//    output: [0, 0, 2, 0, 1, ...]\n// */\n//  void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {\n// for (auto const& pixel : image) {\n//         bins[pixel]++;\n//     }\n// }\n\n// OpenMP implementation of pixelCounts\n#include <omp.h>\n\n/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Use OpenMP to count in parallel.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {\nfor (auto const& pixel : image) {\n        bins[pixel]++;\n    }\n}",
        "translation_function_name": "pixelCounts",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    {\n        for (size_t i = 0; i < 256; ++i) {\n            bins[i] += local_bins[i];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    {\n        for (size_t i = 0; i < 256; ++i) {\n            bins[i] += local_bins[i];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    {\n        for (size_t i = 0; i < 256; ++i) {\n            bins[i] += local_bins[i];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    {\n        for (size_t i = 0; i < 256; ++i) {\n            bins[i] += local_bins[i];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    \n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    \n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {};\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}",
            "\n#pragma omp parallel\n{\n    std::array<size_t, 256> local_bins = {0};\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < image.size(); ++i) {\n        local_bins[image[i]]++;\n    }\n\n    #pragma omp critical\n    for (size_t i = 0; i < 256; ++i) {\n        bins[i] += local_bins[i];\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "38_search_find_the_first_even_number",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",
        "translation_prompt": "// Serial implementation of findFirstEven\n// /* Return the index of the first even number in the vector x.\n//    Examples:\n// \n//    input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n//    output: 6\n// \n//    input: [3, 8, 9, 9, 3, 4, 8, 6]\n//    output: 1\n// */\n// size_t findFirstEven(std::vector<int> const& x) {\n// for (size_t i = 0; i < x.size(); ++i) {\n//     if (x[i] % 2 == 0) {\n//       return i;\n//     }\n//   }\n//   return x.size();\n// }\n\n// OpenMP implementation of findFirstEven\n#include <omp.h>\n\n/* Return the index of the first even number in the vector x.\n   Use OpenMP to parallelize the search.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n}",
        "translation_function_name": "findFirstEven",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  if (x[i] % 2 == 0) {\n    #pragma omp critical\n    {\n      if (i < index) {\n        index = i;\n      }\n    }\n  }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t firstEvenIndex = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < firstEvenIndex) {\n                firstEvenIndex = i;\n            }\n        }\n        break;\n    }\n}\nreturn firstEvenIndex;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t firstEvenIndex = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  if (x[i] % 2 == 0) {\n    #pragma omp critical\n    {\n      if (i < firstEvenIndex) {\n        firstEvenIndex = i;\n      }\n    }\n    break;\n  }\n}\nreturn firstEvenIndex;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t firstEvenIndex = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < firstEvenIndex) {\n                firstEvenIndex = i;\n            }\n        }\n        break;\n    }\n}\nreturn firstEvenIndex;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t firstEvenIndex = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < firstEvenIndex) {\n                firstEvenIndex = i;\n            }\n        }\n    }\n}\nreturn firstEvenIndex;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    #pragma omp flush(index)\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    #pragma omp flush(index)\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n  if (x[i] % 2 == 0) {\n    #pragma omp critical\n    {\n      if (i < index) {\n        index = i;\n      }\n    }\n  }\n}\nreturn index;\n}",
            "\nsize_t index = x.size();\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n        #pragma omp critical\n        {\n            if (i < index) {\n                index = i;\n            }\n        }\n    }\n}\nreturn index;\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "36_search_check_if_array_contains_value",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",
        "translation_prompt": "// Serial implementation of contains\n// /* Return true if the vector x contains the value `target`. Return false otherwise.\n//    Examples:\n// \n//    input: x=[1, 8, 2, 6, 4, 6], target=3\n//    output: false\n//    \n//    input: x=[1, 8, 2, 6, 4, 6], target=8\n//    output: true\n// */\n// bool contains(std::vector<int> const& x, int target) {\n// return std::find(x.begin(), x.end(), target)!= x.end();\n// }\n\n// OpenMP implementation of contains\n#include <omp.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {\nreturn std::find(x.begin(), x.end(), target)!= x.end();\n}",
        "translation_function_name": "contains",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        {\n            found = true;\n        }\n        #pragma omp cancel for\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < static_cast<int>(x.size()); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}",
            "\nbool found = false;\n#pragma omp parallel for shared(found)\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] == target) {\n        #pragma omp critical\n        found = true;\n    }\n}\nreturn found;\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "39_search_xor_contains",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",
        "translation_prompt": "// Serial implementation of xorContains\n// /* Return true if `val` is only in one of vectors x or y.\n//    Return false if it is in both or neither.\n//    Examples:\n// \n//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n//    output: true\n// \n//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n//    output: false\n// */\n// bool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {\n// return std::find(x.begin(), x.end(), val)!= x.end() ^\n//          std::find(y.begin(), y.end(), val)!= y.end();\n// }\n\n// OpenMP implementation of xorContains\n#include <omp.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use OpenMP to search in parallel.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {\nreturn std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",
        "translation_function_name": "xorContains",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        for (int i = 0; i < x.size(); ++i) {\n            if (x[i] == val) {\n                found_x = true;\n                break;\n            }\n        }\n    }\n    #pragma omp section\n    {\n        for (int i = 0; i < y.size(); ++i) {\n            if (y[i] == val) {\n                found_y = true;\n                break;\n            }\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        if (std::find(x.begin(), x.end(), val) != x.end()) {\n            found_x = true;\n        }\n    }\n    #pragma omp section\n    {\n        if (std::find(y.begin(), y.end(), val) != y.end()) {\n            found_y = true;\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        if (std::find(x.begin(), x.end(), val) != x.end()) {\n            found_x = true;\n        }\n    }\n    #pragma omp section\n    {\n        if (std::find(y.begin(), y.end(), val) != y.end()) {\n            found_y = true;\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        for (auto it = x.begin(); it != x.end(); ++it) {\n            if (*it == val) {\n                found_x = true;\n                break;\n            }\n        }\n    }\n    #pragma omp section\n    {\n        for (auto it = y.begin(); it != y.end(); ++it) {\n            if (*it == val) {\n                found_y = true;\n                break;\n            }\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        if (std::find(x.begin(), x.end(), val) != x.end()) {\n            found_x = true;\n        }\n    }\n    #pragma omp section\n    {\n        if (std::find(y.begin(), y.end(), val) != y.end()) {\n            found_y = true;\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false;\nbool found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        for (auto it = x.begin(); it != x.end(); ++it) {\n            if (*it == val) {\n                found_x = true;\n                break;\n            }\n        }\n    }\n    #pragma omp section\n    {\n        for (auto it = y.begin(); it != y.end(); ++it) {\n            if (*it == val) {\n                found_y = true;\n                break;\n            }\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false;\nbool found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        for (auto it = x.begin(); it != x.end(); ++it) {\n            if (*it == val) {\n                found_x = true;\n                break;\n            }\n        }\n    }\n    #pragma omp section\n    {\n        for (auto it = y.begin(); it != y.end(); ++it) {\n            if (*it == val) {\n                found_y = true;\n                break;\n            }\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        for (int i = 0; i < x.size(); ++i) {\n            if (x[i] == val) {\n                found_x = true;\n                break;\n            }\n        }\n    }\n    #pragma omp section\n    {\n        for (int i = 0; i < y.size(); ++i) {\n            if (y[i] == val) {\n                found_y = true;\n                break;\n            }\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        for (auto it = x.begin(); it != x.end(); ++it) {\n            if (*it == val) {\n                found_x = true;\n                break;\n            }\n        }\n    }\n    #pragma omp section\n    {\n        for (auto it = y.begin(); it != y.end(); ++it) {\n            if (*it == val) {\n                found_y = true;\n                break;\n            }\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false;\nbool found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        found_x = std::find(x.begin(), x.end(), val) != x.end();\n    }\n    #pragma omp section\n    {\n        found_y = std::find(y.begin(), y.end(), val) != y.end();\n    }\n}\n\nreturn found_x ^ found_y;\n}",
            "\nbool found_x = false, found_y = false;\n\n#pragma omp parallel sections\n{\n    #pragma omp section\n    {\n        for (auto it = x.begin(); it != x.end(); ++it) {\n            if (*it == val) {\n                found_x = true;\n                break;\n            }\n        }\n    }\n    #pragma omp section\n    {\n        for (auto it = y.begin(); it != y.end(); ++it) {\n            if (*it == val) {\n                found_y = true;\n                break;\n            }\n        }\n    }\n}\n\nreturn found_x ^ found_y;\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "35_search_search_for_last_struct_by_key",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",
        "translation_prompt": "// Serial implementation of findLastShortBook\n// struct Book {\n//    std::string title;\n//    int pages;\n// };\n// \n// /* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n// \t Example:\n// \n//    input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n//    output: 2\n// */\n// size_t findLastShortBook(std::vector<Book> const& books) {\n// size_t last_short_book_index = 0;\n//    for (size_t i = 0; i < books.size(); ++i) {\n//       if (books[i].pages < 100) {\n//          last_short_book_index = i;\n//       }\n//    }\n//    return last_short_book_index;\n// }\n\n// OpenMP implementation of findLastShortBook\n#include <omp.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use OpenMP to search in parallel.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {\nsize_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n}",
        "translation_function_name": "findLastShortBook",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\nsize_t i;\n#pragma omp parallel for default(none) shared(books) private(i) lastprivate(last_short_book_index)\nfor (i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        last_short_book_index = i;\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\nsize_t i;\n#pragma omp parallel for default(none) shared(books) private(i) lastprivate(last_short_book_index)\nfor (i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        last_short_book_index = i;\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel for\nfor (size_t i = 0; i < books.size(); ++i) {\n   if (books[i].pages < 100) {\n      #pragma omp critical\n      {\n         if (i > last_short_book_index) {\n            last_short_book_index = i;\n         }\n      }\n   }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel for\nfor (size_t i = 0; i < books.size(); ++i) {\n   if (books[i].pages < 100) {\n      #pragma omp critical\n      {\n         if (i > last_short_book_index) {\n            last_short_book_index = i;\n         }\n      }\n   }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel for\nfor (size_t i = 0; i < books.size(); ++i) {\n   if (books[i].pages < 100) {\n      #pragma omp critical\n      {\n         if (i > last_short_book_index) {\n            last_short_book_index = i;\n         }\n      }\n   }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\nsize_t i;\n#pragma omp parallel for default(none) shared(books) private(i) lastprivate(last_short_book_index)\nfor (i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        last_short_book_index = i;\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel for\nfor (size_t i = 0; i < books.size(); ++i) {\n   if (books[i].pages < 100) {\n      #pragma omp critical\n      {\n         if (i > last_short_book_index) {\n            last_short_book_index = i;\n         }\n      }\n   }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\nsize_t i;\n#pragma omp parallel for default(none) shared(books) private(i) lastprivate(last_short_book_index)\nfor (i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        last_short_book_index = i;\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\nsize_t i;\n#pragma omp parallel for default(none) shared(books) private(i) lastprivate(last_short_book_index)\nfor (i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        last_short_book_index = i;\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel for\nfor (size_t i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        #pragma omp critical\n        {\n            if (i > last_short_book_index) {\n                last_short_book_index = i;\n            }\n        }\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\nsize_t i;\n#pragma omp parallel for default(none) shared(books) private(i) lastprivate(last_short_book_index)\nfor (i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        last_short_book_index = i;\n    }\n}\nreturn last_short_book_index;\n}",
            "\nsize_t last_short_book_index = 0;\n#pragma omp parallel\n{\n    size_t local_last_short_book_index = 0;\n    #pragma omp for\n    for (size_t i = 0; i < books.size(); ++i) {\n        if (books[i].pages < 100) {\n            local_last_short_book_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_last_short_book_index > last_short_book_index) {\n            last_short_book_index = local_last_short_book_index;\n        }\n    }\n}\nreturn last_short_book_index;\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "37_search_find_the_closest_number_to_pi",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of findClosestToPi\n// /* Return the index of the value in the vector x that is closest to the math constant PI.\n//    Use M_PI for the value of PI.\n//    Example:\n// \n//    input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n//    output: 1\n// */\n// size_t findClosestToPi(std::vector<double> const& x) {\n// double min_distance = std::numeric_limits<double>::max();\n//   size_t min_index = 0;\n//   for (size_t i = 0; i < x.size(); ++i) {\n//     double distance = std::abs(x[i] - M_PI);\n//     if (distance < min_distance) {\n//       min_distance = distance;\n//       min_index = i;\n//     }\n//   }\n//   return min_index;\n// }\n\n// OpenMP implementation of findClosestToPi\n#include <omp.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use OpenMP to search in parallel.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {\ndouble min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n  return min_index;\n}",
        "translation_function_name": "findClosestToPi",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\n\nreturn global_min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\n\nreturn global_min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\nreturn global_min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\nreturn global_min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\nreturn global_min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\n\nreturn global_min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\n\nreturn global_min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\nreturn global_min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\nreturn global_min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\n\nreturn global_min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\nreturn global_min_index;\n}",
            "\ndouble min_distance = std::numeric_limits<double>::max();\nsize_t min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < min_distance) {\n            min_distance = local_min_distance;\n            min_index = local_min_index;\n        }\n    }\n}\nreturn min_index;\n}",
            "\ndouble global_min_distance = std::numeric_limits<double>::max();\nsize_t global_min_index = 0;\n#pragma omp parallel\n{\n    double local_min_distance = std::numeric_limits<double>::max();\n    size_t local_min_index = 0;\n    #pragma omp for nowait\n    for (size_t i = 0; i < x.size(); ++i) {\n        double distance = std::abs(x[i] - M_PI);\n        if (distance < local_min_distance) {\n            local_min_distance = distance;\n            local_min_index = i;\n        }\n    }\n    #pragma omp critical\n    {\n        if (local_min_distance < global_min_distance) {\n            global_min_distance = local_min_distance;\n            global_min_index = local_min_index;\n        }\n    }\n}\nreturn global_min_index;\n}"
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "08_fft_split_fft",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {",
        "translation_prompt": "// Serial implementation of fft\n// /* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n//    Example:\n// \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n// */\n// void fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {\n// int n = x.size();\n//     if (n == 0) return;\n//     if (n == 1) {\n//         r[0] = x[0].real();\n//         i[0] = x[0].imag();\n//         return;\n//     }\n//     std::vector<std::complex<double>> x_even(n / 2);\n//     std::vector<std::complex<double>> x_odd(n / 2);\n//     for (int i = 0; i < n / 2; i++) {\n//         x_even[i] = x[2 * i];\n//         x_odd[i] = x[2 * i + 1];\n//     }\n//     std::vector<double> r_even(n / 2);\n//     std::vector<double> i_even(n / 2);\n//     std::vector<double> r_odd(n / 2);\n//     std::vector<double> i_odd(n / 2);\n//     fft(x_even, r_even, i_even);\n//     fft(x_odd, r_odd, i_odd);\n//     for (int k = 0; k < n / 2; k++) {\n//         std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n//         r[k] = r_even[k] + z.real();\n//         i[k] = i_even[k] + z.imag();\n//         r[k + n / 2] = r_even[k] - z.real();\n//         i[k + n / 2] = i_even[k] - z.imag();\n//     }\n// }\n\n// OpenMP implementation of fft\n#include <omp.h>\n\n/* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {\nint n = x.size();\n    if (n == 0) return;\n    if (n == 1) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n        return;\n    }\n    std::vector<std::complex<double>> x_even(n / 2);\n    std::vector<std::complex<double>> x_odd(n / 2);\n    for (int i = 0; i < n / 2; i++) {\n        x_even[i] = x[2 * i];\n        x_odd[i] = x[2 * i + 1];\n    }\n    std::vector<double> r_even(n / 2);\n    std::vector<double> i_even(n / 2);\n    std::vector<double> r_odd(n / 2);\n    std::vector<double> i_odd(n / 2);\n    fft(x_even, r_even, i_even);\n    fft(x_odd, r_odd, i_odd);\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}",
        "translation_function_name": "fft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int idx = 0; idx < n / 2; idx++) {\n    x_even[idx] = x[2 * idx];\n    x_odd[idx] = x[2 * idx + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int i = 0; i < n / 2; i++) {\n    x_even[i] = x[2 * i];\n    x_odd[i] = x[2 * i + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int idx = 0; idx < n / 2; idx++) {\n    x_even[idx] = x[2 * idx];\n    x_odd[idx] = x[2 * idx + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int idx = 0; idx < n / 2; idx++) {\n    x_even[idx] = x[2 * idx];\n    x_odd[idx] = x[2 * idx + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int i = 0; i < n / 2; i++) {\n    x_even[i] = x[2 * i];\n    x_odd[i] = x[2 * i + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int i = 0; i < n / 2; i++) {\n    x_even[i] = x[2 * i];\n    x_odd[i] = x[2 * i + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int i = 0; i < n / 2; i++) {\n    x_even[i] = x[2 * i];\n    x_odd[i] = x[2 * i + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int i = 0; i < n / 2; i++) {\n    x_even[i] = x[2 * i];\n    x_odd[i] = x[2 * i + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n#pragma omp parallel for\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int i = 0; i < n / 2; i++) {\n    x_even[i] = x[2 * i];\n    x_odd[i] = x[2 * i + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}",
            "\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    r[0] = x[0].real();\n    i[0] = x[0].imag();\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\n#pragma omp parallel for\nfor (int i = 0; i < n / 2; i++) {\n    x_even[i] = x[2 * i];\n    x_odd[i] = x[2 * i + 1];\n}\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n / 2; k++) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n}"
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "07_fft_fft_conjugate",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fftConjugate(std::vector<std::complex<double>> &x) {",
        "translation_prompt": "// Serial implementation of fftConjugate\n// /* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n//    Example:\n// \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n// */\n// void fftConjugate(std::vector<std::complex<double>> &x) {\n// int n = x.size();\n//     int m = 0;\n//     for (int i = 0; i < n; i++) {\n//         int j = i;\n//         for (int k = 0; k < m; k++) {\n//             j = j ^ (1 << k);\n//         }\n//         if (i < j) {\n//             std::complex<double> temp = x[i];\n//             x[i] = x[j];\n//             x[j] = temp;\n//         }\n//         m = std::max(m, __builtin_ctz(j));\n//     }\n//     for (int i = 1; i < n; i *= 2) {\n//         std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n//         for (int j = 0; j < n; j += 2 * i) {\n//             for (int k = 0; k < i; k++) {\n//                 std::complex<double> u = x[j + k];\n//                 std::complex<double> t = w * x[j + k + i];\n//                 x[j + k] = u + t;\n//                 x[j + k + i] = u - t;\n//             }\n//             w = w * w;\n//         }\n//     }\n// }\n\n// OpenMP implementation of fftConjugate\n#include <omp.h>\n\n/* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fftConjugate(std::vector<std::complex<double>> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fftConjugate(std::vector<std::complex<double>> &x) {\nint n = x.size();\n    int m = 0;\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < m; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        m = std::max(m, __builtin_ctz(j));\n    }\n    for (int i = 1; i < n; i *= 2) {\n        std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n        for (int j = 0; j < n; j += 2 * i) {\n            for (int k = 0; k < i; k++) {\n                std::complex<double> u = x[j + k];\n                std::complex<double> t = w * x[j + k + i];\n                x[j + k] = u + t;\n                x[j + k + i] = u - t;\n            }\n            w = w * w;\n        }\n    }\n}",
        "translation_function_name": "fftConjugate",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n            wj = wj * w;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; ++i) {\n        int j = i;\n        for (int k = 0; k < mh; ++k) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n            wj = wj * w;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n            wj = wj * w;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n            wj = wj * w;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; ++i) {\n        int j = i;\n        for (int k = 0; k < mh; ++k) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j) + 1);\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; ++k) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n            wj = wj * w;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n            wj = wj * w;\n        }\n    }\n}\n}",
            "\nint n = x.size();\nint m = 0;\n#pragma omp parallel\n{\n    int mh = 0;\n    #pragma omp for\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < mh; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        mh = std::max(mh, __builtin_ctz(j));\n    }\n    #pragma omp critical\n    {\n        m = std::max(m, mh);\n    }\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    #pragma omp parallel for private(w)\n    for (int j = 0; j < n; j += 2 * i) {\n        std::complex<double> wj = std::pow(w, j / i);\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = wj * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n            wj = wj * w;\n        }\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "05_fft_inverse_fft",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* forward declare fft. computes fourier transform in-place */\nvoid fft(std::vector<std::complex<double>> &x);\n\n/* Compute the inverse fourier transform of x in-place.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n*/\nvoid ifft(std::vector<std::complex<double>> &x) {",
        "translation_prompt": "// Serial implementation of ifft\n// /* forward declare fft. computes fourier transform in-place */\n// void fft(std::vector<std::complex<double>> &x);\n// \n// /* Compute the inverse fourier transform of x in-place.\n//    Example:\n//    \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n// */\n// void ifft(std::vector<std::complex<double>> &x) {\n// \n// // Take conjugate of the complex numbers\n// for (auto &elem : x) {\n//     elem = std::conj(elem);\n// }\n// \n// // Apply fft\n// fft(x);\n// \n// // Take conjugate again\n// for (auto &elem : x) {\n//     elem = std::conj(elem);\n// }\n// \n// // Scale the numbers\n// for (auto &elem : x) {\n//     elem /= static_cast<double>(x.size());\n// }\n// }\n\n// OpenMP implementation of ifft\n#include <omp.h>\n\n/* forward declare fft. computes fourier transform in-place */\nvoid fft(std::vector<std::complex<double>> &x);\n\n/* Compute the inverse fourier transform of x in-place.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n*/\nvoid ifft(std::vector<std::complex<double>> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* forward declare fft. computes fourier transform in-place */\nvoid fft(std::vector<std::complex<double>> &x);\n\n/* Compute the inverse fourier transform of x in-place.\n   Example:\n   \n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n*/\nvoid ifft(std::vector<std::complex<double>> &x) {\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nfor (auto &elem : x) {\n    elem /= static_cast<double>(x.size());\n}\n}",
        "translation_function_name": "ifft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < static_cast<int>(x.size()); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < static_cast<int>(x.size()); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < static_cast<int>(x.size()); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}",
            "\n// Take conjugate of the complex numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] = std::conj(x[i]);\n}\n\n// Scale the numbers in parallel\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    x[i] /= static_cast<double>(x.size());\n}\n}"
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "06_fft_dft",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the discrete fourier transform of x. Store the result in output.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {",
        "translation_prompt": "// Serial implementation of dft\n// /* Compute the discrete fourier transform of x. Store the result in output.\n//    Example:\n// \n//    input: [1, 4, 9, 16]\n//    output: [30+0i, -8-12i, -10-0i, -8+12i]\n// */\n// void dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {\n// // TODO: implement this function\n//     output.resize(x.size());\n//     for (int i = 0; i < x.size(); i++) {\n//         output[i] = 0;\n//         for (int j = 0; j < x.size(); j++) {\n//             output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n//         }\n//     }\n// }\n\n// OpenMP implementation of dft\n#include <omp.h>\n\n/* Compute the discrete fourier transform of x. Store the result in output.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the discrete fourier transform of x. Store the result in output.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {\n// TODO: implement this function\n    output.resize(x.size());\n    for (int i = 0; i < x.size(); i++) {\n        output[i] = 0;\n        for (int j = 0; j < x.size(); j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n        }\n    }\n}",
        "translation_function_name": "dft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}",
            "\noutput.resize(x.size());\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); i++) {\n    std::complex<double> sum = 0;\n    for (int j = 0; j < x.size(); j++) {\n        sum += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n    }\n    output[i] = sum;\n}\n}"
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "09_fft_fft_out_of_place",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute the fourier transform of x. Store the result in output.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {",
        "translation_prompt": "// Serial implementation of fft\n// /* Compute the fourier transform of x. Store the result in output.\n//    Example:\n// \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n// */\n// void fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {\n// int n = x.size();\n//     output.resize(n);\n// \n//     // base case\n//     if (n == 1) {\n//         output[0] = x[0];\n//         return;\n//     }\n// \n//     // radix 2 Cooley-Tukey FFT\n//     // decompose x into even and odd parts\n//     std::vector<std::complex<double>> x_even(n/2);\n//     std::vector<std::complex<double>> x_odd(n/2);\n//     for (int k = 0; k < n/2; k++) {\n//         x_even[k] = x[2*k];\n//         x_odd[k] = x[2*k + 1];\n//     }\n// \n//     // recursively compute FFTs of even and odd parts\n//     std::vector<std::complex<double>> y_even(n/2);\n//     std::vector<std::complex<double>> y_odd(n/2);\n//     fft(x_even, y_even);\n//     fft(x_odd, y_odd);\n// \n//     // combine results\n//     for (int k = 0; k < n/2; k++) {\n//         double kth = -2 * M_PI * k / n;\n//         output[k] = y_even[k] + std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n//         output[k + n/2] = y_even[k] - std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n//     }\n// }\n\n// OpenMP implementation of fft\n#include <omp.h>\n\n/* Compute the fourier transform of x. Store the result in output.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute the fourier transform of x. Store the result in output.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {\nint n = x.size();\n    output.resize(n);\n\n    // base case\n    if (n == 1) {\n        output[0] = x[0];\n        return;\n    }\n\n    // radix 2 Cooley-Tukey FFT\n    // decompose x into even and odd parts\n    std::vector<std::complex<double>> x_even(n/2);\n    std::vector<std::complex<double>> x_odd(n/2);\n    for (int k = 0; k < n/2; k++) {\n        x_even[k] = x[2*k];\n        x_odd[k] = x[2*k + 1];\n    }\n\n    // recursively compute FFTs of even and odd parts\n    std::vector<std::complex<double>> y_even(n/2);\n    std::vector<std::complex<double>> y_odd(n/2);\n    fft(x_even, y_even);\n    fft(x_odd, y_odd);\n\n    // combine results\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        output[k] = y_even[k] + std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n        output[k + n/2] = y_even[k] - std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    }\n}",
        "translation_function_name": "fft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    output[k] = y_even[k] + twiddle_factor * y_odd[k];\n    output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> exp_kth = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + exp_kth;\n    output[k + n/2] = y_even[k] - exp_kth;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> exp_term = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + exp_term;\n    output[k + n/2] = y_even[k] - exp_term;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> exp_kth = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + exp_kth;\n    output[k + n/2] = y_even[k] - exp_kth;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> exp_term = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + exp_term;\n    output[k + n/2] = y_even[k] - exp_term;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> exp_kth = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + exp_kth;\n    output[k + n/2] = y_even[k] - exp_kth;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for shared(x, x_even, x_odd)\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for shared(y_even, y_odd, output)\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> exp_kth = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + exp_kth;\n    output[k + n/2] = y_even[k] - exp_kth;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + twiddle_factor;\n    output[k + n/2] = y_even[k] - twiddle_factor;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    output[k] = y_even[k] + twiddle_factor * y_odd[k];\n    output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + twiddle_factor;\n    output[k + n/2] = y_even[k] - twiddle_factor;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    output[k] = y_even[k] + twiddle_factor * y_odd[k];\n    output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}",
            "\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n#pragma omp parallel for\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "03_dense_la_axpy",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {",
        "translation_prompt": "// Serial implementation of axpy\n// /* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n//    Example:\n//    \n//    input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n//    output: z=[2, -6, 5, 17]\n// */\n// void axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {\n// for (int i = 0; i < x.size(); ++i) {\n//     z[i] = alpha*x[i] + y[i];\n//   }\n// }\n\n// OpenMP implementation of axpy\n#include <omp.h>\n\n/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha*x[i] + y[i];\n  }\n}",
        "translation_function_name": "axpy",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha*x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha*x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha * x[i] + y[i];\n}\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "01_dense_la_solve",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Solve the linear system Ax=b for x.\n   A is an NxN matrix in row-major. x and b have N elements.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n   output: x=[3, 1, 2]\n*/\nvoid solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {",
        "translation_prompt": "// Serial implementation of solveLinearSystem\n// /* Solve the linear system Ax=b for x.\n//    A is an NxN matrix in row-major. x and b have N elements.\n//    Example:\n//    \n//    input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n//    output: x=[3, 1, 2]\n// */\n// void solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {\n// // check if the input is valid\n//     if (A.size()!= N * N) {\n//         throw std::invalid_argument(\"A must be a NxN matrix\");\n//     }\n//     if (b.size()!= N) {\n//         throw std::invalid_argument(\"b must have N elements\");\n//     }\n//     // create a copy of A\n//     std::vector<double> A_copy(A);\n//     // create a copy of b\n//     std::vector<double> b_copy(b);\n//     // perform Gaussian elimination\n//     for (size_t i = 0; i < N; i++) {\n//         // find the pivot row and swap it with the current row\n//         size_t pivot_row = i;\n//         for (size_t j = i + 1; j < N; j++) {\n//             if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n//                 pivot_row = j;\n//             }\n//         }\n//         if (pivot_row!= i) {\n//             // swap the current row with the pivot row\n//             for (size_t j = 0; j < N; j++) {\n//                 std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n//             }\n//             std::swap(b_copy[i], b_copy[pivot_row]);\n//         }\n//         // eliminate the current row\n//         for (size_t j = i + 1; j < N; j++) {\n//             double factor = A_copy[j * N + i] / A_copy[i * N + i];\n//             for (size_t k = 0; k < N; k++) {\n//                 A_copy[j * N + k] -= factor * A_copy[i * N + k];\n//             }\n//             b_copy[j] -= factor * b_copy[i];\n//         }\n//     }\n//     // back substitution\n//     x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n//     for (size_t i = N - 2; i < N; i--) {\n//         double sum = 0;\n//         for (size_t j = i + 1; j < N; j++) {\n//             sum += A_copy[i * N + j] * x[j];\n//         }\n//         x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n//     }\n// }\n\n// OpenMP implementation of solveLinearSystem\n#include <omp.h>\n\n/* Solve the linear system Ax=b for x.\n   A is an NxN matrix in row-major. x and b have N elements.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n   output: x=[3, 1, 2]\n*/\nvoid solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Solve the linear system Ax=b for x.\n   A is an NxN matrix in row-major. x and b have N elements.\n   Example:\n   \n   input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n   output: x=[3, 1, 2]\n*/\nvoid solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {\n// check if the input is valid\n    if (A.size()!= N * N) {\n        throw std::invalid_argument(\"A must be a NxN matrix\");\n    }\n    if (b.size()!= N) {\n        throw std::invalid_argument(\"b must have N elements\");\n    }\n    // create a copy of A\n    std::vector<double> A_copy(A);\n    // create a copy of b\n    std::vector<double> b_copy(b);\n    // perform Gaussian elimination\n    for (size_t i = 0; i < N; i++) {\n        // find the pivot row and swap it with the current row\n        size_t pivot_row = i;\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n                pivot_row = j;\n            }\n        }\n        if (pivot_row!= i) {\n            // swap the current row with the pivot row\n            for (size_t j = 0; j < N; j++) {\n                std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n            }\n            std::swap(b_copy[i], b_copy[pivot_row]);\n        }\n        // eliminate the current row\n        for (size_t j = i + 1; j < N; j++) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    // back substitution\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (size_t i = N - 2; i < N; i--) {\n        double sum = 0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}",
        "translation_function_name": "solveLinearSystem",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            #pragma omp atomic\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        #pragma omp atomic\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            #pragma omp atomic\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        #pragma omp atomic\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}",
            "\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n// create a copy of A\nstd::vector<double> A_copy(A);\n// create a copy of b\nstd::vector<double> b_copy(b);\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    // find the pivot row and swap it with the current row\n    size_t pivot_row = i;\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n            pivot_row = j;\n        }\n    }\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    // eliminate the current row\n    #pragma omp parallel for default(none) shared(A_copy, b_copy, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n// back substitution\nx[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\nfor (int i = N - 2; i >= 0; i--) {\n    double sum = 0.0;\n    #pragma omp parallel for reduction(+:sum) default(none) shared(A_copy, x, i, N)\n    for (size_t j = i + 1; j < N; j++) {\n        sum += A_copy[i * N + j] * x[j];\n    }\n    x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n}\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "02_dense_la_gemm",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {",
        "translation_prompt": "// Serial implementation of gemm\n// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n//    Example:\n// \n//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n//    output: C=[[9, 5], [4, 2]]\n// */\n// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {\n// for (size_t i = 0; i < M; ++i) {\n//         for (size_t j = 0; j < N; ++j) {\n//             double sum = 0;\n//             for (size_t k = 0; k < K; ++k) {\n//                 sum += A[i * K + k] * B[k * N + j];\n//             }\n//             C[i * N + j] = sum;\n//         }\n//     }\n// }\n\n// OpenMP implementation of gemm\n#include <omp.h>\n\n/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {\nfor (size_t i = 0; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}",
        "translation_function_name": "gemm",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < M; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C[i * N + j] = sum;\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "04_dense_la_gemv",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {",
        "translation_prompt": "// Serial implementation of gemv\n// /* Multiply the matrix A by the vector x. Store the results in the vector y.\n//    A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n//    Example:\n// \n//    input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n//    output: y=[1, -3]\n// */\n// void gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {\n// for (size_t i = 0; i < M; ++i) {\n//         double sum = 0;\n//         for (size_t j = 0; j < N; ++j) {\n//             sum += A[i * N + j] * x[j];\n//         }\n//         y[i] = sum;\n//     }\n// }\n\n// OpenMP implementation of gemv\n#include <omp.h>\n\n/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {\nfor (size_t i = 0; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}",
        "translation_function_name": "gemv",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < M; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    y[i] = sum;\n}\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "00_dense_la_lu_decomp",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   Store the results for L and U into the original matrix A. \n   A is an NxN matrix stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[4, 3], [6, 3]]\n   output: [[4, 3], [1.5, -1.5]]\n*/\nvoid luFactorize(std::vector<double> &A, size_t N) {",
        "translation_prompt": "// Serial implementation of luFactorize\n// /* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n//    Store the results for L and U into the original matrix A. \n//    A is an NxN matrix stored in row-major.\n//    Example:\n// \n//    input: [[4, 3], [6, 3]]\n//    output: [[4, 3], [1.5, -1.5]]\n// */\n// void luFactorize(std::vector<double> &A, size_t N) {\n// for (size_t i = 0; i < N; i++) {\n//     for (size_t j = i + 1; j < N; j++) {\n//       A[j * N + i] = A[j * N + i] / A[i * N + i];\n//       for (size_t k = i + 1; k < N; k++) {\n//         A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n//       }\n//     }\n//   }\n// }\n\n// OpenMP implementation of luFactorize\n#include <omp.h>\n\n/* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   Store the results for L and U into the original matrix A. \n   A is an NxN matrix stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[4, 3], [6, 3]]\n   output: [[4, 3], [1.5, -1.5]]\n*/\nvoid luFactorize(std::vector<double> &A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   Store the results for L and U into the original matrix A. \n   A is an NxN matrix stored in row-major.\n   Example:\n\n   input: [[4, 3], [6, 3]]\n   output: [[4, 3], [1.5, -1.5]]\n*/\nvoid luFactorize(std::vector<double> &A, size_t N) {\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n      A[j * N + i] = A[j * N + i] / A[i * N + i];\n      for (size_t k = i + 1; k < N; k++) {\n        A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n      }\n    }\n  }\n}",
        "translation_function_name": "luFactorize",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; k++) {\n      A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; k++) {\n      A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; k++) {\n      A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; k++) {\n      A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        #pragma omp parallel for\n        for (size_t k = i + 1; k < N; k++) {\n            A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for schedule(static)\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    for (size_t k = i + 1; k < N; k++) {\n      #pragma omp atomic\n      A[j * N + k] -= A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for schedule(static)\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for schedule(static)\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    for (size_t k = i + 1; k < N; k++) {\n      #pragma omp atomic\n      A[j * N + k] -= A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for schedule(static)\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; k++) {\n      A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for schedule(static)\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    for (size_t k = i + 1; k < N; k++) {\n      #pragma omp atomic\n      A[j * N + k] -= A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; k++) {\n      A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for\nfor (size_t i = 0; i < N; i++) {\n  for (size_t j = i + 1; j < N; j++) {\n    A[j * N + i] = A[j * N + i] / A[i * N + i];\n    #pragma omp parallel for\n    for (size_t k = i + 1; k < N; k++) {\n      A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n    }\n  }\n}\n}",
            "\n#pragma omp parallel for schedule(static)\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n        A[j * N + i] = A[j * N + i] / A[i * N + i];\n        for (size_t k = i + 1; k < N; k++) {\n            #pragma omp atomic\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "42_sort_sorted_ranks",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* For each value in the vector x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {",
        "translation_prompt": "// Serial implementation of ranks\n// /* For each value in the vector x compute its index in the sorted vector.\n//    Store the results in `ranks`.\n//    Examples:\n// \n//    input: [3.1, 2.8, 9.1, 0.4, 3.14]\n//    output: [2, 1, 4, 0, 3]\n//  \n//    input: [100, 7.6, 16.1, 18, 7.6]\n//    output: [4, 0, 1, 2, 3]\n// */\n// void ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {\n// std::vector<float> sorted = x;\n//     std::sort(sorted.begin(), sorted.end());\n//     ranks.resize(x.size());\n//     for (size_t i = 0; i < x.size(); ++i) {\n//         ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n//     }\n// }\n\n// OpenMP implementation of ranks\n#include <omp.h>\n\n/* For each value in the vector x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Use OpenMP to compute in parallel.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* For each value in the vector x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {\nstd::vector<float> sorted = x;\n    std::sort(sorted.begin(), sorted.end());\n    ranks.resize(x.size());\n    for (size_t i = 0; i < x.size(); ++i) {\n        ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n}",
        "translation_function_name": "ranks",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}",
            "\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\nranks.resize(x.size());\n#pragma omp parallel for\nfor (size_t i = 0; i < x.size(); ++i) {\n    ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n}"
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "44_sort_sort_non-zero_elements",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Sort the vector x in ascending order ignoring elements with value 0.\n   Leave zero valued elements in-place. \n\t Use OpenMP to sort x in parallel. \n   Example:\n\n   input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n   output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n*/\nvoid sortIgnoreZero(std::vector<int> &x) {",
        "translation_prompt": "// Serial implementation of sortIgnoreZero\n// /* Sort the vector x in ascending order ignoring elements with value 0.\n//    Leave zero valued elements in-place.\n//    Example:\n// \n// \t input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n//    output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n// */\n// void sortIgnoreZero(std::vector<int> &x) {\n// int n = x.size();\n//   int i = 0;\n//   int j = 0;\n//   int k = 0;\n// \n//   while (i < n) {\n//     if (x[i] == 0) {\n//       i++;\n//     } else {\n//       j = i + 1;\n//       while (j < n) {\n//         if (x[j] == 0) {\n//           j++;\n//         } else {\n//           if (x[i] > x[j]) {\n//             k = x[i];\n//             x[i] = x[j];\n//             x[j] = k;\n//           }\n//           j++;\n//         }\n//       }\n//       i++;\n//     }\n//   }\n// }\n\n// OpenMP implementation of sortIgnoreZero\n#include <omp.h>\n\n/* Sort the vector x in ascending order ignoring elements with value 0.\n   Leave zero valued elements in-place. \n\t Use OpenMP to sort x in parallel. \n   Example:\n\n   input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n   output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n*/\nvoid sortIgnoreZero(std::vector<int> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Sort the vector x in ascending order ignoring elements with value 0.\n   Leave zero valued elements in-place.\n   Example:\n\n\t input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n   output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n*/\nvoid sortIgnoreZero(std::vector<int> &x) {\nint n = x.size();\n  int i = 0;\n  int j = 0;\n  int k = 0;\n\n  while (i < n) {\n    if (x[i] == 0) {\n      i++;\n    } else {\n      j = i + 1;\n      while (j < n) {\n        if (x[j] == 0) {\n          j++;\n        } else {\n          if (x[i] > x[j]) {\n            k = x[i];\n            x[i] = x[j];\n            x[j] = k;\n          }\n          j++;\n        }\n      }\n      i++;\n    }\n  }\n}",
        "translation_function_name": "sortIgnoreZero",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Collect non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    for (int j = i + 1; j < n; ++j) {\n      if (x[j] != 0) {\n        if (x[i] > x[j]) {\n          int k = x[i];\n          x[i] = x[j];\n          x[j] = k;\n        }\n      }\n    }\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort the non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge the sorted non-zero elements back into the original vector\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\n\n#pragma omp parallel\n{\n  // Collect non-zero elements in parallel\n  #pragma omp for nowait\n  for (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n      #pragma omp critical\n      non_zero_elements.push_back(x[i]);\n    }\n  }\n\n  // Sort the non-zero elements\n  #pragma omp single\n  {\n    std::sort(non_zero_elements.begin(), non_zero_elements.end());\n  }\n\n  // Merge sorted non-zero elements back into x\n  #pragma omp for\n  for (int i = 0, j = 0; i < n; ++i) {\n    if (x[i] != 0) {\n      x[i] = non_zero_elements[j++];\n    }\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Collect non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0, j = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[j++];\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\n\n#pragma omp parallel\n{\n  // Collect non-zero elements in parallel\n  #pragma omp for nowait\n  for (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n      #pragma omp critical\n      non_zero_elements.push_back(x[i]);\n    }\n  }\n\n  // Sort the non-zero elements\n  #pragma omp single\n  {\n    std::sort(non_zero_elements.begin(), non_zero_elements.end());\n  }\n\n  // Merge sorted non-zero elements back into x\n  #pragma omp for\n  for (int i = 0, j = 0; i < n; ++i) {\n    if (x[i] != 0) {\n      x[i] = non_zero_elements[j++];\n    }\n  }\n}\n}",
            "\nint n = x.size();\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    for (int j = i + 1; j < n; ++j) {\n      if (x[j] != 0) {\n        if (x[i] > x[j]) {\n          int k = x[i];\n          x[i] = x[j];\n          x[j] = k;\n        }\n      }\n    }\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}",
            "\nint n = x.size();\n\n#pragma omp parallel for schedule(dynamic)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    for (int j = i + 1; j < n; ++j) {\n      if (x[j] != 0) {\n        int k;\n        #pragma omp critical\n        {\n          if (x[i] > x[j]) {\n            k = x[i];\n            x[i] = x[j];\n            x[j] = k;\n          }\n        }\n      }\n    }\n  }\n}\n}",
            "\nint n = x.size();\nstd::vector<int> non_zero_elements;\nnon_zero_elements.reserve(n);\n\n// Extract non-zero elements\n#pragma omp parallel for shared(x, non_zero_elements)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    non_zero_elements.push_back(x[i]);\n  }\n}\n\n// Sort non-zero elements\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Merge sorted non-zero elements back into x\nint non_zero_index = 0;\n#pragma omp parallel for shared(x, non_zero_elements, non_zero_index)\nfor (int i = 0; i < n; ++i) {\n  if (x[i] != 0) {\n    #pragma omp critical\n    x[i] = non_zero_elements[non_zero_index++];\n  }\n}\n}"
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "41_sort_k-th_smallest_element",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Find the k-th smallest element of the vector x.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n   output: 6\n*/\nint findKthSmallest(std::vector<int> const& x, int k) {",
        "translation_prompt": "// Serial implementation of findKthSmallest\n// /* Find the k-th smallest element of the vector x.\n//    Example:\n//    \n//    input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n//    output: 6\n// */\n// int findKthSmallest(std::vector<int> const& x, int k) {\n// int n = x.size();\n//     std::vector<int> y(x);\n//     std::sort(y.begin(), y.end());\n//     return y[k-1];\n// }\n\n// OpenMP implementation of findKthSmallest\n#include <omp.h>\n\n/* Find the k-th smallest element of the vector x.\n   Use OpenMP to compute in parallel.\n   Example:\n   \n   input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n   output: 6\n*/\nint findKthSmallest(std::vector<int> const& x, int k) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Find the k-th smallest element of the vector x.\n   Example:\n   \n   input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n   output: 6\n*/\nint findKthSmallest(std::vector<int> const& x, int k) {\nint n = x.size();\n    std::vector<int> y(x);\n    std::sort(y.begin(), y.end());\n    return y[k-1];\n}",
        "translation_function_name": "findKthSmallest",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k - 1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k - 1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}",
            "\nint n = x.size();\nstd::vector<int> y(x);\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        std::sort(y.begin(), y.end());\n    }\n}\n\nreturn y[k-1];\n}"
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "43_sort_sort_an_array_of_structs_by_key",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nstruct Result {\n   int startTime, duration;\n   float value;\n};\n\n/* Sort vector of Result structs by start time in ascending order.\n   Use OpenMP to sort in parallel.\n   Example:\n   \n   input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n   output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n*/\nvoid sortByStartTime(std::vector<Result> &results) {",
        "translation_prompt": "// Serial implementation of sortByStartTime\n// struct Result {\n//    int startTime, duration;\n//    float value;\n// };\n// \n// /* Sort vector of Result structs by start time in ascending order.\n//    Example:\n//    \n//    input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n//    output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n// */\n// void sortByStartTime(std::vector<Result> &results) {\n// std::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n//       return a.startTime < b.startTime;\n//    });\n// }\n\n// OpenMP implementation of sortByStartTime\n#include <omp.h>\n\nstruct Result {\n   int startTime, duration;\n   float value;\n};\n\n/* Sort vector of Result structs by start time in ascending order.\n   Use OpenMP to sort in parallel.\n   Example:\n   \n   input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n   output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n*/\nvoid sortByStartTime(std::vector<Result> &results) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "struct Result {\n   int startTime, duration;\n   float value;\n};\n\n/* Sort vector of Result structs by start time in ascending order.\n   Example:\n   \n   input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n   output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n*/\nvoid sortByStartTime(std::vector<Result> &results) {\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n      return a.startTime < b.startTime;\n   });\n}",
        "translation_function_name": "sortByStartTime",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n// OpenMP does not provide a direct parallel sort algorithm.\n// However, you can use OpenMP to implement a parallel version of a sorting algorithm.\n// Here is an example using a simple parallel sort with OpenMP tasks.\n\n// First, we need a serial sorting function, such as quicksort.\nvoid quickSort(std::vector<Result>::iterator start, std::vector<Result>::iterator end) {\n    if (start < end) {\n        auto pivot = start + (end - start) / 2;\n        auto pivotValue = pivot->startTime;\n        auto i = start;\n        auto j = end - 1;\n        while (i <= j) {\n            while (i <= j && i->startTime < pivotValue) i++;\n            while (i <= j && j->startTime > pivotValue) j--;\n            if (i <= j) {\n                std::iter_swap(i, j);\n                i++;\n                j--;\n            }\n        }\n        quickSort(start, i);\n        quickSort(i, end);\n    }\n}\n\n// Now we can define the parallel sort function using OpenMP tasks.\nvoid parallelQuickSort(std::vector<Result>::iterator start, std::vector<Result>::iterator end) {\n    if (start < end) {\n        auto pivot = start + (end - start) / 2;\n        auto pivotValue = pivot->startTime;\n        auto i = start;\n        auto j = end - 1;\n        while (i <= j) {\n            while (i <= j && i->startTime < pivotValue) i++;\n            while (i <= j && j->startTime > pivotValue) j--;\n            if (i <= j) {\n                std::iter_swap(i, j);\n                i++;\n                j--;\n            }\n        }\n        #pragma omp task shared(start, i) if(end - start > 1000) // Use a threshold to avoid creating too many tasks\n        parallelQuickSort(start, i);\n        #pragma omp task shared(i, end) if(end - start > 1000) // Use a threshold to avoid creating too many tasks\n        parallelQuickSort(i, end);\n        #pragma omp taskwait\n    }\n}\n\n// Finally, we can use the parallelQuickSort in the sortByStartTime function.\n#pragma omp parallel\n{\n    #pragma omp single nowait\n    {\n        parallelQuickSort(results.begin(), results.end());\n    }\n}\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here we are using __gnu_parallel::sort from the GNU libstdc++ parallel mode library for demonstration.\n// Make sure to compile with -fopenmp and -D_GLIBCXX_PARALLEL to enable parallel mode.\n\n#include <parallel/algorithm> // Include the GNU parallel algorithm header\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a direct parallel sort algorithm.\n// However, you can use __gnu_parallel::sort from the GNU libstdc++ parallel mode\n// which enables parallel execution of certain algorithms like sort.\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// However, OpenMP can be used to parallelize parts of a sorting algorithm like merge sort.\n// Below is a simple example of how one might parallelize the merge step of merge sort using OpenMP.\n\n// Helper function to merge two halves of a vector\nvoid merge(std::vector<Result> &results, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n    std::vector<Result> L(n1), R(n2);\n\n    for (int i = 0; i < n1; i++)\n        L[i] = results[left + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = results[mid + 1 + j];\n\n    int i = 0, j = 0, k = left;\n    while (i < n1 && j < n2) {\n        if (L[i].startTime <= R[j].startTime) {\n            results[k] = L[i];\n            i++;\n        } else {\n            results[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        results[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        results[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n// Recursive function to sort the vector using merge sort\nvoid mergeSort(std::vector<Result> &results, int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n\n        // Sort the first and second halves in parallel\n        #pragma omp parallel sections\n        {\n            #pragma omp section\n            {\n                mergeSort(results, left, mid);\n            }\n            #pragma omp section\n            {\n                mergeSort(results, mid + 1, right);\n            }\n        }\n\n        // Merge the sorted halves\n        merge(results, left, mid, right);\n    }\n}\n\n// Call the mergeSort function to sort the entire vector\nmergeSort(results, 0, results.size() - 1);\n}",
            "\n// OpenMP does not provide a parallel sort algorithm out of the box.\n// However, we can use OpenMP to implement a parallel version of a sorting algorithm.\n// Here is an example of how you might parallelize the sort using OpenMP tasks.\n// Note that this is a conceptual example and might not be the most efficient way to sort in parallel.\n\nint n = results.size();\n#pragma omp parallel\n{\n    #pragma omp single nowait\n    {\n        int num_threads = omp_get_num_threads();\n        int chunk_size = (n + num_threads - 1) / num_threads;\n        std::vector<std::vector<Result>> chunks(num_threads);\n\n        // Divide the work among threads\n        for (int i = 0; i < num_threads; ++i) {\n            int start = i * chunk_size;\n            int end = std::min(start + chunk_size, n);\n\n            #pragma omp task firstprivate(start, end, i)\n            {\n                std::sort(results.begin() + start, results.begin() + end, [](const Result &a, const Result &b) {\n                    return a.startTime < b.startTime;\n                });\n                chunks[i] = std::vector<Result>(results.begin() + start, results.begin() + end);\n            }\n        }\n\n        #pragma omp taskwait\n\n        // Merge the sorted chunks\n        std::vector<Result> sorted_results;\n        sorted_results.reserve(n);\n\n        while (!chunks.empty()) {\n            int min_idx = -1;\n            Result min_val = {INT_MAX, 0, 0.0f};\n\n            for (size_t i = 0; i < chunks.size(); ++i) {\n                if (!chunks[i].empty() && (min_idx == -1 || chunks[i].front().startTime < min_val.startTime)) {\n                    min_val = chunks[i].front();\n                    min_idx = i;\n                }\n            }\n\n            if (min_idx != -1) {\n                sorted_results.push_back(min_val);\n                chunks[min_idx].erase(chunks[min_idx].begin());\n                if (chunks[min_idx].empty()) {\n                    chunks.erase(chunks.begin() + min_idx);\n                }\n            }\n        }\n\n        // Copy the sorted results back to the original vector\n        std::copy(sorted_results.begin(), sorted_results.end(), results.begin());\n    }\n}\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel algorithm.\n// Here we are using __gnu_parallel::sort from the GNU libstdc++ parallel mode library.\n// Make sure to include the necessary headers and link against the right library.\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a parallel sort algorithm out-of-the-box.\n// However, we can use OpenMP to parallelize the sorting of chunks of the array and then merge them.\nint n = results.size();\nint num_threads = omp_get_max_threads();\nstd::vector<std::vector<Result>> sorted_sections(num_threads);\n\n#pragma omp parallel\n{\n    int thread_num = omp_get_thread_num();\n    int chunk_size = n / num_threads;\n    int start = thread_num * chunk_size;\n    int end = (thread_num == num_threads - 1) ? n : start + chunk_size;\n\n    std::sort(results.begin() + start, results.begin() + end, [](const Result &a, const Result &b) {\n        return a.startTime < b.startTime;\n    });\n\n    sorted_sections[thread_num] = std::vector<Result>(results.begin() + start, results.begin() + end);\n}\n\n// Merge the sorted sections\nstd::vector<Result> temp;\nfor (int i = 0; i < num_threads; ++i) {\n    temp.insert(temp.end(), sorted_sections[i].begin(), sorted_sections[i].end());\n}\n\nstd::sort(temp.begin(), temp.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\nresults = temp;\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here we use __gnu_parallel::sort from the GNU libstdc++ parallel mode, which can be enabled with OpenMP.\n\n#include <parallel/algorithm> // Include the GNU parallel algorithm header\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here we will use __gnu_parallel::sort from the GNU libstdc++ parallel mode, which can be enabled with OpenMP.\n\n// Make sure to include the necessary header for __gnu_parallel::sort\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here we are using __gnu_parallel::sort from the GNU libstdc++ parallel mode for demonstration purposes.\n// Make sure to enable parallel mode and link against -ltbb for the parallel algorithms to work.\n\n#include <parallel/algorithm> // Include the GNU parallel algorithms header\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a parallel sort algorithm out-of-the-box.\n// However, we can use OpenMP to parallelize parts of a sorting algorithm.\n// Here, we use a simple approach by dividing the data into chunks, sorting each chunk in parallel,\n// and then merging them. This is not the most efficient parallel sort but demonstrates the concept.\n\nint n = results.size();\nint num_threads = omp_get_max_threads();\nstd::vector<std::vector<Result>> sorted_sub_vectors(num_threads);\n\n#pragma omp parallel\n{\n    int thread_num = omp_get_thread_num();\n    int elements_per_thread = n / num_threads;\n    int start_index = thread_num * elements_per_thread;\n    int end_index = (thread_num == num_threads - 1) ? n : start_index + elements_per_thread;\n\n    // Sort the sub-vector assigned to this thread\n    std::sort(results.begin() + start_index, results.begin() + end_index, [](const Result &a, const Result &b) {\n        return a.startTime < b.startTime;\n    });\n\n    // Copy the sorted sub-vector into the corresponding position\n    sorted_sub_vectors[thread_num] = std::vector<Result>(results.begin() + start_index, results.begin() + end_index);\n}\n\n// Sequentially merge the sorted sub-vectors\nstd::vector<Result> temp;\nfor (int i = 0; i < num_threads; ++i) {\n    std::vector<Result> merged_results;\n    std::merge(temp.begin(), temp.end(), sorted_sub_vectors[i].begin(), sorted_sub_vectors[i].end(), std::back_inserter(merged_results), [](const Result &a, const Result &b) {\n        return a.startTime < b.startTime;\n    });\n    temp.swap(merged_results);\n}\n\n// Copy the sorted data back to the original vector\nresults.assign(temp.begin(), temp.end());\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here we use __gnu_parallel::sort from the GNU libstdc++ parallel mode, which can be enabled with OpenMP.\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here we use __gnu_parallel::sort from the GNU libstdc++ parallel mode as an example.\n\n#include <parallel/algorithm> // Include the GNU parallel sort header\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here we are using __gnu_parallel::sort from the GNU libstdc++ parallel mode library for demonstration.\n// Make sure to compile with -fopenmp and -D_GLIBCXX_PARALLEL to enable parallel mode.\n\n#include <parallel/algorithm> // Include the GNU parallel algorithms header\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a parallel sort algorithm out of the box.\n// Therefore, we will use the serial std::sort inside a single thread.\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a direct parallel sort algorithm.\n// However, we can use __gnu_parallel::sort from the GNU libstdc++ parallel mode\n// which enables parallel execution of certain algorithms like sort.\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a parallel version of std::sort directly.\n// However, you can use __gnu_parallel::sort from the GNU libstdc++ parallel mode\n// which can be enabled by linking with -fopenmp and including the parallel mode header.\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// Parallel sorting is not directly supported by OpenMP. We need to use a parallel sorting algorithm.\n// Here, we will use __gnu_parallel::sort from the GNU libstdc++ parallel mode library for demonstration.\n// Make sure to compile with -fopenmp and -D_GLIBCXX_PARALLEL to enable parallel mode.\n\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a direct parallel sort algorithm.\n// However, you can use __gnu_parallel::sort from the GNU libstdc++ parallel mode for parallel sorting.\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}",
            "\n// OpenMP does not provide a parallel sort algorithm out of the box.\n// However, we can use __gnu_parallel::sort from the GNU libstdc++ parallel mode\n// which enables parallel sorting using OpenMP.\n#include <parallel/algorithm>\n\n__gnu_parallel::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n}"
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "40_sort_sort_an_array_of_complex_numbers_by_magnitude",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Sort the vector x of complex numbers by their magnitude in ascending order.\n   Use OpenMP to sort in parallel.\n   Example:\n   \n   input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n   output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n*/\nvoid sortComplexByMagnitude(std::vector<std::complex<double>> &x) {",
        "translation_prompt": "// Serial implementation of sortComplexByMagnitude\n// /* Sort the vector x of complex numbers by their magnitude in ascending order.\n//    Example:\n//    \n//    input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n//    output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n// */\n// void sortComplexByMagnitude(std::vector<std::complex<double>> &x) {\n// std::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n//         return std::abs(a) < std::abs(b);\n//     });\n// }\n\n// OpenMP implementation of sortComplexByMagnitude\n#include <omp.h>\n\n/* Sort the vector x of complex numbers by their magnitude in ascending order.\n   Use OpenMP to sort in parallel.\n   Example:\n   \n   input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n   output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n*/\nvoid sortComplexByMagnitude(std::vector<std::complex<double>> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Sort the vector x of complex numbers by their magnitude in ascending order.\n   Example:\n   \n   input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n   output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n*/\nvoid sortComplexByMagnitude(std::vector<std::complex<double>> &x) {\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n        return std::abs(a) < std::abs(b);\n    });\n}",
        "translation_function_name": "sortComplexByMagnitude",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (auto &subVec : temp) {\n    sorted.insert(sorted.end(), subVec.begin(), subVec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nx = sorted;\n}",
            "\n// Temporary vector to hold sorted chunks\nstd::vector<std::vector<std::complex<double>>> sorted_chunks(omp_get_max_threads());\n\n#pragma omp parallel\n{\n    int thread_num = omp_get_thread_num();\n    int num_threads = omp_get_num_threads();\n    size_t start = thread_num * x.size() / num_threads;\n    size_t end = (thread_num + 1) * x.size() / num_threads;\n\n    // Sort each chunk separately\n    std::sort(x.begin() + start, x.begin() + end, [](std::complex<double> a, std::complex<double> b) {\n        return std::abs(a) < std::abs(b);\n    });\n\n    // Copy the sorted chunk to the corresponding temporary vector\n    sorted_chunks[thread_num] = {x.begin() + start, x.begin() + end};\n}\n\n// Merge the sorted chunks\nstd::vector<std::complex<double>> temp(x.size());\nsize_t* indices = new size_t[sorted_chunks.size()]();\nbool done = false;\n\nwhile (!done) {\n    std::complex<double> min_val;\n    size_t min_idx = 0;\n    done = true;\n\n    // Find the smallest element among the first unmerged elements of each chunk\n    for (size_t i = 0; i < sorted_chunks.size(); ++i) {\n        if (indices[i] < sorted_chunks[i].size()) {\n            if (done || std::abs(sorted_chunks[i][indices[i]]) < std::abs(min_val)) {\n                min_val = sorted_chunks[i][indices[i]];\n                min_idx = i;\n            }\n            done = false;\n        }\n    }\n\n    // If not done, add the smallest element to the merged vector and increment the index\n    if (!done) {\n        temp[std::distance(temp.begin(), std::find(temp.begin(), temp.end(), std::complex<double>(0, 0)))] = min_val;\n        indices[min_idx]++;\n    }\n}\n\ndelete[] indices;\n\n// Copy the sorted elements back to the original vector\nx = temp;\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (int i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (const auto &subvec : temp) {\n    sorted.insert(sorted.end(), subvec.begin(), subvec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nstd::copy(sorted.begin(), sorted.end(), x.begin());\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread will sort a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n\n    // Merge the sorted sub-vectors\n    #pragma omp for schedule(static)\n    for (int i = 1; i < x.size(); ++i) {\n        std::vector<std::complex<double>> merged;\n        std::merge(temp[i - 1].begin(), temp[i - 1].end(), temp[i].begin(), temp[i].end(), std::back_inserter(merged), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n        temp[i] = merged;\n    }\n}\n\n// Copy the sorted values back to the original vector\nx = temp.back();\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (auto &subVec : temp) {\n    sorted.insert(sorted.end(), subVec.begin(), subVec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nx = sorted;\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i] = std::vector<std::complex<double>>(1, x[i]);\n    }\n\n    // Perform a parallel reduction to merge the sorted sub-vectors\n    for (int i = 1; i < x.size(); i *= 2) {\n        #pragma omp for schedule(static)\n        for (int j = 0; j < x.size(); j += 2 * i) {\n            if (j + i < x.size()) {\n                std::vector<std::complex<double>> merged;\n                std::merge(temp[j].begin(), temp[j].end(), temp[j + i].begin(), temp[j + i].end(), std::back_inserter(merged),\n                           [](std::complex<double> a, std::complex<double> b) {\n                               return std::abs(a) < std::abs(b);\n                           });\n                temp[j] = merged;\n            }\n        }\n    }\n}\n\n// Copy the sorted data back to the original vector\nif (!temp.empty()) {\n    x = temp[0];\n}\n}",
            "\n// Temporary vector to hold sorted chunks\nstd::vector<std::vector<std::complex<double>>> sorted_chunks(omp_get_max_threads());\n\n#pragma omp parallel\n{\n    int thread_num = omp_get_thread_num();\n    int num_threads = omp_get_num_threads();\n    size_t start = thread_num * x.size() / num_threads;\n    size_t end = (thread_num + 1) * x.size() / num_threads;\n\n    // Sort chunks of the vector in parallel\n    std::sort(x.begin() + start, x.begin() + end, [](std::complex<double> a, std::complex<double> b) {\n        return std::abs(a) < std::abs(b);\n    });\n\n    // Copy sorted chunks to the corresponding temporary vector\n    sorted_chunks[thread_num] = std::vector<std::complex<double>>(x.begin() + start, x.begin() + end);\n}\n\n// Merge the sorted chunks\nstd::vector<std::complex<double>> temp(x.size());\nsize_t *indices = new size_t[sorted_chunks.size()]();\nbool done = false;\nwhile (!done) {\n    std::complex<double> min_val;\n    size_t min_idx = 0;\n    done = true;\n\n    // Find the smallest element among the chunks\n    for (size_t i = 0; i < sorted_chunks.size(); ++i) {\n        if (indices[i] < sorted_chunks[i].size()) {\n            if (done || std::abs(sorted_chunks[i][indices[i]]) < std::abs(min_val)) {\n                done = false;\n                min_val = sorted_chunks[i][indices[i]];\n                min_idx = i;\n            }\n        }\n    }\n\n    // If we found an element, add it to the temp vector and increment the index\n    if (!done) {\n        temp.push_back(min_val);\n        indices[min_idx]++;\n    }\n}\n\n// Copy the sorted elements back to the original vector\nx = temp;\n\n// Clean up\ndelete[] indices;\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (int i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (auto &subvec : temp) {\n    sorted.insert(sorted.end(), subvec.begin(), subvec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nstd::copy(sorted.begin(), sorted.end(), x.begin());\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (auto &subVec : temp) {\n    sorted.insert(sorted.end(), subVec.begin(), subVec.end());\n}\n\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\nx = sorted;\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (int i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (const auto &subvec : temp) {\n    sorted.insert(sorted.end(), subvec.begin(), subvec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nstd::copy(sorted.begin(), sorted.end(), x.begin());\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (auto &subvec : temp) {\n    sorted.insert(sorted.end(), subvec.begin(), subvec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nx = sorted;\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (int i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (const auto &sub_vec : temp) {\n    sorted.insert(sorted.end(), sub_vec.begin(), sub_vec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nstd::copy(sorted.begin(), sorted.end(), x.begin());\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i] = std::vector<std::complex<double>>(1, x[i]);\n    }\n\n    // Perform a parallel reduction to merge the sorted sub-vectors\n    for (int i = 1; i < x.size(); i *= 2) {\n        #pragma omp for schedule(static)\n        for (int j = 0; j < x.size(); j += 2 * i) {\n            if (j + i < x.size()) {\n                std::vector<std::complex<double>> merged;\n                std::merge(temp[j].begin(), temp[j].end(), temp[j + i].begin(), temp[j + i].end(), std::back_inserter(merged), [](std::complex<double> a, std::complex<double> b) {\n                    return std::abs(a) < std::abs(b);\n                });\n                temp[j] = merged;\n            }\n        }\n    }\n}\n\n// Copy the sorted data back to the original vector\nx = temp[0];\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    #pragma omp single\n    {\n        // Divide the work among threads\n        int num_threads = omp_get_num_threads();\n        int chunk_size = x.size() / num_threads;\n        int start, end;\n\n        for (int i = 0; i < num_threads; ++i) {\n            start = i * chunk_size;\n            end = (i == num_threads - 1) ? x.size() : (start + chunk_size);\n\n            #pragma omp task firstprivate(start, end)\n            {\n                std::sort(x.begin() + start, x.begin() + end, [](std::complex<double> a, std::complex<double> b) {\n                    return std::abs(a) < std::abs(b);\n                });\n            }\n        }\n    }\n\n    #pragma omp taskwait\n\n    // Merge sorted sub-vectors\n    int num_threads = omp_get_num_threads();\n    int chunk_size = x.size() / num_threads;\n    int start, end, next_start, next_end;\n\n    for (int i = 0; i < num_threads - 1; ++i) {\n        start = i * chunk_size;\n        end = (i == num_threads - 1) ? x.size() : (start + chunk_size);\n        next_start = end;\n        next_end = ((i + 1) == num_threads - 1) ? x.size() : (next_start + chunk_size);\n\n        #pragma omp task firstprivate(start, end, next_start, next_end)\n        {\n            std::merge(x.begin() + start, x.begin() + end, x.begin() + next_start, x.begin() + next_end, temp[i].begin());\n        }\n    }\n\n    #pragma omp taskwait\n\n    // Copy the sorted elements back to the original vector\n    #pragma omp parallel for\n    for (int i = 0; i < x.size(); ++i) {\n        x[i] = temp[i / chunk_size][i % chunk_size];\n    }\n}\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (auto &subVec : temp) {\n    sorted.insert(sorted.end(), subVec.begin(), subVec.end());\n}\n\n// Sort the merged vector\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Copy the sorted elements back to the original vector\nx = sorted;\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nfor (auto &subVec : temp) {\n    sorted.insert(sorted.end(), subVec.begin(), subVec.end());\n}\n\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\nx = sorted;\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i].push_back(x[i]);\n    }\n\n    #pragma omp for schedule(static)\n    for (int i = 0; i < temp.size(); ++i) {\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n}\n\n// Merge the sorted sub-vectors\nstd::vector<std::complex<double>> sorted;\nsorted.reserve(x.size());\n\nfor (const auto &subVec : temp) {\n    sorted.insert(sorted.end(), subVec.begin(), subVec.end());\n}\n\nstd::sort(sorted.begin(), sorted.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\nx.swap(sorted); // Replace the original vector with the sorted one\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i] = std::vector<std::complex<double>>(1, x[i]);\n    }\n\n    // Perform the merge sort in parallel\n    for (int size = 1; size < x.size(); size *= 2) {\n        #pragma omp for schedule(static)\n        for (int i = 0; i < x.size(); i += 2 * size) {\n            std::vector<std::complex<double>> merged;\n            auto &left = temp[i];\n            auto &right = (i + size < x.size()) ? temp[i + size] : temp[0]; // Use an empty vector for the right part if i + size >= x.size()\n            std::merge(left.begin(), left.end(), right.begin(), right.end(), std::back_inserter(merged), [](std::complex<double> a, std::complex<double> b) {\n                return std::abs(a) < std::abs(b);\n            });\n            temp[i] = merged;\n        }\n    }\n}\n\n// Copy the sorted data back to the original vector\nx = temp[0];\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (int i = 0; i < x.size(); ++i) {\n        temp[i] = {x[i]};\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n\n    // Merge sorted sub-vectors\n    #pragma omp for schedule(static)\n    for (int i = 1; i < x.size(); i *= 2) {\n        for (int j = 0; j < x.size() - i; j += 2 * i) {\n            std::vector<std::complex<double>> merged;\n            std::merge(temp[j].begin(), temp[j].end(), temp[j + i].begin(), temp[j + i].end(), std::back_inserter(merged), [](std::complex<double> a, std::complex<double> b) {\n                return std::abs(a) < std::abs(b);\n            });\n            temp[j] = merged;\n        }\n    }\n}\n\n// Copy the sorted elements back to the original vector\nx = temp[0];\n}",
            "\n// Temporary vector to hold sorted sub-vectors\nstd::vector<std::vector<std::complex<double>>> temp(x.size());\n\n#pragma omp parallel\n{\n    // Each thread sorts a chunk of the vector\n    #pragma omp for schedule(static)\n    for (size_t i = 0; i < x.size(); ++i) {\n        temp[i] = {x[i]};\n        std::sort(temp[i].begin(), temp[i].end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n    }\n\n    // Merge the sorted sub-vectors\n    #pragma omp for schedule(static)\n    for (size_t i = 1; i < x.size(); i *= 2) {\n        for (size_t j = 0; j < x.size() - i; j += 2 * i) {\n            std::vector<std::complex<double>> merged;\n            std::merge(temp[j].begin(), temp[j].end(), temp[j + i].begin(), temp[j + i].end(), std::back_inserter(merged), [](std::complex<double> a, std::complex<double> b) {\n                return std::abs(a) < std::abs(b);\n            });\n            temp[j] = merged;\n        }\n    }\n}\n\n// Copy the sorted data back to the original vector\nx = temp[0];\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "50_stencil_xor_kernel",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {",
        "translation_prompt": "// Serial implementation of cellsXOR\n// /* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n//    Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n//    input and output are NxN grids of ints in row-major.\n//    Example:\n// \n//    input: [[0, 1, 1, 0],\n//            [1, 0, 0, 0],\n//            [0, 0, 0, 0],\n//            [0, 1, 0, 0]\n//    output: [[0, 0, 1, 1],\n//             [1, 0, 0, 1],\n//             [0, 0, 1, 0],\n//             [1, 0, 1, 0]]\n// */\n// void cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n// for (size_t i = 0; i < N; ++i) {\n//         for (size_t j = 0; j < N; ++j) {\n//             int count = 0;\n//             if (i > 0 && input[i - 1 + j * N] == 1) {\n//                 ++count;\n//             }\n//             if (i < N - 1 && input[i + 1 + j * N] == 1) {\n//                 ++count;\n//             }\n//             if (j > 0 && input[i + (j - 1) * N] == 1) {\n//                 ++count;\n//             }\n//             if (j < N - 1 && input[i + (j + 1) * N] == 1) {\n//                 ++count;\n//             }\n//             if (count == 1) {\n//                 output[i + j * N] = 1;\n//             } else {\n//                 output[i + j * N] = 0;\n//             }\n//         }\n//     }\n// }\n\n// OpenMP implementation of cellsXOR\n#include <omp.h>\n\n/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints in row-major.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {\nfor (size_t i = 0; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int count = 0;\n            if (i > 0 && input[i - 1 + j * N] == 1) {\n                ++count;\n            }\n            if (i < N - 1 && input[i + 1 + j * N] == 1) {\n                ++count;\n            }\n            if (j > 0 && input[i + (j - 1) * N] == 1) {\n                ++count;\n            }\n            if (j < N - 1 && input[i + (j + 1) * N] == 1) {\n                ++count;\n            }\n            if (count == 1) {\n                output[i + j * N] = 1;\n            } else {\n                output[i + j * N] = 0;\n            }\n        }\n    }\n}",
        "translation_function_name": "cellsXOR",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = count == 1 ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        output[i * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "54_stencil_game_of_life",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {",
        "translation_prompt": "// Serial implementation of gameOfLife\n// /* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n//    A cell is 1 if it is alive and 0 if it is dead.\n//    If a live cell has fewer than 2 live neighbors then it dies.\n//    If a live cell has 2 or 3 live neighbors then it lives on.\n//    If a live cell has more than 3 live neighbords then it dies.\n//    If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n//    `input` and `output` are NxN grids stored in row-major.\n//    Example:\n// \n//    input:  [[0, 0, 0, 0, 0],\n// \t\t\t\t\t  [0, 1, 0, 0, 0],\n//             [0, 1, 1, 0, 0],\n//             [0, 0, 1, 1, 0],\n//             [0, 1, 0, 0, 0]]\n//    output: [[0, 0, 0, 0, 0],\n// \t\t\t\t\t  [0, 1, 1, 0, 0],\n//             [0, 1, 0, 1, 0],\n//             [0, 0, 0, 1, 0],\n//             [0, 0, 1, 0, 0]]\n// */\n// void gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n// std::vector<int> next(input.size(), 0);\n//   for (size_t i = 0; i < N; ++i) {\n//     for (size_t j = 0; j < N; ++j) {\n//       int count = 0;\n//       for (int x = -1; x <= 1; ++x) {\n//         for (int y = -1; y <= 1; ++y) {\n//           if (x == 0 && y == 0) {\n//             continue;\n//           }\n//           size_t r = (i + x + N) % N;\n//           size_t c = (j + y + N) % N;\n//           count += input[r * N + c];\n//         }\n//       }\n//       if (input[i * N + j] == 1) {\n//         next[i * N + j] = (count == 2 || count == 3);\n//       } else {\n//         next[i * N + j] = (count == 3);\n//       }\n//     }\n//   }\n//   output = next;\n// }\n\n// OpenMP implementation of gameOfLife\n#include <omp.h>\n\n/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids stored in row-major.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {\nstd::vector<int> next(input.size(), 0);\n  for (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n      int count = 0;\n      for (int x = -1; x <= 1; ++x) {\n        for (int y = -1; y <= 1; ++y) {\n          if (x == 0 && y == 0) {\n            continue;\n          }\n          size_t r = (i + x + N) % N;\n          size_t c = (j + y + N) % N;\n          count += input[r * N + c];\n        }\n      }\n      if (input[i * N + j] == 1) {\n        next[i * N + j] = (count == 2 || count == 3);\n      } else {\n        next[i * N + j] = (count == 3);\n      }\n    }\n  }\n  output = next;\n}",
        "translation_function_name": "gameOfLife",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp critical\noutput = next;\n}",
            "\nstd::vector<int> next(input.size(), 0);\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}",
            "\nstd::vector<int> next(input.size(), 0);\n\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n#pragma omp parallel for\nfor (size_t i = 0; i < N * N; ++i) {\n  output[i] = next[i];\n}\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "52_stencil_1d_jacobi_3-point_stencil",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(std::vector<double> const& input, std::vector<double> &output) {",
        "translation_prompt": "// Serial implementation of jacobi1D\n// /* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n//    Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n//    i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n//    Replace with 0 when reading past the boundaries of `input`.\n//    Example:\n// \n//    input: [9, -6, -1, 2, 3]\n//    output: [1, 2/3, -5/3, 4/3, 5/3]\n// */\n// void jacobi1D(std::vector<double> const& input, std::vector<double> &output) {\n// // YOUR CODE HERE\n//     for (int i = 1; i < input.size() - 1; i++) {\n//         output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n//     }\n// }\n\n// OpenMP implementation of jacobi1D\n#include <omp.h>\n\n/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(std::vector<double> const& input, std::vector<double> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(std::vector<double> const& input, std::vector<double> &output) {\n// YOUR CODE HERE\n    for (int i = 1; i < input.size() - 1; i++) {\n        output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n    }\n}",
        "translation_function_name": "jacobi1D",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}",
            "\n#pragma omp parallel for\nfor (int i = 1; i < input.size() - 1; i++) {\n    output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "51_stencil_edge_kernel",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\nconst int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images stored in row-major.\n   Store the output of the computation in imageOut.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {",
        "translation_prompt": "// Serial implementation of convolveKernel\n// const int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n// \n// /* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n//    the dot product of itself and its neighbors with the edge kernel.\n//    Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n//    imageIn and imageOut are NxN grayscale images stored in row-major.\n//    Store the output of the computation in imageOut.\n//    Example:\n// \n//    input: [[112, 118, 141, 152],\n//            [93, 101, 119, 203],\n//            [45, 17, 16, 232],\n//            [82, 31, 49, 101]]\n//    output: [[255, 255, 255, 255],\n//             [255, 147, 0, 255],\n//             [36, 0, 0, 255],\n//             [255, 39, 0, 255]]\n// */\n// void convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {\n// for (size_t i = 0; i < N; ++i) {\n//         for (size_t j = 0; j < N; ++j) {\n//             int sum = 0;\n//             for (int k = -1; k <= 1; ++k) {\n//                 for (int l = -1; l <= 1; ++l) {\n//                     int x = i + k;\n//                     int y = j + l;\n//                     if (x >= 0 && x < N && y >= 0 && y < N) {\n//                         sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n//                     }\n//                 }\n//             }\n//             imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n//         }\n//     }\n// }\n\n// OpenMP implementation of convolveKernel\n#include <omp.h>\n\nconst int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images stored in row-major.\n   Store the output of the computation in imageOut.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "const int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images stored in row-major.\n   Store the output of the computation in imageOut.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {\nfor (size_t i = 0; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int sum = 0;\n            for (int k = -1; k <= 1; ++k) {\n                for (int l = -1; l <= 1; ++l) {\n                    int x = i + k;\n                    int y = j + l;\n                    if (x >= 0 && x < N && y >= 0 && y < N) {\n                        sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                    }\n                }\n            }\n            imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n        }\n    }\n}",
        "translation_function_name": "convolveKernel",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "53_stencil_2d_jacobi_5-point_stencil",
        "parallelism_model": "omp",
        "prompt": "#include <omp.h>\n\n/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {",
        "translation_prompt": "// Serial implementation of jacobi2D\n// /* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n//    Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n//    i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n//    Replace with 0 when reading past the boundaries of `input`.\n//    `input` and `output` are NxN grids stored in row-major.\n//    Example:\n// \n//    input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n//    output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n// */\n// void jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {\n// for (size_t i = 1; i < N - 1; ++i) {\n//     for (size_t j = 1; j < N - 1; ++j) {\n//       output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n//     }\n//   }\n// }\n\n// OpenMP implementation of jacobi2D\n#include <omp.h>\n\n/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids stored in row-major.\n   Use OpenMP to compute in parallel.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "omp",
        "translation_src_example": "/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids stored in row-major.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n      output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n  }\n}",
        "translation_function_name": "jacobi2D",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n      output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}",
            "\n#pragma omp parallel for collapse(2)\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n}"
        ]
    },
    {
        "problem_type": "geometry",
        "language": "cpp",
        "name": "12_geometry_smallest_triangle",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble triangleArea(Point const& A, Point const& B, Point const& C) {\n  return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n}\n\n/* Return the area of the smallest triangle that can be formed by any 3 points.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Example:\n\n   input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n   output: 5.5\n*/\ndouble smallestArea(std::vector<Point> const& points) {",
        "translation_prompt": "// Serial implementation of smallestArea\n// struct Point {\n// \tdouble x, y;\n// };\n// \n// double triangleArea(Point const& A, Point const& B, Point const& C) {\n//   return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n// }\n// \n// /* Return the area of the smallest triangle that can be formed by any 3 points.\n//    Example:\n// \n//    input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n//    output: 5.5\n// */\n// double smallestArea(std::vector<Point> const& points) {\n// double minArea = std::numeric_limits<double>::max();\n//   for (int i = 0; i < points.size(); ++i) {\n//     for (int j = i + 1; j < points.size(); ++j) {\n//       for (int k = j + 1; k < points.size(); ++k) {\n//         double area = triangleArea(points[i], points[j], points[k]);\n//         if (area < minArea) {\n//           minArea = area;\n//         }\n//       }\n//     }\n//   }\n//   return minArea;\n// }\n\n// MPI implementation of smallestArea\n#include <mpi.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble triangleArea(Point const& A, Point const& B, Point const& C) {\n  return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n}\n\n/* Return the area of the smallest triangle that can be formed by any 3 points.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Example:\n\n   input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n   output: 5.5\n*/\ndouble smallestArea(std::vector<Point> const& points) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct Point {\n\tdouble x, y;\n};\n\ndouble triangleArea(Point const& A, Point const& B, Point const& C) {\n  return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );\n}\n\n/* Return the area of the smallest triangle that can be formed by any 3 points.\n   Example:\n\n   input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]\n   output: 5.5\n*/\ndouble smallestArea(std::vector<Point> const& points) {\ndouble minArea = std::numeric_limits<double>::max();\n  for (int i = 0; i < points.size(); ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n      for (int k = j + 1; k < points.size(); ++k) {\n        double area = triangleArea(points[i], points[j], points[k]);\n        if (area < minArea) {\n          minArea = area;\n        }\n      }\n    }\n  }\n  return minArea;\n}",
        "translation_function_name": "smallestArea",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint local_start, local_end;\nint points_per_proc = points.size() / world_size;\nlocal_start = world_rank * points_per_proc;\nlocal_end = (world_rank == world_size - 1) ? points.size() : local_start + points_per_proc;\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return std::numeric_limits<double>::max(); // Other processes don't need to return the correct value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029602298,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036080734,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018112725,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010680973,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00172847385,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00202477745,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00066602165,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002282641875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036246302969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00020474575703,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015630745547,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint local_start, local_end;\nint points_per_proc = points.size() / world_size;\nlocal_start = world_rank * points_per_proc;\nlocal_end = (world_rank == world_size - 1) ? points.size() : local_start + points_per_proc;\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002960278,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036104438,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018110259,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00108934725,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001640917975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001950535125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000638434725,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00021103392812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00032876195937,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00021818080703,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016752414023,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint total_points = points.size();\ndouble local_minArea = std::numeric_limits<double>::max();\ndouble global_minArea;\n\n// Calculate the number of combinations each process should work on\nint combinations_per_proc = (total_points * (total_points - 1) * (total_points - 2)) / (6 * world_size);\nint start_comb = combinations_per_proc * world_rank;\nint end_comb = (world_rank == world_size - 1) ? (total_points * (total_points - 1) * (total_points - 2)) / 6 : start_comb + combinations_per_proc;\n\nint comb_count = 0;\nfor (int i = 0; i < total_points; ++i) {\n    for (int j = i + 1; j < total_points; ++j) {\n        for (int k = j + 1; k < total_points; ++k) {\n            if (comb_count >= start_comb && comb_count < end_comb) {\n                double area = triangleArea(points[i], points[j], points[k]);\n                if (area < local_minArea) {\n                    local_minArea = area;\n                }\n            }\n            ++comb_count;\n        }\n    }\n}\n\n// Reduce all local minimums to the global minimum\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum area to all processes\nMPI_Bcast(&global_minArea, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_minArea;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029568216,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045083384,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036468332,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036581703,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004656322875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0049605658125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00907764145,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00349382908125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00546043081406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00523330971719,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00617047861992,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint points_per_process = points.size() / world_size;\nint start_index = world_rank * points_per_process;\nint end_index = (world_rank == world_size - 1) ? points.size() : start_index + points_per_process;\n\ndouble local_min_area = std::numeric_limits<double>::max();\nfor (int i = start_index; i < end_index; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_min_area) {\n                local_min_area = area;\n            }\n        }\n    }\n}\n\ndouble global_min_area;\nMPI_Reduce(&local_min_area, &global_min_area, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_min_area;\n} else {\n    return 0; // Non-root processes return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029556132,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036354446,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018048644,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107384565,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001661880725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019565309125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00064292724375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00020522189063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028880523594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00020042301094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001665619875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint total_points = points.size();\ndouble local_minArea = std::numeric_limits<double>::max();\ndouble global_minArea;\n\n// Calculate the number of combinations each process should work on\nint combinations_per_proc = (total_points * (total_points - 1) * (total_points - 2)) / (6 * world_size);\nint start_comb = combinations_per_proc * world_rank;\nint end_comb = combinations_per_proc * (world_rank + 1);\nif (world_rank == world_size - 1) {\n    end_comb += (total_points * (total_points - 1) * (total_points - 2)) / 6 % world_size;\n}\n\n// Convert the combination index to the actual triplet of points\nfor (int comb = start_comb; comb < end_comb; ++comb) {\n    int i = comb;\n    int k = i % total_points;\n    i /= total_points;\n    int j = i % (total_points - 1);\n    i /= (total_points - 1);\n    int h = i;\n\n    if (j >= h) ++j;\n    if (k >= std::min(h, j)) ++k;\n    if (k >= std::max(h, j)) ++k;\n\n    double area = triangleArea(points[h], points[j], points[k]);\n    if (area < local_minArea) {\n        local_minArea = area;\n    }\n}\n\n// Reduce all local minimums to the global minimum\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only the root process should return the result\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return std::numeric_limits<double>::quiet_NaN(); // Non-root processes return NaN\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0029673312,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0129123816,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint points_per_proc = points.size() / world_size;\nint start = world_rank * points_per_proc;\nint end = (world_rank == world_size - 1) ? points.size() : start + points_per_proc;\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return 0; // Non-root processes return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002952858,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037266318,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018126482,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010546177,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001721168325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001975618125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067097494375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00021626335937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034323743125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012166380937,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00019902767109,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint points_per_proc = points.size() / world_size;\nint start = world_rank * points_per_proc;\nint end = (world_rank == world_size - 1) ? points.size() : start + points_per_proc;\n\ndouble local_min_area = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_min_area) {\n                local_min_area = area;\n            }\n        }\n    }\n}\n\ndouble global_min_area;\nMPI_Reduce(&local_min_area, &global_min_area, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_min_area;\n} else {\n    return 0; // Non-root processes return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002955635,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0038584974,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018185722,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001073835,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015796039,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019969896125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00069065530625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00021633484063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00042237980156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001228762,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00017414927227,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint local_size = points.size() / world_size;\nint start = world_rank * local_size;\nint end = (world_rank == world_size - 1) ? points.size() : (world_rank + 1) * local_size;\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029607668,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036506694,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018109506,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107631195,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00170782455,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001857081375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067602929375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001903937125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00035244323906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00041302713672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015850330625,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble localMinArea = std::numeric_limits<double>::max();\ndouble globalMinArea;\n\n// Calculate the number of combinations each process should work on\nint combinations_per_proc = (n * (n - 1) * (n - 2)) / (6 * size);\nint start = combinations_per_proc * rank;\nint end = (rank == size - 1) ? (n * (n - 1) * (n - 2)) / 6 : start + combinations_per_proc;\n\nint count = 0;\nfor (int i = 0; i < n; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n        for (int k = j + 1; k < n; ++k) {\n            if (count >= start && count < end) {\n                double area = triangleArea(points[i], points[j], points[k]);\n                if (area < localMinArea) {\n                    localMinArea = area;\n                }\n            }\n            count++;\n        }\n    }\n}\n\n// Reduce all local min areas to the global min area\nMPI_Reduce(&localMinArea, &globalMinArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global min area to all processes\nMPI_Bcast(&globalMinArea, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn globalMinArea;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029570218,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045030662,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036407486,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036577595,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004534435875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053773726875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00915105908125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00322959136875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00479902096719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01304090304922,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00659736733008,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint local_size = points.size() / world_size;\nint start = world_rank * local_size;\nint end = (world_rank + 1) * local_size + (world_rank == world_size - 1 ? points.size() % world_size : 0);\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029610996,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036251492,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018162941,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105093945,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0017128021,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00203394175,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006858285125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00021057917188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000373073575,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.364953203e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016287910664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble localMinArea = std::numeric_limits<double>::max();\n\n// Divide the work among processes\nint pointsPerProc = n / size;\nint startIndex = rank * pointsPerProc;\nint endIndex = (rank == size - 1) ? n : startIndex + pointsPerProc;\n\n// Each process computes the area of triangles for its subset of points\nfor (int i = startIndex; i < endIndex; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n        for (int k = j + 1; k < n; ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < localMinArea) {\n                localMinArea = area;\n            }\n        }\n    }\n}\n\n// Reduce all local minima to find the global minimum area\ndouble globalMinArea;\nMPI_Reduce(&localMinArea, &globalMinArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only the root process will have the correct globalMinArea\nif (rank == 0) {\n    return globalMinArea;\n} else {\n    return std::numeric_limits<double>::max(); // Other processes return a placeholder\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029514172,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037680958,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018091022,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105954725,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00166383505,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019669593875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000687846425,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00020047702188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00035758890469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012927716172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016905837852,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_start, local_end;\nint points_per_proc = points.size() / size;\nlocal_start = rank * points_per_proc;\nlocal_end = (rank == size - 1) ? points.size() : local_start + points_per_proc;\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_minArea;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029638068,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036103034,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018141388,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010781651,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00170777615,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019989540125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006695496875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022991605625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00039232950156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 5.940035625e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016897058516,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint local_start, local_end, local_size;\nint total_points = points.size();\nlocal_size = total_points / world_size;\nlocal_start = world_rank * local_size;\nlocal_end = (world_rank == world_size - 1) ? total_points : local_start + local_size;\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = i + 1; j < total_points; ++j) {\n        for (int k = j + 1; k < total_points; ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return 0; // Non-root processes don't have the final result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029598532,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036073778,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018002858,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105970985,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00157765765,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00195121635,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00068493755,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022690715313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030817250625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00040635399219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00017216129219,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint pointsPerProc = points.size() / size;\nint startIndex = rank * pointsPerProc;\nint endIndex = (rank == size - 1) ? points.size() : startIndex + pointsPerProc;\n\ndouble localMinArea = std::numeric_limits<double>::max();\nfor (int i = startIndex; i < endIndex; ++i) {\n  for (int j = i + 1; j < points.size(); ++j) {\n    for (int k = j + 1; k < points.size(); ++k) {\n      double area = triangleArea(points[i], points[j], points[k]);\n      if (area < localMinArea) {\n        localMinArea = area;\n      }\n    }\n  }\n}\n\ndouble globalMinArea;\nMPI_Reduce(&localMinArea, &globalMinArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return globalMinArea;\n} else {\n  return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002961376,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036199576,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018061947,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00108546235,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001758895,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019611516,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00069357814375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002025938875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034095808125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.721559141e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00019786572031,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble localMinArea = std::numeric_limits<double>::max();\ndouble globalMinArea;\n\n// Calculate the number of combinations each process should work on\nint combinations = n * (n - 1) * (n - 2) / 6;\nint localCombinations = combinations / size;\nint startIndex = rank * localCombinations * 3;\nint endIndex = (rank == size - 1) ? combinations * 3 : (rank + 1) * localCombinations * 3;\n\n// Each process computes its local minimum area\nfor (int i = startIndex; i < endIndex; i += 3) {\n  int idx1 = i / ((n - 1) * (n - 2));\n  int idx2 = (i / (n - 2)) % (n - 1);\n  int idx3 = i % (n - 2);\n\n  // Adjust indices to account for the fact that idx2 > idx1 and idx3 > idx2\n  if (idx2 >= idx1) ++idx2;\n  if (idx3 >= std::min(idx1, idx2)) ++idx3;\n  if (idx3 >= std::max(idx1, idx2)) ++idx3;\n\n  double area = triangleArea(points[idx1], points[idx2], points[idx3]);\n  if (area < localMinArea) {\n    localMinArea = area;\n  }\n}\n\n// Reduce all local minimum areas to the global minimum area\nMPI_Reduce(&localMinArea, &globalMinArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only the master process (rank 0) should return the final result\nif (rank == 0) {\n  return globalMinArea;\n} else {\n  return std::numeric_limits<double>::max(); // Other processes return a placeholder value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.00296779,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0167051678,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint points_per_proc = points.size() / world_size;\nint start = world_rank * points_per_proc;\nint end = (world_rank + 1) * points_per_proc;\nif (world_rank == world_size - 1) {\n    end += points.size() % world_size; // Handle any remaining points\n}\n\ndouble local_minArea = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        for (int k = j + 1; k < points.size(); ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < local_minArea) {\n                local_minArea = area;\n            }\n        }\n    }\n}\n\ndouble global_minArea;\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_minArea;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a dummy value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002961815,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036038712,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018140426,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105550425,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001768229675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019485526375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00065999334375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000212105275,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003082528375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 8.791901328e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016965937578,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble localMinArea = std::numeric_limits<double>::max();\n\n// Divide the work among processes\nint pointsPerProc = n / size;\nint startIndex = rank * pointsPerProc;\nint endIndex = (rank == size - 1) ? n : startIndex + pointsPerProc;\n\n// Each process computes its local minimum area\nfor (int i = startIndex; i < endIndex; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n        for (int k = j + 1; k < n; ++k) {\n            double area = triangleArea(points[i], points[j], points[k]);\n            if (area < localMinArea) {\n                localMinArea = area;\n            }\n        }\n    }\n}\n\n// Reduce all local minimum areas to the global minimum area\ndouble globalMinArea;\nMPI_Reduce(&localMinArea, &globalMinArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only the root process should return the final result\nif (rank == 0) {\n    return globalMinArea;\n} else {\n    return 0; // Other processes return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.00296235,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036307,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018144022,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00109201905,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158322185,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020345429875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00068194110625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023084959063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00029761624844,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011339241484,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016829167734,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint total_points = points.size();\ndouble local_minArea = std::numeric_limits<double>::max();\ndouble global_minArea;\n\n// Calculate the number of combinations each process should work on\nint combinations_per_proc = (total_points * (total_points - 1) * (total_points - 2)) / (6 * world_size);\nint start_comb = combinations_per_proc * world_rank;\nint end_comb = (world_rank == world_size - 1) ? (total_points * (total_points - 1) * (total_points - 2)) / 6 : start_comb + combinations_per_proc;\n\nint comb_idx = 0;\nfor (int i = 0; i < total_points; ++i) {\n    for (int j = i + 1; j < total_points; ++j) {\n        for (int k = j + 1; k < total_points; ++k) {\n            if (comb_idx >= start_comb && comb_idx < end_comb) {\n                double area = triangleArea(points[i], points[j], points[k]);\n                if (area < local_minArea) {\n                    local_minArea = area;\n                }\n            }\n            ++comb_idx;\n        }\n    }\n}\n\n// Reduce all local minimums to the global minimum\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum area to all processes\nMPI_Bcast(&global_minArea, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_minArea;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029557074,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045458828,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036500058,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00366789415,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0046805791,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0051782363,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00895438351875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00346591442812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00464294392031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017376066,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00783593276484,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint total_points = points.size();\ndouble local_minArea = std::numeric_limits<double>::max();\ndouble global_minArea;\n\n// Calculate the number of combinations each process will handle\nint combinations_per_proc = (total_points * (total_points - 1) * (total_points - 2)) / (6 * size);\n\n// Each process starts at a different combination\nint start_comb = rank * combinations_per_proc * 6;\nint end_comb = (rank + 1) * combinations_per_proc * 6;\n\nfor (int i = 0; i < total_points; ++i) {\n    for (int j = i + 1; j < total_points; ++j) {\n        for (int k = j + 1; k < total_points; ++k) {\n            int current_comb = (i * total_points * total_points) + (j * total_points) + k;\n            if (current_comb >= start_comb && current_comb < end_comb) {\n                double area = triangleArea(points[i], points[j], points[k]);\n                if (area < local_minArea) {\n                    local_minArea = area;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local minimums to the global minimum\nMPI_Reduce(&local_minArea, &global_minArea, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum area to all processes\nMPI_Bcast(&global_minArea, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_minArea;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029580976,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0047373936,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043622901,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041207014,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00483311005,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005460283625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00943843315,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00340528602813,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00504511906875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01498878478984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00748672807188,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nint total_points = points.size();\ndouble local_min_area = std::numeric_limits<double>::max();\ndouble global_min_area;\n\n// Calculate the number of combinations each process should work on\nint combinations_per_proc = (total_points * (total_points - 1) * (total_points - 2)) / (6 * world_size);\nint start_idx = combinations_per_proc * world_rank * 6;\nint end_idx = start_idx + combinations_per_proc * 6;\n\n// Adjust the last process to handle any remaining combinations\nif (world_rank == world_size - 1) {\n    end_idx = total_points * (total_points - 1) * (total_points - 2) / 6;\n}\n\n// Each process computes its local minimum area\nfor (int i = start_idx; i < end_idx; ++i) {\n    int idx1 = i / ((total_points - 1) * (total_points - 2) / 2);\n    int idx2 = (i % ((total_points - 1) * (total_points - 2) / 2)) / (total_points - 2);\n    int idx3 = i % (total_points - 2);\n    if (idx2 >= idx1) ++idx2;\n    if (idx3 >= std::min(idx1, idx2)) ++idx3;\n    if (idx3 >= std::max(idx1, idx2)) ++idx3;\n\n    double area = triangleArea(points[idx1], points[idx2], points[idx3]);\n    if (area < local_min_area) {\n        local_min_area = area;\n    }\n}\n\n// Reduce all local minimum areas to the global minimum area\nMPI_Reduce(&local_min_area, &global_min_area, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum area to all processes\nMPI_Bcast(&global_min_area, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_min_area;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0029571298,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0161881494,
                        "num_procs": 1
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "geometry",
        "language": "cpp",
        "name": "14_geometry_closest_pair_1d",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\ndouble distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of closestPair\n// double distance(double x1, double x2) {\n// \treturn std::abs(x1 - x2);\n// }\n// \n// /* Return the distance between the closest two elements in the vector x.\n//    Example: \n// \n//    input: [7, 3, 9, 12, 31, 1]\n//    output: 2\n// */\n// double closestPair(std::vector<double> const& x) {\n// double min_dist = std::numeric_limits<double>::max();\n// \tfor (size_t i = 0; i < x.size(); ++i) {\n// \t\tfor (size_t j = i + 1; j < x.size(); ++j) {\n// \t\t\tdouble dist = distance(x[i], x[j]);\n// \t\t\tif (dist < min_dist) {\n// \t\t\t\tmin_dist = dist;\n// \t\t\t}\n// \t\t}\n// \t}\n// \treturn min_dist;\n// }\n\n// MPI implementation of closestPair\n#include <mpi.h>\n\ndouble distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "double distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(std::vector<double> const& x) {\ndouble min_dist = std::numeric_limits<double>::max();\n\tfor (size_t i = 0; i < x.size(); ++i) {\n\t\tfor (size_t j = i + 1; j < x.size(); ++j) {\n\t\t\tdouble dist = distance(x[i], x[j]);\n\t\t\tif (dist < min_dist) {\n\t\t\t\tmin_dist = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}",
        "translation_function_name": "closestPair",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\nsize_t n = x.size();\nsize_t local_n = n / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? n : start + local_n;\n\nfor (size_t i = start; i < end; ++i) {\n    for (size_t j = i + 1; j < n; ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a dummy value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0832066114,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083423554,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0417079091,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219703876,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011900266075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059890861375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00315228658125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00149278505625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078883761094,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00062159782188,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00033197088164,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\n// Calculate the number of elements each process will handle\nint local_n = x.size() / size;\nint remainder = x.size() % size;\n\n// Determine the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes the minimum distance for its portion of the vector\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\n// Reduce the local minimum distances to find the global minimum distance\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum distance to all processes\nMPI_Bcast(&global_min_dist, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0832269996,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1248965926,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0935976295,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0546853798,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.029819235875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0163933792375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01325545963125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00413339826563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00543701261875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00508805755703,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00714592307852,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; ++i) {\n    for (int j = 0; j < n; ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a dummy value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.062165548,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.249725144,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1247422579,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0629297127,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.032376256,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.016357518325,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00843207535,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00403799984687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020954726125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00140540274922,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00069498027539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nint local_start = rank * (x.size() / size);\nint local_end = (rank == size - 1) ? x.size() : (rank + 1) * (x.size() / size);\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (size_t j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.062147945,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1669544844,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083505269,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0425950061,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02258707915,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0118598753125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00974092298125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00464197421562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00573183341719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00247979405234,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00573410938711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0831936394,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083372661,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0663773542,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03653570125,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01979891335,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0104352245375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00887036159375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00394465318125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00534624962031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00266003161094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00645711661562,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (size_t j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0618629622,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1671308352,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.088346672,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0426348721,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0223602936,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01246169775,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01032634151875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00452656954375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00585386007812,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00279915959609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00719967841445,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0832244856,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1668429288,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0832725458,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.042131357,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0222128672,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0112669788875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00588095104375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002779076225,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00147998123906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007889457625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00057787645195,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0832050168,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083300878,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0624872241,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03668022115,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01994763145,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0103551119875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00895146371875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00391223061562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00515042496875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00237420020937,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00676638636211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint start = rank * local_size;\nint end = (rank == size - 1) ? x.size() : start + local_size;\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0832522452,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1247666268,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0630045635,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0330916533,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01708770885,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0085758068375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0044543021875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00211310195313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00109412563125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00058769032031,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00041114003242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0831955006,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0834010122,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0417226229,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02197207395,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011500038075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059600469625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00321257688125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00144596566875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00077716834375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00043351819219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030289073867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; ++i) {\n    for (int j = 0; j < n; ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.061749688,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2497293256,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1247371305,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0628982805,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03236308735,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01642268435,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00843165259375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00404997011563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00208469965156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103910631562,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00062229698906,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\n// Calculate the number of elements each process will handle\nint local_n = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes the local minimum distance\nfor (int i = start; i < end; ++i) {\n    for (size_t j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\n// Reduce all local minimum distances to the global minimum distance\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0621063526,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1669699192,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0834393384,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0424977026,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0222816234,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011901198575,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01016668555625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00412115487188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00573979235,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00758587539062,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00542055604023,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nint local_start = rank * (x.size() / size);\nint local_end = (rank == size - 1) ? x.size() : (rank + 1) * (x.size() / size);\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (size_t j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.061885779,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1669695446,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083285611,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.042534653,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.022320079075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01209066345,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01111004554375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00414077191562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00559555303125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01005156927344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00875289174648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\n// Calculate the number of elements each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Each process finds the closest pair in its subset\nfor (size_t i = start; i < end; ++i) {\n    for (size_t j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\n// Reduce the local minimum distances to the global minimum distance\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum distance to all processes\nMPI_Bcast(&global_min_dist, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0832001676,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0833114644,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0624611292,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03651631175,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.022206376175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0116456730875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010796913525,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00289341860625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00529896571406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00367479412891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00519126029922,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0621108454,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.166787786,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0834981476,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04282190435,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.022504857675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0119697132625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0099105717,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00421148522813,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00654782070156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00723582379297,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00624506613008,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (size_t j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0620896896,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1668544526,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0832966144,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0425872778,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.022181978475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0122683706125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010333175025,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00381474955625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00602225529531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00491937795625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00559996948398,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint start = rank * local_size;\nint end = (rank == size - 1) ? x.size() : start + local_size;\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (size_t j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return std::numeric_limits<double>::max(); // Non-root processes return a placeholder value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.062155128,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2499685266,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1247254343,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0632453715,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.032561096325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0163106445375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0084338323375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00408660335625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00209269831562,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106332251094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00070049010859,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint start = rank * local_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * local_size;\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (size_t j = 0; j < x.size(); ++j) {\n        if (i != j) {\n            double dist = distance(x[i], x[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.083193465,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2498190742,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1248028724,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0632679203,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0335463735,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01692019,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01233885270625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00536230060625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00596790543125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00483396735781,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00718944578164,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < x.size(); ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Allreduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0832022652,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0833254064,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0624285551,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0364848842,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.019800812775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0101664364875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0089900011375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040338904,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00487485565781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0035872561625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00478594102891,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble global_min_dist = std::numeric_limits<double>::max();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\n// Calculate the number of elements each process will work with\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes the minimum distance for its subset of data\nfor (int i = start; i < end; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n        double dist = distance(x[i], x[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\n// Reduce the local minimum distances to the global minimum distance\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum distance to all processes\nMPI_Bcast(&global_min_dist, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_min_dist;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0831920864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0833928528,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0627287947,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0364936575,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02030120535,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011544516,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010822475725,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00310190727188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005481780125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00220447606094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00482818473008,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "geometry",
        "language": "cpp",
        "name": "13_geometry_closest_pair_2d",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble distance(Point const& p1, Point const& p2) {\n\treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n}\n\n/* Return the distance between the closest two points in the vector points.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of points. The final result is returned on rank 0.\n   Example: \n\n   input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n   output: 1.41421\n*/\ndouble closestPair(std::vector<Point> const& points) {",
        "translation_prompt": "// Serial implementation of closestPair\n// struct Point {\n// \tdouble x, y;\n// };\n// \n// double distance(Point const& p1, Point const& p2) {\n// \treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n// }\n// \n// /* Return the distance between the closest two points in the vector points.\n//    Example: \n// \n//    input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n//    output: 1.41421\n// */\n// double closestPair(std::vector<Point> const& points) {\n// if (points.size() < 2) {\n// \t\treturn 0;\n// \t}\n// \tdouble min_dist = std::numeric_limits<double>::max();\n// \tfor (int i = 0; i < points.size(); ++i) {\n// \t\tfor (int j = i + 1; j < points.size(); ++j) {\n// \t\t\tdouble dist = distance(points[i], points[j]);\n// \t\t\tif (dist < min_dist) {\n// \t\t\t\tmin_dist = dist;\n// \t\t\t}\n// \t\t}\n// \t}\n// \treturn min_dist;\n// }\n\n// MPI implementation of closestPair\n#include <mpi.h>\n\nstruct Point {\n\tdouble x, y;\n};\n\ndouble distance(Point const& p1, Point const& p2) {\n\treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n}\n\n/* Return the distance between the closest two points in the vector points.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of points. The final result is returned on rank 0.\n   Example: \n\n   input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n   output: 1.41421\n*/\ndouble closestPair(std::vector<Point> const& points) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct Point {\n\tdouble x, y;\n};\n\ndouble distance(Point const& p1, Point const& p2) {\n\treturn std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));\n}\n\n/* Return the distance between the closest two points in the vector points.\n   Example: \n\n   input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]\n   output: 1.41421\n*/\ndouble closestPair(std::vector<Point> const& points) {\nif (points.size() < 2) {\n\t\treturn 0;\n\t}\n\tdouble min_dist = std::numeric_limits<double>::max();\n\tfor (int i = 0; i < points.size(); ++i) {\n\t\tfor (int j = i + 1; j < points.size(); ++j) {\n\t\t\tdouble dist = distance(points[i], points[j]);\n\t\t\tif (dist < min_dist) {\n\t\t\t\tmin_dist = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}",
        "translation_function_name": "closestPair",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint local_start = world_rank * points.size() / world_size;\nint local_end = (world_rank + 1) * points.size() / world_size;\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3734936046,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7484600476,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3742177819,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1875095394,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.094590906775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0473546381875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0239472292875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01184595273438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005915909775,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00296096413594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163213047383,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_start = rank * points.size() / size;\nint local_end = (rank + 1) * points.size() / size;\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3733314898,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7494987346,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3736358775,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18749666695,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.094604629325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047489095675,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02394856405625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01183878381875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00591908884531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00297378009453,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158856352383,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint local_start = world_rank * points.size() / world_size;\nint local_end = (world_rank + 1) * points.size() / world_size;\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3736597842,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.750338129,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3741296785,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1875674181,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.094612036525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047390925675,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0239883066625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01187501542187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592908154063,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00297767168516,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156059452734,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_start = rank * (points.size() / size);\nint local_end = (rank == size - 1) ? points.size() : (rank + 1) * (points.size() / size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3727554458,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7486506312,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3741982245,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18754214215,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0945756956,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0474430603375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02391459358125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01187644134063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00593442414688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00296717208516,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163854188594,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble local_min_dist = std::numeric_limits<double>::max();\ndouble global_min_dist;\n\n// Each process computes its portion of the closest pair\nfor (int i = rank; i < n; i += size) {\n    for (int j = i + 1; j < n; ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\n// Reduce all local minimum distances to the global minimum distance\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min_dist\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3725082916,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3743284248,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1870740511,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0939473617,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04793782755,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0240765889,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01225589154375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00596289868125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00300687200938,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00149112661328,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008402422043,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_start = rank * (points.size() / size);\nint local_end = (rank == size - 1) ? points.size() : (rank + 1) * (points.size() / size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.372725355,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.748357182,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3741543298,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18749394365,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0946233545,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047415852325,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02390283665,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01186727133125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00593979793125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00296575560781,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00157604651953,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nint local_start = rank * (points.size() / size);\nint local_end = (rank == size - 1) ? points.size() : (rank + 1) * (points.size() / size);\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks do not need to return the distance\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3727392152,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3745787998,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.187151596,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09835004025,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.050298929225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.024094204525,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01203292815,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00595553684687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00298746647031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00152553629219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00085691165234,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_start = rank * (points.size() / size);\nint local_end = (rank == size - 1) ? points.size() : (rank + 1) * (points.size() / size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.372829032,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3741930986,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1872135664,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09831951785,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.050299196775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0241500019375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01204347055,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00595280940937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00299052340781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00168377508906,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083536080508,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble local_min_dist = std::numeric_limits<double>::max();\ndouble global_min_dist;\n\n// Each process computes its portion of the closest pair\nfor (int i = rank; i < n; i += size) {\n    for (int j = i + 1; j < n; ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\n// Reduce all local minimum distances to the global minimum distance\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min_dist\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.37266922,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3741448618,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1869588588,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09395495365,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04782738625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.024030161975,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01224256875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006002876075,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00301708244688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00149231494609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00081774730352,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_start = rank * (points.size() / size);\nint local_end = (rank + 1) * (points.size() / size);\nif (rank == size - 1) {\n    local_end = points.size();\n}\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3736278962,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7484544572,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3743493595,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1875513551,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0946645939,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0476775481625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02396007876875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01184642322812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00594338141719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00329803227891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00159318747852,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint n = points.size();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\n// Each process computes its portion of the closest pair\nint local_start = world_rank * n / world_size;\nint local_end = (world_rank + 1) * n / world_size;\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < n; ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\n// Reduce all local minimum distances to the global minimum distance\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min_dist\nif (world_rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3737777312,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7487516566,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3740145936,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1874934617,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09472170715,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0475290760875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.023975313025,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01187927234063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592536422031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00300481998203,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162121587773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\n// Each process computes its portion of the closest pair\nfor (int i = rank; i < n; i += size) {\n    for (int j = i + 1; j < n; ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\n// Reduce all local minimum distances to the global minimum distance\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min_dist\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.372759295,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3744614638,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1872420345,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09397023315,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047862309475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0240084231875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01226442921875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00598673735938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00299984349688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00159047839375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008634597207,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint local_start = world_rank * points.size() / world_size;\nint local_end = (world_rank + 1) * points.size() / world_size;\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3736664286,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7484600474,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3742203145,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18748192215,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09465227425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0474518499375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0239509638125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01182817889687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592275998906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00303936945313,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00159093646758,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = points.size();\ndouble local_min_dist = std::numeric_limits<double>::max();\n\n// Each process computes its portion of the closest pair\nfor (int i = rank; i < n; i += size) {\n    for (int j = i + 1; j < n; ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\n// Reduce all local minimum distances to the global minimum distance at rank 0\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min_dist, other ranks will have an undefined value\nreturn rank == 0 ? global_min_dist : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3726427342,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.374127027,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1871866275,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09394194835,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047803115125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0239596431875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01225668819375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00598355863125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00303719095625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00157130789531,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008397357832,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint local_start = world_rank * points.size() / world_size;\nint local_end = (world_rank + 1) * points.size() / world_size;\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3737038726,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.748864036,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3747681047,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18752865685,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.094565978875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047526265125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02396445499375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01183151150312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592355849688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00297019732812,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156606641641,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nint local_start = rank * (points.size() / size);\nint local_end = (rank == size - 1) ? points.size() : (rank + 1) * (points.size() / size);\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = i + 1; j < points.size(); ++j) {\n        double dist = distance(points[i], points[j]);\n        if (dist < local_min_dist) {\n            local_min_dist = dist;\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3725757086,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3745515212,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.187128487,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09839895295,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.050274577925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.024130764025,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0120253050625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00596190579375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029753881125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00151465255547,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083710443281,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nint local_start = rank * (points.size() / size);\nint local_end = (rank == size - 1) ? points.size() : (rank + 1) * (points.size() / size);\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3726431952,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7488178072,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3741411549,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1875089144,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09463867895,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047471944525,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02395388740625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01182909035,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592581194844,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00306703778828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162012193437,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nint local_start = rank * points.size() / size;\nint local_end = (rank + 1) * points.size() / size;\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3733630736,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7491270776,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3742656615,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18753010115,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.094636425725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0475369855125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02394895940625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01183737862188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592348859375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00301392512891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00161966914531,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_dist = std::numeric_limits<double>::max();\nint local_start = rank * (points.size() / size);\nint local_end = (rank == size - 1) ? points.size() : (rank + 1) * (points.size() / size);\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3726207686,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.748998542,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3741880409,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1875023027,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09467075575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047410117025,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0239938142375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0118437936625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592579935313,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00298442484453,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162472768203,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\nint local_start = world_rank * points.size() / world_size;\nint local_end = (world_rank + 1) * points.size() / world_size;\ndouble local_min_dist = std::numeric_limits<double>::max();\n\nfor (int i = local_start; i < local_end; ++i) {\n    for (int j = 0; j < points.size(); ++j) {\n        if (i != j) {\n            double dist = distance(points[i], points[j]);\n            if (dist < local_min_dist) {\n                local_min_dist = dist;\n            }\n        }\n    }\n}\n\ndouble global_min_dist;\nMPI_Reduce(&local_min_dist, &global_min_dist, 1, MPI_DOUBLE, MPI_MIN, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    return global_min_dist;\n} else {\n    return 0; // Non-root processes return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.3737806252,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.7490231332,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.374163089,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.187469667,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.094679683275,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0474179344125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02396778155,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01183396369375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592663222656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00302661347891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00159857878398,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "16_graph_largest_component",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The result is returned on rank 0.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint largestComponent(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of largestComponent\n// /* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n//    output: 2\n// */\n// int largestComponent(std::vector<int> const& A, size_t N) {\n// std::vector<bool> visited(N, false);\n//   std::vector<int> component(N, 0);\n//   int max_component = 0;\n// \n//   for (size_t i = 0; i < N; i++) {\n//     if (!visited[i]) {\n//       int size = 0;\n//       std::queue<int> q;\n//       q.push(i);\n//       visited[i] = true;\n//       while (!q.empty()) {\n//         int v = q.front();\n//         q.pop();\n//         size++;\n//         for (size_t j = 0; j < N; j++) {\n//           if (A[v * N + j] == 1 &&!visited[j]) {\n//             q.push(j);\n//             visited[j] = true;\n//           }\n//         }\n//       }\n//       component[i] = size;\n//       max_component = std::max(max_component, size);\n//     }\n//   }\n// \n//   return max_component;\n// }\n\n// MPI implementation of largestComponent\n#include <mpi.h>\n\n/* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The result is returned on rank 0.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint largestComponent(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint largestComponent(std::vector<int> const& A, size_t N) {\nstd::vector<bool> visited(N, false);\n  std::vector<int> component(N, 0);\n  int max_component = 0;\n\n  for (size_t i = 0; i < N; i++) {\n    if (!visited[i]) {\n      int size = 0;\n      std::queue<int> q;\n      q.push(i);\n      visited[i] = true;\n      while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        size++;\n        for (size_t j = 0; j < N; j++) {\n          if (A[v * N + j] == 1 &&!visited[j]) {\n            q.push(j);\n            visited[j] = true;\n          }\n        }\n      }\n      component[i] = size;\n      max_component = std::max(max_component, size);\n    }\n  }\n\n  return max_component;\n}",
        "translation_function_name": "largestComponent",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks do not need to return the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0821839196,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779801768,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0777942048,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08068511725,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07989332095,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0787816058875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079499470725,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07980322414062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07928532848594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07945134484922,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08062521306953,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\nint local_max = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max = std::max(local_max, size);\n  }\n}\n\nMPI_Reduce(&local_max, &max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n  return max_component;\n} else {\n  return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0821093614,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0790853628,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0777937827,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08091098755,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.080045096,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0786162047125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0811259355,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07997947685312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0790205937625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0792349849625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08123675509258,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Non-root ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822484602,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779862504,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0777788156,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08095163005,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.080125311125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783693184875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0838850040625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07987388813437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07958892707187,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07914926655,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08060121965117,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    max_component = std::max(max_component, size);\n  }\n}\n\nMPI_Reduce(&max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Non-root ranks return 0 or could return some other value indicating they are not the root.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822131682,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0780022004,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0781075371,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08047662085,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079926593925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0786836327125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07903602256875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.080264575725,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07960860908594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07917489398594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08072541358945,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.082395873,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079261814,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0780613235,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0807527215,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0800539965,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078742004,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08422254915625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07875244198125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07894174752344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07916780778594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0803809615,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> local_component(size, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int local_size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      local_size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    local_component[rank] = local_size;\n    local_max_component = std::max(local_max_component, local_size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nreturn rank == 0 ? global_max_component : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822677548,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0736951268,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0733865865,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0761007464,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.075644625575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0742120941125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0747476396875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0755129082125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0752710204875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07517038043594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07610432151562,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0818876632,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779534994,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0776865977,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0802993483,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079877407775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078618087025,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.080291337225,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07876811779375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07939953475,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07946478833281,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08053686839531,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 returns the result\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0824046736,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0780103058,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779962089,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08087097205,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079935908775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07866670125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07917405799375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078947801625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07966433776719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08002836754062,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08051969276211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks do not need to return the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0821782324,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783291,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0785687767,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0804199097,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.080152453675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0784743382,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0794849873375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08418045333125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07915770720938,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07955183849922,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08029567757617,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_component\nif (world_rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks do not have the correct value to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822021136,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0788624762,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0780488215,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08045529845,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079946592375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0789031439375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07932899665625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07920013765937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07915599663281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07926387884141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08201574413828,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks do not need to return the correct value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822352958,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.077956102,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0778391971,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0804842942,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079761869625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0786595081375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07951333289375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07922681755937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07974167757813,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07947517515391,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08086421039492,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Non-root ranks return 0 or could return an invalid value as they are not used.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822642762,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0787983862,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0778637863,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0805331521,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07970907565,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078726310125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08102260320625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0798081685625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07941049692969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07957086594141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08154641694219,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    max_component = std::max(max_component, size);\n  }\n}\n\n// Reduce all local max_component values to the global max_component on rank 0\nMPI_Reduce(&max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 returns the result, other ranks return 0 or an undefined value\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // or MPI can be set up to not require a return value from other ranks\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822351022,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0789934272,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.077864289,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0805097093,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.080127709375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0785325275625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07929904721875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0794279099,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07949057397656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07961069129844,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08071832960312,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 returns the result\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0823567586,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779664852,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0781392438,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0809590402,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079902577275,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0787622956625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0796127119375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07910853990312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07972590139063,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07945496297891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08096034989414,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = world_rank; i < N; i += world_size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822185094,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0781259846,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0778522894,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08060763125,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079976201175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078551651125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079071464475,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0791222222125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07980020928594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07916585811875,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08075731440234,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int local_size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      local_size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = local_size;\n    max_component = std::max(max_component, local_size);\n  }\n}\n\n// Reduce all local maxima to the global maximum at rank 0\nMPI_Reduce(&max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 returns the result\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0821735772,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779031882,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779439677,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0809999104,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.080163851925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07854138335,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0794991438875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07963510722812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07942930825625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07915018165,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08049977735664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\nint local_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct max_component\nif (rank == 0) {\n  return max_component;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822148984,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07794243,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0778398091,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08090927085,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0799680062,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0788757353625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0797288474,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07903236838125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07906818031406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07917292423047,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08104004379922,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_component\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks do not have the correct value to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0820220354,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078051014,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0777499839,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08087068425,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079917140775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0784644453,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07943866195,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07904265645,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07925383152656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08010889818203,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08073326108555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint local_max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = size;\n    local_max_component = std::max(local_max_component, size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&local_max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_component\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks do not have the correct value to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0822518872,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0780200996,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0778024862,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08065886775,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079697140325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07866491375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07936754783125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07891117634688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07945629771719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07947061147891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08051948819648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nstd::vector<int> component(N, 0);\nint max_component = 0;\nint global_max_component = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n  if (!visited[i]) {\n    int local_size = 0;\n    std::queue<int> q;\n    q.push(i);\n    visited[i] = true;\n    while (!q.empty()) {\n      int v = q.front();\n      q.pop();\n      local_size++;\n      for (size_t j = 0; j < N; j++) {\n        if (A[v * N + j] == 1 && !visited[j]) {\n          q.push(j);\n          visited[j] = true;\n        }\n      }\n    }\n    component[i] = local_size;\n    max_component = std::max(max_component, local_size);\n  }\n}\n\n// Reduce all local max components to the global max component on rank 0\nMPI_Reduce(&max_component, &global_max_component, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_component\nif (rank == 0) {\n  return global_max_component;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0820558694,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779374004,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0781087345,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08075013885,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.079757066,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0787843092625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07909058829375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08533241355,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0797663443375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07925451616953,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08043923852422,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "18_graph_count_components",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n\t Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The component count is returned on rank 0.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint componentCount(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of componentCount\n// /* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n//    output: 2\n// */\n// int componentCount(std::vector<int> const& A, size_t N) {\n// std::vector<bool> visited(N, false);\n//     int count = 0;\n// \n//     for (size_t i = 0; i < N; ++i) {\n//         if (!visited[i]) {\n//             ++count;\n//             std::stack<size_t> stack;\n//             stack.push(i);\n//             visited[i] = true;\n// \n//             while (!stack.empty()) {\n//                 size_t node = stack.top();\n//                 stack.pop();\n// \n//                 for (size_t j = 0; j < N; ++j) {\n//                     if (A[node * N + j] &&!visited[j]) {\n//                         stack.push(j);\n//                         visited[j] = true;\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// \n//     return count;\n// }\n\n// MPI implementation of componentCount\n#include <mpi.h>\n\n/* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n\t Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The component count is returned on rank 0.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint componentCount(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Count the number of connected components in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n   output: 2\n*/\nint componentCount(std::vector<int> const& A, size_t N) {\nstd::vector<bool> visited(N, false);\n    int count = 0;\n\n    for (size_t i = 0; i < N; ++i) {\n        if (!visited[i]) {\n            ++count;\n            std::stack<size_t> stack;\n            stack.push(i);\n            visited[i] = true;\n\n            while (!stack.empty()) {\n                size_t node = stack.top();\n                stack.pop();\n\n                for (size_t j = 0; j < N; ++j) {\n                    if (A[node * N + j] &&!visited[j]) {\n                        stack.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n    }\n\n    return count;\n}",
        "translation_function_name": "componentCount",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.08213927,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0848387794,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0851394035,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint global_count = 0;\nint local_count = 0;\nstd::vector<bool> visited(N, false);\nint rank, size;\n\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will work on a part of the graph\nsize_t chunk_size = N / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? N : start + chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all processes\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0827517024,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083096267,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0825873172,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\n// Each process will work on a part of the graph\nsize_t chunk_size = N / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? N : start + chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0821289108,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0821993106,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0821699653,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint global_count = 0;\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\n\n// Each process will start DFS from different nodes\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Synchronize visited information across all ranks\nstd::vector<int> all_visited(N);\nMPI_Allreduce(visited.data(), all_visited.data(), N, MPI_INT, MPI_LOR, MPI_COMM_WORLD);\n\n// Update visited information\nfor (size_t i = 0; i < N; ++i) {\n    visited[i] = all_visited[i];\n}\n\n// Only rank 0 will have the correct global_count\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks do not have the correct count\n}\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.082145678,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0849308542,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0848834703,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0822059428,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0847545074,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0847965806,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0822274974,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.084769273,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0848048231,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0822110066,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0848882666,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0848838904,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Synchronize the visited information across all processes\nstd::vector<int> visited_int(visited.begin(), visited.end());\nstd::vector<int> global_visited(N);\nMPI_Allreduce(visited_int.data(), global_visited.data(), N, MPI_INT, MPI_LOR, MPI_COMM_WORLD);\n\n// Update the visited vector with the global information\nfor (size_t i = 0; i < N; ++i) {\n    visited[i] = global_visited[i];\n}\n\n// Only rank 0 will have the correct global_count\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks do not have the correct count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0771097926,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0756624132,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0758719147,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint global_count = 0;\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\n\n// Each process will start a DFS from different nodes\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Synchronize all ranks before returning the result\nMPI_Barrier(MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_count\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks return 0 or an undefined value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0821873706,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0797111574,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0797633196,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint global_count = 0;\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Synchronize visited information across all ranks\nstd::vector<int> all_visited(N);\nfor (size_t i = 0; i < N; ++i) {\n    all_visited[i] = visited[i] ? 1 : 0;\n}\nstd::vector<int> global_visited(N);\nMPI_Allreduce(all_visited.data(), global_visited.data(), N, MPI_INT, MPI_LOR, MPI_COMM_WORLD);\n\n// Correct the global count on rank 0\nif (rank == 0) {\n    for (size_t i = 0; i < N; ++i) {\n        if (global_visited[i]) {\n            for (size_t j = 0; j < N; ++j) {\n                if (A[i * N + j] && global_visited[j]) {\n                    --global_count;\n                    break;\n                }\n            }\n        }\n    }\n}\n\nreturn rank == 0 ? global_count : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0771415216,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0754224106,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0823103966,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.084782476,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0850165814,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\n// Each process will work on a part of the graph\nsize_t start = (N / size) * rank;\nsize_t end = (rank == size - 1) ? N : (N / size) * (rank + 1);\n\nfor (size_t i = start; i < end; ++i) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all processes\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.082318516,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08222875,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0822283774,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.082283102,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0847192394,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0877397537,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.082310493,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0847423126,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0847262268,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint global_count = 0;\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\n\n// Each process will start DFS from different nodes\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0822673344,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0797245666,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0796730905,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Synchronize the visited information across all ranks\nstd::vector<int> visited_int(visited.begin(), visited.end());\nstd::vector<int> global_visited(N);\nMPI_Allreduce(visited_int.data(), global_visited.data(), N, MPI_INT, MPI_LOR, MPI_COMM_WORLD);\n\n// Update the visited vector with the global information\nfor (size_t i = 0; i < N; ++i) {\n    visited[i] = global_visited[i];\n}\n\n// Only rank 0 will have the correct count, other ranks will have 0\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.077084306,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0757101188,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0758767508,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the global count to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0821992828,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0847830132,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0847022886,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all ranks\nMPI_Bcast(&global_count, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_count;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0822534118,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.084963191,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.084803625,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<bool> visited(N, false);\nint local_count = 0;\nint global_count = 0;\n\nfor (size_t i = rank; i < N; i += size) {\n    if (!visited[i]) {\n        ++local_count;\n        std::stack<size_t> stack;\n        stack.push(i);\n        visited[i] = true;\n\n        while (!stack.empty()) {\n            size_t node = stack.top();\n            stack.pop();\n\n            for (size_t j = 0; j < N; ++j) {\n                if (A[node * N + j] && !visited[j]) {\n                    stack.push(j);\n                    visited[j] = true;\n                }\n            }\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    // Correct the overcounting due to parallelism\n    for (size_t i = 1; i < size; ++i) {\n        global_count -= (i < N) ? 1 : 0;\n    }\n    return global_count;\n} else {\n    return 0;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0821375906,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.082540246,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0824256221,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08568500865,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.084418332075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08322668625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08396811849375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083651391625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08413937863125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08410343354609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08521768051094,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "15_graph_edge_count",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The result is returned on rank 0.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of edgeCount\n// /* Count the number of edges in the directed graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n//    Example:\n// \n// \t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n//    output: 3\n// */\n// int edgeCount(std::vector<int> const& A, size_t N) {\n// int count = 0;\n//   for (size_t i = 0; i < N; ++i) {\n//     for (size_t j = 0; j < N; ++j) {\n//       if (A[i * N + j] == 1) {\n//         ++count;\n//       }\n//     }\n//   }\n//   return count;\n// }\n\n// MPI implementation of edgeCount\n#include <mpi.h>\n\n/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The result is returned on rank 0.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A represents a directed graph.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(std::vector<int> const& A, size_t N) {\nint count = 0;\n  for (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n      if (A[i * N + j] == 1) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}",
        "translation_function_name": "edgeCount",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return total_count;\n} else {\n    return 0; // Other ranks do not return the edge count.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0024079168,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641639352,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0319943959,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01847281185,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00993385645,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045736301125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034550366625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00209750010625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00178475456406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00087227023125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00100454594258,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return total_count;\n} else {\n    return 0; // Non-root ranks return a default value.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0026184038,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0646136358,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0321060929,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0184822985,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0098810429,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004507833875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00303023956875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001751704825,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00188046137812,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094896940156,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00114215709375,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++local_count;\n    }\n  }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn (rank == 0) ? total_count : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002624247,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641533684,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320635019,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0185090102,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0100194375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004538279275,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00284935058125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00167336975625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0012490707375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00080681221094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00104570117617,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++local_count;\n    }\n  }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return total_count;\n} else {\n  return 0; // Non-root ranks return 0 or could return a meaningless value as they don't use the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0026222486,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641330922,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320882003,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0184605247,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00993785445,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004472160975,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00289680535,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00276875294688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00128320525,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107188757578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101611889766,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return total_count;\n} else {\n    return 0; // Other ranks do not return the edge count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0025287158,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0650113478,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320475437,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0185242617,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009855651175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045406293375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00287785758125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162871730625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00132887998438,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101222106484,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00112416832227,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Non-root ranks return 0 or could return an undefined value as only rank 0's output is used.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002407406,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0642906556,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.032007575,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0185044856,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01001931905,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045698692375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00346482395,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00212058420938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131919015937,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107903432109,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00096568669727,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\n\n// Calculate the number of rows each process should work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process counts the edges in its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to the total count on rank 0\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn (rank == 0) ? total_count : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0025904716,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641382036,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320143669,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0189912524,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009839344175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00459581855,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029490975375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00217197227813,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00141071000313,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00099316333828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00102031243359,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\n\n// Each process computes its part of the count\nfor (size_t i = rank; i < N; i += size) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_count\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks do not have the correct count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0024246604,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0642018162,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0322014524,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01863292625,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010059165925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0046364534875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00303445110625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00307054413125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134127341719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00125605462031,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00097907885469,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Non-root ranks return 0 or could return a non-significant value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002487723,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641360672,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320260056,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01847743385,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009877096425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004486911375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029333911375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023510975,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00217769845469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103091251641,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00093158245469,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process counts the edges in its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to a global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Return the result from rank 0\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks do not have the final result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.00260233,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.064195701,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0319989125,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01849195315,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0144696228,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004531522875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002823169125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00229579955625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011665905875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106935338984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105452647422,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\n\n// Each process computes its part of the count\nfor (size_t i = rank; i < N; i += size) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_count\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks do not have the correct count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0025543414,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0646940174,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0323911662,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0189191343,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009962737875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045693935625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028416738375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00225686717188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00231204530312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00110372076563,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094513348633,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++local_count;\n    }\n  }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return total_count;\n} else {\n  return 0; // Other ranks do not have the final count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0026149216,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.06405776,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320443066,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01852847815,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009855009825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00448722125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032532033625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00288605957187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00169189772656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00123118196406,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00099533294883,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\n\n// Each process computes its part of the count\nfor (size_t i = rank; i < N; i += size) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to the global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_count\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks do not have the correct count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002620598,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0648129366,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0322390722,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0185650663,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00998402975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045825214875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031555103625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031568068875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00114182275469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00104497566406,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101600147773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\n\n// Each process computes its portion of the count\nfor (size_t i = rank; i < N; i += size) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to a global count on rank 0\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn rank == 0 ? global_count : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002558856,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0644167152,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0323866059,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01876530345,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009904632275,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004452256975,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00378374898125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002924092175,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014872092,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00102467900469,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106524931836,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\n\n// Calculate the number of rows each process should work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process counts the edges in its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to the total count on rank 0\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct total_count\nif (rank == 0) {\n    return total_count;\n} else {\n    return 0; // Other ranks do not have the correct count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0025968712,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0639797774,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320733993,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01849011965,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0099125926,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0044444080625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002934423,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00272649156562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013652507,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094771895547,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00096642555469,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Non-root ranks return 0 or could return an undefined value as they don't hold the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002558646,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0650700388,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320227781,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01844457565,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01000393065,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045876053125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00288316586875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00299456245,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00161212713281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00099899777734,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105789553555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint global_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_count;\n} else {\n    return 0; // Other ranks do not have the final count.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0025494424,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0645348228,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320170065,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0190389716,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009857695225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00456982435,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00298857755,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158617489688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00113689875937,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00118528619297,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106255982188,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return total_count;\n} else {\n    return 0; // Other ranks do not need to return the edge count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.002568436,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641896552,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320020263,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0190719554,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009719774375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00451593905,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00295437040625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00320786719687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00111517548438,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00100577893984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010658554625,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process counts the edges in its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\n// Reduce all local counts to the total count on rank 0\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn (rank == 0) ? total_count : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0025884958,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641035296,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320900294,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01847011615,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00990822105,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045580566625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029302863625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00171129790938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00148419019844,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101039108516,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00104113665508,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_count = 0;\nint total_count = 0;\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++local_count;\n        }\n    }\n}\n\nMPI_Reduce(&local_count, &total_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return total_count;\n} else {\n    return 0; // Non-zero ranks do not have the final count\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0025938798,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0641331936,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320627618,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01843996435,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009857572975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045096919875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00380923621875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00589629266875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00239687789687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00114398719375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101257313398,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "17_graph_highest_degree",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The result is returned on rank 0.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(std::vector<int> const& A, size_t N) {",
        "translation_prompt": "// Serial implementation of maxDegree\n// /* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n//    output: 3\n// */\n// int maxDegree(std::vector<int> const& A, size_t N) {\n// int max_degree = 0;\n//   for (size_t i = 0; i < N; ++i) {\n//     int degree = 0;\n//     for (size_t j = 0; j < N; ++j) {\n//       if (A[i * N + j] == 1) {\n//         ++degree;\n//       }\n//     }\n//     if (degree > max_degree) {\n//       max_degree = degree;\n//     }\n//   }\n//   return max_degree;\n// }\n\n// MPI implementation of maxDegree\n#include <mpi.h>\n\n/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The result is returned on rank 0.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(std::vector<int> const& A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(std::vector<int> const& A, size_t N) {\nint max_degree = 0;\n  for (size_t i = 0; i < N; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n      if (A[i * N + j] == 1) {\n        ++degree;\n      }\n    }\n    if (degree > max_degree) {\n      max_degree = degree;\n    }\n  }\n  return max_degree;\n}",
        "translation_function_name": "maxDegree",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint max_degree = 0;\nint global_max_degree = 0;\nint rank, size;\n\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process computes the max degree of its rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > max_degree) {\n        max_degree = degree;\n    }\n}\n\n// Reduce the local max degrees to the global max degree on rank 0\nMPI_Reduce(&max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks don't have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0106253352,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0180214254,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055196558,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00820920225,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005541176075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002972913625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040577633375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00240731217188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00235707788594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00237702523594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00324633367422,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint max_degree = 0;\nint global_max_degree = 0;\nint rank, size;\n\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Compute the number of rows each process will handle\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process computes the max degree of its rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > max_degree) {\n        max_degree = degree;\n    }\n}\n\n// Reduce the local max degrees to the global max degree\nMPI_Reduce(&max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0095361842,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0108634966,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053783387,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0080678446,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005149455725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00247978805,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002409967675,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00434768525,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00309144969375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00284095795234,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00335217063242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint max_degree = 0;\nint global_max_degree = 0;\nint rank, size;\n\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process computes its portion of the max degree\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > max_degree) {\n        max_degree = degree;\n    }\n}\n\n// Reduce the local max degrees to the global max degree on rank 0\nMPI_Reduce(&max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.009505389,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0108492796,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005944597,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0087043661,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005407374325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026050966,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0024703731875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036823377125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031369342875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00205974938672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00317782503086,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes its portion of the matrix\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce the local maxima to find the global maximum\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return -1; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0108962978,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011072404,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055222971,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0083989602,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062934862,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00276998,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00471775285625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00319489976875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00260090242969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00244200993281,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00312197022461,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process will handle a roughly equal portion of the rows\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > local_max_degree) {\n        local_max_degree = degree;\n    }\n}\n\n// Reduce all local max degrees to the global max degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks do not have the correct value to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.00978867,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0110616658,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0054892267,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00868693585,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00612266035,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002725924825,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0047736994625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00255936212187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002628839175,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030274348125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00311442203672,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process will handle a roughly equal portion of the rows\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce all local max degrees to the global max degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks do not have the correct value to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0108895514,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011051285,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0056237304,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00824198505,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006061072725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002555900825,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003682645575,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00278590065312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00329659305312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00230521393359,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00540245802812,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes a portion of the rows\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce the local max degrees to the global max degree\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0111174668,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0114270114,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055042731,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0084290932,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061185518,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0025123562125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026774182,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00298875239375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00244256454063,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00248488895156,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00342867311719,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes its portion of the matrix\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce all local max degrees to the global max degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks do not have the correct value to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0112052594,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0112775918,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0057874554,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0082970631,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00590300355,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031078989625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004089941575,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00210645700625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00245422370781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00279977129297,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00297673139648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint max_degree = 0;\nint global_max_degree = 0;\nint rank, size;\n\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process computes its local maximum degree\nfor (size_t i = start_row; i < end_row; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > max_degree) {\n        max_degree = degree;\n    }\n}\n\n// Reduce all local maxima to the global maximum degree on rank 0\nMPI_Reduce(&max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0107594576,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0110428148,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0054539118,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0083440648,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005486658425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00280585515,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00370720584375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00236616475313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00222907060781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00256366908828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00302236879609,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint max_degree = 0;\nint global_max_degree = 0;\nint rank, size;\n\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process computes the local maximum degree\nfor (size_t i = start_row; i < end_row; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > max_degree) {\n        max_degree = degree;\n    }\n}\n\n// Reduce the local maximum degrees to the global maximum degree\nMPI_Reduce(&max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0107015806,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0113548162,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055653768,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00903565885,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005226978325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029493848875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00312498854375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00253726426563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00273261765156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0024508838875,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00319754621875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes its portion of the matrix\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce all local max degrees to the global max degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0106813408,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0114258034,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0054454566,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00833353535,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005942629325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028947516,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002750886975,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00224701344062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207626432969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00261221577969,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00315833128672,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Compute the local maximum degree for each process\nfor (size_t i = rank; i < N; i += size) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce all local maximum degrees to the global maximum degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.010294842,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0131607058,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0065954106,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0086365416,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005860928775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002102380125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002361174225,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00259237675938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00247192870625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00275965196172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00307793843594,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Compute the local maximum degree\nfor (size_t i = start_row; i < end_row; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce all local maximum degrees to the global maximum degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0097760128,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0109826198,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0082698005,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00806008715,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005746193325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026699372625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00324289373125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00261782275625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00313081516406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00292962835859,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00328864410117,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint max_degree = 0;\nint global_max_degree = 0;\nint rank, size;\n\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Compute the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n// Each process computes the max degree of its rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > max_degree) {\n        max_degree = degree;\n    }\n}\n\n// Reduce the local max degrees to the global max degree on rank 0\nMPI_Reduce(&max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0107299664,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0111395066,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055077933,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0083448187,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006408214375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026250117125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003018126675,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00249876731563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00264443294063,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00247011851563,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00327131027656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes its part of the max degree\nfor (size_t i = rank; i < N; i += size) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > local_max_degree) {\n        local_max_degree = degree;\n    }\n}\n\n// Reduce all local max degrees to the global max degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0107401112,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011096786,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060757378,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0086666297,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006351248675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0022601949,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00288375014375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00310051809062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00243162480313,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00293748186328,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00302558733086,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes a portion of the degrees\nfor (size_t i = rank; i < N; i += size) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce the local maxima to find the global maximum\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct result\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0107184204,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0109498168,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059502705,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00880419145,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062357833,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021059276125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042631779625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028310376375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00271003305469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00312439934062,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00354506101563,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes a part of the degrees\nfor (size_t i = rank; i < N; i += size) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        if (A[i * N + j] == 1) {\n            ++degree;\n        }\n    }\n    if (degree > local_max_degree) {\n        local_max_degree = degree;\n    }\n}\n\n// Reduce the local max degrees to the global max degree\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n    return global_max_degree;\n} else {\n    return 0; // Other ranks do not have the correct value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0097098784,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0141267262,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059437173,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0082098146,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005533677175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002188553825,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00449505435625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00179779671562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00269032552656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00267004517266,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031571501918,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes a portion of the degrees\nfor (size_t i = rank; i < N; i += size) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce all local max degrees to the global max degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks return a default value, typically not used.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0108528844,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01087184,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008372294,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00963373565,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0057255968,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0025190806125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00362074138125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00506297131563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00324729751719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00288801852734,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00324871888594,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes its portion of the matrix\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce the local max degrees to the global max degree\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks do not have the correct value to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0108533516,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0108746156,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0054756481,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00861804775,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0056523471,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023063868625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032947938375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00431673390937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023508211125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00284683540859,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00295377671914,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_max_degree = 0;\nint global_max_degree = 0;\n\n// Each process computes its part of the max degree\nfor (size_t i = rank; i < N; i += size) {\n  int degree = 0;\n  for (size_t j = 0; j < N; ++j) {\n    if (A[i * N + j] == 1) {\n      ++degree;\n    }\n  }\n  if (degree > local_max_degree) {\n    local_max_degree = degree;\n  }\n}\n\n// Reduce all local max degrees to the global max degree on rank 0\nMPI_Reduce(&local_max_degree, &global_max_degree, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_max_degree\nif (rank == 0) {\n  return global_max_degree;\n} else {\n  return 0; // Other ranks do not have the correct value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0096532166,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010838484,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059558521,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0085966994,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00561610805,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0024554227,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00317968380625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00935772223125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00312625441719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00262933294141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00332766202578,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "19_graph_shortest_path",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The shortest path length is returned on rank 0.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {",
        "translation_prompt": "// Serial implementation of shortestPathLength\n// /* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Example:\n// \n// \t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n//    output: 2\n// */\n// int shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {\n// std::vector<int> dist(N, INT_MAX);\n// \tstd::vector<int> prev(N, -1);\n// \tstd::queue<int> q;\n// \tq.push(source);\n// \tdist[source] = 0;\n// \twhile (!q.empty()) {\n// \t\tint u = q.front();\n// \t\tq.pop();\n// \t\tfor (int v = 0; v < N; ++v) {\n// \t\t\tif (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n// \t\t\t\tdist[v] = dist[u] + 1;\n// \t\t\t\tprev[v] = u;\n// \t\t\t\tq.push(v);\n// \t\t\t}\n// \t\t}\n// \t}\n// \tif (dist[dest] == INT_MAX) {\n// \t\treturn -1;\n// \t}\n// \tint path_len = 0;\n// \twhile (prev[dest]!= -1) {\n// \t\tpath_len++;\n// \t\tdest = prev[dest];\n// \t}\n// \treturn path_len;\n// }\n\n// MPI implementation of shortestPathLength\n#include <mpi.h>\n\n/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. The shortest path length is returned on rank 0.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(std::vector<int> const& A, size_t N, int source, int dest) {\nstd::vector<int> dist(N, INT_MAX);\n\tstd::vector<int> prev(N, -1);\n\tstd::queue<int> q;\n\tq.push(source);\n\tdist[source] = 0;\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int v = 0; v < N; ++v) {\n\t\t\tif (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n\t\t\t\tdist[v] = dist[u] + 1;\n\t\t\t\tprev[v] = u;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tif (dist[dest] == INT_MAX) {\n\t\treturn -1;\n\t}\n\tint path_len = 0;\n\twhile (prev[dest]!= -1) {\n\t\tpath_len++;\n\t\tdest = prev[dest];\n\t}\n\treturn path_len;\n}",
        "translation_function_name": "shortestPathLength",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\n\nwhile (true) {\n    int active = !q.empty();\n    MPI_Bcast(&active, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (!active) break;\n\n    int u;\n    if (rank == 0) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int v = rank; v < N; v += size) {\n        if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n            dist[v] = dist[u] + 1;\n            prev[v] = u;\n            if (rank == 0) {\n                q.push(v);\n            }\n        }\n    }\n\n    MPI_Gather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, &dist[0], N, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Gather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, &prev[0], N, MPI_INT, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] != INT_MAX) {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.010188318,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.038018246,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nint path_len = -1;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nwhile (!q.empty()) {\n    int local_size = q.size() / size;\n    if (rank == 0) {\n        local_size += q.size() % size; // Rank 0 takes the extra work if not evenly divisible\n    }\n\n    std::vector<int> local_nodes(local_size);\n    std::vector<int> local_dists(local_size, INT_MAX);\n\n    for (int i = 0; i < local_size; ++i) {\n        local_nodes[i] = q.front();\n        q.pop();\n    }\n\n    for (int i = 0; i < local_size; ++i) {\n        int u = local_nodes[i];\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                local_dists[i] = dist[u] + 1;\n                prev[v] = u;\n                q.push(v);\n            }\n        }\n    }\n\n    // Gather all local distances at rank 0\n    std::vector<int> all_dists(N, INT_MAX);\n    MPI_Reduce(local_dists.data(), all_dists.data(), N, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n    if (rank == 0) {\n        for (int i = 0; i < N; ++i) {\n            if (all_dists[i] < dist[i]) {\n                dist[i] = all_dists[i];\n            }\n        }\n    }\n\n    // Broadcast updated distances and prev arrays to all ranks\n    MPI_Bcast(dist.data(), N, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Bcast(prev.data(), N, MPI_INT, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nint path_len = -1;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nwhile (true) {\n    int local_q_size;\n    if (rank == 0) {\n        local_q_size = q.size();\n    }\n    MPI_Bcast(&local_q_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (local_q_size == 0) break;\n\n    std::vector<int> current_nodes(local_q_size);\n    if (rank == 0) {\n        for (int i = 0; i < local_q_size; ++i) {\n            current_nodes[i] = q.front();\n            q.pop();\n        }\n    }\n\n    MPI_Bcast(current_nodes.data(), local_q_size, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int i = rank; i < local_q_size; i += size) {\n        int u = current_nodes[i];\n        for (int v = 0; v < N; ++v) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n\n    MPI_Bcast(dist.data(), N, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Bcast(prev.data(), N, MPI_INT, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0101700324,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0284243862,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0145804696,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00763030755,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00604581975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0039588648,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0025409565875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00302253243125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00540775887656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01292620444375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01610857606172,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n    MPI_Bcast(&done, 1, MPI_C_BOOL, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        return -1;\n    }\n    path_len = 0;\n    while (prev[dest] != -1) {\n        path_len++;\n        dest = prev[dest];\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0102502102,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0377445686,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_found = 0;\nwhile (!path_found) {\n    int local_u = -1;\n    if (rank == 0 && !q.empty()) {\n        local_u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&local_u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (local_u == -1) break;\n\n    for (int v = rank; v < N; v += size) {\n        if (A[local_u * N + v] == 1 && dist[v] == INT_MAX) {\n            dist[v] = dist[local_u] + 1;\n            prev[v] = local_u;\n            if (rank == 0) {\n                q.push(v);\n            }\n        }\n    }\n\n    int local_path_found = (dist[dest] != INT_MAX) ? 1 : 0;\n    MPI_Reduce(&local_path_found, &path_found, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n}\n\nif (rank != 0) {\n    MPI_Gather(&dist[0], N, MPI_INT, NULL, N, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Gather(&prev[0], N, MPI_INT, NULL, N, MPI_INT, 0, MPI_COMM_WORLD);\n} else {\n    std::vector<int> recv_dist(N * size);\n    std::vector<int> recv_prev(N * size);\n    MPI_Gather(&dist[0], N, MPI_INT, &recv_dist[0], N, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Gather(&prev[0], N, MPI_INT, &recv_prev[0], N, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int i = 0; i < size; ++i) {\n        for (int j = 0; j < N; ++j) {\n            if (recv_dist[i * N + j] < dist[j]) {\n                dist[j] = recv_dist[i * N + j];\n                prev[j] = recv_prev[i * N + j];\n            }\n        }\n    }\n}\n\nint path_len = 0;\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        return -1;\n    }\n    while (prev[dest] != -1) {\n        path_len++;\n        dest = prev[dest];\n    }\n}\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0101704516,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 4.90662e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_found = 0;\nwhile (!path_found) {\n    int local_u = -1;\n    if (rank == 0 && !q.empty()) {\n        local_u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&local_u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (local_u == -1) break;\n\n    for (int v = rank; v < N; v += size) {\n        if (A[local_u * N + v] == 1 && dist[v] == INT_MAX) {\n            dist[v] = dist[local_u] + 1;\n            prev[v] = local_u;\n            if (v == dest) {\n                path_found = 1;\n                break;\n            }\n            if (rank == 0) {\n                q.push(v);\n            }\n        }\n    }\n    MPI_Reduce(MPI_IN_PLACE, &path_found, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        return -1;\n    }\n    int path_len = 0;\n    while (prev[dest] != -1) {\n        path_len++;\n        dest = prev[dest];\n    }\n    return path_len;\n} else {\n    return 0; // Non-zero ranks do not need to return the path length\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0101744428,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.80286e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_found = 0;\nwhile (!path_found) {\n    int local_u = -1;\n    if (rank == 0 && !q.empty()) {\n        local_u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&local_u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (local_u == -1) break;\n\n    for (int v = rank; v < N; v += size) {\n        if (A[local_u * N + v] == 1 && dist[v] == INT_MAX) {\n            dist[v] = dist[local_u] + 1;\n            prev[v] = local_u;\n            if (v == dest) {\n                path_found = 1;\n                break;\n            }\n            if (rank == 0) {\n                q.push(v);\n            }\n        }\n    }\n    MPI_Reduce(MPI_IN_PLACE, &path_found, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        return -1;\n    }\n    int path_len = 0;\n    while (prev[dest] != -1) {\n        path_len++;\n        dest = prev[dest];\n    }\n    return path_len;\n} else {\n    return 0; // Other ranks do not need to return the path length\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0103307438,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.51756e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n    MPI_Bcast(&done, 1, MPI_C_BOOL, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0102093382,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0365887812,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0105181889,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00304249275,
                        "num_procs": 4
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (!q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    for (int i = rank; i < N; i += size) {\n        if (A[u * N + i] == 1 && dist[i] == INT_MAX) {\n            dist[i] = dist[u] + 1;\n            prev[i] = u;\n            q.push(i);\n        }\n    }\n    int local_done = q.empty() ? 1 : 0;\n    MPI_Allreduce(&local_done, &done, 1, MPI_INT, MPI_LAND, MPI_COMM_WORLD);\n    done = done ? true : false;\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        return -1;\n    }\n    while (prev[dest] != -1) {\n        path_len++;\n        dest = prev[dest];\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0103546208,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.032226814,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nint path_len = -1;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nwhile (!q.empty()) {\n    int local_queue_size;\n    if (rank == 0) {\n        local_queue_size = q.size();\n    }\n    MPI_Bcast(&local_queue_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int i = 0; i < local_queue_size; ++i) {\n        int u;\n        if (rank == 0) {\n            u = q.front();\n            q.pop();\n        }\n        MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n\n    MPI_Allreduce(MPI_IN_PLACE, dist.data(), N, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n    MPI_Allreduce(MPI_IN_PLACE, prev.data(), N, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] != INT_MAX) {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0102059278,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0366505832,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nwhile (!q.empty()) {\n    int local_q_size;\n    if (rank == 0) {\n        local_q_size = q.size();\n    }\n    MPI_Bcast(&local_q_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (int i = 0; i < local_q_size; ++i) {\n        int u;\n        if (rank == 0) {\n            u = q.front();\n            q.pop();\n        }\n        MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        return -1;\n    }\n    int path_len = 0;\n    while (prev[dest] != -1) {\n        path_len++;\n        dest = prev[dest];\n    }\n    return path_len;\n} else {\n    return 0; // Non-zero ranks do not need to return the path length\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0101733244,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0360853266,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint global_continue = 1;\nwhile (global_continue) {\n    int local_continue = 0;\n    std::vector<int> local_dist(dist);\n    std::vector<int> local_prev(prev);\n\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                local_dist[v] = dist[u] + 1;\n                local_prev[v] = u;\n                local_continue = 1;\n            }\n        }\n    }\n\n    MPI_Allreduce(MPI_IN_PLACE, &local_continue, 1, MPI_INT, MPI_LOR, MPI_COMM_WORLD);\n    global_continue = local_continue;\n\n    MPI_Allreduce(MPI_IN_PLACE, local_dist.data(), N, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n    dist = local_dist;\n\n    for (int i = rank; i < N; i += size) {\n        if (local_dist[i] < dist[i]) {\n            dist[i] = local_dist[i];\n            prev[i] = local_prev[i];\n            q.push(i);\n        }\n    }\n}\n\nint path_len = -1;\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0101777792,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 3.74026e-05,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n    MPI_Bcast(&done, 1, MPI_C_BOOL, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0102670846,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0378840972,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010230511,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00304972675,
                        "num_procs": 4
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n    MPI_Bcast(&done, 1, MPI_C_BOOL, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] != INT_MAX) {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0102166098,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0372600648,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0098551848,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0030629697,
                        "num_procs": 4
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n\n    // Synchronize the dist and prev arrays across all ranks\n    MPI_Allreduce(MPI_IN_PLACE, dist.data(), N, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n    MPI_Allreduce(MPI_IN_PLACE, prev.data(), N, MPI_INT, MPI_MAX, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0101804558,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.036938006,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0438820559,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0404157256,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.037281835375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017785518375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02284392450625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.14206667910313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04964096348594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09440840959141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03041762554648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n    MPI_Bcast(&done, 1, MPI_C_BOOL, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        return -1;\n    }\n    path_len = 0;\n    while (prev[dest] != -1) {\n        path_len++;\n        dest = prev[dest];\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0102207618,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0364816082,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n\n    // Broadcast the current node u to all processes\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (u == -1) {\n        done = true;\n    } else {\n        // Each process computes its part of the graph\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n\n    // Check if all queues are empty\n    int local_empty = (rank == 0 && q.empty()) ? 1 : 0;\n    int global_empty;\n    MPI_Allreduce(&local_empty, &global_empty, 1, MPI_INT, MPI_LAND, MPI_COMM_WORLD);\n    done = (global_empty == 1);\n}\n\nif (rank == 0) {\n    if (dist[dest] != INT_MAX) {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\n// Broadcast the result to all processes\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.010177793,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0361437982,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nint path_len = -1;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nwhile (true) {\n    int local_queue_size;\n    int u = -1;\n    if (rank == 0) {\n        if (!q.empty()) {\n            u = q.front();\n            q.pop();\n        }\n        local_queue_size = q.size();\n    }\n\n    // Broadcast the size of the queue and the current vertex to all processes\n    MPI_Bcast(&local_queue_size, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // If the queue size is 0, then we are done\n    if (local_queue_size == 0) break;\n\n    // Each process computes its part of the graph\n    for (int v = rank; v < N; v += size) {\n        if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n            dist[v] = dist[u] + 1;\n            prev[v] = u;\n            if (rank == 0) {\n                q.push(v);\n            }\n        }\n    }\n\n    // Gather updated distances and predecessors at rank 0\n    std::vector<int> recv_dist(N);\n    std::vector<int> recv_prev(N);\n    MPI_Reduce(dist.data(), recv_dist.data(), N, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n    MPI_Reduce(prev.data(), recv_prev.data(), N, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    // Update local copies of dist and prev on rank 0\n    if (rank == 0) {\n        dist = recv_dist;\n        prev = recv_prev;\n    }\n\n    // Broadcast updated dist and prev to all processes\n    MPI_Bcast(dist.data(), N, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Bcast(prev.data(), N, MPI_INT, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0101783154,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 6.6206e-06,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\n\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n\n    int local_done = q.empty() ? 1 : 0;\n    int global_done;\n    MPI_Allreduce(&local_done, &global_done, 1, MPI_INT, MPI_LAND, MPI_COMM_WORLD);\n    done = global_done == 1;\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0102237088,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0382370008,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0157193275,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0099988427,
                        "num_procs": 4
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> dist(N, INT_MAX);\nstd::vector<int> prev(N, -1);\nstd::queue<int> q;\nif (rank == 0) {\n    q.push(source);\n    dist[source] = 0;\n}\n\nint path_len = -1;\nbool done = false;\n\nwhile (!done) {\n    int u = -1;\n    if (rank == 0 && !q.empty()) {\n        u = q.front();\n        q.pop();\n    }\n    MPI_Bcast(&u, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (u == -1) {\n        done = true;\n    } else {\n        for (int v = rank; v < N; v += size) {\n            if (A[u * N + v] == 1 && dist[v] == INT_MAX) {\n                dist[v] = dist[u] + 1;\n                prev[v] = u;\n                if (rank == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n    MPI_Bcast(&done, 1, MPI_C_BOOL, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    if (dist[dest] == INT_MAX) {\n        path_len = -1;\n    } else {\n        path_len = 0;\n        while (prev[dest] != -1) {\n            path_len++;\n            dest = prev[dest];\n        }\n    }\n}\n\n// Broadcast the result to all ranks\nMPI_Bcast(&path_len, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn path_len;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.010188148,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.036694459,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0098693642,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0030164616,
                        "num_procs": 4
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "28_reduce_smallest_odd_number",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the value of the smallest odd number in the vector x.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Return the result on all ranks.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(std::vector<int> const& x) {",
        "translation_prompt": "// Serial implementation of smallestOdd\n// /* Return the value of the smallest odd number in the vector x.\n//    Examples:\n// \n//    input: [7, 9, 5, 2, 8, 16, 4, 1]\n//    output: 1\n// \n//    input: [8, 36, 7, 2, 11]\n//    output: 7\n// */\n// int smallestOdd(std::vector<int> const& x) {\n// int smallest = x[0];\n//   for (int i = 1; i < x.size(); i++) {\n//     if (x[i] % 2 == 1 && x[i] < smallest) {\n//       smallest = x[i];\n//     }\n//   }\n//   return smallest;\n// }\n\n// MPI implementation of smallestOdd\n#include <mpi.h>\n\n/* Return the value of the smallest odd number in the vector x.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Return the result on all ranks.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(std::vector<int> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the value of the smallest odd number in the vector x.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(std::vector<int> const& x) {\nint smallest = x[0];\n  for (int i = 1; i < x.size(); i++) {\n    if (x[i] % 2 == 1 && x[i] < smallest) {\n      smallest = x[i];\n    }\n  }\n  return smallest;\n}",
        "translation_function_name": "smallestOdd",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint smallest = INT_MAX;\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\nint globalSmallest;\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If there was no odd number, set globalSmallest to -1 or some other sentinel value\nif (globalSmallest == INT_MAX) {\n  globalSmallest = -1;\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729684288,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0743374232,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0745381641,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07637605465,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.076464534425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07545106475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09941605933125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08171265636562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08530580693594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13186725812109,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0931002076457,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\n// Each process finds its local smallest odd number\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Handle the case where a process does not find any odd numbers\nif (smallest == INT_MAX) {\n  smallest = -1; // Use -1 to represent no odd number found\n}\n\n// Reduce to find the global smallest odd number\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If no process found an odd number, return an error code or handle appropriately\nif (globalSmallest == -1) {\n  // Handle the case where no odd numbers are found\n  // For example, you could return INT_MAX, 0, or some other sentinel value\n  // Here, we return INT_MAX to indicate no odd number was found\n  return INT_MAX;\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0730738868,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0761998434,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0765564298,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0782792185,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07849354565,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0771543579875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0953136614875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0882933610875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09832076781875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09910675811172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09864471780117,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\nint globalSmallest;\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\nreturn globalSmallest == INT_MAX ? -1 : globalSmallest; // Assuming -1 is returned when there are no odd numbers\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729578514,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0742844556,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0740860295,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0761259557,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0775563549,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0753627232375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.081606689675,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0817709828125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10943358040469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09661000941406,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09641545081094,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Handle the case where no odd number was found\nif (smallest == INT_MAX) {\n  smallest = -1; // Use -1 or another sentinel value to indicate no odd number was found\n}\n\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If no odd number was found in any process, return an error or a sentinel value\nif (globalSmallest == -1) {\n  // Handle the case where no odd number was found in any process\n  // For example, return an error code or a sentinel value\n  // Here we return -1 as a sentinel value\n  return -1;\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729822386,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0770345832,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0761890344,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07808381325,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078533898375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078022671375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08340405346875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.090900163775,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09927221463437,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11657688726953,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10355711562344,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Use MPI_Allreduce to find the smallest odd number across all processes\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729773208,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0741091554,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0742608448,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07608517485,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.076377804575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0756572501,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08340599534375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08472123448437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13671639572187,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10212130324844,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09260957340938,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\n// Each process finds the smallest odd number in its partition\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Handle the case where no odd number was found\nif (smallest == INT_MAX) {\n  smallest = -1; // Use -1 to indicate no odd number found\n}\n\n// Reduce to find the global smallest odd number\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If no process found an odd number, return an error code (e.g., -1)\nif (globalSmallest == -1) {\n  globalSmallest = INT_MAX; // No odd number found in any partition\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.07298663,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0761342572,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0762959233,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0782726026,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078437874675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0778671653,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.083887618875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08659528135625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10667467800781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09430102958359,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09321110969453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\n// Find the smallest odd number locally on each process\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// If no odd number was found, set smallest to the maximum possible integer\nif (smallest == INT_MAX) {\n  smallest = MPI_MAX;\n}\n\n// Reduce to find the global smallest odd number\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If no process found an odd number, return an error code or a predefined value\nif (globalSmallest == MPI_MAX) {\n  globalSmallest = -1; // Assuming -1 is the error code for \"no odd number found\"\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 1 && x[i] < smallest) {\n        smallest = x[i];\n    }\n}\n\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0730735132,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0740935186,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0741998515,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07628129685,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0766916622,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0765626144625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08058057404375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.081535256625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08941850776563,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09478679660625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10343043383867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\n// Find the smallest odd number locally on each process\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Handle the case where a process does not find any odd numbers\nif (smallest == INT_MAX) {\n  smallest = -1;\n}\n\n// Reduce to find the global smallest odd number across all processes\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If no process found an odd number, return an appropriate value (e.g., -1)\nif (globalSmallest == -1) {\n  globalSmallest = INT_MAX;\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729259944,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0762914536,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0761659302,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07823632945,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078241182125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.077061267325,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0846961645875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08489063234688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08799042189531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08763571233828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09503585641719,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Use MPI_Allreduce to find the smallest odd number across all processes\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729403456,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0744131316,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0746970676,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0768067755,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.076846176075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0755186762125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09271020245625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11272935840937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08948364392812,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08418890927266,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15462910844531,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Use MPI_Allreduce to find the smallest odd number across all processes\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729815612,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0740759166,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0742516462,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08827346145,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.076547620475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.075555158325,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.082720397275,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08094473889687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08613107105781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09690542498672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10245149038516,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// Use MPI_Allreduce to find the smallest odd number across all processes\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0730253476,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0741939778,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0742779127,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0760723979,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.076422848875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0762081987125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0819560862875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11805992988125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10082531533281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08842430109609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09395143877148,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\n// Find the smallest odd number locally\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\n// If no odd number was found, set smallest to the maximum possible integer\nif (smallest == INT_MAX) {\n  smallest = MPI_MAX;\n}\n\n// Reduce to find the global smallest odd number\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If no odd number was found in any process, return an error code or handle it accordingly\nif (globalSmallest == MPI_MAX) {\n  // Handle the case where no odd number was found\n  // For example, you could return -1 or throw an exception\n  // Here we just return -1\n  return -1;\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 1 && x[i] < smallest) {\n        smallest = x[i];\n    }\n}\n\n// Use MPI_Allreduce to find the smallest odd number across all processes\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729565848,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0741200176,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0741444898,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0765780557,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.076319425025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0748441180125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08238216969375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13237743753438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09733968770937,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08614394141719,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08948667224961,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nfor (int i = 0; i < x.size(); i++) {\n  if (x[i] % 2 == 1 && x[i] < smallest) {\n    smallest = x[i];\n  }\n}\n\nint globalSmallest;\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If there was no odd number, set globalSmallest to -1 or an appropriate flag value\nif (globalSmallest == INT_MAX) {\n  globalSmallest = -1;\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0728588652,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0742111424,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0740835623,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0767714116,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.077200473875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.075125055375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08172371956875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08214483849375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12079292815,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09515430264531,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09550143067695,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint smallest = INT_MAX;\nint globalSmallest;\n\n// Find the smallest odd number locally on each process\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2 == 1 && x[i] < smallest) {\n        smallest = x[i];\n    }\n}\n\n// If no odd number was found, set smallest to the maximum possible integer\nif (smallest == INT_MAX) {\n    smallest = MPI_MAX;\n}\n\n// Reduce across all processes to find the global smallest odd number\nMPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n// If no process found an odd number, return an error code or a predefined value\nif (globalSmallest == MPI_MAX) {\n    globalSmallest = -1; // Assuming -1 is the error code for \"no odd number found\"\n}\n\nreturn globalSmallest;\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\n\n    int smallest = INT_MAX;\n    int globalSmallest;\n\n    // Find the smallest odd number locally\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 1 && x[i] < smallest) {\n            smallest = x[i];\n        }\n    }\n\n    // If no odd number was found, set smallest to the maximum possible integer\n    if (smallest == INT_MAX) {\n        smallest = -1;\n    }\n\n    // Reduce to find the global smallest odd number\n    MPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n    // If no process found an odd number, return -1\n    if (globalSmallest == -1) {\n        return -1;\n    }\n\n    return globalSmallest;\n}\n",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0729510282,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0763204558,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0763006088,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07797161195,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783786703,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0779937077,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0837371132875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.087068219775,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09653630272031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.09620328183359,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1014211348207,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\n\n    int smallestLocal = INT_MAX;\n    int smallestGlobal;\n\n    // Find the smallest odd number locally on each process\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 1 && x[i] < smallestLocal) {\n            smallestLocal = x[i];\n        }\n    }\n\n    // If no odd number was found, set smallestLocal to INT_MAX for correct reduction\n    if (smallestLocal == INT_MAX) {\n        smallestLocal = -1;\n    }\n\n    // Reduce across all processes to find the global smallest odd number\n    MPI_Allreduce(&smallestLocal, &smallestGlobal, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n    // If the result is -1, it means there were no odd numbers in any process\n    if (smallestGlobal == -1) {\n        smallestGlobal = INT_MAX;\n    }\n\n    return smallestGlobal;\n}\n",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0730641868,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0763009854,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0763195985,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07843168535,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078816265475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078122265925,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08908792341875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11077189304375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.10166707861719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12216666490469,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12296338297734,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\n\n    int smallestLocal = INT_MAX;\n    int smallestGlobal;\n    int rank, size;\n\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    // Each process finds its local smallest odd number\n    for (int i = rank; i < x.size(); i += size) {\n        if (x[i] % 2 == 1 && x[i] < smallestLocal) {\n            smallestLocal = x[i];\n        }\n    }\n\n    // Handle the case where a process does not find any odd number\n    if (smallestLocal == INT_MAX) {\n        smallestLocal = -1; // Use -1 as a flag for no odd numbers found\n    }\n\n    // Reduce to find the global smallest odd number\n    MPI_Allreduce(&smallestLocal, &smallestGlobal, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n    // If no process found an odd number, return an appropriate value (e.g., -1)\n    if (smallestGlobal == -1) {\n        smallestGlobal = INT_MAX; // or any other appropriate value indicating no odd number found\n    }\n\n    return smallestGlobal;\n}\n",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0730514032,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0774672254,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0390857449,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02167202015,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012000907275,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061080455375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.015787687925,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01226446455625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.01802421522656,
                        "num_procs": 128
                    }
                ]
            },
            {
                "generated_output": "\n\n    int smallest = INT_MAX;\n    int globalSmallest;\n\n    // Find the smallest odd number locally on each process\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 1 && x[i] < smallest) {\n            smallest = x[i];\n        }\n    }\n\n    // If no odd number was found, set smallest to the maximum possible integer\n    if (smallest == INT_MAX) {\n        smallest = MPI_MAX;\n    }\n\n    // Reduce across all processes to find the global smallest odd number\n    MPI_Allreduce(&smallest, &globalSmallest, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);\n\n    // If no process found an odd number, return an error code (e.g., -1)\n    if (globalSmallest == MPI_MAX) {\n        return -1;\n    }\n\n    return globalSmallest;\n}\n",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            }
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "26_reduce_product_of_inverses",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the product of the vector x with every odd indexed element inverted.\n   i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n   Use MPI to compute product in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the product on all ranks.\n   Example:\n\n   input: [4, 2, 10, 4, 5]\n   output: 25\n*/\ndouble productWithInverses(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of productWithInverses\n// /* Return the product of the vector x with every odd indexed element inverted.\n//    i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n//    Example:\n// \n//    input: [4, 2, 10, 4, 5]\n//    output: 25\n// */\n// double productWithInverses(std::vector<double> const& x) {\n// double result = 1;\n//   for (int i = 0; i < x.size(); i++) {\n//     if (i % 2 == 0) {\n//       result *= x[i];\n//     } else {\n//       result *= 1 / x[i];\n//     }\n//   }\n//   return result;\n// }\n\n// MPI implementation of productWithInverses\n#include <mpi.h>\n\n/* Return the product of the vector x with every odd indexed element inverted.\n   i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n   Use MPI to compute product in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the product on all ranks.\n   Example:\n\n   input: [4, 2, 10, 4, 5]\n   output: 25\n*/\ndouble productWithInverses(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the product of the vector x with every odd indexed element inverted.\n   i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...\n   Example:\n\n   input: [4, 2, 10, 4, 5]\n   output: 25\n*/\ndouble productWithInverses(std::vector<double> const& x) {\ndouble result = 1;\n  for (int i = 0; i < x.size(); i++) {\n    if (i % 2 == 0) {\n      result *= x[i];\n    } else {\n      result *= 1 / x[i];\n    }\n  }\n  return result;\n}",
        "translation_function_name": "productWithInverses",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0236623428,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.019256213,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062337535,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0057410527,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00535736585,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058419287,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02355959691875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01269238741563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01053952255312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01290563032656,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01343647479492,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_product = 1.0;\nint n = x.size();\n\n// Each process computes its part of the product\nfor (int i = rank; i < n; i += size) {\n    if (i % 2 == 0) {\n        local_product *= x[i];\n    } else {\n        local_product *= 1 / x[i];\n    }\n}\n\ndouble global_product;\n// Reduce all local products to a single global product\nMPI_Reduce(&local_product, &global_product, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the global product to all processes\nMPI_Bcast(&global_product, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_product;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0240111028,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0192825886,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062025574,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058401625,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006565346675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0064287053,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01378390256875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01104426044063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01520069737969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01400216690937,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03792802822266,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\nint chunk_size = x.size() / size;\nint start_index = rank * chunk_size;\nint end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (int i = start_index; i < end_index; i++) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\ndouble global_result;\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0241126312,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008408917,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043225281,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00479306085,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00341489005,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026245889625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00890964405,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0145345511625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00836366505469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01187915355234,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01378528819023,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024219923,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01963214,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062346035,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0066156657,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053884613,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00620551325,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01154869498125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0068733314125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01385512964219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01474853895937,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01723801779453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_product = 1;\nint n = x.size();\n\n// Each process computes a part of the product\nfor (int i = rank; i < n; i += size) {\n    if (i % 2 == 0) {\n        local_product *= x[i];\n    } else {\n        local_product *= 1 / x[i];\n    }\n}\n\ndouble global_product;\n// Reduce all local products to a single global product\nMPI_Reduce(&local_product, &global_product, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the global product to all processes\nMPI_Bcast(&global_product, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_product;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024194529,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0189466102,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062075605,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00597298345,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005334323975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061439947375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01219431694375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00608489682812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01525209481719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01056883341172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01374154873711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024324519,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01942426,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062537242,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00608952775,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053452708,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059913309875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0136854790625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00766245475313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01477157920781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01434061782969,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01610349382813,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all local results to a single global result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the global result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0238983232,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0194072364,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062334549,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00628094315,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00562124485,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062202685125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0208900391875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00912477198437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0150076361,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01261665313125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01615847776875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.023879232,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0194132714,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062403969,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00619095885,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005301424425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067765978625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01582439345625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01070623393125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01192401676094,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01440656803672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01593221087266,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all partial products to a single product\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0248701472,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0199726564,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0073794492,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00620745555,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008960829125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0065332065875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0120014510375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01117141686875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02932413394062,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02251844838438,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01746714659531,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes part of the product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all local results to a single global result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the global result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024523635,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0202553886,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062367442,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00629641595,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005442990025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0057946618,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0128614317375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00705423324375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02534414844688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01452750956328,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01878905474648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0238088124,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0196608856,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0076466517,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00611032505,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005343770875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0074935322,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01553504574375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012995716975,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01409386193281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01187221257344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01545957442773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0241644556,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0202622154,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062676735,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00596722075,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005070461475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053032205,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01435792683125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00754536753125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0192227452625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01393681549219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01512539764062,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0245954474,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197291356,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062322681,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00597719615,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005257149375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005486321725,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01122453884375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02377674363438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01201560086719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01998077068672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01496549878477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0239216262,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0194850996,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062319583,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00586273155,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00568303345,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006148084575,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.013249806325,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00867843205625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01183780140469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01118151318047,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0156714645043,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all local results to a single global result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the global result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0251451712,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0195396842,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062316858,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00963645025,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005580193675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060742639,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01399425284375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008763081725,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02284875313125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01580211632891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01967836816875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all local results to a single global result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the global result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0236633636,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0202494096,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062319775,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00583876145,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005765518225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00692190305,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01330190906875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01741488810313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01323502646562,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01406447370156,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01375986453867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all local results into the global result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0245260406,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0194831318,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0071692756,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00579491615,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0072046927,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005880955625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0165282709375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0108763881125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01326148779219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01285706546484,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01298372714609,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0233776808,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0194580966,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062788791,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0084996076,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007023178975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060780581125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01706414935,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0090023994,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01212098967188,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01501570003047,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01408635139727,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a partial product\nfor (int i = rank; i < x.size(); i += size) {\n    if (i % 2 == 0) {\n        local_result *= x[i];\n    } else {\n        local_result *= 1 / x[i];\n    }\n}\n\n// Reduce all partial products to a single product on all processes\nMPI_Allreduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0238766966,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0191023512,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062116719,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0050329975,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008548188575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0065987882625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0111820336875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01045270922187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01439288209531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02508087257109,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01874415761602,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_result = 1;\ndouble global_result;\n\n// Each process computes a part of the product\nfor (int i = rank; i < x.size(); i += size) {\n  if (i % 2 == 0) {\n    local_result *= x[i];\n  } else {\n    local_result *= 1 / x[i];\n  }\n}\n\n// Reduce all partial results to a single result\nMPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_PROD, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_result, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024076866,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0192551164,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0062343608,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00607478005,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007214739575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00553330445,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0136907903625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00991389575313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01347007930625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01818750196719,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01373169192422,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "29_reduce_sum_of_min_of_pairs",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the sum of the minimum value at each index of vectors x and y for all indices.\n   i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n   Use MPI to sum in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the sum on all ranks.\n   Example:\n\n   input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n   output: 10\n*/\ndouble sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {",
        "translation_prompt": "// Serial implementation of sumOfMinimumElements\n// /* Return the sum of the minimum value at each index of vectors x and y for all indices.\n//    i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n//    Example:\n// \n//    input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n//    output: 10\n// */\n// double sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {\n// double sum = 0;\n//   for (int i = 0; i < x.size(); i++) {\n//     sum += std::min(x[i], y[i]);\n//   }\n//   return sum;\n// }\n\n// MPI implementation of sumOfMinimumElements\n#include <mpi.h>\n\n/* Return the sum of the minimum value at each index of vectors x and y for all indices.\n   i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n   Use MPI to sum in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the sum on all ranks.\n   Example:\n\n   input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n   output: 10\n*/\ndouble sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the sum of the minimum value at each index of vectors x and y for all indices.\n   i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...\n   Example:\n\n   input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]\n   output: 10\n*/\ndouble sumOfMinimumElements(std::vector<double> const& x, std::vector<double> const& y) {\ndouble sum = 0;\n  for (int i = 0; i < x.size(); i++) {\n    sum += std::min(x[i], y[i]);\n  }\n  return sum;\n}",
        "translation_function_name": "sumOfMinimumElements",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.033282082,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1134018358,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0567372975,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0317341145,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01774017475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0113259364875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02229748684375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02297230225313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01724417233906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02512684814063,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03947680881602,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0330946102,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1133603858,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0567448907,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0316527127,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01759420575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0105382803,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0183405824375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01878785237187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02703096404219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01604975103594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02238058507539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0337068382,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1136018258,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.056617451,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03204652005,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017982876325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0106548904625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01646880744375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02384303137187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02201340338437,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02519144290781,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02769248823281,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nint start = rank * local_n;\nint end = start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0297137656,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1165123066,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0587746915,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0324357756,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01808757355,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0102050567125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0775113928125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07907399940938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02835956977344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01689050835547,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02290570886133,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0.0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0336226134,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1136937658,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0566449282,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03167019015,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.018126637825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010923108875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02040084195625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01499355515938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03214973530781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02023032010625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.06097262063398,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0334278034,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.113401173,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0568892949,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03192130615,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01768666415,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010602510225,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02358410159375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02429608245,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0216417244375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01906527184609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02492609214297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n  local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.033292965,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.113511953,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0583267557,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03162374445,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01794900065,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01177917895,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.022645957775,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0192848310375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02045568435469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03591370554531,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02486569617578,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0299367512,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1172293744,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0566641072,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03168040765,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017863512825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0109852304,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02120968549375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01596362055937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02702347901094,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02413515747109,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02503067232383,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0.0;\n\nfor (int i = start; i < end; ++i) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Allreduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0333549808,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.114635954,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0572091001,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0313128471,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0172220659,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009216290625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01569193235625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01839546560625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01770397437656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01424889864062,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02446257835273,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0335521228,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1162265952,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0566254878,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03163133025,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01769617355,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0097917493875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01921469860625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01700091338438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02346285812656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02113149138125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.07189347762031,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.033549311,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1243519166,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.059566179,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03321818155,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.018812819125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0098042859375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02026194519375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01342802144375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02412072289375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02766055633281,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03483772232656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nint start = rank * local_n;\nint end = start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0336338954,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11615166,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0581477498,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.032458352,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.018063782475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0102684859625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.015972031425,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01825276241875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01900752273594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02052395541094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02729047817656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0334316964,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.113414369,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0575372816,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03185568425,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017746992925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0098707716,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.022302301175,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01976447160937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03187361796719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02266478872344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03534274993047,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0337434834,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1132486766,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0566625176,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03186304035,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0183262849,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0114204818625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02346477686875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02219599218438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01994735343594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0232887748,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02648826699922,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0333711398,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1135972454,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0568717538,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0316998197,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.018196308725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0108679684375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03250712415625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0185741679625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02075903558438,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04967337826094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04636294932813,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nint start = rank * local_n;\nint end = start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.033679182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1162713898,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0580886591,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0323956505,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0184876448,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011190207875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02850174270625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0173684873125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01378084752969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.029799743425,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02982422513164,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\ndouble local_sum = 0;\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0333864366,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1133102312,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.056909739,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03166505505,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01768552635,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0102423418125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02410650253125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02694028010938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02103060590625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02824490221797,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03750832923516,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0.0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0318040508,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1138389902,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0570141555,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03189146025,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0178078766,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0107010298375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02848334729375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0217129246125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01608599742812,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01787263993359,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01893390680352,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0332535864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1138179228,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0566647087,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03152792595,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017790943525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0104005599125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03141248545625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02175708342812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01401628493125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01922533996172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02609640537461,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\ndouble local_sum = 0;\n\nfor (int i = start; i < end; i++) {\n    local_sum += std::min(x[i], y[i]);\n}\n\ndouble global_sum;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0333673158,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1157774966,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0568806731,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0324016403,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01796008355,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011253312475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02056751079375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01709080195938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02446612320469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02153743854453,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04342674023047,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "27_reduce_average",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the average of the vector x.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the average on all ranks.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of average\n// /* Return the average of the vector x.\n//    Examples:\n// \t\t\n// \t input: [1, 8, 4, 5, 1]\n//    output: 3.8\n// \n//    input: [2, 2, 2, 3]\n//    output: 2.25\n// */\n// double average(std::vector<double> const& x) {\n// double sum = 0;\n// \tfor (double i : x) {\n// \t\tsum += i;\n// \t}\n// \treturn sum / x.size();\n// }\n\n// MPI implementation of average\n#include <mpi.h>\n\n/* Return the average of the vector x.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the average on all ranks.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the average of the vector x.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(std::vector<double> const& x) {\ndouble sum = 0;\n\tfor (double i : x) {\n\t\tsum += i;\n\t}\n\treturn sum / x.size();\n}",
        "translation_function_name": "average",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055756644,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160937692,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160581139,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0072177552,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0176421038,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0163437433,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0054969324,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.016028132,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.016238553,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0054495818,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160389202,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.016054864,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.005475717,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0161510244,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160372419,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0054606568,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160839104,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160852539,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0058550804,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0161521966,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.017255614,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0054029924,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160104872,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160583355,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.005555264,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0161261596,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160948779,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0054937266,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160912464,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160012244,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055703846,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160177946,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160789504,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.005619268,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0161051906,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0170280408,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055859618,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0161358722,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.016086278,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0054572842,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160077378,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0161605052,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055219816,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160275268,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160429156,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055735484,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0159862936,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0159997235,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055657198,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0161143882,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0160326474,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\n\nfor (double i : x) {\n    sum += i;\n}\n\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055758768,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160495098,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0161129941,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0;\ndouble global_sum = 0;\nfor (double i : x) {\n    sum += i;\n}\nMPI_Allreduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\nreturn global_sum / x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0054969026,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0160854874,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.01602884,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\ndouble sum = 0.0;\ndouble local_sum = 0.0;\ndouble avg = 0.0;\nint size = x.size();\n\n// Calculate the local sum on each process\nfor (double i : x) {\n    local_sum += i;\n}\n\n// Reduce all local sums to the total sum on all processes\nMPI_Allreduce(&local_sum, &sum, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\n// Calculate the average across all processes\navg = sum / size;\n\nreturn avg;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0055075102,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0159818332,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.016106007,
                        "num_procs": 2
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "25_reduce_xor",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the logical XOR reduction of the vector of bools x.\n   Use MPI to reduce in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Return the result on all ranks.\n   Example:\n\n   input: [false, false, false, true]\n   output: true\n*/\nbool reduceLogicalXOR(std::vector<bool> const& x) {",
        "translation_prompt": "// Serial implementation of reduceLogicalXOR\n// /* Return the logical XOR reduction of the vector of bools x.\n//    Example:\n// \n//    input: [false, false, false, true]\n//    output: true\n// */\n// bool reduceLogicalXOR(std::vector<bool> const& x) {\n// bool result = false;\n//   for (auto const& i : x) {\n//     result ^= i;\n//   }\n//   return result;\n// }\n\n// MPI implementation of reduceLogicalXOR\n#include <mpi.h>\n\n/* Return the logical XOR reduction of the vector of bools x.\n   Use MPI to reduce in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Return the result on all ranks.\n   Example:\n\n   input: [false, false, false, true]\n   output: true\n*/\nbool reduceLogicalXOR(std::vector<bool> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the logical XOR reduction of the vector of bools x.\n   Example:\n\n   input: [false, false, false, true]\n   output: true\n*/\nbool reduceLogicalXOR(std::vector<bool> const& x) {\nbool result = false;\n  for (auto const& i : x) {\n    result ^= i;\n  }\n  return result;\n}",
        "translation_function_name": "reduceLogicalXOR",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126566266,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127387566,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127865901,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0127102334,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127490662,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127967492,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126339422,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012774087,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127540949,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.012669108,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127351958,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0128102215,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126215868,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127642224,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127923862,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.012594895,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127433998,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127712183,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0125799646,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127731856,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127729125,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.012617361,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127808438,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0128127353,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0125739434,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012789436,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127857145,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126820704,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127447822,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127834491,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0127648074,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127700774,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127908733,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126728106,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012745494,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127890926,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126212468,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127463106,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127822477,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0127009228,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127424306,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127679135,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126465186,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127907992,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0128118341,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126376882,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0128139166,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0128095557,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0125697846,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127651534,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127445357,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126294426,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127365154,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0128320387,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (bool value : x) {\n    local_xor ^= value;\n}\n\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\n\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0126705938,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127437088,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0127746401,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nbool local_xor = false;\nfor (auto const& i : x) {\n    local_xor ^= i;\n}\nbool global_xor;\nMPI_Allreduce(&local_xor, &global_xor, 1, MPI_C_BOOL, MPI_LXOR, MPI_COMM_WORLD);\nreturn global_xor;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0127072884,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127456664,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.012772799,
                        "num_procs": 2
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "32_scan_sum_of_prefix_sum_array",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the prefix sum array of the vector x and return its sum.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [-7, 2, 1, 9, 4, 8]\n   output: 15\n*/\ndouble sumOfPrefixSum(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of sumOfPrefixSum\n// /* Compute the prefix sum array of the vector x and return its sum.\n//    Example:\n// \n//    input: [-7, 2, 1, 9, 4, 8]\n//    output: 15\n// */\n// double sumOfPrefixSum(std::vector<double> const& x) {\n// double sum = 0;\n//     std::vector<double> prefix_sum(x.size());\n// \n//     for (size_t i = 0; i < x.size(); ++i) {\n//         if (i == 0) {\n//             prefix_sum[i] = x[i];\n//         } else {\n//             prefix_sum[i] = prefix_sum[i - 1] + x[i];\n//         }\n//         sum += prefix_sum[i];\n//     }\n// \n//     return sum;\n// }\n\n// MPI implementation of sumOfPrefixSum\n#include <mpi.h>\n\n/* Compute the prefix sum array of the vector x and return its sum.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [-7, 2, 1, 9, 4, 8]\n   output: 15\n*/\ndouble sumOfPrefixSum(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the prefix sum array of the vector x and return its sum.\n   Example:\n\n   input: [-7, 2, 1, 9, 4, 8]\n   output: 15\n*/\ndouble sumOfPrefixSum(std::vector<double> const& x) {\ndouble sum = 0;\n    std::vector<double> prefix_sum(x.size());\n\n    for (size_t i = 0; i < x.size(); ++i) {\n        if (i == 0) {\n            prefix_sum[i] = x[i];\n        } else {\n            prefix_sum[i] = prefix_sum[i - 1] + x[i];\n        }\n        sum += prefix_sum[i];\n    }\n\n    return sum;\n}",
        "translation_function_name": "sumOfPrefixSum",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at root\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Adjust prefix sums on each process except for the first one\nif (rank != 0) {\n    double adjustment;\n    MPI_Recv(&adjustment, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    for (size_t i = 0; i < x.size(); ++i) {\n        prefix_sum[i] += adjustment;\n    }\n    local_sum += adjustment * x.size();\n}\n\n// Send the adjusted prefix sum to the next process\nif (rank < size - 1) {\n    double send_val = prefix_sum[x.size() - 1];\n    MPI_Send(&send_val, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD);\n}\n\n// Root process now has the total sum of all prefix sums\nif (rank == 0) {\n    return total_sum;\n} else {\n    return 0; // Other ranks do not have the total sum\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0108030114,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.019076885,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0193687331,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\ndouble total_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Compute local prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Reduce all local sums to the total sum on rank 0\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0106412818,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0188932764,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0183494799,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Compute the prefix sum in parallel\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total sum from rank 0 to all other ranks\nMPI_Bcast(&total_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0107001104,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0186219672,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.005493405,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at root\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Adjust prefix sums on each process except for rank 0\nif (rank != 0) {\n    double offset = 0;\n    MPI_Exscan(&local_sum, &offset, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n    for (size_t i = 0; i < x.size(); ++i) {\n        prefix_sum[i] += offset;\n    }\n}\n\nreturn rank == 0 ? total_sum : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0107770548,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0208936038,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    // Only add to local_sum if it's part of this rank's range\n    if (i / (x.size() / size) == rank) {\n        local_sum += prefix_sum[i];\n    }\n}\n\n// Gather all local sums at the root\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total prefix sum from the last element of each rank's computed prefix sum\nfor (int i = 1; i < size; ++i) {\n    if (rank == i) {\n        double last_prefix_sum = prefix_sum[(i * x.size() / size) - 1];\n        MPI_Send(&last_prefix_sum, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    }\n    if (rank == 0) {\n        double recv_last_prefix_sum;\n        MPI_Recv(&recv_last_prefix_sum, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        total_sum += recv_last_prefix_sum * (x.size() / size * i);\n    }\n}\n\n// Only rank 0 will have the correct total_sum, other ranks will have an undefined value\nreturn rank == 0 ? total_sum : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.010717057,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0189385746,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0189362657,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Compute the prefix sum in parallel\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total sum from rank 0 to all other ranks\nMPI_Bcast(&total_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0105567578,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0184300814,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0056321959,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Compute the prefix sum in parallel\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Reduce all local sums to the total sum on rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total prefix sum from rank 0 to all other ranks\nMPI_Bcast(&total_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.010588878,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.018707368,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.005604516,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size(), 0);\n\n// Compute the prefix sum for the local partition\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Compute the total prefix sum at rank 0\nif (rank == 0) {\n    double offset = 0;\n    for (int i = 1; i < size; ++i) {\n        double local_offset;\n        MPI_Recv(&local_offset, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        offset += local_offset;\n    }\n    total_sum += offset;\n} else {\n    MPI_Send(&local_sum, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n\nreturn rank == 0 ? total_sum : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0107255102,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0215580514,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0194111144,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at root\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total prefix sum from the last element of each local prefix sum\nfor (int i = 1; i < size; ++i) {\n    if (rank == i) {\n        prefix_sum[rank - 1] = local_sum;\n    }\n    MPI_Bcast(&prefix_sum[i - 1], 1, MPI_DOUBLE, i, MPI_COMM_WORLD);\n    if (rank > i) {\n        local_sum += prefix_sum[i - 1];\n    }\n}\n\n// Update the local prefix sums with the received values\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i != 0) {\n        prefix_sum[i] += prefix_sum[i - 1];\n    }\n}\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.010839588,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0348874106,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0068209384,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Compute the local prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Adjust the prefix sums on each process except for rank 0\nif (rank != 0) {\n    double adjustment;\n    MPI_Recv(&adjustment, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    for (size_t i = 0; i < x.size(); ++i) {\n        prefix_sum[i] += adjustment;\n    }\n    local_sum += adjustment * x.size();\n}\n\n// Send the adjusted local sum to the next rank\nif (rank < size - 1) {\n    double send_value = local_sum;\n    MPI_Send(&send_value, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD);\n}\n\n// Gather the final prefix sums at rank 0\nstd::vector<double> final_prefix_sum(x.size() * size);\nMPI_Gather(prefix_sum.data(), prefix_sum.size(), MPI_DOUBLE, final_prefix_sum.data(), prefix_sum.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nreturn rank == 0 ? total_sum : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0107367712,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0244214728,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.034493318,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size(), 0);\n\n// Each process computes its part of the prefix sum\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total prefix sum from rank 0 to all other ranks\nMPI_Bcast(&total_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Adjust the prefix sums on each rank\ndouble adjustment = 0;\nfor (int i = 1; i <= rank; ++i) {\n    MPI_Reduce(rank < i ? &prefix_sum[x.size() - 1] : MPI_IN_PLACE, &adjustment, 1, MPI_DOUBLE, MPI_SUM, i, MPI_COMM_WORLD);\n}\n\nfor (size_t i = rank; i < x.size(); i += size) {\n    prefix_sum[i] += adjustment;\n}\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0105461898,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0211488394,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Compute the prefix sum for the local partition\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Adjust prefix sums on each process except for rank 0\nif (rank != 0) {\n    double local_adjustment = 0;\n    MPI_Exscan(&local_sum, &local_adjustment, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n    for (size_t i = 0; i < x.size(); ++i) {\n        prefix_sum[i] += local_adjustment;\n    }\n}\n\nreturn rank == 0 ? total_sum : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0107471006,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.018630708,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn rank == 0 ? total_sum : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0106192048,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0185070722,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0189308474,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Calculate the prefix sum for each local partition\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at the root\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Adjust the prefix sums on each process except for rank 0\nif (rank != 0) {\n    double local_adjustment = 0;\n    MPI_Exscan(&prefix_sum.back(), &local_adjustment, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n\n    for (size_t i = 0; i < x.size(); ++i) {\n        prefix_sum[i] += local_adjustment;\n    }\n}\n\nreturn rank == 0 ? total_sum : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0106312516,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0185541702,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Reduce all local sums to the root process\ndouble global_sum = 0;\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total sum from the root process to all other processes\n// so that they can compute the global prefix sum\nMPI_Bcast(&global_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Adjust the prefix sums on each process to get the true prefix sums\ndouble offset = 0;\nfor (int i = 1; i <= rank; ++i) {\n    MPI_Reduce(rank < i ? &local_sum : MPI_IN_PLACE, &offset, 1, MPI_DOUBLE, MPI_SUM, i, MPI_COMM_WORLD);\n}\n\nfor (size_t i = rank; i < x.size(); i += size) {\n    prefix_sum[i] += offset;\n}\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.010714025,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0212771892,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at root\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct total_sum, other ranks will have 0\nif (rank == 0) {\n    return total_sum;\n} else {\n    return 0;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0106148444,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0186119732,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0183184215,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Compute the prefix sum in parallel\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total sum from rank 0 to all other ranks\nMPI_Bcast(&total_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Correct the prefix sums on each rank\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i != 0) {\n        prefix_sum[i] += total_sum - local_sum;\n    }\n}\n\n// Only rank 0 needs to return the result\nif (rank == 0) {\n    return total_sum;\n} else {\n    return 0; // Other ranks return 0 or could return a sentinel value indicating they are not rank 0\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0106152776,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0204519206,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.006543658,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\ndouble total_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its local prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Gather all local sums at rank 0\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Adjust prefix sums on each process except for rank 0\nif (rank != 0) {\n    double adjustment;\n    MPI_Recv(&adjustment, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    for (size_t i = 0; i < x.size(); ++i) {\n        prefix_sum[i] += adjustment;\n    }\n    local_sum += adjustment * x.size();\n}\n\n// Send the adjusted local sum to the next rank\nif (rank < size - 1) {\n    double send_adjustment = prefix_sum.back();\n    MPI_Send(&send_adjustment, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD);\n}\n\n// Gather all adjusted local sums at rank 0\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0106672576,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0207472424,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0198094196,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\ndouble global_sum = 0;\n// Sum up all local sums to the global sum on rank 0\nMPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\nreturn global_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0105207642,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0184325978,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0184786091,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_sum = 0;\nstd::vector<double> prefix_sum(x.size());\n\n// Each process computes its part of the prefix sum\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (i == 0) {\n        prefix_sum[i] = x[i];\n    } else {\n        prefix_sum[i] = prefix_sum[i - 1] + x[i];\n    }\n    local_sum += prefix_sum[i];\n}\n\n// Reduce all local sums to the total sum on rank 0\ndouble total_sum = 0;\nMPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Broadcast the total sum from rank 0 to all other ranks\nMPI_Bcast(&total_sum, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Correct the prefix sums on each process\ndouble correction = 0;\nfor (int i = 1; i <= rank; ++i) {\n    correction += prefix_sum[i * size - size];\n}\nfor (size_t i = rank; i < x.size(); i += size) {\n    prefix_sum[i] += correction;\n}\n\nreturn total_sum;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0105643864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0213591746,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0066571528,
                        "num_procs": 2
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "31_scan_scan_with_min_function",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Store the result in x on rank 0.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(std::vector<float> &x) {",
        "translation_prompt": "// Serial implementation of partialMinimums\n// /* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n//    Examples:\n// \n//    input: [8, 6, -1, 7, 3, 4, 4]\n//    output: [8, 6, -1, -1, -1, -1, -1]\n// \n//    input: [5, 4, 6, 4, 3, 6, 1, 1]\n//    output: [5, 4, 4, 4, 3, 3, 1, 1]\n// */\n// void partialMinimums(std::vector<float> &x) {\n// float min = x[0];\n//     for (int i = 0; i < x.size(); i++) {\n//         if (x[i] < min) {\n//             min = x[i];\n//         }\n//         x[i] = min;\n//     }\n// }\n\n// MPI implementation of partialMinimums\n#include <mpi.h>\n\n/* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Store the result in x on rank 0.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(std::vector<float> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(std::vector<float> &x) {\nfloat min = x[0];\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] < min) {\n            min = x[i];\n        }\n        x[i] = min;\n    }\n}",
        "translation_function_name": "partialMinimums",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\nfor (int i = 0; i < n; ++i) {\n    // Each process computes its local minimum up to the current index i\n    local_min[i] = (i == 0 || x[i] < local_min[i - 1]) ? x[i] : local_min[i - 1];\n    \n    // Reduce to find the global minimum up to the current index i\n    MPI_Allreduce(&local_min[i], &global_min, 1, MPI_FLOAT, MPI_MIN, MPI_COMM_WORLD);\n    \n    // Broadcast the global minimum to all processes\n    MPI_Bcast(&global_min, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n    \n    // Update the i-th element with the global minimum\n    x[i] = global_min;\n}\n\n// Ensure that rank 0 has the final result\nMPI_Gather(MPI_IN_PLACE, n, MPI_FLOAT, x.data(), n, MPI_FLOAT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0006502242,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0342337568,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local minimum\nfloat local_min = x[0];\nfor (int i = rank; i < x.size(); i += size) {\n    if (x[i] < local_min) {\n        local_min = x[i];\n    }\n    x[i] = local_min;\n}\n\n// Now we need to reduce all local minimums to the global minimum\nfloat global_min;\nMPI_Allreduce(&local_min, &global_min, 1, MPI_FLOAT, MPI_MIN, MPI_COMM_WORLD);\n\n// Broadcast the global minimum from rank 0 to all other ranks\nMPI_Bcast(&global_min, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Update the vector with the global minimum\nfor (int i = rank; i < x.size(); i += size) {\n    if (x[i] > global_min) {\n        x[i] = global_min;\n    }\n}\n\n// Gather the partial results at rank 0\nstd::vector<float> all_x(x.size());\nMPI_Gather(x.data(), x.size() / size, MPI_FLOAT, all_x.data(), x.size() / size, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// If this is rank 0, then combine all the partial results\nif (rank == 0) {\n    for (int i = 0; i < x.size(); ++i) {\n        x[i] = all_x[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004382602,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0019600232,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\n\n// Each process computes its local minimums\nfloat min = x[0];\nfor (int i = 0; i < n; ++i) {\n    if (x[i] < min) {\n        min = x[i];\n    }\n    local_min[i] = min;\n}\n\n// Reduce to get the global minimums at rank 0\nMPI_Reduce(local_min.data(), x.data(), n, MPI_FLOAT, MPI_MIN, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0004355456,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014068232,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036210772,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00859885075,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005634055175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006670664925,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0072077827625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005918664625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00713856494688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00900311149063,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0169718461582,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n, std::numeric_limits<float>::max());\n\n// Each process computes its local minimums\nfor (int i = 0; i < n; ++i) {\n    local_min[i] = (i == 0) ? x[i] : std::min(local_min[i - 1], x[i]);\n}\n\n// Gather all local minimums to the root process\nstd::vector<float> global_min(n);\nMPI_Reduce(local_min.data(), global_min.data(), n, MPI_FLOAT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct result\nif (rank == 0) {\n    x = global_min;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006501458,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0050410614,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0077470322,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0098289509,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009597813825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0095744318125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01070155873125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01001600476875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01060130784687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01193438780625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02170604416836,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n, std::numeric_limits<float>::max());\n\n// Each process computes its local minimums\nfloat min = x[0];\nfor (int i = 0; i < n; i++) {\n    if (x[i] < min) {\n        min = x[i];\n    }\n    local_min[i] = min;\n}\n\n// Reduce to get the global minimums at rank 0\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_min[0], &x[0], n, MPI_FLOAT, MPI_MIN, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004308984,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0013821352,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\nfor (int i = 0; i < n; i++) {\n    if (rank == 0) {\n        global_min = x[i];\n        for (int j = 1; j < size; j++) {\n            MPI_Recv(&local_min[i], 1, MPI_FLOAT, j, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            global_min = std::min(global_min, local_min[i]);\n        }\n        x[i] = global_min;\n    } else {\n        local_min[i] = x[i];\n        for (int j = 0; j <= i; j++) {\n            local_min[i] = std::min(local_min[i], x[j]);\n        }\n        MPI_Send(&local_min[i], 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    for (int i = 1; i < n; i++) {\n        x[i] = std::min(x[i], x[i - 1]);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004404346,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002101727,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\nfor (int i = 0; i < n; i++) {\n    if (rank == 0) {\n        global_min = x[i];\n        for (int j = 1; j < size; j++) {\n            MPI_Recv(&local_min[i], 1, MPI_FLOAT, j, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            if (local_min[i] < global_min) {\n                global_min = local_min[i];\n            }\n        }\n        x[i] = global_min;\n    } else {\n        if (x[i] < x[i - 1] || i == 0) {\n            local_min[i] = x[i];\n        } else {\n            local_min[i] = x[i - 1];\n        }\n        MPI_Send(&local_min[i], 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    for (int i = 1; i < n; i++) {\n        x[i] = std::min(x[i], x[i - 1]);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004393622,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026666468,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.5800840743,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.46636925255,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.771249132,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.98932482485,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 4.02647848921875,
                        "num_procs": 32
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 64
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n, std::numeric_limits<float>::max());\n\n// Each process computes its local minimums\nfor (int i = rank; i < n; i += size) {\n    float min = x[i];\n    for (int j = 0; j <= i; ++j) {\n        if (x[j] < min) {\n            min = x[j];\n        }\n    }\n    local_min[i] = min;\n}\n\n// Reduce the local minimums to the global minimums at rank 0\nstd::vector<float> global_min(n);\nMPI_Reduce(local_min.data(), global_min.data(), n, MPI_FLOAT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Copy the result back to x on rank 0\nif (rank == 0) {\n    x = global_min;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_minima(n);\nfloat global_min;\n\nfor (int i = 0; i < n; ++i) {\n    // Each process computes its local minimum up to the i-th element\n    float local_min = (rank == 0) ? x[0] : local_minima[i - 1];\n    for (int j = rank; j <= i; j += size) {\n        if (x[j] < local_min) {\n            local_min = x[j];\n        }\n    }\n    local_minima[i] = local_min;\n\n    // Reduce to find the global minimum up to the i-th element\n    MPI_Allreduce(&local_min, &global_min, 1, MPI_FLOAT, MPI_MIN, MPI_COMM_WORLD);\n\n    // Broadcast the global minimum to all processes\n    MPI_Bcast(&global_min, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n    // Update the i-th element with the global minimum\n    if (rank == 0) {\n        x[i] = global_min;\n    }\n}\n\n// Ensure that rank 0 has the complete result\nMPI_Bcast(x.data(), n, MPI_FLOAT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\nfor (int i = 0; i < n; i++) {\n    // Each process computes its local minimum up to the i-th element\n    local_min[i] = (i == 0 || x[i] < local_min[i - 1]) ? x[i] : local_min[i - 1];\n    \n    // Reduce to find the global minimum up to the i-th element\n    MPI_Allreduce(&local_min[i], &global_min, 1, MPI_FLOAT, MPI_MIN, MPI_COMM_WORLD);\n    \n    // Broadcast the global minimum to all processes\n    MPI_Bcast(&global_min, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n    \n    // Update the i-th element with the global minimum\n    x[i] = global_min;\n}\n\n// Only rank 0 should have the final result\nif (rank != 0) {\n    x.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004391398,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0341980354,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local minimum\nfloat local_min = x[0];\nfor (int i = rank; i < x.size(); i += size) {\n    if (x[i] < local_min) {\n        local_min = x[i];\n    }\n    x[i] = local_min;\n}\n\n// Now we need to reduce all local minimums to the global minimum\nfloat global_min;\nMPI_Allreduce(&local_min, &global_min, 1, MPI_FLOAT, MPI_MIN, MPI_COMM_WORLD);\n\n// Broadcast the global minimum from rank 0 to all other ranks\nMPI_Bcast(&global_min, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Update the vector with the global minimum\nfor (int i = rank; i < x.size(); i += size) {\n    if (x[i] > global_min) {\n        x[i] = global_min;\n    }\n}\n\n// Gather the partial results at rank 0\nstd::vector<float> all_x(x.size());\nMPI_Gather(x.data(), x.size()/size, MPI_FLOAT, all_x.data(), x.size()/size, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// If rank 0, finalize the result\nif (rank == 0) {\n    for (int i = 0; i < x.size(); ++i) {\n        x[i] = all_x[i];\n        for (int j = 1; j < size; ++j) {\n            if (all_x[j * (x.size()/size) + i] < x[i]) {\n                x[i] = all_x[j * (x.size()/size) + i];\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.000438142,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0024722522,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process computes its local minimum\nfloat local_min = x[0];\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < local_min) {\n        local_min = x[i];\n    }\n    x[i] = local_min;\n}\n\n// Gather all local minimums to the root process\nstd::vector<float> all_mins(size);\nMPI_Gather(&local_min, 1, MPI_FLOAT, all_mins.data(), 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Only the root process computes the final result\nif (rank == 0) {\n    float global_min = all_mins[0];\n    for (int i = 1; i < size; i++) {\n        if (all_mins[i] < global_min) {\n            global_min = all_mins[i];\n        }\n    }\n    for (int i = 0; i < x.size(); i++) {\n        x[i] = std::min(x[i], global_min);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004383284,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0006592186,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\nfor (int i = 0; i < n; i++) {\n    if (rank == 0) {\n        global_min = x[i];\n        for (int j = 1; j < size; j++) {\n            MPI_Recv(&local_min[i], 1, MPI_FLOAT, j, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            global_min = std::min(global_min, local_min[i]);\n        }\n        x[i] = global_min;\n    } else {\n        local_min[i] = x[i];\n        MPI_Send(&local_min[i], 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD);\n    }\n    MPI_Bcast(&x[i], 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.000440837,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058940904,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n, std::numeric_limits<float>::max());\n\n// Each process computes its local minimums\nfor (int i = 0; i < n; ++i) {\n    local_min[i] = (i == 0) ? x[i] : std::min(local_min[i - 1], x[i]);\n}\n\n// Gather all local minimums to the root process\nstd::vector<float> global_min(n);\nMPI_Reduce(local_min.data(), global_min.data(), n, MPI_FLOAT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct result\nif (rank == 0) {\n    x = global_min;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006499894,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005062901,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0074066789,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0113141885,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010367395825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0100175428125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01100061064375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00995190106562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01176674010156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01158719513672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02204300448789,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\nfor (int i = 0; i < n; i++) {\n    // Each process computes its local minimum up to the i-th element\n    local_min[i] = (i == 0 || x[i] < local_min[i - 1]) ? x[i] : local_min[i - 1];\n    \n    // Reduce to find the global minimum up to the i-th element\n    MPI_Allreduce(&local_min[i], &global_min, 1, MPI_FLOAT, MPI_MIN, MPI_COMM_WORLD);\n    \n    // Broadcast the global minimum to all processes\n    MPI_Bcast(&global_min, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n    \n    // Rank 0 stores the result\n    if (rank == 0) {\n        x[i] = global_min;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004307984,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.034508921,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.9601658656,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 5.47858503905,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.323745788075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 10.04721375935,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 11.42252521066875,
                        "num_procs": 32
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 64
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process computes its local minimum\nfloat local_min = x[0];\nfor (int i = 0; i < x.size(); i++) {\n    if (x[i] < local_min) {\n        local_min = x[i];\n    }\n    x[i] = local_min;\n}\n\n// Gather all local minimums to the root process\nstd::vector<float> all_mins(size);\nMPI_Gather(&local_min, 1, MPI_FLOAT, all_mins.data(), 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Only the root process computes the final result\nif (rank == 0) {\n    float global_min = all_mins[0];\n    for (int i = 1; i < size; i++) {\n        if (all_mins[i] < global_min) {\n            global_min = all_mins[i];\n        }\n    }\n    for (int i = 0; i < x.size(); i++) {\n        x[i] = std::min(x[i], global_min);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0004346778,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0006619318,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\n// Each process computes its local minimums\nfloat min = x[0];\nfor (int i = rank; i < n; i += size) {\n    if (x[i] < min) {\n        min = x[i];\n    }\n    local_min[i] = min;\n}\n\n// Gather all local minimums to rank 0\nif (rank == 0) {\n    std::vector<float> all_min(size * n);\n    MPI_Gather(local_min.data(), n, MPI_FLOAT, all_min.data(), n, MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n    // Compute the global minimums from the gathered local minimums\n    for (int i = 0; i < n; ++i) {\n        global_min = all_min[i];\n        for (int j = 1; j < size; ++j) {\n            if (all_min[j * n + i] < global_min) {\n                global_min = all_min[j * n + i];\n            }\n        }\n        x[i] = global_min;\n    }\n} else {\n    // Other ranks just send their local minimums\n    MPI_Gather(local_min.data(), n, MPI_FLOAT, nullptr, n, MPI_FLOAT, 0, MPI_COMM_WORLD);\n}\n\n// Broadcast the result from rank 0 to all other ranks\nMPI_Bcast(x.data(), n, MPI_FLOAT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0006507026,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030564272,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0059522229,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\nfor (int i = 0; i < n; i++) {\n    // Each process computes its local minimum up to the i-th element\n    local_min[i] = (i == 0 || x[i] < local_min[i - 1]) ? x[i] : local_min[i - 1];\n    // Reduce to get the global minimum up to the i-th element\n    MPI_Allreduce(&local_min[i], &global_min, 1, MPI_FLOAT, MPI_MIN, MPI_COMM_WORLD);\n    // Broadcast the global minimum to all processes\n    MPI_Bcast(&global_min, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);\n    // Update the i-th element with the global minimum\n    x[i] = global_min;\n}\n\n// Only rank 0 holds the correct result, so we need to gather the results from all processes\nif (rank == 0) {\n    std::vector<float> recv_buf(n);\n    MPI_Gather(x.data(), n, MPI_FLOAT, recv_buf.data(), n, MPI_FLOAT, 0, MPI_COMM_WORLD);\n    x = recv_buf;\n} else {\n    MPI_Gather(x.data(), n, MPI_FLOAT, NULL, n, MPI_FLOAT, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0006526946,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0349556224,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\n// Each process computes its local minimums\nfloat min = x[0];\nfor (int i = 0; i < n; i++) {\n    if (x[i] < min) {\n        min = x[i];\n    }\n    local_min[i] = min;\n}\n\n// Reduce to get the global minimums at rank 0\nMPI_Reduce(local_min.data(), rank == 0 ? x.data() : nullptr, n, MPI_FLOAT, MPI_MIN, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0004320724,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014970122,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037114215,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00752837955,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00619378395,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060237928625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0070178875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00715210084062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00729578875469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00815006605391,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01701559413867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<float> local_min(n);\nfloat global_min;\n\n// Each process computes its local minimums\nfloat min = x[0];\nfor (int i = 0; i < n; i++) {\n    if (x[i] < min) {\n        min = x[i];\n    }\n    local_min[i] = min;\n}\n\n// Reduce to get the global minimums at rank 0\nMPI_Reduce(local_min.data(), rank == 0 ? x.data() : nullptr, n, MPI_FLOAT, MPI_MIN, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0004266706,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014787242,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037356937,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00619310335,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055969222,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00538139025,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00715615435625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006089516375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00666780808437,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00818772759844,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01684070125039,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "30_scan_prefix_sum",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the prefix sum of the vector x into output.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Store the result in output on rank 0.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(std::vector<double> const& x, std::vector<double> &output) {",
        "translation_prompt": "// Serial implementation of prefixSum\n// /* Compute the prefix sum of the vector x into output.\n//    Example:\n//    \n//    input: [1, 7, 4, 6, 6, 2]\n//    output: [1, 8, 12, 18, 24, 26]\n// */\n// void prefixSum(std::vector<double> const& x, std::vector<double> &output) {\n// output.resize(x.size());\n//   output[0] = x[0];\n//   for (int i = 1; i < x.size(); ++i) {\n//     output[i] = output[i-1] + x[i];\n//   }\n// }\n\n// MPI implementation of prefixSum\n#include <mpi.h>\n\n/* Compute the prefix sum of the vector x into output.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Store the result in output on rank 0.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(std::vector<double> const& x, std::vector<double> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the prefix sum of the vector x into output.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(std::vector<double> const& x, std::vector<double> &output) {\noutput.resize(x.size());\n  output[0] = x[0];\n  for (int i = 1; i < x.size(); ++i) {\n    output[i] = output[i-1] + x[i];\n  }\n}",
        "translation_function_name": "prefixSum",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Each process computes its partial prefix sum\nstd::vector<double> partial_sum(chunk_size);\npartial_sum[0] = x[start];\nfor (int i = start + 1; i < end; ++i) {\n    partial_sum[i - start] = partial_sum[i - start - 1] + x[i];\n}\n\n// Gather all partial sums to the root process\nstd::vector<double> all_partial_sums;\nif (rank == 0) {\n    all_partial_sums.resize(size * chunk_size);\n}\nMPI_Gather(partial_sum.data(), chunk_size, MPI_DOUBLE, all_partial_sums.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process finalizes the computation\nif (rank == 0) {\n    // Adjust the partial sums by adding the last element of the previous chunk\n    for (int i = 1; i < size; ++i) {\n        double last_sum = all_partial_sums[(i - 1) * chunk_size + chunk_size - 1];\n        for (int j = 0; j < chunk_size; ++j) {\n            all_partial_sums[i * chunk_size + j] += last_sum;\n        }\n    }\n\n    // Copy the final result to the output vector\n    for (int i = 0; i < size * chunk_size; ++i) {\n        output[i] = all_partial_sums[i];\n    }\n    // Copy the remaining elements if n is not divisible by size\n    for (int i = size * chunk_size; i < n; ++i) {\n        output[i] = output[i - 1] + x[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.008279075,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.063409258,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0353671669,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02284004685,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01867746815,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0086751582625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007873365525,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00475334831562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00416159292031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040091064625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00300724166562,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Each process computes its partial prefix sum\nstd::vector<double> partial_sum(chunk_size);\npartial_sum[0] = x[start];\nfor (int i = start + 1; i < end; ++i) {\n    partial_sum[i - start] = partial_sum[i - start - 1] + x[i];\n}\n\n// Gather all partial sums to the root process\nstd::vector<double> all_partial_sums;\nif (rank == 0) {\n    all_partial_sums.resize(size * chunk_size);\n}\nMPI_Gather(partial_sum.data(), chunk_size, MPI_DOUBLE, all_partial_sums.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process finalizes the computation\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        double increment = all_partial_sums[i * chunk_size - 1];\n        for (int j = 0; j < chunk_size; ++j) {\n            int index = i * chunk_size + j;\n            if (index < n) {\n                all_partial_sums[index] += increment;\n            }\n        }\n        if (i < size - 1) {\n            increment += all_partial_sums[(i + 1) * chunk_size - 1];\n        }\n    }\n\n    // Copy the final result to the output vector\n    for (int i = 0; i < n; ++i) {\n        output[i] = all_partial_sums[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0082308566,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0571623688,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0356870836,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02430058275,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.016901109075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0096339564875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00714574355,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00639198619062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00410074982813,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00447132813438,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00267568467539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the size of the chunk each process will compute\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Determine the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Local prefix sum computation\nstd::vector<double> local_prefix_sum(end - start);\nlocal_prefix_sum[0] = x[start];\nfor (int i = 1; i < local_prefix_sum.size(); ++i) {\n    local_prefix_sum[i] = local_prefix_sum[i - 1] + x[start + i];\n}\n\n// Gather all local prefix sums at the root\nstd::vector<double> all_local_sums(size);\nMPI_Gather(&local_prefix_sum.back(), 1, MPI_DOUBLE, all_local_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the offsets on the root process\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        all_local_sums[i] += all_local_sums[i - 1];\n    }\n}\n\n// Broadcast the offsets to all processes\ndouble offset = 0;\nif (rank != 0) {\n    MPI_Recv(&offset, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else {\n    output.resize(n);\n}\n\noffset += (rank == 0 ? 0 : all_local_sums[rank - 1]);\nfor (int i = 0; i < local_prefix_sum.size(); ++i) {\n    local_prefix_sum[i] += offset;\n}\n\n// Send the results to the root process\nif (rank != 0) {\n    MPI_Send(local_prefix_sum.data(), local_prefix_sum.size(), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    std::copy(local_prefix_sum.begin(), local_prefix_sum.end(), output.begin() + start);\n    for (int i = 1; i < size; ++i) {\n        int recv_start = i * local_n + std::min(i, remainder);\n        int recv_end = recv_start + local_n + (i < remainder ? 1 : 0);\n        MPI_Recv(output.data() + recv_start, recv_end - recv_start, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n\n// Send the offset to the next process\nif (rank < size - 1) {\n    double next_offset = offset + local_prefix_sum.back();\n    MPI_Send(&next_offset, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0086392628,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0230240232,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the size of the chunk each process will compute\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Compute the local prefix sum\nstd::vector<double> local_prefix_sum(end - start);\nlocal_prefix_sum[0] = x[start];\nfor (int i = 1; i < local_prefix_sum.size(); ++i) {\n    local_prefix_sum[i] = local_prefix_sum[i - 1] + x[start + i];\n}\n\n// Gather all local prefix sums at rank 0\nstd::vector<double> all_prefix_sums;\nif (rank == 0) {\n    all_prefix_sums.resize(n);\n}\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\nMPI_Gatherv(local_prefix_sum.data(), local_prefix_sum.size(), MPI_DOUBLE,\n            all_prefix_sums.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\n// Adjust the prefix sums on rank 0 by adding the last element of the previous chunk\nif (rank == 0) {\n    output.resize(n);\n    output.assign(all_prefix_sums.begin(), all_prefix_sums.end());\n    for (int i = 1; i < size; ++i) {\n        double add_value = output[displs[i] - 1];\n        for (int j = displs[i]; j < displs[i] + recvcounts[i]; ++j) {\n            output[j] += add_value;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0080870168,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0308003414,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0300074697,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0179264935,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.019864752525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.014534805725,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01385336139375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02004108051563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02130238327344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04359098647188,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00204645651562,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the size of the chunk each process will compute\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Determine the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Compute the local prefix sum\nstd::vector<double> local_prefix_sum(end - start);\nlocal_prefix_sum[0] = x[start];\nfor (int i = start + 1, j = 1; i < end; ++i, ++j) {\n    local_prefix_sum[j] = local_prefix_sum[j - 1] + x[i];\n}\n\n// Gather all local prefix sums at rank 0\nstd::vector<double> all_local_sums(size);\nMPI_Gather(&local_prefix_sum.back(), 1, MPI_DOUBLE, all_local_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the offsets on rank 0\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        all_local_sums[i] += all_local_sums[i - 1];\n    }\n}\n\n// Broadcast the offsets to all ranks\ndouble offset = 0;\nif (rank != 0) {\n    MPI_Recv(&offset, 1, MPI_DOUBLE, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else {\n    output.resize(n);\n}\n\n// Apply the offset to the local prefix sums\nfor (int i = 0; i < local_prefix_sum.size(); ++i) {\n    local_prefix_sum[i] += offset;\n}\n\n// Send the updated offset to the next rank\nif (rank < size - 1) {\n    double next_offset = local_prefix_sum.back();\n    MPI_Send(&next_offset, 1, MPI_DOUBLE, rank + 1, 0, MPI_COMM_WORLD);\n}\n\n// Gather all the local prefix sums at rank 0\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        recvcounts[i] = local_n + (i < remainder ? 1 : 0);\n        displs[i] = i * local_n + std::min(i, remainder);\n    }\n}\nMPI_Gatherv(local_prefix_sum.data(), local_prefix_sum.size(), MPI_DOUBLE,\n            output.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0081370528,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0225255762,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0141483385,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01429401665,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011440020225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012144560275,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0176959844625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011120598075,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02062612159531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03558407754219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03479499996641,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its partial prefix sum\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\noutput.resize(n);\n\n// Compute the local prefix sum\nstd::vector<double> local_prefix_sum(end - start);\nlocal_prefix_sum[0] = x[start];\nfor (int i = start + 1; i < end; ++i) {\n    local_prefix_sum[i - start] = local_prefix_sum[i - start - 1] + x[i];\n}\n\n// Gather all the local prefix sums at the root\nstd::vector<double> all_prefix_sums;\nif (rank == 0) {\n    all_prefix_sums.resize(n);\n}\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] += (i < remainder) ? 1 : 0;\n    displs[i] = i * local_n + std::min(i, remainder);\n}\nMPI_Gatherv(local_prefix_sum.data(), local_prefix_sum.size(), MPI_DOUBLE,\n            all_prefix_sums.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\n// Adjust the prefix sums on the root by adding the last element of the previous chunk\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        int prev_end = displs[i];\n        double add_value = all_prefix_sums[prev_end - 1];\n        for (int j = prev_end; j < displs[i] + recvcounts[i]; ++j) {\n            all_prefix_sums[j] += add_value;\n        }\n    }\n    output = all_prefix_sums;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0081619592,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0539001044,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0369503681,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0250766947,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02421632185,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0163197662625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0134453336125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01862220685,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02317991585313,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04290476209922,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00206061240508,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Each process computes its partial sum\nint chunk_size = (n + size - 1) / size; // Ceiling division to handle any size\nint start = rank * chunk_size;\nint end = std::min(start + chunk_size, n);\n\nstd::vector<double> partial_sums(n, 0);\nfor (int i = start; i < end; ++i) {\n    partial_sums[i] = (i == 0) ? x[i] : partial_sums[i - 1] + x[i];\n}\n\n// Gather all partial sums to rank 0\nstd::vector<double> all_partial_sums;\nif (rank == 0) {\n    all_partial_sums.resize(size * chunk_size, 0);\n}\nMPI_Gather(partial_sums.data() + start, chunk_size, MPI_DOUBLE,\n           all_partial_sums.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Rank 0 computes the final prefix sum\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        int offset = i * chunk_size;\n        for (int j = 0; j < chunk_size && offset + j < n; ++j) {\n            all_partial_sums[offset + j] += all_partial_sums[offset - chunk_size + j];\n        }\n    }\n\n    // Copy the final result to the output\n    for (int i = 0; i < n; ++i) {\n        output[i] = all_partial_sums[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0082275386,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.054591902,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0392625885,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Each process computes its partial sum\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\ndouble partial_sum = 0.0;\nfor (int i = start; i < end; ++i) {\n    partial_sum += x[i];\n    output[i] = partial_sum;\n}\n\n// Gather all partial sums to the root\nstd::vector<double> partial_sums(size);\nMPI_Gather(&partial_sum, 1, MPI_DOUBLE, partial_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process adjusts the partial results and computes the final prefix sum\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        partial_sums[i] += partial_sums[i - 1];\n    }\n    for (int i = 1; i < size; ++i) {\n        int adjust_start = i * chunk_size;\n        int adjust_end = (i == size - 1) ? n : adjust_start + chunk_size;\n        for (int j = adjust_start; j < adjust_end; ++j) {\n            output[j] += partial_sums[i - 1];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.008217065,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.034297286,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0175112679,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Each process computes its partial prefix sum\nstd::vector<double> partial_sum(chunk_size);\npartial_sum[0] = (start == 0) ? x[0] : x[start] + output[start - 1];\nfor (int i = start + 1; i < end; ++i) {\n    partial_sum[i - start] = partial_sum[i - start - 1] + x[i];\n}\n\n// Gather all partial sums to the root process\nstd::vector<double> all_partial_sums;\nif (rank == 0) {\n    all_partial_sums.resize(size * chunk_size);\n}\nMPI_Gather(partial_sum.data(), chunk_size, MPI_DOUBLE, all_partial_sums.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process finalizes the prefix sum\nif (rank == 0) {\n    output[0] = x[0];\n    for (int i = 1; i < n; ++i) {\n        int proc = i / chunk_size;\n        int index_within_chunk = i % chunk_size;\n        output[i] = all_partial_sums[proc * chunk_size + index_within_chunk];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0083367434,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0676168552,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0416545739,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Compute the local prefix sum\nstd::vector<double> local_prefix_sum(chunk_size);\nlocal_prefix_sum[0] = x[start];\nfor (int i = 1; i < chunk_size; ++i) {\n    local_prefix_sum[i] = local_prefix_sum[i - 1] + x[start + i];\n}\n\n// Gather all local prefix sums at rank 0\nstd::vector<double> all_prefix_sums;\nif (rank == 0) {\n    all_prefix_sums.resize(n);\n}\nMPI_Gather(local_prefix_sum.data(), chunk_size, MPI_DOUBLE, all_prefix_sums.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Adjust the local sums on rank 0\nif (rank == 0) {\n    output[0] = all_prefix_sums[0];\n    for (int i = 1; i < size; ++i) {\n        int offset_start = i * chunk_size;\n        int offset_end = (i == size - 1) ? n : offset_start + chunk_size;\n        for (int j = offset_start; j < offset_end; ++j) {\n            all_prefix_sums[j] += all_prefix_sums[offset_start - 1];\n        }\n    }\n    output = all_prefix_sums;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.008158617,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0358601162,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0272055124,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0186122154,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.013306900525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0073241569375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00637320481875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00474150775,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00376329117969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00396732751563,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00271664151992,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the size of the chunk each process will compute\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n;\nint end = (rank + 1) * local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Compute the local prefix sum\nstd::vector<double> local_prefix_sum(end - start);\nlocal_prefix_sum[0] = x[start];\nfor (int i = 1; i < local_prefix_sum.size(); ++i) {\n    local_prefix_sum[i] = local_prefix_sum[i - 1] + x[start + i];\n}\n\n// Gather all local prefix sums to the root process\nstd::vector<double> all_local_sums(n);\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust the counts and displacements for ranks with extra elements\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\ndispls[0] = 0;\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_prefix_sum.data(), local_prefix_sum.size(), MPI_DOUBLE,\n            all_local_sums.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\n// Only rank 0 will compute the final prefix sum\nif (rank == 0) {\n    output.resize(n);\n    output[0] = all_local_sums[0];\n    for (int i = 1; i < n; ++i) {\n        output[i] = output[i - 1] + all_local_sums[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0082727694,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0355695226,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Each process computes its partial prefix sum\nstd::vector<double> partial_sum(chunk_size);\npartial_sum[0] = x[start];\nfor (int i = 1; i < chunk_size; ++i) {\n    partial_sum[i] = partial_sum[i - 1] + x[start + i];\n}\n\n// Gather all partial sums to the root process\nstd::vector<double> all_partial_sums;\nif (rank == 0) {\n    all_partial_sums.resize(size * chunk_size);\n}\nMPI_Gather(partial_sum.data(), chunk_size, MPI_DOUBLE, all_partial_sums.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process computes the final prefix sum\nif (rank == 0) {\n    output[0] = x[0];\n    for (int i = 1; i < n; ++i) {\n        output[i] = output[i - 1] + x[i];\n    }\n\n    // Adjust the prefix sums by adding the last element of the previous chunk\n    for (int i = 1; i < size; ++i) {\n        double last_of_previous = (i == 1) ? output[chunk_size - 1] : all_partial_sums[(i - 1) * chunk_size - 1];\n        for (int j = 0; j < chunk_size; ++j) {\n            int idx = i * chunk_size + j;\n            if (idx < n) {\n                output[idx] += last_of_previous;\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0081465422,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0342880386,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0264574531,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Each process computes its partial sum\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\ndouble partial_sum = 0.0;\nfor (int i = start; i < end; ++i) {\n    partial_sum += x[i];\n    output[i] = partial_sum;\n}\n\n// Gather all partial sums to the root\nstd::vector<double> partial_sums(size);\nMPI_Gather(&partial_sum, 1, MPI_DOUBLE, partial_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root rank performs the final prefix sum computation\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        partial_sums[i] += partial_sums[i - 1];\n    }\n\n    // Adjust the output with the partial sums\n    for (int i = 1; i < size; ++i) {\n        int adjust_start = i * chunk_size;\n        int adjust_end = (i == size - 1) ? n : adjust_start + chunk_size;\n        for (int j = adjust_start; j < adjust_end; ++j) {\n            output[j] += partial_sums[i - 1];\n        }\n    }\n}\n\n// Broadcast the final result to all processes\nMPI_Bcast(output.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.00811322,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0326674622,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0268059356,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Each process computes its partial prefix sum\nstd::vector<double> partial_sum(chunk_size);\npartial_sum[0] = x[start];\nfor (int i = 1; i < chunk_size; ++i) {\n    partial_sum[i] = partial_sum[i - 1] + x[start + i];\n}\n\n// Gather all partial sums to the root process\nstd::vector<double> all_partial_sums(size);\nMPI_Gather(&partial_sum.back(), 1, MPI_DOUBLE, all_partial_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process computes the final prefix sum\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        all_partial_sums[i] += all_partial_sums[i - 1];\n    }\n\n    // Distribute the sums to all processes\n    MPI_Bcast(all_partial_sums.data(), size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\n// Each process updates its partial sum\ndouble offset = (rank == 0) ? 0 : all_partial_sums[rank - 1];\nfor (int i = 0; i < chunk_size; ++i) {\n    partial_sum[i] += offset;\n}\n\n// Gather the final prefix sums to the root process\nMPI_Gatherv(partial_sum.data(), chunk_size, MPI_DOUBLE, output.data(), \n            (rank == size - 1) ? &chunk_size : nullptr, \n            (rank == size - 1) ? &start : nullptr, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0082217748,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0241711106,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Each process computes its part of the prefix sum\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\ndouble sum = 0.0;\n\nfor (int i = start; i < end; ++i) {\n    sum += x[i];\n    output[i] = sum;\n}\n\n// Gather all partial sums to the root\nstd::vector<double> partial_sums(size);\nMPI_Gather(&sum, 1, MPI_DOUBLE, partial_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Adjust the prefix sums on the root\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        partial_sums[i] += partial_sums[i - 1];\n    }\n\n    for (int i = 1; i < size; ++i) {\n        int adjust_start = i * chunk_size;\n        int adjust_end = (i == size - 1) ? n : adjust_start + chunk_size;\n        for (int j = adjust_start; j < adjust_end; ++j) {\n            output[j] += partial_sums[i - 1];\n        }\n    }\n}\n\n// Broadcast the final result to all processes\nMPI_Bcast(output.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0081214302,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0327135586,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0253209182,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process computes its portion of the prefix sum\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\noutput.resize(n, 0.0);\nstd::vector<double> local_output(end - start);\n\n// Compute local prefix sums\nlocal_output[0] = x[start];\nfor (int i = start + 1; i < end; ++i) {\n    local_output[i - start] = local_output[i - start - 1] + x[i];\n}\n\n// Gather all local prefix sums to the root process\nstd::vector<double> gather_offsets(size);\nMPI_Gather(&local_output.back(), 1, MPI_DOUBLE, gather_offsets.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process computes the final prefix sum\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        gather_offsets[i] += gather_offsets[i - 1];\n    }\n\n    // Distribute the offsets to all processes\n    MPI_Bcast(gather_offsets.data(), size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\n// Apply the gathered offsets to local prefix sums\ndouble offset = rank == 0 ? 0 : gather_offsets[rank - 1];\nfor (int i = 0; i < local_output.size(); ++i) {\n    local_output[i] += offset;\n}\n\n// Gather the final prefix sums to the root process\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\nMPI_Gatherv(local_output.data(), local_output.size(), MPI_DOUBLE, output.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0081331328,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0458413496,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Each process computes its partial prefix sum\nstd::vector<double> partial_sum(chunk_size);\npartial_sum[0] = x[start];\nfor (int i = 1; i < chunk_size; ++i) {\n    partial_sum[i] = partial_sum[i - 1] + x[start + i];\n}\n\n// Gather all partial sums to the root process\nstd::vector<double> all_partial_sums;\nif (rank == 0) {\n    all_partial_sums.resize(size * chunk_size);\n}\nMPI_Gather(partial_sum.data(), chunk_size, MPI_DOUBLE, all_partial_sums.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process computes the final prefix sum\nif (rank == 0) {\n    output = all_partial_sums;\n    for (int i = 1; i < size; ++i) {\n        int offset = i * chunk_size;\n        for (int j = 0; j < chunk_size; ++j) {\n            if (offset + j < n) {\n                output[offset + j] += output[offset - 1];\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0081089852,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0308786322,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0253466778,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0172293096,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01498039455,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007145756225,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060247101125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00605371831875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00379153117969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00411457725859,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00265095792188,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the size of the chunk each process will compute\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Local prefix sum\nstd::vector<double> local_prefix_sum(end - start);\nlocal_prefix_sum[0] = x[start];\nfor (int i = 1; i < local_prefix_sum.size(); ++i) {\n    local_prefix_sum[i] = local_prefix_sum[i - 1] + x[start + i];\n}\n\n// Gather all local prefix sums at the root\nstd::vector<double> all_local_sums(size);\nMPI_Gather(&local_prefix_sum.back(), 1, MPI_DOUBLE, all_local_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 computes the final prefix sum\nif (rank == 0) {\n    output.resize(n);\n    std::vector<double> offsets(size, 0.0);\n    for (int i = 1; i < size; ++i) {\n        offsets[i] = offsets[i - 1] + all_local_sums[i - 1];\n    }\n\n    // Scatter the offsets back to all processes\n    double local_offset;\n    MPI_Scatter(offsets.data(), 1, MPI_DOUBLE, &local_offset, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Apply the offset to local prefix sums and gather at root\n    for (int i = 0; i < local_prefix_sum.size(); ++i) {\n        local_prefix_sum[i] += local_offset;\n    }\n} else {\n    // Non-root ranks receive their offset\n    double local_offset;\n    MPI_Scatter(NULL, 0, MPI_DOUBLE, &local_offset, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Apply the offset to local prefix sums\n    for (int i = 0; i < local_prefix_sum.size(); ++i) {\n        local_prefix_sum[i] += local_offset;\n    }\n}\n\n// Gather the final prefix sums at the root\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = i < remainder ? local_n + 1 : local_n;\n    displs[i] = i * local_n + std::min(i, remainder);\n}\nMPI_Gatherv(local_prefix_sum.data(), local_prefix_sum.size(), MPI_DOUBLE, output.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0081227614,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0224966668,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0139109373,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01271628965,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0096542355,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008273976025,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01730294525625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03008662635937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01900946303281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02765815406328,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02084730888008,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Compute the local prefix sum\nstd::vector<double> local_prefix_sum(end - start);\nlocal_prefix_sum[0] = x[start];\nfor (int i = 1; i < end - start; ++i) {\n    local_prefix_sum[i] = local_prefix_sum[i - 1] + x[start + i];\n}\n\n// Gather all local prefix sums at the root\nstd::vector<double> all_local_sums(size);\nMPI_Gather(&local_prefix_sum.back(), 1, MPI_DOUBLE, all_local_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the offsets for each process at the root\nstd::vector<double> offsets(size, 0);\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        offsets[i] = offsets[i - 1] + all_local_sums[i - 1];\n    }\n}\n\n// Broadcast the offsets to all processes\nMPI_Bcast(offsets.data(), size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Adjust local prefix sums with the offsets\nfor (int i = 0; i < end - start; ++i) {\n    local_prefix_sum[i] += offsets[rank];\n}\n\n// Gather the final prefix sum at the root\noutput.resize(n);\nMPI_Gatherv(local_prefix_sum.data(), end - start, MPI_DOUBLE, output.data(), \n            std::vector<int>(size, local_n).data(), \n            std::vector<int>(size, 0).data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0082066844,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0241136124,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0152480925,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// Calculate the size of the chunk each process will compute\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Each process computes its partial prefix sum\nstd::vector<double> partial_sum(chunk_size);\npartial_sum[0] = x[start];\nfor (int i = 1; i < chunk_size; ++i) {\n    partial_sum[i] = partial_sum[i - 1] + x[start + i];\n}\n\n// Gather all partial sums to the root process\nstd::vector<double> all_partial_sums(size);\nMPI_Gather(&partial_sum.back(), 1, MPI_DOUBLE, all_partial_sums.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only the root process computes the final prefix sum\nif (rank == 0) {\n    for (int i = 1; i < size; ++i) {\n        all_partial_sums[i] += all_partial_sums[i - 1];\n    }\n\n    // Distribute the increments to all processes\n    std::vector<double> increments(size);\n    MPI_Scatter(all_partial_sums.data(), 1, MPI_DOUBLE, &increments[rank], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Apply the increments to each chunk\n    for (int i = 0; i < chunk_size; ++i) {\n        partial_sum[i] += increments[rank];\n    }\n} else {\n    // Non-root processes receive their increment\n    double increment;\n    MPI_Scatter(NULL, 0, MPI_DOUBLE, &increment, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Apply the increment to each chunk\n    for (int i = 0; i < chunk_size; ++i) {\n        partial_sum[i] += increment;\n    }\n}\n\n// Gather the final prefix sum at the root process\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : partial_sum.data(), chunk_size, MPI_DOUBLE,\n            output.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            }
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "56_transform_negate_odds",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* In the vector x negate the odd values and divide the even values by 2.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(std::vector<int> &x) {",
        "translation_prompt": "// Serial implementation of negateOddsAndHalveEvens\n// /* In the vector x negate the odd values and divide the even values by 2.\n//    Example:\n// \n//    input: [16, 11, 12, 14, 1, 0, 5]\n//    output: [8, -11, 6, 7, -1, 0, -5]\n// */\n// void negateOddsAndHalveEvens(std::vector<int> &x) {\n// for (int i = 0; i < x.size(); i++) {\n//         if (x[i] % 2 == 0) {\n//             x[i] /= 2;\n//         } else {\n//             x[i] = -x[i];\n//         }\n//     }\n// }\n\n// MPI implementation of negateOddsAndHalveEvens\n#include <mpi.h>\n\n/* In the vector x negate the odd values and divide the even values by 2.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(std::vector<int> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* In the vector x negate the odd values and divide the even values by 2.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(std::vector<int> &x) {\nfor (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            x[i] /= 2;\n        } else {\n            x[i] = -x[i];\n        }\n    }\n}",
        "translation_function_name": "negateOddsAndHalveEvens",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process performs the operation on its portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> recv_buf;\nif (rank == 0) {\n    recv_buf.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_INT,\n            recv_buf.data(), counts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into the input vector on rank 0\nif (rank == 0) {\n    x = recv_buf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009815676,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.002509847,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process computes its portion of the array\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results at rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n + (rank < remainder ? 1 : 0), MPI_INT,\n           result.data(), local_n + (rank < remainder ? 1 : 0), MPI_INT, 0, MPI_COMM_WORLD);\n\n// If rank 0, copy the gathered results back into x\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009772816,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.002528085,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Each process performs the operation on its subset of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        if (result[i] % 2 == 0) {\n            result[i] /= 2;\n        } else {\n            result[i] = -result[i];\n        }\n    }\n}\n\n// Copy the result back into the original vector on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009782756,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0025411834,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting index for each process\nint start = rank * local_n + std::min(rank, remainder);\n// Calculate the ending index for each process\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process performs the operation on its portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> recv_buf;\nif (rank == 0) {\n    recv_buf.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(x.data() + start, counts[rank], MPI_INT,\n             recv_buf.data(), counts.data(), displs.data(), MPI_INT,\n             0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = recv_buf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0009784496,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032642802,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031725963,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041385782,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003974157575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042036765,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00547922606875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00394561242187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00108433144531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00178059738828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00164985276797,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Each process computes its portion of the array\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results at rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        if (result[i] % 2 == 0) {\n            result[i] /= 2;\n        } else {\n            result[i] = -result[i];\n        }\n    }\n}\n\n// Copy the result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0011716022,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.002848276,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], local_n, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int recv_start = i * local_n;\n        int recv_end = (i == size - 1) ? n : recv_start + local_n;\n        MPI_Recv(&x[recv_start], recv_end - recv_start, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0009769608,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010049996,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019500874,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037069108,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003840910075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0048684876375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00967676205625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00498338552188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00884612563906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00933732287109,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01647165605586,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process computes its portion of the array\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results back to rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n + (rank < remainder ? 1 : 0), MPI_INT,\n           result.data(), local_n + (rank < remainder ? 1 : 0), MPI_INT, 0, MPI_COMM_WORLD);\n\n// If rank 0, copy the gathered result back into x\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009766522,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0028590374,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the last ranks\nif (rank == size - 1) {\n    end += remainder;\n}\n\n// Each process computes its portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results back to the root process\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there's a remainder, handle it separately\nif (remainder > 0 && rank == 0) {\n    MPI_Recv(&result[n - remainder], remainder, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (remainder > 0 && rank == size - 1) {\n    MPI_Send(&x[end - remainder], remainder, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n\n// Copy the result back into x if this is rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009806176,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0027900178,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], local_n, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int recv_start = i * local_n;\n        int recv_end = (i == size - 1) ? n : recv_start + local_n;\n        MPI_Recv(&x[recv_start], recv_end - recv_start, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000977534,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010030436,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019654461,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0038317483,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00465782415,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003623351925,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0084658232,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00662705555313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01130345445625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00868812044219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03161786948555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Each process computes its portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results at rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        if (result[i] % 2 == 0) {\n            result[i] /= 2;\n        } else {\n            result[i] = -result[i];\n        }\n    }\n}\n\n// Copy the result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009803112,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0025643064,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\nstd::vector<int> recv_buffer;\nif (rank == 0) {\n    recv_buffer.resize(n);\n}\n\n// Gather the modified segments of the vector at the root process\nMPI_Gather(x.data() + start, end - start, MPI_INT,\n           recv_buffer.data(), local_n, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If there's a remainder, the last process sends its additional elements\nif (remainder > 0 && rank == size - 1) {\n    MPI_Send(x.data() + n - remainder, remainder, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else if (rank == 0) {\n    MPI_Recv(recv_buffer.data() + n - remainder, remainder, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// Copy the gathered result back into the original vector on rank 0\nif (rank == 0) {\n    x = recv_buffer;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Each process performs the operation on its portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        if (result[i] % 2 == 0) {\n            result[i] /= 2;\n        } else {\n            result[i] = -result[i];\n        }\n    }\n}\n\n// Copy the gathered result back into the original vector on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009756596,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0025548998,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], local_n, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int recv_start = i * local_n;\n        int recv_end = (i == size - 1) ? n : recv_start + local_n;\n        MPI_Recv(&x[recv_start], recv_end - recv_start, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0009780806,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020238386,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019700519,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00302372445,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002289112675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0033657468625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00429730446875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002875310825,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00095413576562,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00164026060937,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00175481092539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\nstd::vector<int> local_x(n);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           &local_x[0], local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = local_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0010028016,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0029378298,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the last ranks\nif (rank == size - 1) {\n    end += remainder;\n}\n\n// Each process performs the operation on its portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           recvbuf.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there's a remainder, handle it separately\nif (remainder > 0 && rank == 0) {\n    MPI_Recv(&recvbuf[n - remainder], remainder, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (remainder > 0 && rank == size - 1) {\n    MPI_Send(&x[end - remainder], remainder, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009778244,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0036172184,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each rank\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each rank processes its portion of the vector\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results at rank 0\nstd::vector<int> recv_buf;\nif (rank == 0) {\n    recv_buf.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for gathering\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_INT,\n            recv_buf.data(), counts.data(), displs.data(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into the input vector on rank 0\nif (rank == 0) {\n    x = recv_buf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0010017372,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0029997616,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Each process performs the operation on its portion of the vector\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// handle the remaining elements\nif (rank == 0 && n % size != 0) {\n    for (int i = size * local_n; i < n; i++) {\n        if (result[i] % 2 == 0) {\n            result[i] /= 2;\n        } else {\n            result[i] = -result[i];\n        }\n    }\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009773174,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019367516,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0026367173,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        if (result[i] % 2 == 0) {\n            result[i] /= 2;\n        } else {\n            result[i] = -result[i];\n        }\n    }\n}\n\n// Copy the gathered result back into the input vector on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009851422,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.002601242,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], end - start, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int recv_start = i * local_n;\n        int recv_end = (i == size - 1) ? n : recv_start + local_n;\n        MPI_Recv(&x[recv_start], recv_end - recv_start, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0009773716,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009847114,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001984856,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00261496405,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014675647,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003095755775,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00326033943125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0022444403875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00093107345469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163276889141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00181454834219,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Each process computes its portion of the array.\nfor (int i = start; i < end; i++) {\n    if (x[i] % 2 == 0) {\n        x[i] /= 2;\n    } else {\n        x[i] = -x[i];\n    }\n}\n\n// Gather the results at the root process.\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0.\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0009795578,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.002534874,
                        "num_procs": 1
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "59_transform_map_function",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nbool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored in mask on rank 0.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {",
        "translation_prompt": "// Serial implementation of mapPowersOfTwo\n// bool isPowerOfTwo(int x) {\n// \treturn (x > 0) && !(x & (x - 1));\n// }\n// \n// /* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n//    Example:\n// \n//    input: [8, 0, 9, 7, 15, 64, 3]\n//    output: [true, false, false, false, false, true, false]\n// */\n// void mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {\n// for (int i = 0; i < x.size(); i++) {\n// \t\tmask[i] = isPowerOfTwo(x[i]);\n// \t}\n// }\n\n// MPI implementation of mapPowersOfTwo\n#include <mpi.h>\n\nbool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored in mask on rank 0.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "bool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(std::vector<int> const& x, std::vector<bool> &mask) {\nfor (int i = 0; i < x.size(); i++) {\n\t\tmask[i] = isPowerOfTwo(x[i]);\n\t}\n}",
        "translation_function_name": "mapPowersOfTwo",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; ++i) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process extra elements\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that received an extra element\nfor (int i = 0; i < remainder; i++) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; i++) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its part of the result\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    mask.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), counts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the result\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process an extra element\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process extra elements\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process an extra element\nfor (int i = 0; i < remainder; i++) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; i++) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(n);\nfor (int i = start; i < end; i++) {\n    local_mask[i] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<bool> all_masks(size * n);\nMPI_Gather(local_mask.data(), n, MPI_CXX_BOOL, all_masks.data(), n, MPI_CXX_BOOL, 0, MPI_COMM_WORLD);\n\n// On rank 0, combine the results\nif (rank == 0) {\n    mask.resize(n);\n    for (int i = 0; i < size; i++) {\n        int r_start = i * local_n + std::min(i, remainder);\n        int r_end = r_start + local_n;\n        if (i < remainder) r_end++;\n        for (int j = r_start; j < r_end; j++) {\n            mask[j] = all_masks[j];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\nstd::vector<bool> local_mask(end - start);\n\n// Apply the isPowerOfTwo function to the local subset of x\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process an extra element\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\n\n// Calculate displacements\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; ++i) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\nstd::vector<bool> local_mask(end - start);\n\n// Apply the isPowerOfTwo function to the local subset of x\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process an extra element\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\n\n// Calculate displacements\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that received an extra element\nfor (int i = 0; i < remainder; i++) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; i++) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\nstd::vector<bool> local_mask(end - start);\n\n// Apply the isPowerOfTwo function to the local portion of the data\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the result\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    mask.resize(n);\n}\n\nstd::vector<int> counts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process an extra element\nfor (int i = 0; i < remainder; ++i) {\n    counts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + counts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), counts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the result\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; ++i) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    mask.resize(n);\n}\n\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process extra elements\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\n\ndispls[0] = 0;\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\nstd::vector<bool> local_mask(end - start);\n\n// Apply the isPowerOfTwo function to the local subset of x\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for ranks that process an extra element\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\n\n// Calculate displacements\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nstd::vector<bool> local_mask(end - start);\n\n// Apply the isPowerOfTwo function to the local subset of x\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n             mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n             0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at the root process\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\n\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its part of the mask\nstd::vector<bool> local_mask(end - start);\nfor (int i = start; i < end; i++) {\n    local_mask[i - start] = isPowerOfTwo(x[i]);\n}\n\n// Gather the results at rank 0\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_mask.data(), local_mask.size(), MPI_C_BOOL,\n            mask.data(), recvcounts.data(), displs.data(), MPI_C_BOOL,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            }
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "57_transform_inverse_offset",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Replace every element of the vector x with 1-1/x.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(std::vector<double> &x) {",
        "translation_prompt": "// Serial implementation of oneMinusInverse\n// /* Replace every element of the vector x with 1-1/x.\n//    Example:\n// \n//    input: [2, 4, 1, 12, -2]\n//    output: [0.5, 0.75, 0, 0.91666666, 1.5]\n// */\n// void oneMinusInverse(std::vector<double> &x) {\n// for (auto &e : x) {\n//     e = 1.0 - 1.0 / e;\n//   }\n// }\n\n// MPI implementation of oneMinusInverse\n#include <mpi.h>\n\n/* Replace every element of the vector x with 1-1/x.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(std::vector<double> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Replace every element of the vector x with 1-1/x.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(std::vector<double> &x) {\nfor (auto &e : x) {\n    e = 1.0 - 1.0 / e;\n  }\n}",
        "translation_function_name": "oneMinusInverse",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\nif (rank != 0) {\n    // Send the computed part back to rank 0\n    MPI_Send(&x[start], end - start, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    // Receive the computed parts from other ranks\n    for (int i = 1; i < size; ++i) {\n        int r_start = i * local_n + std::min(i, remainder);\n        int r_end = r_start + local_n + (i < remainder ? 1 : 0);\n        MPI_Recv(&x[r_start], r_end - r_start, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n\n// Broadcast the result from rank 0 to all other ranks\nMPI_Bcast(x.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0014662068,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014674428,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031766933,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00875040825,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011351879025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01132777375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02133513149375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01714839128438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02406189435312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03762844458281,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.06052702118594,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for the current process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Perform the computation on the local portion of the data\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nstd::vector<int> counts(size, local_n);\nstd::vector<int> displs(size, 0);\n\n// Adjust counts and displacements for any remainder\nfor (int i = 0; i < remainder; ++i) {\n    counts[i]++;\n}\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + counts[i - 1];\n}\n\nMPI_Gatherv(x.data() + start, end - start, MPI_DOUBLE,\n             result.data(), counts.data(), displs.data(), MPI_DOUBLE,\n             0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into the input vector on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0014627182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042110528,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034840851,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040520989,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00397020855,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040548521125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00514885925625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00410595788437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001138431375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00192074729609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00225839990664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for the current process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Perform the computation on the local portion of the data\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n            result.data(), counts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014645778,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0031049354,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], end - start, MPI_DOUBLE,\n           result.data(), end - start, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014766962,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00334517,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Perform the computation on the local part of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_DOUBLE,\n           result.data(), local_n + (rank < remainder ? 1 : 0), MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0014620552,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003729054,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0035776816,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00372941315,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00361910835,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015728709,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0022138918375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00113216545,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00072598170469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00056072352344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078440094102,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Compute the portion of the array that this process is responsible for\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\n// Calculate the displacements and receive counts for the gather operation\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] += (i < remainder) ? 1 : 0;\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], end - start, MPI_DOUBLE,\n            result.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into the input vector on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001462406,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0030656798,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\nif (rank != 0) {\n    // Send the computed part back to the root process\n    MPI_Send(&x[start], end - start, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    // Receive the computed parts from other processes\n    for (int i = 1; i < size; ++i) {\n        int r_start = i * local_n;\n        int r_end = (i == size - 1) ? n : r_start + local_n;\n        MPI_Recv(&x[r_start], r_end - r_start, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0014627904,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014940412,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016902178,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027825583,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001746433275,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029084882875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003837724475,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026102582,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094376666562,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158891296016,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00154154382969,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n            result.data(), counts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back to the input vector on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014629026,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0029637564,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\n// Calculate the displacements for the gather operation\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\nfor (int i = 0; i < size; ++i) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n            result.data(), counts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into the input vector on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014630188,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0030467458,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather results on rank 0\nstd::vector<double> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n            recvbuf.data(), counts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014626982,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.003051962,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the last ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Compute the oneMinusInverse for the local portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_DOUBLE, result.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If there's a remainder, handle the last few elements\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        result[i] = 1.0 - 1.0 / result[i];\n    }\n}\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014647362,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.003025506,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for the current process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n;\nif (rank < remainder) end++;\n\n// Perform the operation on the local portion of the data\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\n// Calculate the displacements and receive counts for the gather\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\ndispls[0] = 0;\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(x.data() + start, end - start, MPI_DOUBLE,\n            result.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001462185,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0038090742,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034175952,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00407625335,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003964302575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0038082299375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00633266425625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00385106904375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00113653036875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00182921723906,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00172026149492,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_DOUBLE,\n           result.data(), local_n, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// If there is a remainder, handle the extra elements\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        result[i] = 1.0 - 1.0 / result[i];\n    }\n}\n\n// Broadcast the result to all processes\nMPI_Bcast(result.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the result back to the input vector\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015050738,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041912696,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], end - start, MPI_DOUBLE,\n           result.data(), end - start, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0016450424,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.004966598,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_DOUBLE,\n           result.data(), local_n, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// If there's a remainder, handle the last few elements\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        result[i] = 1.0 - 1.0 / result[i];\n    }\n}\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001463782,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037179614,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0033270904,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037833643,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00429634025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021718801875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00224098789375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00111301783125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00085601277188,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005444964,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00075067949883,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_DOUBLE,\n           result.data(), end - start, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0014628906,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037438798,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032926207,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031757895,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00338770215,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00161595265,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207042253125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00122353022187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00080188401094,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00064087448828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00087367715156,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Perform the computation on the local part of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n            result.data(), counts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014647758,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0030576368,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nint start = rank * local_n;\nint end = start + local_n;\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather results at rank 0\nstd::vector<double> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nMPI_Gather(x.data() + start, local_n, MPI_DOUBLE, recvbuf.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered results back into x on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0014642412,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003693359,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0033047786,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034760076,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003644147575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001537980225,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00259171436875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0012067875625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083028786563,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00056036017187,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083680041563,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_DOUBLE,\n           result.data(), local_n + (rank < remainder ? 1 : 0), MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0014650308,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004542679,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0033653492,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003338804,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003676886475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001542171275,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00212671341875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00115559245625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00077168074375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00052056234375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078620480234,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Each process computes its portion of the vector\nfor (int i = start; i < end; ++i) {\n    x[i] = 1.0 - 1.0 / x[i];\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_DOUBLE,\n           result.data(), local_n + (rank < remainder ? 1 : 0), MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into the original vector on rank 0\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        int r_start = i * local_n + std::min(i, remainder);\n        int r_end = r_start + local_n + (i < remainder ? 1 : 0);\n        if (i != 0) {\n            std::copy(result.begin() + r_start, result.begin() + r_end, x.begin() + r_start);\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001464251,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034129672,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0035581839,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00352632795,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00390401725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018573773125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020892177875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130333118125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00090808875781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00057614578828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00084926810195,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "55_transform_relu",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(std::vector<double> &x) {",
        "translation_prompt": "// Serial implementation of relu\n// /* Compute the ReLU function on every element of x. Elements less than zero become zero,\n//    while elements greater than zero stay the same.\n//    Example:\n// \n//    input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n//    output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n// */\n// void relu(std::vector<double> &x) {\n// for (int i = 0; i < x.size(); i++) {\n//         if (x[i] < 0) {\n//             x[i] = 0;\n//         }\n//     }\n// }\n\n// MPI implementation of relu\n#include <mpi.h>\n\n/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(std::vector<double> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(std::vector<double> &x) {\nfor (int i = 0; i < x.size(); i++) {\n        if (x[i] < 0) {\n            x[i] = 0;\n        }\n    }\n}",
        "translation_function_name": "relu",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint chunk_size = (n + size - 1) / size; // Calculate the size of each sub-array\nint start = rank * chunk_size;\nint end = std::min(start + chunk_size, n);\n\n// Apply ReLU to the local portion of the array\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather the results at the root process\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, chunk_size, MPI_DOUBLE,\n           result.data(), chunk_size, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0011030496,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0288114224,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0196981815,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0136556414,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010981432475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053869652125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041002463125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023301322,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020941549625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00135124133906,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00182547942734,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint chunk_size = (n + size - 1) / size; // Calculate the chunk size, rounding up\nint start = rank * chunk_size;\nint end = std::min(start + chunk_size, n);\n\n// Apply ReLU to the local chunk\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], chunk_size, MPI_DOUBLE,\n           result.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015158456,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.025634434,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<double> recv_buffer;\nif (rank == 0) {\n    recv_buffer.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(x.data() + start, counts[rank], MPI_DOUBLE,\n             recv_buffer.data(), counts.data(), displs.data(), MPI_DOUBLE,\n             0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recv_buffer;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001100218,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0274866046,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0171790888,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0120956107,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0114179863,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009662919125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00953270774375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00923795540625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01177088615781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00174720434141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015863685082,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting index for each process\nint start = rank * local_n + std::min(rank, remainder);\n// Calculate the number of elements for each process\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Apply ReLU to the local portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather the results on rank 0\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n             rank == 0 ? result.data() : nullptr, counts.data(), displs.data(),\n             MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the result back to x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0010522818,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.02606218,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<double> recv_buf;\nif (rank == 0) {\n    recv_buf.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_DOUBLE,\n           recv_buf.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recv_buf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0019139628,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0285071056,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint chunk_size = (n + size - 1) / size; // Calculate the size of each sub-vector\nint start = rank * chunk_size;\nint end = std::min(start + chunk_size, n);\n\n// Each process computes its own part of the ReLU function\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, chunk_size, MPI_DOUBLE,\n           result.data(), chunk_size, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0011001038,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0274073538,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0164543704,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01146131835,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00904509565,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043111874875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042495017,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00227597493125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00175368305625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00144312078672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00165597416016,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the start and end indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Apply ReLU to the local portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at the root process\nstd::vector<double> recv_buf;\nif (rank == 0) {\n    recv_buf.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(x.data() + start, counts[rank], MPI_DOUBLE,\n             recv_buf.data(), counts.data(), displs.data(), MPI_DOUBLE,\n             0, MPI_COMM_WORLD);\n\n// Copy the gathered results back into x on the root process\nif (rank == 0) {\n    x = recv_buf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0011297236,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.027986218,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0181119781,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01345745155,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0113492571,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0096366451875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00910526855,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00906815424688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01205481027187,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00190403411563,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00176878956445,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : (start + local_n);\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_DOUBLE, result.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0024058756,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0284127322,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], local_n, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int recv_start = i * local_n;\n        int recv_end = (i == size - 1) ? n : recv_start + local_n;\n        MPI_Recv(&x[recv_start], recv_end - recv_start, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0009669566,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0201287924,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0132120528,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00880218975,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061165989,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0049508026125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055869782,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00442669762812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00405700639063,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00113187064375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014191803457,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<double> recv_buffer;\nif (rank == 0) {\n    recv_buffer.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n             recv_buffer.data(), counts.data(), displs.data(), MPI_DOUBLE,\n             0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recv_buffer;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0012653778,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0260282828,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<double> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_DOUBLE,\n           recvbuf.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0010751292,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.025447531,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], local_n, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int local_start = i * local_n;\n        int local_end = (i == size - 1) ? n : local_start + local_n;\n        MPI_Recv(&x[local_start], local_end - local_start, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0009194348,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0202213378,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0128958972,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00839446675,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005268772775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005378443025,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00537797815625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00316044571562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00518119962812,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00138329755469,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00139686993516,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<double> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n            recvbuf.data(), counts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0012703414,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0258958204,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], local_n, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int src_start = i * local_n;\n        int src_end = (i == size - 1) ? n : src_start + local_n;\n        MPI_Recv(&x[src_start], src_end - src_start, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0008813232,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0199841088,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0123182054,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0086906974,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0056120222,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0052473236875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00564146580625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00495733263438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00433286656406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130370294922,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134861815547,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results on rank 0\nstd::vector<double> recv_buffer;\nif (rank == 0) {\n    recv_buffer.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_DOUBLE,\n           recv_buffer.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recv_buffer;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0014008262,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.026591852,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\n\n// Calculate the starting and ending indices for each process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Apply ReLU to the local portion of the data\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather the results at rank 0\nstd::vector<double> recv_buf;\nif (rank == 0) {\n    recv_buf.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\n// Calculate counts and displacements for the gather\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(rank == 0 ? MPI_IN_PLACE : &x[start], counts[rank], MPI_DOUBLE,\n            recv_buf.data(), counts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = recv_buf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0011287376,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.026291336,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<double> recv_buffer;\nif (rank == 0) {\n    recv_buffer.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_DOUBLE,\n           recv_buffer.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recv_buffer;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015279384,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.026442019,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\nstd::vector<double> global_x;\nif (rank == 0) {\n    global_x.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_DOUBLE,\n           global_x.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = global_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0010955456,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.025905446,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at root\nstd::vector<double> recv_buffer;\nif (rank == 0) {\n    recv_buffer.resize(n);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; i++) {\n    counts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + std::min(i, remainder);\n}\n\nMPI_Gatherv(x.data() + start, counts[rank], MPI_DOUBLE,\n             recv_buffer.data(), counts.data(), displs.data(), MPI_DOUBLE,\n             0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = recv_buffer;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0012060206,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0271437756,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0170145108,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01202952345,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01249617665,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.010215441575,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0100736603,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00866253576562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.013120970925,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207662250391,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00173995076094,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint start = rank * local_n;\nint end = start + local_n;\n\n// Each process computes its portion of the ReLU function\nfor (int i = start; i < end; i++) {\n    if (x[i] < 0) {\n        x[i] = 0;\n    }\n}\n\n// Gather results at root\nstd::vector<double> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, local_n, MPI_DOUBLE, result.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0012185562,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0291778114,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0168847931,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0115640046,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0091028789,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045562439,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0039394152875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00235237198125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00171996915625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00133576958984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00197563724922,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "58_transform_squaring",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Replace every element of x with the square of its value.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(std::vector<int> &x) {",
        "translation_prompt": "// Serial implementation of squareEach\n// /* Replace every element of x with the square of its value.\n//    Example:\n// \n//    input: [5, 1, 2, -4, 8]\n//    output: [25, 1, 4, 16, 64]\n// */\n// void squareEach(std::vector<int> &x) {\n// for (int i = 0; i < x.size(); i++) {\n//         x[i] = x[i] * x[i];\n//     }\n// }\n\n// MPI implementation of squareEach\n#include <mpi.h>\n\n/* Replace every element of x with the square of its value.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(std::vector<int> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Replace every element of x with the square of its value.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(std::vector<int> &x) {\nfor (int i = 0; i < x.size(); i++) {\n        x[i] = x[i] * x[i];\n    }\n}",
        "translation_function_name": "squareEach",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process computes its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to rank 0\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\n// Calculate the displacements and counts for the gather\nstd::vector<int> counts(size, local_n);\nstd::vector<int> displs(size, 0);\nfor (int i = 0; i < remainder; ++i) {\n    counts[i]++;\n}\ndispls[0] = 0;\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + counts[i - 1];\n}\n\nMPI_Gatherv(&x[start], end - start, MPI_INT, recvbuf.data(), counts.data(), displs.data(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006594956,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005726634,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031851131,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00350808715,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003856379825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045383053125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00529311658125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00343891401562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00115518578281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00168982693828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134050644375,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_INT, recvbuf.data() + start, end - start, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered results back into x on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006606112,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0033444466,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036311248,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030372639,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00316963865,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0017117943,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023029382375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00125164330312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083013475313,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00051700828516,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00077730252148,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the last ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to the root process\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, local_n, MPI_INT, result.data() + start, local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there is a remainder, the last rank sends its additional elements to rank 0\nif (remainder > 0 && rank == size - 1) {\n    MPI_Send(x.data() + n - remainder, remainder, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else if (rank == 0 && remainder > 0) {\n    MPI_Recv(result.data() + n - remainder, remainder, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// Copy the result back into x if this is rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006611982,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037832318,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031251815,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00345972595,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003295711,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00199644285,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00221708494375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001212541925,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00076706330156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00059078637422,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00076980046172,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to the root process\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\n// Calculate the receive counts and displacements for uneven distributions\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; i++) {\n    recvcounts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + (i < remainder ? i : remainder);\n}\n\nMPI_Gatherv(x.data() + start, end - start, MPI_INT,\n            recvbuf.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Copy the gathered results back into the original vector on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006583188,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028455204,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028922544,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040609297,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00358683885,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00468740475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055287223,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00378475969375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00117741984687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00185331154531,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00132007345547,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Square the local portion of the vector\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results at rank 0\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\n// Create a datatype to describe the subarrays of the global array\nint sendcounts[size];\nint displs[size];\n\nfor (int i = 0; i < size; i++) {\n    sendcounts[i] = local_n;\n    displs[i] = i * local_n;\n    if (i < remainder) {\n        sendcounts[i]++;\n        displs[i] += i;\n    } else {\n        displs[i] += remainder;\n    }\n}\n\nMPI_Gatherv(&x[start], sendcounts[rank], MPI_INT, recvbuf.data(), sendcounts, displs, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006589722,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002956478,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028332225,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037592093,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037323097,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0051506853375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0051282111625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00347689024062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107807207656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00187152069531,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00147315431914,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each rank computes its portion of the work\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there is a remainder, handle it separately\nif (remainder > 0 && rank == 0) {\n    for (int i = 1; i <= remainder; ++i) {\n        MPI_Recv(&result[n - i], 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else if (rank <= remainder && rank > 0) {\n    MPI_Send(&x[n - rank], 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0006601866,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0022414992,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to the root process\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_INT, result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there is a remainder, the root process needs to receive the extra elements\nif (remainder > 0 && rank == 0) {\n    for (int i = 1; i <= remainder; ++i) {\n        MPI_Recv(result.data() + (local_n * size) + i - 1, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else if (rank <= remainder && rank != 0) {\n    MPI_Send(x.data() + end - 1, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000659297,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029218954,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027602223,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029394443,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00286406255,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019965182375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00223540733125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0012762702875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00070338863281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00054209478594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00087707953828,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Square the local portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results at the root process\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_INT, result.data() + start, end - start, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If rank 0, copy the gathered results back into x\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000676455,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034965534,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032062462,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032831106,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00318817855,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001739350375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0022586611125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00146926229062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00077295540313,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00055100820938,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00088924406211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the last ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to the root process\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_INT, result.data() + start, end - start, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on the root process\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000661605,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034657978,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027421507,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040147043,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003019610675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019781888375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002395379275,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014681891,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00072588089687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00051092196953,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00089512962266,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to the root process\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\n// Calculate the receive counts and displacements for uneven distributions\nstd::vector<int> recvcounts(size, local_n);\nstd::vector<int> displs(size, 0);\n\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\n\ndispls[0] = 0;\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(&x[start], end - start, MPI_INT, recvbuf.data(), recvcounts.data(), displs.data(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered results back into x on the root process\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006594892,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030519216,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029840903,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00370388055,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003447967075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004640440475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00467083909375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004144187725,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011598991375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00161780183984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00169031730039,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nint start = rank * local_n;\nint end = start + local_n;\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results at the root process\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(&x[start], local_n, MPI_INT, result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006861856,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003615671,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030622881,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036006359,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00368896665,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001782524375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0024815806625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001287072525,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071527232031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00055697648984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101765144883,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the last ranks\nif (rank == size - 1) {\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results on rank 0\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           recvbuf.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there's a remainder, the last rank sends its additional squared elements\nif (remainder > 0 && rank == size - 1) {\n    MPI_Send(&x[end - remainder], remainder, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else if (rank == 0 && remainder > 0) {\n    MPI_Recv(&recvbuf[n - remainder], remainder, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.000660008,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0022241404,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process computes its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather results at rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_INT, result.data() + start, end - start, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006601206,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029643212,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031091489,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034987148,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002980434375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001690135475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00281741889375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011654685875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00063920492031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00058815570156,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083918570195,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to the root process\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(x.data() + start, end - start, MPI_INT, result.data() + start, end - start, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006588176,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034406746,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026461824,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00338706075,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003373379875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001502774025,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023757733,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00113879265312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007223709125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00054154507656,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083507138867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Square each element in the local range\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results at rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n + (rank < remainder ? 1 : 0), MPI_INT,\n           result.data(), local_n + (rank < remainder ? 1 : 0), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0006615832,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0023828684,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the last ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results on rank 0\nstd::vector<int> result;\nif (rank == 0) {\n    result.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           result.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there is a remainder, the last ranks send their extra elements to rank 0\nif (remainder > 0 && rank >= size - remainder) {\n    if (rank == 0) {\n        for (int i = 1; i < remainder; ++i) {\n            MPI_Recv(&result[n - remainder + i], 1, MPI_INT, size - remainder + i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    } else {\n        MPI_Send(&x[end - 1], 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n    }\n}\n\n// Copy the gathered result back into x on rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0006605694,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0021533976,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding one more element to the last ranks\nif (rank == size - 1) {\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results on rank 0\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           recvbuf.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there is a remainder, the last rank sends its additional squared elements to rank 0\nif (remainder > 0 && rank == size - 1) {\n    MPI_Send(&x[end - remainder], remainder, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else if (remainder > 0 && rank == 0) {\n    MPI_Recv(&recvbuf[n - remainder], remainder, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// Copy the gathered result back into the original vector on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0006600924,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0022413468,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nint remainder = n % size;\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\nif (rank != 0) {\n    MPI_Send(&x[start], end - start, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        int rstart = i * local_n + std::min(i, remainder);\n        int rend = rstart + local_n + (i < remainder ? 1 : 0);\n        MPI_Recv(&x[rstart], rend - rstart, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006571488,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000667376,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014734489,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00253543905,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015255763,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032188937,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0039554204,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00227538436562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010923481375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00165397542422,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156359069648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle remainder by adding extra elements to the last rank's portion\nif (rank == size - 1) {\n    end += remainder;\n}\n\n// Each process squares its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results back to the root process\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &x[start], local_n, MPI_INT,\n           recvbuf.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If there's a remainder, the last rank sends its additional squared elements\nif (remainder > 0 && rank == size - 1) {\n    MPI_Send(&x[end - remainder], remainder, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else if (rank == 0) {\n    MPI_Recv(&recvbuf[n - remainder], remainder, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// Copy the gathered results back into the original vector on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nint remainder = n % size;\nint start = rank * local_n;\nint end = start + local_n;\n\n// Handle the remainder by adding one more element to the first 'remainder' ranks\nif (rank < remainder) {\n    start += rank;\n    end += rank + 1;\n} else {\n    start += remainder;\n    end += remainder;\n}\n\n// Each process computes its portion of the array\nfor (int i = start; i < end; i++) {\n    x[i] = x[i] * x[i];\n}\n\n// Gather the results on rank 0\nstd::vector<int> recvbuf;\nif (rank == 0) {\n    recvbuf.resize(n);\n}\n\n// Calculate the receive counts and displacements for the gather\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\nfor (int i = 0; i < size; i++) {\n    recvcounts[i] = local_n + (i < remainder ? 1 : 0);\n    displs[i] = i * local_n + (i < remainder ? i : remainder);\n}\n\nMPI_Gatherv(x.data() + start, end - start, MPI_INT,\n             recvbuf.data(), recvcounts.data(), displs.data(), MPI_INT,\n             0, MPI_COMM_WORLD);\n\n// Copy the gathered results back into x on rank 0\nif (rank == 0) {\n    x = recvbuf;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0006580912,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027541416,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028610928,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00424925355,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0038054719,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042302611125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00605644265,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0048110356625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011871914125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00186883883359,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00125009482109,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "47_sparse_la_spmv",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Use MPI to parallelize. Assume MPI has already been initialized.\n   Every rank has a complete copy of A, x, and y. Store the result in y on rank 0.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {",
        "translation_prompt": "// Serial implementation of spmv\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n//    and A is a sparse matrix stored in COO format.\n//    A has dimensions MxN, x has N values, and y has M values.\n//    Example:\n// \n//    input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n//    output: y=[2, 3]\n// */\n// void spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {\n// for (size_t i = 0; i < M; ++i) {\n//       y[i] *= beta;\n//    }\n// \n//    for (size_t i = 0; i < A.size(); ++i) {\n//       y[A[i].row] += alpha * A[i].value * x[A[i].column];\n//    }\n// }\n\n// MPI implementation of spmv\n#include <mpi.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Use MPI to parallelize. Assume MPI has already been initialized.\n   Every rank has a complete copy of A, x, and y. Store the result in y on rank 0.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, std::vector<COOElement> const& A, std::vector<double> const& x, double beta, std::vector<double> &y, size_t M, size_t N) {\nfor (size_t i = 0; i < M; ++i) {\n      y[i] *= beta;\n   }\n\n   for (size_t i = 0; i < A.size(); ++i) {\n      y[A[i].row] += alpha * A[i].value * x[A[i].column];\n   }\n}",
        "translation_function_name": "spmv",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    // Rank 0 collects all partial results\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * local_rows;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + local_rows;\n        MPI_Recv(y.data() + recv_start_row, recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Copy local results to the final output\n    std::copy(local_y.begin(), local_y.end(), y.begin());\n} else {\n    // Other ranks send their partial results to rank 0\n    MPI_Send(local_y.data(), local_y.size(), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015165166,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001550637,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010968673,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008024005,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000649172625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013718011875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00243023986875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00108378387188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00153736337812,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    // Resize y to accommodate the full result if this is the root process\n    y.resize(M);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &local_y[0], local_rows, MPI_DOUBLE,\n           &y[0], local_rows, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If the matrix rows are not evenly divisible by the number of processes,\n// handle the remaining rows\nif (rank == 0 && M % size != 0) {\n    for (size_t i = size * local_rows; i < M; ++i) {\n        y[i] *= beta;\n        for (const auto& element : A) {\n            if (element.row == i) {\n                y[i] += alpha * element.value * x[element.column];\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001515448,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0015385174,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    // Resize y to receive the full result if we're on the root process\n    y.resize(M);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &local_y[0], local_rows, MPI_DOUBLE,\n           &y[0], local_rows, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If the matrix rows are not evenly divisible by the number of processes,\n// handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * local_rows; i < M; ++i) {\n        y[i] *= beta;\n        for (const auto& element : A) {\n            if (element.row == i) {\n                y[i] += alpha * element.value * x[element.column];\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015134042,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0015370106,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Scale y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    y[i] *= beta;\n}\n\n// Compute the local part of the matrix-vector multiplication\nstd::vector<double> local_y(M, 0.0);\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Reduce the partial results to rank 0\nif (rank == 0) {\n    // Rank 0 collects results from all other ranks\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * rows_per_process;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + rows_per_process;\n        MPI_Recv(&y[recv_start_row], recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Add the local results from rank 0\n    for (size_t i = 0; i < end_row; ++i) {\n        y[i] += local_y[i];\n    }\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Send(&local_y[start_row], end_row - start_row, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015199086,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015571564,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0010034777,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(y.size(), 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    local_y[i] = y[i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Reduce the local vectors to the global vector on rank 0\nif (rank == 0) {\n    MPI_Reduce(MPI_IN_PLACE, local_y.data(), y.size(), MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n} else {\n    MPI_Reduce(local_y.data(), nullptr, y.size(), MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}\n\n// Broadcast the result from rank 0 to all other ranks\nMPI_Bcast(y.data(), y.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015215398,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0015361608,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    // Rank 0 collects all partial results\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * local_rows;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + local_rows;\n        MPI_Recv(&y[recv_start_row], recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Copy local results to the output vector\n    std::copy(local_y.begin(), local_y.end(), y.begin());\n} else {\n    // Other ranks send their partial results to rank 0\n    MPI_Send(local_y.data(), local_rows, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n\n// Rank 0 now has the complete result in y\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015164104,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015351494,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011618718,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00073458545,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000648612,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0012754124875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00313517085625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00092616860938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00126264005,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_M = M / size;\nsize_t start_row = rank * local_M;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_M;\n\nstd::vector<double> local_y(local_M, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_M; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the matrix-vector multiplication\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    // Rank 0 collects results from all processes\n    std::vector<double> global_y(M);\n    std::vector<int> recvcounts(size);\n    std::vector<int> displs(size);\n\n    // Calculate the receive counts and displacements for each rank\n    for (int i = 0; i < size; ++i) {\n        recvcounts[i] = (i == size - 1) ? M - i * local_M : local_M;\n        displs[i] = i * local_M;\n    }\n\n    MPI_Gatherv(local_y.data(), local_y.size(), MPI_DOUBLE,\n                global_y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n                0, MPI_COMM_WORLD);\n\n    // Copy the gathered result to the output vector y\n    y = std::move(global_y);\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Gatherv(local_y.data(), local_y.size(), MPI_DOUBLE,\n                nullptr, nullptr, nullptr, MPI_DOUBLE,\n                0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001517947,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015470498,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010186641,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006956442,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000630698575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013053241125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00194858643125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00135837805938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00100393291719,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    // Rank 0 collects results from all processes\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * local_rows;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + local_rows;\n        MPI_Recv(y.data() + recv_start_row, recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Copy local results to the final output\n    std::copy(local_y.begin(), local_y.end(), y.begin());\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Send(local_y.data(), local_rows, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n\n// Ensure all processes have completed their sends before finishing the function\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015178646,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015367682,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011747963,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105446595,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00137241175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003059312825,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005920909275,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003850776025,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043387155375,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Scale y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    y[i] *= beta;\n}\n\n// Compute the local part of the matrix-vector multiplication\nstd::vector<double> local_y(M, 0.0);\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Reduce the local results to rank 0\nif (rank == 0) {\n    std::vector<double> global_y(M, 0.0);\n    MPI_Reduce(local_y.data(), global_y.data(), M, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n    for (size_t i = 0; i < M; ++i) {\n        y[i] += global_y[i];\n    }\n} else {\n    MPI_Reduce(local_y.data(), nullptr, M, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015193054,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015397378,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0010178608,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    // Rank 0 collects all partial results\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * local_rows;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + local_rows;\n        MPI_Recv(y.data() + recv_start_row, recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Copy the local results to the final output\n    std::copy(local_y.begin(), local_y.end(), y.begin());\n} else {\n    // Other ranks send their partial results to rank 0\n    MPI_Send(local_y.data(), local_rows, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n\n// Rank 0 now has the complete result in y\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015169048,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015489552,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011562732,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00077282415,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000674454225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001373110075,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00249916058125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009884452,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00113784679375,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(y.size(), 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    local_y[i] = y[i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nstd::vector<double> global_y(y.size(), 0.0);\nMPI_Reduce(local_y.data(), global_y.data(), y.size(), MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Copy the result to the output vector y on rank 0\nif (rank == 0) {\n    y = global_y;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0015186964,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015421,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010751453,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00081858615,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001461245075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000561617075,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00116879630625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00146792385313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156612471563,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00197550602813,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00419424446758,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Local result vector\nstd::vector<double> local_y(y.size(), 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    local_y[i] = y[i] * beta;\n}\n\n// Perform the local computation of y = alpha*A*x + beta*y\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    // Rank 0 collects the results\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * rows_per_process;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + rows_per_process;\n        MPI_Recv(&y[recv_start_row], recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Copy the local results to the final output\n    std::copy(local_y.begin() + start_row, local_y.begin() + end_row, y.begin() + start_row);\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Send(&local_y[start_row], end_row - start_row, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n\n// Ensure rank 0 has the complete result before returning\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0015141476,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015323922,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010945136,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00075366,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00142824365,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002844127675,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055564124875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00371377823438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00513739418438,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00620783203984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01260285510937,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Scale y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    y[i] *= beta;\n}\n\n// Compute the local part of the matrix-vector multiplication\nstd::vector<double> local_y(M, 0.0);\nfor (size_t i = 0; i < A.size(); ++i) {\n    if (A[i].row >= start_row && A[i].row < end_row) {\n        local_y[A[i].row] += alpha * A[i].value * x[A[i].column];\n    }\n}\n\n// Reduce the partial results to rank 0\nif (rank == 0) {\n    std::vector<double> global_y(M, 0.0);\n    MPI_Reduce(local_y.data(), global_y.data(), M, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n    for (size_t i = 0; i < M; ++i) {\n        y[i] = global_y[i];\n    }\n} else {\n    MPI_Reduce(local_y.data(), nullptr, M, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015193636,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0015426116,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Scale y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    y[i] *= beta;\n}\n\n// Compute the local part of the matrix-vector multiplication\nstd::vector<double> local_y(M, 0.0);\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Reduce the partial results to rank 0\nif (rank == 0) {\n    // Rank 0 collects results from all other ranks\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * rows_per_process;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + rows_per_process;\n        MPI_Recv(&y[recv_start_row], recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Combine the local results with the received results\n    for (size_t i = start_row; i < end_row; ++i) {\n        y[i] += local_y[i];\n    }\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Send(&local_y[start_row], end_row - start_row, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015168368,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015392008,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0011283829,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Scale y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    y[i] *= beta;\n}\n\n// Compute the matrix-vector product for the assigned rows\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        y[element.row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results at rank 0\nstd::vector<double> y_total(M, 0.0);\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &y[start_row], &y_total[start_row], end_row - start_row, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Copy the gathered result back into y on rank 0\nif (rank == 0) {\n    y = y_total;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015159052,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.001533376,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will work on\nsize_t local_size = A.size() / size;\nsize_t start_index = rank * local_size;\nsize_t end_index = (rank == size - 1) ? A.size() : start_index + local_size;\n\n// Local result vector\nstd::vector<double> local_y(y.size(), 0.0);\n\n// Scale y by beta\nfor (size_t i = 0; i < M; ++i) {\n    local_y[i] = y[i] * beta;\n}\n\n// Compute local contribution to the matrix-vector product\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_y[A[i].row] += alpha * A[i].value * x[A[i].column];\n}\n\n// Reduce all local contributions to rank 0\nif (rank == 0) {\n    // Rank 0 collects results from all processes\n    for (int source = 1; source < size; ++source) {\n        std::vector<double> temp_y(M);\n        MPI_Recv(temp_y.data(), M, MPI_DOUBLE, source, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        // Combine the results\n        for (size_t i = 0; i < M; ++i) {\n            y[i] += temp_y[i];\n        }\n    }\n    // Final result is now in y on rank 0\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Send(local_y.data(), M, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015204282,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.001523402,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    // Rank 0 collects all partial results\n    std::vector<double> global_y(M, 0.0);\n    // Copy the local results to the correct place in the global vector\n    std::copy(local_y.begin(), local_y.end(), global_y.begin() + start_row);\n\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * local_rows;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + local_rows;\n        MPI_Recv(global_y.data() + recv_start_row, recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    y.swap(global_y); // Replace y with the results\n} else {\n    // Other ranks send their partial results to rank 0\n    MPI_Send(local_y.data(), local_rows, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001519098,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015370056,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010785681,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007290549,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005593223,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001395475975,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00202986775,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00140026834375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00119562698437,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_rows; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    // Rank 0 collects all partial results\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * local_rows;\n        size_t recv_end_row = (i == size - 1) ? M : recv_start_row + local_rows;\n        MPI_Recv(y.data() + recv_start_row, recv_end_row - recv_start_row, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    // Copy local results to the correct place\n    std::copy(local_y.begin(), local_y.end(), y.begin() + start_row);\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Send(local_y.data(), local_rows, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n\n// Rank 0 now has the complete result in y\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015223182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016473388,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010418632,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00069720125,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000544772825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013342830375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00214470234375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103161483437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00135181343125,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_M = M / size;\nsize_t start_row = rank * local_M;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_M;\n\n// Local result vector\nstd::vector<double> local_y(local_M, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = 0; i < local_M; ++i) {\n    local_y[i] = y[start_row + i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results on rank 0\nif (rank == 0) {\n    // Gather the local results into the global result vector y\n    MPI_Gather(MPI_IN_PLACE, local_M, MPI_DOUBLE, y.data(), local_M, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n} else {\n    // Send the local results to rank 0\n    MPI_Gather(local_y.data(), local_M, MPI_DOUBLE, y.data(), local_M, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\n// Handle the remaining rows if M is not divisible by size\nif (rank == 0 && M % size != 0) {\n    size_t remaining_rows_start = size * local_M;\n    for (size_t i = remaining_rows_start; i < M; ++i) {\n        y[i] *= beta;\n    }\n    for (const auto& element : A) {\n        if (element.row >= remaining_rows_start) {\n            y[element.row] += alpha * element.value * x[element.column];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015183924,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0015358274,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t start_row = rank * local_rows;\nsize_t end_row = (rank == size - 1) ? M : start_row + local_rows;\n\nstd::vector<double> local_y(local_rows, 0.0);\n\n// Scale the local portion of y by beta\nfor (size_t i = start_row; i < end_row; ++i) {\n    local_y[i - start_row] = y[i] * beta;\n}\n\n// Compute the local portion of the SpMV\nfor (const auto& element : A) {\n    if (element.row >= start_row && element.row < end_row) {\n        local_y[element.row - start_row] += alpha * element.value * x[element.column];\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    std::vector<double> gather_y(M);\n    std::vector<int> recvcounts(size);\n    std::vector<int> displs(size);\n\n    // Calculate the receive counts and displacements for the gather\n    for (int i = 0; i < size; ++i) {\n        recvcounts[i] = (i == size - 1) ? M - i * local_rows : local_rows;\n        displs[i] = i * local_rows;\n    }\n\n    MPI_Gatherv(local_y.data(), local_rows, MPI_DOUBLE, gather_y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Copy the gathered result to the output vector y\n    if (rank == 0) {\n        y = gather_y;\n    }\n} else {\n    // Other ranks send their results to rank 0\n    MPI_Gatherv(local_y.data(), local_rows, MPI_DOUBLE, nullptr, nullptr, nullptr, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0015188954,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015439286,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010648143,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00065882155,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006379409,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131104495,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026842749625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00112980133438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00118460881406,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "46_sparse_la_spmm",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and X. Store the result in Y on rank 0.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {",
        "translation_prompt": "// Serial implementation of spmm\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n//    X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n//    Example:\n// \n//    input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n//    output: Y=[{-1,-4}, {1,0}]\n// */\n// void spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {\n// std::vector<double> Ytemp(M*N, 0.0);\n//    for (auto const& a : A) {\n//       for (auto const& x : X) {\n//          if (a.column == x.row) {\n//             Ytemp[a.row*N + x.column] += a.value * x.value;\n//          }\n//       }\n//    }\n//    Y = std::move(Ytemp);\n// }\n\n// MPI implementation of spmm\n#include <mpi.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and X. Store the result in Y on rank 0.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {\nstd::vector<double> Ytemp(M*N, 0.0);\n   for (auto const& a : A) {\n      for (auto const& x : X) {\n         if (a.column == x.row) {\n            Ytemp[a.row*N + x.column] += a.value * x.value;\n         }\n      }\n   }\n   Y = std::move(Ytemp);\n}",
        "translation_function_name": "spmm",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> Ytemp(M*N, 0.0);\nstd::vector<double> Ylocal(M*N, 0.0);\n\n// Compute local contributions to Y\nfor (auto const& a : A) {\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            Ylocal[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the root process\nMPI_Reduce(Ylocal.data(), Ytemp.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(Ytemp);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0754514292,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197397914,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0203699875,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t num_elements = A.size();\nsize_t elements_per_proc = num_elements / size;\nsize_t start_index = rank * elements_per_proc;\nsize_t end_index = (rank == size - 1) ? num_elements : start_index + elements_per_proc;\n\n// Each process performs its part of the computation\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// If this is rank 0, copy the result to the output vector\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.075473863,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0224755696,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121081253,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00874334225,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00760607595,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036060623375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019435038125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00139581764063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00160728405469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00087367799531,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207027990547,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> Ytemp(M*N, 0.0);\nstd::vector<double> Ylocal(M*N, 0.0);\n\n// Compute local contributions to Y\nfor (auto const& a : A) {\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            Ylocal[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the root process\nMPI_Reduce(Ylocal.data(), Ytemp.data(), M*N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Copy the result to Y on rank 0\nif (rank == 0) {\n    Y = std::move(Ytemp);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.075451513,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197145196,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0204548174,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t local_nnz = A.size() / size;\nsize_t start_idx = rank * local_nnz;\nsize_t end_idx = (rank == size - 1) ? A.size() : (rank + 1) * local_nnz;\n\n// Each process performs its part of the multiplication\nfor (size_t i = start_idx; i < end_idx; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// If this is rank 0, copy the result to the output vector\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0754415924,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197015954,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121210217,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00769327425,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058964479,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043005168,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207823148125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00125920995,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00141453517656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00126947654844,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00203540226914,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t local_nnz = A.size() / size;\nsize_t start_idx = rank * local_nnz;\nsize_t end_idx = (rank == size - 1) ? A.size() : (rank + 1) * local_nnz;\n\n// Perform local computation\nfor (size_t i = start_idx; i < end_idx; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to global Y on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0755005292,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0196990722,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121221107,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00763823815,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00710894575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00364560735,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020098376875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00147163839062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00150602559687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106362605547,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00212582952031,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Each process computes its portion of the matrix multiplication\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (const auto& a : A) {\n        if (a.row == i) {\n            for (const auto& x : X) {\n                if (a.column == x.row) {\n                    local_Y[i * N + x.column] += a.value * x.value;\n                }\n            }\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// If this is rank 0, copy the result to the output vector\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.075486923,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0201968392,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017277994,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0110254903,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007729712075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053467683625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00285409668125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00200032590312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00196098529688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00136950903203,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00265494856094,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M*N, 0.0);\nstd::vector<double> global_Y(M*N, 0.0);\n\n// Compute the local contribution to Y\nfor (auto const& a : A) {\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row*N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M*N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Only rank 0 holds the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1091083964,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0222758374,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.022201732,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows to be computed by each process\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> Ytemp(M * N, 0.0);\nstd::vector<double> Ylocal(rows_per_process * N, 0.0);\n\n// Each process computes its portion of the matrix multiplication\nfor (auto const& a : A) {\n    if (a.row >= start_row && a.row < end_row) {\n        for (auto const& x : X) {\n            if (a.column == x.row) {\n                Ylocal[(a.row - start_row) * N + x.column] += a.value * x.value;\n            }\n        }\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    MPI_Gather(Ylocal.data(), rows_per_process * N, MPI_DOUBLE, Ytemp.data(), rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    // If M is not evenly divisible by size, handle the remaining rows\n    if (M % size != 0) {\n        size_t remaining_rows = M - (size - 1) * rows_per_process;\n        std::vector<double> Yremaining(remaining_rows * N);\n        MPI_Recv(Yremaining.data(), remaining_rows * N, MPI_DOUBLE, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        std::copy(Yremaining.begin(), Yremaining.end(), Ytemp.begin() + (size - 1) * rows_per_process * N);\n    }\n} else {\n    if (rank == size - 1 && M % size != 0) {\n        // The last rank sends its computed rows if M is not evenly divisible by size\n        size_t remaining_rows = M - rank * rows_per_process;\n        MPI_Send(Ylocal.data(), remaining_rows * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    } else {\n        MPI_Gather(Ylocal.data(), rows_per_process * N, MPI_DOUBLE, nullptr, 0, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    }\n}\n\n// Rank 0 now has the complete result in Ytemp\nif (rank == 0) {\n    Y = std::move(Ytemp);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0754488712,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0196425772,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0136937643,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004958244,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003443320625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001962116275,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00117017321875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00059455390625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00057096533438,
                        "num_procs": 128
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 256
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> Ytemp(M*N, 0.0);\nstd::vector<double> Ylocal(M*N, 0.0);\n\n// Calculate the number of non-zero elements each process will compute\nsize_t num_elements = A.size();\nsize_t elements_per_proc = num_elements / size;\nsize_t start_index = rank * elements_per_proc;\nsize_t end_index = (rank == size - 1) ? num_elements : start_index + elements_per_proc;\n\n// Each process computes its portion of the matrix multiplication\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            Ylocal[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the root process\nMPI_Reduce(Ylocal.data(), Ytemp.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(Ytemp);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0754282244,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197057054,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121959898,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00768983605,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004901638425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032365828,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001984925475,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00143243810625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00179947664062,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101710818125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00194478644453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t local_nnz = A.size() / size;\nsize_t start_idx = rank * local_nnz;\nsize_t end_idx = (rank == size - 1) ? A.size() : (rank + 1) * local_nnz;\n\n// Compute partial matrix multiplication for the assigned non-zero elements\nfor (size_t i = start_idx; i < end_idx; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all partial results to the global result on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0754781544,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.019856264,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121300631,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0077032909,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006932756575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043431615625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001856795225,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00127567272813,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00150953666719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00084743927031,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00205625185195,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M*N, 0.0);\n\n// Each process computes a part of the result matrix Y\nfor (auto const& a : A) {\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Allocate memory for the result on rank 0\nif (rank == 0) {\n    Y.resize(M * N, 0.0);\n}\n\n// Reduce all partial Y matrices to the final Y matrix on rank 0\nMPI_Reduce(local_Y.data(), Y.data(), M*N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.075486937,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197228656,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.019977272,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> Ytemp(M * N, 0.0);\nstd::vector<double> Ylocal(M * N, 0.0);\n\n// Compute the local contribution to Y\nfor (auto const& a : A) {\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            Ylocal[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the root process\nMPI_Reduce(Ylocal.data(), Ytemp.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Copy the result to Y on rank 0\nif (rank == 0) {\n    Y = std::move(Ytemp);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0754574976,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197425608,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0204181853,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t local_nnz = A.size() / size;\nsize_t start_index = rank * local_nnz;\nsize_t end_index = (rank == size - 1) ? A.size() : start_index + local_nnz;\n\n// Each process performs its part of the multiplication\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local_Y vectors to global_Y on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0754276918,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.019690467,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121517129,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00767133995,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00708781805,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0039601516625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018539801,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134013440625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130633675937,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00097844505859,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00202913553516,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a portion of the result matrix Y\nstd::vector<double> Ylocal(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t local_nnz = A.size() / size;\nsize_t start_idx = rank * local_nnz;\nsize_t end_idx = (rank == size - 1) ? A.size() : start_idx + local_nnz;\n\n// Compute the local matrix multiplication\nfor (size_t i = start_idx; i < end_idx; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            Ylocal[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Allocate memory for the result on the root process\nif (rank == 0) {\n    Y.resize(M * N, 0.0);\n}\n\n// Reduce all partial results to the root process\nMPI_Reduce(Ylocal.data(), Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.075455141,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0196534556,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0120235914,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00761504465,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004621766775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00287613145,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016786491125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00115177395625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00153569790312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00119032564688,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00225810251016,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t num_elements = A.size();\nsize_t elements_per_proc = num_elements / size;\nsize_t start_index = rank * elements_per_proc;\nsize_t end_index = (rank == size - 1) ? num_elements : start_index + elements_per_proc;\n\n// Each process computes its portion of the matrix multiplication\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0755179592,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197211606,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121708058,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00769563265,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0064611892,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004947496125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018224243375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130942364687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016752303375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00086743237031,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00214418566875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> Ytemp(M * N, 0.0);\nstd::vector<double> Ylocal(M * N, 0.0);\n\n// Each process computes a part of the result\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (auto const& a : A) {\n        if (a.row == i) {\n            for (auto const& x : X) {\n                if (a.column == x.row) {\n                    Ylocal[a.row * N + x.column] += a.value * x.value;\n                }\n            }\n        }\n    }\n}\n\n// Gather all partial results to rank 0\nMPI_Reduce(Ylocal.data(), Ytemp.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(Ytemp);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0754278762,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0203522226,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0140986891,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0111067822,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006691033525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00475104825,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00283325185625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00198305682187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00213979068438,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00115797033984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00231442794336,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the result matrix Y\nstd::vector<double> Ylocal(M * N, 0.0);\n\n// Compute the local part of the matrix multiplication\nfor (auto const& a : A) {\n    for (auto const& x : X) {\n        if (a.column == x.row) {\n            Ylocal[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Allocate memory for the result on rank 0\nif (rank == 0) {\n    Y.resize(M * N, 0.0);\n}\n\n// Reduce all partial Ylocal matrices to the final Y matrix on rank 0\nMPI_Reduce(Ylocal.data(), Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0754631042,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0196592566,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0201147429,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t local_nnz = A.size() / size;\nsize_t start_idx = rank * local_nnz;\nsize_t end_idx = (rank == size - 1) ? A.size() : start_idx + local_nnz;\n\n// Compute the local matrix multiplication\nfor (size_t i = start_idx; i < end_idx; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0754609986,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197641414,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0121147864,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007734668,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006863364025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0045836489,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00181131429375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00132247155312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00152226421875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083911304375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00216728136367,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t num_elements = A.size();\nsize_t elements_per_proc = num_elements / size;\nsize_t start_index = rank * elements_per_proc;\nsize_t end_index = (rank == size - 1) ? num_elements : start_index + elements_per_proc;\n\n// Each process performs its part of the multiplication\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.075484779,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0197782136,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012121485,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0077727166,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00656596615,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0064864811375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00196807654375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131227743125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00174664549063,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00092609066406,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00213387894687,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> local_Y(M * N, 0.0);\nstd::vector<double> global_Y(M * N, 0.0);\n\n// Calculate the number of non-zero elements each process will handle\nsize_t num_elements = A.size();\nsize_t elements_per_proc = num_elements / size;\nsize_t start_index = rank * elements_per_proc;\nsize_t end_index = (rank == size - 1) ? num_elements : start_index + elements_per_proc;\n\n// Each process performs its part of the computation\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& a = A[i];\n    for (const auto& x : X) {\n        if (a.column == x.row) {\n            local_Y[a.row * N + x.column] += a.value * x.value;\n        }\n    }\n}\n\n// Reduce all local Y matrices to the global Y matrix on rank 0\nMPI_Reduce(local_Y.data(), global_Y.data(), M * N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Rank 0 now has the complete result\nif (rank == 0) {\n    Y = std::move(global_Y);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.075468406,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0196843956,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01231656,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00764138555,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006291433025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036756370125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001998729525,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00135197945313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00165684517187,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130489232422,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00247502674492,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "49_sparse_la_sparse_lu_decomp",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   A is a sparse NxN matrix stored in COO format.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. Store the result in L and U on rank 0.\n   Example:\n\n   input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n   output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n*/\nvoid luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {",
        "translation_prompt": "// Serial implementation of luFactorize\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n//    A is a sparse NxN matrix stored in COO format.\n//    Example:\n// \n//    input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n//    output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n// */\n// void luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {\n// \n// // Assuming A is sorted by row and then by column\n// L.clear();\n// U.clear();\n// \n// // Initialize L and U with zeros\n// L.resize(N * N, 0);\n// U.resize(N * N, 0);\n// \n// // Create a map for quick access to A's elements\n// std::map<std::pair<size_t, size_t>, double> A_map;\n// for (const auto& elem : A) {\n//     A_map[{elem.row, elem.column}] = elem.value;\n// }\n// \n// // LU decomposition algorithm\n// for (size_t i = 0; i < N; ++i) {\n//     // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n//     for (size_t k = i; k < N; ++k) {\n//         double sum = 0.0;\n//         for (size_t j = 0; j < i; ++j) {\n//             sum += L[i * N + j] * U[j * N + k];\n//         }\n//         U[i * N + k] = A_map[{i, k}] - sum;\n//     }\n// \n//     // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n//     for (size_t k = i + 1; k < N; ++k) {\n//         double sum = 0.0;\n//         for (size_t j = 0; j < i; ++j) {\n//             sum += L[k * N + j] * U[j * N + i];\n//         }\n//         L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n//     }\n// \n//     // L(i, i) = 1\n//     L[i * N + i] = 1.0;\n// }\n// }\n\n// MPI implementation of luFactorize\n#include <mpi.h>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   A is a sparse NxN matrix stored in COO format.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. Store the result in L and U on rank 0.\n   Example:\n\n   input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n   output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n*/\nvoid luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   A is a sparse NxN matrix stored in COO format.\n   Example:\n\n   input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]\n   output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]\n*/\nvoid luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {\n\n// Assuming A is sorted by row and then by column\nL.clear();\nU.clear();\n\n// Initialize L and U with zeros\nL.resize(N * N, 0);\nU.resize(N * N, 0);\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n    for (size_t k = i; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[i * N + j] * U[j * N + k];\n        }\n        U[i * N + k] = A_map[{i, k}] - sum;\n    }\n\n    // L(k, i) = (A(k, i) - sum(L(k, j) * U(j, i))) / U(i, i)\n    for (size_t k = i + 1; k < N; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // L(i, i) = 1\n    L[i * N + i] = 1.0;\n}\n}",
        "translation_function_name": "luFactorize",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    MPI_Gather(rank == 0 ? MPI_IN_PLACE : &L[(i + 1) * N], N, MPI_DOUBLE, &L[(i + 1) * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1922791738,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2293832508,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // Compute U(i, k) for all k >= i\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast U(i, i) to all processes\n    MPI_Bcast(&U[i * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Compute L(k, i) for all k > i and distribute the work among ranks\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // Gather L(k, i) from all processes to rank 0\n    if (rank == 0) {\n        for (size_t k = i + 1; k < N; ++k) {\n            if (k % size != 0) {\n                MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, k % size, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    } else {\n        for (size_t k = i + 1 + rank; k < N; k += size) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n    }\n\n    // Set L(i, i) to 1 on rank 0\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n}\n\n// Broadcast the final L and U matrices to all processes\nMPI_Bcast(L.data(), N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Bcast(U.data(), N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1936332424,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2273136206,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // Compute U(i, k) for k = i to N\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast U(i, i) to all ranks\n    MPI_Bcast(&U[i * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Compute L(k, i) for k = i+1 to N in parallel\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // Gather L(k, i) from all ranks to rank 0\n    if (rank != 0) {\n        for (size_t k = i + 1 + rank; k < N; k += size) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, k, MPI_COMM_WORLD);\n        }\n    } else {\n        for (int r = 1; r < size; ++r) {\n            for (size_t k = i + 1 + r; k < N; k += size) {\n                MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, r, k, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    }\n\n    // Set L(i, i) to 1 on rank 0\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    // Synchronize all ranks\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1927382264,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2279269206,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2561194039,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.205204295,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1327315682,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.124004615725,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1302116870125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11866574363125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12359903925469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13312650748281,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18861144772187,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    for (int r = 1; r < size; ++r) {\n        if (rank == r) {\n            MPI_Send(&L[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n        if (rank == 0) {\n            MPI_Recv(&L[(i + 1) * N + r], N * (N - i - 1), MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n}\n\nif (rank == 0) {\n    for (size_t i = 0; i < N; ++i) {\n        L[i * N + i] = 1.0;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1926513518,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2277507632,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.340086162,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    size_t rows_per_process = (N - i - 1) / size;\n    size_t start_row = i + 1 + rank * rows_per_process;\n    size_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n    for (size_t k = start_row; k < end_row; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    if (rank != 0) {\n        MPI_Send(&L[start_row * N], rows_per_process * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    }\n\n    if (rank == 0) {\n        for (int src = 1; src < size; ++src) {\n            size_t src_start_row = i + 1 + src * rows_per_process;\n            size_t src_end_row = (src == size - 1) ? N : src_start_row + rows_per_process;\n            MPI_Recv(&L[src_start_row * N], (src_end_row - src_start_row) * N, MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    MPI_Bcast(&L[(i + 1) * N], (N - i - 1) * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1919357672,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2297851878,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4201191871,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4451872148,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.49404606585,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.6842976503125,
                        "num_procs": 16
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        } else if (rank == 0) {\n            MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, k % size, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n}\n\nif (rank != 0) {\n    L.clear();\n    U.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1917707478,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2336878012,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2004896005,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1694737064,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.216129724025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.26891679485,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1560715495875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.16241653419375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.25193182062344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.57250105631875,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.26186570391016,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // Compute U(i, k) for k = i to N\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast U(i, i) to all ranks\n    MPI_Bcast(&U[i * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Compute L(k, i) for k = i+1 to N in parallel\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // Gather L(k, i) from all ranks to rank 0\n    if (rank == 0) {\n        for (int r = 1; r < size; ++r) {\n            for (size_t k = i + 1 + r; k < N; k += size) {\n                MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    } else {\n        for (size_t k = i + 1 + rank; k < N; k += size) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n    }\n\n    // Rank 0 sets L(i, i) to 1\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    // Synchronize all ranks\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.191905118,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2499562576,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1959290639,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1565370396,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13267792435,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1251047484375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13429880381875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12868668935625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12468180646563,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15683866637969,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.17271538516484,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // Compute U(i, k) for k = i to N\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast U(i, i) to all ranks\n    MPI_Bcast(&U[i * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Compute L(k, i) for k = i+1 to N in parallel\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // Gather L(k, i) from all ranks to rank 0\n    if (rank == 0) {\n        for (int r = 1; r < size; ++r) {\n            for (size_t k = i + 1 + r; k < N; k += size) {\n                MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    } else {\n        for (size_t k = i + 1 + rank; k < N; k += size) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n    }\n\n    // Set L(i, i) to 1 on rank 0\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    // Synchronize all ranks before next iteration\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.192641489,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2319454348,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1870208681,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1461036688,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1340938181,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.14633339765,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12387268270625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12122084605312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12503361838437,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12660235354922,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.26051214103945,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    MPI_Gather(rank == 0 ? MPI_IN_PLACE : &L[(i + 1) * N], N, MPI_DOUBLE, &L[(i + 1) * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1929293294,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2436395956,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    MPI_Gather(rank == 0 ? MPI_IN_PLACE : &L[(i + 1) * N], N, MPI_DOUBLE, &L[(i + 1) * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\nif (rank != 0) {\n    L.clear();\n    U.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.193625213,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.23009015,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    size_t rows_per_process = (N - (i + 1)) / size;\n    size_t start_row = (i + 1) + rank * rows_per_process;\n    size_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\n    for (size_t k = start_row; k < end_row; ++k) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        double lki = (A_map[{k, i}] - sum) / U[i * N + i];\n        MPI_Send(&lki, 1, MPI_DOUBLE, 0, k, MPI_COMM_WORLD);\n    }\n\n    if (rank == 0) {\n        for (size_t k = i + 1; k < N; ++k) {\n            MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, MPI_ANY_SOURCE, k, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n        L[i * N + i] = 1.0;\n    }\n}\n\nif (rank == 0) {\n    // Fill in the diagonal of L with 1s\n    for (size_t i = 0; i < N; ++i) {\n        L[i * N + i] = 1.0;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1915499364,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.240672761,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1781677768,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15212210405,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.153264340675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15766733445,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15607621756875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.155056036325,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4720228345,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.27603643674375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.29965945114883,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    for (size_t k = 0; k < size; ++k) {\n        if (rank == k) {\n            MPI_Gather(MPI_IN_PLACE, N, MPI_DOUBLE, &L[(i + 1) * N], N, MPI_DOUBLE, k, MPI_COMM_WORLD);\n        } else {\n            MPI_Gather(&L[(i + 1) * N], N, MPI_DOUBLE, &L[(i + 1) * N], N, MPI_DOUBLE, k, MPI_COMM_WORLD);\n        }\n    }\n}\n\nif (rank != 0) {\n    L.clear();\n    U.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1925490056,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2295397176,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.177373948,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        double lki = (A_map[{k, i}] - sum) / U[i * N + i];\n        MPI_Send(&lki, 1, MPI_DOUBLE, 0, k, MPI_COMM_WORLD);\n    }\n\n    if (rank == 0) {\n        for (size_t k = i + 1; k < N; ++k) {\n            MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, MPI_ANY_SOURCE, k, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n        L[i * N + i] = 1.0;\n    }\n}\n\nif (rank != 0) {\n    L.clear();\n    U.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1912730092,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2390037852,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1949037737,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1550206812,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.153458130925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1507005348,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.14854198453125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.14599464864688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2113286473,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.19331355798047,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.21892378298711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // Calculate U(i, k) for k = i to N\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast U(i, i) to all ranks\n    MPI_Bcast(&U[i * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Calculate L(k, i) for k = i+1 to N in parallel\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // Gather L(k, i) from all ranks to rank 0\n    if (rank != 0) {\n        for (size_t k = i + 1 + rank; k < N; k += size) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, k, MPI_COMM_WORLD);\n        }\n    } else {\n        for (int r = 1; r < size; ++r) {\n            for (size_t k = i + 1 + r; k < N; k += size) {\n                MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, r, k, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    }\n\n    // Set L(i, i) to 1 on rank 0\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    // Synchronize all ranks before next iteration\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1923181182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2297903424,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2019700923,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15012678405,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.132454495025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.126233836,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12877452164375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12076299494687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12696789320938,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12391145343984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18758370539648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // Compute U(i, k) for k = i to N\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast U(i, i) to all ranks\n    MPI_Bcast(&U[i * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Compute L(k, i) for k = i+1 to N in parallel\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    // Gather L(k, i) from all ranks to rank 0\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n        if (rank == 0) {\n            MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, k % size, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n\n    if (rank == 0) {\n        // Set L(i, i) = 1 on rank 0\n        L[i * N + i] = 1.0;\n    }\n}\n\n// Broadcast the final L and U matrices to all ranks\nMPI_Bcast(L.data(), N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Bcast(U.data(), N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1922064266,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2391854142,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1930092275,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15553592945,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.139729149475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13090918325,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.133357940075,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.14216708114375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1540559014125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.20011366229375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.23195708269375,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // Compute U(i, k) for k = i to N\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast U(i, i) to all ranks\n    MPI_Bcast(&U[i * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Compute L(k, i) for k = i+1 to N in parallel\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // Gather L(k, i) from all ranks to rank 0\n    if (rank != 0) {\n        for (size_t k = i + 1 + rank; k < N; k += size) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, k, MPI_COMM_WORLD);\n        }\n    } else {\n        for (int r = 1; r < size; ++r) {\n            for (size_t k = i + 1 + r; k < N; k += size) {\n                MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, r, k, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    }\n\n    // Only rank 0 sets L(i, i) to 1\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    // Synchronize all ranks before next iteration\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1929192116,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2301401864,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1763146838,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15004417225,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1340743291,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1225700887125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12527928380625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12115817175313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12755466168594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.16965296858828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.17067903516211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Assuming A is sorted by row and then by column\nif (rank == 0) {\n    L.clear();\n    U.clear();\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\n// Create a map for quick access to A's elements\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\n// LU decomposition algorithm\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        // U(i, k) = A(i, k) - sum(L(i, j) * U(j, k))\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    // Broadcast the i-th row of U to all processes\n    MPI_Bcast(&U[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Compute L(k, i) in parallel\n    for (size_t k = i + 1 + rank; k < N; k += size) {\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += L[k * N + j] * U[j * N + i];\n        }\n        L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n    }\n\n    // Gather the computed elements of L from all processes to rank 0\n    if (rank == 0) {\n        for (int r = 1; r < size; ++r) {\n            for (size_t k = i + 1 + r; k < N; k += size) {\n                MPI_Recv(&L[k * N + i], 1, MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    } else {\n        for (size_t k = i + 1 + rank; k < N; k += size) {\n            MPI_Send(&L[k * N + i], 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n    }\n\n    // Set the diagonal element of L to 1 on rank 0\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n}\n\n// Ensure all processes have completed their work before returning\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1917149086,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2289183044,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1978451057,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.18499052655,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.210386423875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2681713690625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.16192631289375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1591990384125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.23212995907188,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.23371267586172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.25209586447617,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    double diag = 0;\n    if (rank == 0) {\n        diag = U[i * N + i];\n    }\n    MPI_Bcast(&diag, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    size_t rows_per_process = (N - (i + 1) + size - 1) / size;\n    size_t start_row = (i + 1) + rank * rows_per_process;\n    size_t end_row = std::min(start_row + rows_per_process, N);\n\n    std::vector<double> local_L((end_row - start_row) * N, 0);\n\n    for (size_t k = start_row; k < end_row; ++k) {\n        for (size_t j = 0; j < i; ++j) {\n            local_L[(k - start_row) * N + j] = L[k * N + j];\n        }\n        double sum = 0.0;\n        for (size_t j = 0; j < i; ++j) {\n            sum += local_L[(k - start_row) * N + j] * U[j * N + i];\n        }\n        local_L[(k - start_row) * N + i] = (A_map[{k, i}] - sum) / diag;\n    }\n\n    if (rank != 0) {\n        MPI_Send(local_L.data(), rows_per_process * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    } else {\n        for (size_t k = start_row; k < end_row; ++k) {\n            for (size_t j = 0; j <= i; ++j) {\n                L[k * N + j] = local_L[(k - start_row) * N + j];\n            }\n        }\n        for (int p = 1; p < size; ++p) {\n            size_t start = (i + 1) + p * rows_per_process;\n            size_t end = std::min(start + rows_per_process, N);\n            MPI_Recv(L.data() + start * N, (end - start) * N, MPI_DOUBLE, p, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n}\n\nif (rank == 0) {\n    for (size_t i = 1; i < N; ++i) {\n        for (size_t j = 0; j < i; ++j) {\n            L[i * N + j] /= L[j * N + j];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.190311833,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.249775483,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    MPI_Gather(rank == 0 ? MPI_IN_PLACE : &L[(i + 1) * N + i], N - i - 1, MPI_DOUBLE, &L[(i + 1) * N + i], N - i - 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1933334314,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.229120987,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1697363048,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nL.clear();\nU.clear();\n\nif (rank == 0) {\n    L.resize(N * N, 0);\n    U.resize(N * N, 0);\n}\n\nstd::map<std::pair<size_t, size_t>, double> A_map;\nfor (const auto& elem : A) {\n    A_map[{elem.row, elem.column}] = elem.value;\n}\n\nfor (size_t i = 0; i < N; ++i) {\n    if (rank == 0) {\n        for (size_t k = i; k < N; ++k) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[i * N + j] * U[j * N + k];\n            }\n            U[i * N + k] = A_map[{i, k}] - sum;\n        }\n    }\n\n    MPI_Bcast(&U[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t k = i + 1; k < N; ++k) {\n        if (k % size == rank) {\n            double sum = 0.0;\n            for (size_t j = 0; j < i; ++j) {\n                sum += L[k * N + j] * U[j * N + i];\n            }\n            L[k * N + i] = (A_map[{k, i}] - sum) / U[i * N + i];\n        }\n    }\n\n    if (rank == 0) {\n        L[i * N + i] = 1.0;\n    }\n\n    MPI_Gather(rank == 0 ? MPI_IN_PLACE : &L[(i + 1) * N + i], 1, MPI_DOUBLE, &L[(i + 1) * N + i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\nif (rank != 0) {\n    L.clear();\n    U.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.193387114,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2304684092,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1706984549,
                        "num_procs": 2
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "23_histogram_first_letter_counts",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of s. The result is stored in bins on rank 0.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {",
        "translation_prompt": "// Serial implementation of firstLetterCounts\n// /* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n//    Assume all strings are in lower case. Store the output in `bins` array.\n//    Example:\n// \n//    input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n//    output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n// */\n// void firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {\n// for (auto const& str : s) {\n//         bins[str[0] - 'a']++;\n//     }\n// }\n\n// MPI implementation of firstLetterCounts\n#include <mpi.h>\n\n/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of s. The result is stored in bins on rank 0.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {\nfor (auto const& str : s) {\n        bins[str[0] - 'a']++;\n    }\n}",
        "translation_function_name": "firstLetterCounts",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local bins\nstd::array<size_t, 26> local_bins = {0};\n\n// Calculate the portion of the array each process will work on\nsize_t count_per_process = s.size() / size;\nsize_t start_index = rank * count_per_process;\nsize_t end_index = (rank == size - 1) ? s.size() : start_index + count_per_process;\n\n// Count occurrences in the local portion\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0057796132,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006213383,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004256849,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0046174725,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002169099175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028836986125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002958581475,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00157460432188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00241940367031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00220834113359,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00105068972852,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Calculate the portion of the vector each process will work on\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : (rank + 1) * chunk_size;\n\n// Count occurrences of first letters in the assigned chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0059444244,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060290852,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040401332,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00344530065,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002561731775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004125825175,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0025683505375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162702384375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00363881213125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00185671131953,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00160501044336,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide the work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\n// Each process counts the occurrences of the first letter in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058769614,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060225468,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040674574,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00319894855,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003436197175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040776060875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031168714625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00202943219375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162567443906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00179045016562,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00091953295,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide the work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\n// Each process counts the occurrences of the first letter in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce the local bins to the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058624642,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059783222,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041913638,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003296084,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034393309,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00345816575,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0024723127875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00125196083125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00229062496406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00199416132578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094645806758,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : (rank + 1) * chunk_size;\n\n// Each process counts the first letters in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058225962,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060536136,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043349944,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00306937505,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002793655775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0038208254,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00270647818125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00178586405313,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00202430445781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00206825316094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00088409875273,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide the work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\n// Each process counts the occurrences of the first letter in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058237384,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060272574,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041251325,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031911378,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003020202225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029001833,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00353337374375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134410995938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00176686089687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158228093516,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00108869548672,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : (rank + 1) * chunk_size;\n\n// Each process counts the strings starting with each letter in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058190856,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059709546,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0047447563,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00306780575,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00244239805,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030908835125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00304264033125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011587653125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00225771335312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00209996749297,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094341172422,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local bins array to store the counts for each process\nstd::array<size_t, 26> local_bins = {};\n\n// Calculate the number of strings each process will handle\nsize_t num_strings = s.size();\nsize_t strings_per_proc = num_strings / size;\nsize_t start_index = rank * strings_per_proc;\nsize_t end_index = (rank == size - 1) ? num_strings : start_index + strings_per_proc;\n\n// Count the occurrences of each first letter for the assigned strings\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins arrays into the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0057541236,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008116201,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042251593,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0035832335,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00279082715,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0022859959125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036326952375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00139631040625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00253296987344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00173974632891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00082070403125,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\n// Each process counts the occurrences of the first letters in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.00583427,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059722744,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004494812,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00318841115,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003548443075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027064938625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00264188128125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00138727316875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00194281907031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00206387571797,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00086938022734,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide the work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Gather results at rank 0\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0068536378,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0067278378,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : (rank + 1) * chunk_size;\n\n// Each process counts the strings starting with each letter in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058485064,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006027007,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041082275,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00319750075,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029614492,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034024936,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00309620321875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003819430525,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156823644687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00203348514766,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00089311708477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide the work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\n// Each process counts the occurrences of the first letter for its chunk of strings\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Gather the results from all processes to rank 0\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0058802198,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0061563896,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide the work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\n// Each process counts the occurrences of the first letters in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0057941824,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060381562,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042499867,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00311870565,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004085583525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029776573,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002268498425,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00110686604063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00212749848594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00172697411016,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00092114264648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Calculate the number of elements each process will work on\nsize_t count_per_proc = s.size() / size;\nsize_t start_index = rank * count_per_proc;\nsize_t end_index = (rank == size - 1) ? s.size() : start_index + count_per_proc;\n\n// Each process calculates its local bin counts\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0059758932,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0063659428,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0043571478,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00366251345,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026801651,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005963563425,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00311030148125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00223815325625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00179285695781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00262545342656,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00091614497383,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Calculate the number of elements each process will work on\nsize_t count_per_proc = s.size() / size;\nsize_t start_index = rank * count_per_proc;\nsize_t end_index = (rank == size - 1) ? s.size() : start_index + count_per_proc;\n\n// Each process calculates its local bin counts\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058158112,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061233864,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0040336534,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030432628,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002367072075,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034372999125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00289734354375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00138676564062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001920658225,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00195784859141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00120062431836,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Calculate the number of elements each process will work on\nsize_t num_elements_per_proc = s.size() / size;\nsize_t start_index = rank * num_elements_per_proc;\nsize_t end_index = (rank == size - 1) ? s.size() : start_index + num_elements_per_proc;\n\n// Each process calculates its local sum\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.005962752,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060393462,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005163416,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00319967785,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026180999,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003028442425,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032505391125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131643300937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00164736355156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00193815521094,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00085001954688,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local bins\nstd::array<size_t, 26> local_bins = {0};\n\n// Determine the number of strings each process will work on\nsize_t num_strings = s.size();\nsize_t strings_per_proc = num_strings / size;\nsize_t start_index = rank * strings_per_proc;\nsize_t end_index = (rank == size - 1) ? num_strings : start_index + strings_per_proc;\n\n// Each process counts the strings starting with each letter in its range\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.005804439,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0092603968,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041889572,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00358711255,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00256089795,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031248321125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00334721056875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00102118832813,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00186602392344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00175490870547,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00085105347227,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local bins\nstd::array<size_t, 26> local_bins = {0};\n\n// Calculate the number of elements each process will work on\nsize_t count_per_process = s.size() / size;\nsize_t start_index = rank * count_per_process;\nsize_t end_index = (rank == size - 1) ? s.size() : start_index + count_per_process;\n\n// Count occurrences in the assigned range\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0057606008,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0066692376,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0042584296,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00289090505,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003789608875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028312960375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00306458343125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00170196574062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020603289875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00201228465547,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162778701094,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide the work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\n// Each process counts the occurrences of the first letters in its chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Reduce all local bins to the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0058309752,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060161586,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041987404,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00344474955,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00355456945,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003492325675,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0025580669375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00208717333437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00164490541719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00192296425469,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009317982082,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 26> local_bins = {0};\n\n// Divide work among processes\nsize_t chunk_size = s.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? s.size() : start + chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    local_bins[s[i][0] - 'a']++;\n}\n\n// Gather results at rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 26, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.005860356,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060468058,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0046642482,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032571113,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003861867875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002994001525,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00264876028125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00186621155938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00483400173438,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00197505812422,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00201160478281,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "21_histogram_bin_0-100",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The result is stored in bins on rank 0.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {",
        "translation_prompt": "// Serial implementation of binsBy10Count\n// /* Vector x contains values between 0 and 100, inclusive. Count the number of\n//    values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n//    Example:\n// \n//    input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n//    output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n// */\n// void binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {\n// for (auto const& value : x) {\n//     if (value < 10) {\n//       bins[0]++;\n//     } else if (value < 20) {\n//       bins[1]++;\n//     } else if (value < 30) {\n//       bins[2]++;\n//     } else if (value < 40) {\n//       bins[3]++;\n//     } else if (value < 50) {\n//       bins[4]++;\n//     } else if (value < 60) {\n//       bins[5]++;\n//     } else if (value < 70) {\n//       bins[6]++;\n//     } else if (value < 80) {\n//       bins[7]++;\n//     } else if (value < 90) {\n//       bins[8]++;\n//     } else {\n//       bins[9]++;\n//     }\n//   }\n// }\n\n// MPI implementation of binsBy10Count\n#include <mpi.h>\n\n/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The result is stored in bins on rank 0.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(std::vector<double> const& x, std::array<size_t, 10> &bins) {\nfor (auto const& value : x) {\n    if (value < 10) {\n      bins[0]++;\n    } else if (value < 20) {\n      bins[1]++;\n    } else if (value < 30) {\n      bins[2]++;\n    } else if (value < 40) {\n      bins[3]++;\n    } else if (value < 50) {\n      bins[4]++;\n    } else if (value < 60) {\n      bins[5]++;\n    } else if (value < 70) {\n      bins[6]++;\n    } else if (value < 80) {\n      bins[7]++;\n    } else if (value < 90) {\n      bins[8]++;\n    } else {\n      bins[9]++;\n    }\n  }\n}",
        "translation_function_name": "binsBy10Count",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\nif (rank == 0) {\n    MPI_Reduce(MPI_IN_PLACE, local_bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n    bins = local_bins;\n} else {\n    MPI_Reduce(local_bins.data(), nullptr, 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061195066,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058004138,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058677831,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    size_t bin_index = static_cast<size_t>(value / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure values of 100 go into the last bin\n    local_bins[bin_index]++;\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061457516,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061134788,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0061601912,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\nif (rank == 0) {\n    MPI_Reduce(MPI_IN_PLACE, local_bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n} else {\n    MPI_Reduce(local_bins.data(), nullptr, 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    bins = local_bins;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061075394,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058361902,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058631629,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061186864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058460914,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058608016,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0062525396,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0059410834,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.005841862,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    local_bins[bin_index]++;\n}\n\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_bins, &bins, 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061216864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0052275504,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\nif (rank == 0) {\n    MPI_Reduce(MPI_IN_PLACE, local_bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n} else {\n    MPI_Reduce(local_bins.data(), nullptr, 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    bins = local_bins;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061400066,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058351144,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058562843,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure values exactly 100 go into the last bin\n    local_bins[bin_index]++;\n}\n\nif (rank == 0) {\n    bins = local_bins;\n    std::array<size_t, 10> recv_bins;\n    for (int i = 1; i < size; ++i) {\n        MPI_Recv(recv_bins.data(), 10, MPI_UNSIGNED_LONG, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        for (size_t j = 0; j < 10; ++j) {\n            bins[j] += recv_bins[j];\n        }\n    }\n} else {\n    MPI_Send(local_bins.data(), 10, MPI_UNSIGNED_LONG, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061119978,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0060733734,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0061330804,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0062131474,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058560956,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058618256,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure values of 100 go into the last bin\n    local_bins[bin_index]++;\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061477028,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061838268,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0062056664,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bin counts to the root process (rank 0)\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061042592,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058085346,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058556189,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value / 10);\n    if (bin_index >= 10) bin_index = 9; // Ensure values exactly 100 go to the last bin\n    local_bins[bin_index]++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061590866,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0061677604,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061107156,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058153538,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058980016,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    local_bins[bin_index]++;\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061058006,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0052258212,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process counts the bins locally\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061175486,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058075408,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058557519,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.006109138,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005808144,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058871391,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061160418,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058729972,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00595849,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    local_bins[bin_index]++;\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061166004,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0052202168,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0052758444,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n    int bin_index = static_cast<int>(value) / 10;\n    if (bin_index >= 0 && bin_index < 10) {\n        local_bins[bin_index]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061164804,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058122134,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0058449488,
                        "num_procs": 2
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 10> local_bins = {0};\n\n// Each process computes its local bin counts\nfor (auto const& value : x) {\n  int bin_index = static_cast<int>(value) / 10;\n  local_bins[bin_index]++;\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : local_bins.data(), bins.data(), 10, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0061134826,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0052857556,
                        "num_procs": 1
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "22_histogram_count_quadrants",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Use MPI to count in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of points. The result is stored in bins on rank 0.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {",
        "translation_prompt": "// Serial implementation of countQuadrants\n// struct Point {\n//    double x, y;\n// };\n// \n// /* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n//    Store the counts in `bins`.\n//    Example:\n// \n//    input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n//    output: [3, 1, 0, 2]\n// */\n// void countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {\n// for (auto const& point : points) {\n//       if (point.x > 0 && point.y > 0) {\n//          bins[0]++;\n//       } else if (point.x < 0 && point.y > 0) {\n//          bins[1]++;\n//       } else if (point.x < 0 && point.y < 0) {\n//          bins[2]++;\n//       } else {\n//          bins[3]++;\n//       }\n//    }\n// }\n\n// MPI implementation of countQuadrants\n#include <mpi.h>\n\nstruct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Use MPI to count in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of points. The result is stored in bins on rank 0.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {\nfor (auto const& point : points) {\n      if (point.x > 0 && point.y > 0) {\n         bins[0]++;\n      } else if (point.x < 0 && point.y > 0) {\n         bins[1]++;\n      } else if (point.x < 0 && point.y < 0) {\n         bins[2]++;\n      } else {\n         bins[3]++;\n      }\n   }\n}",
        "translation_function_name": "countQuadrants",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local bins\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the range of points for each process\nsize_t points_per_proc = points.size() / size;\nsize_t start_index = rank * points_per_proc;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_proc;\n\n// Count the points in each quadrant for the local range\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416509718,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0439039122,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219465297,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01273330875,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007055811275,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037297337375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0033971440125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00146475669062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00148689540781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00160335520156,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00069452290625,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a partial count for a subset of points\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\nsize_t points_per_proc = points.size() / size;\nsize_t start_index = rank * points_per_proc;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_proc;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local counts to the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416718808,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0438451814,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219237307,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0126337347,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0071520398,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00408691095,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00232979185,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0028839990125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00173983083906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00175513295703,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006597953707,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of points per process\nsize_t points_per_process = points.size() / size;\nsize_t start_index = rank * points_per_process;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_process;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Count the points in each quadrant for the local partition\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416787574,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0439357018,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0218992139,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0127179855,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007102486375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034751074875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002682149525,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00202452100625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00139772239375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00133667941875,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00065462250664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of points each process will handle\nsize_t points_per_process = points.size() / size;\nsize_t start_index = rank * points_per_process;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_process;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Count the points in each quadrant for the local chunk\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416406482,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0437933968,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.021943572,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01258557715,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007086979475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003655598275,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00238670729375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00315749581875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00177843017656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00165313797578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00076333275664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a partial count\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the number of points each process should work on\nsize_t points_per_proc = points.size() / size;\nsize_t start_index = rank * points_per_proc;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_proc;\n\n// Count the points in each quadrant for the assigned points\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local counts to the global count on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416953148,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0440121668,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0218885258,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01266275,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00704398575,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0037079249125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002339874575,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00218113067187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00136155638125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00144591291484,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067976518125,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this rank will process\nsize_t points_per_rank = points.size() / size;\nsize_t start_index = rank * points_per_rank;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_rank;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins into the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416543278,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0438425148,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219332526,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0126762547,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007059349775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00372952735,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00258160375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00171194316875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131385890312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00132502912578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00065276331602,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this rank will process\nsize_t points_per_rank = points.size() / size;\nsize_t start_index = rank * points_per_rank;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_rank;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Gather the results from all ranks\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.041686044,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0440437564,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219122023,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0126132981,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00707395975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003378555575,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0024079611625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00150602511562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00191840919531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00188587662969,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071756155,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process computes its local bin counts\nfor (size_t i = rank; i < points.size(); i += size) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416661156,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0450018706,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0235211836,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0135037982,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008668579875,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004775086475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00344727641875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00213245980938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00187307599219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00204327404766,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00080648147109,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this rank will handle\nsize_t points_per_rank = points.size() / size;\nsize_t start_index = rank * points_per_rank;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_rank;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416719202,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0439490216,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219102017,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01265006975,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0071111871,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0036734063625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00235412969375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00152783869375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00152443802969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134578283125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00075006712969,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will work with\nsize_t points_per_process = points.size() / size;\nsize_t start_index = rank * points_per_process;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_process;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process counts the points in its section\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins into the global bins array on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.041684097,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0440542392,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.021923798,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0126965144,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0077337031,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00347133675,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00214730439375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002214927175,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130787271406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00181346786172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071824593594,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a partial count\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this rank will handle\nsize_t points_per_rank = points.size() / size;\nsize_t start_index = rank * points_per_rank;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_rank;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0417066836,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0439554578,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0218734559,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0125856643,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00712475115,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003208352825,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00208259664375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207924329063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156243208438,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00184933059609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067896447891,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of points each process will handle\nsize_t points_per_process = points.size() / size;\nsize_t start_index = rank * points_per_process;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_process;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process counts the points in its range\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416594528,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0438551274,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219271376,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01273570515,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006971922775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0038050260125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0024463185375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00141912987188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134576310625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158990994297,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067559769922,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this rank will handle\nsize_t points_per_rank = points.size() / size;\nsize_t start_index = rank * points_per_rank;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_rank;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root rank (0)\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.04174331,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0439764832,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0217702541,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0126477712,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00707751695,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00351371955,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00218386725,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00153569326875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00144224301094,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001832076175,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00065852699844,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a partial count\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the number of points each process will handle\nsize_t points_per_process = points.size() / size;\nsize_t start_index = rank * points_per_process;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_process;\n\n// Count the points in each quadrant for the local range\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Gather the results at the root process\nstd::array<size_t, 4> global_bins = {0, 0, 0, 0};\nMPI_Reduce(local_bins.data(), global_bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct counts\nif (rank == 0) {\n    bins = global_bins;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416708862,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0423296238,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.021339725,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0123933776,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007079921025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041195486375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00233516415625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00146984156875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00200826625625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163168614609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071609405664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process computes its local bin counts\nfor (size_t i = rank; i < points.size(); i += size) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0417003012,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0450610878,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0235743612,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01358627635,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008183546125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00434524835,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027947337375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00208727255625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00174454300938,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00208742313672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00097827391484,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a partial count\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this process will handle\nsize_t points_per_proc = points.size() / size;\nsize_t start = rank * points_per_proc;\nsize_t end = (rank == size - 1) ? points.size() : (rank + 1) * points_per_proc;\n\nfor (size_t i = start; i < end; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Gather all partial counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0417729404,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0439535128,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0218828777,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01269058925,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007160853375,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003466852425,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00224082985625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00177746397188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001289184925,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00172737185,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00072296640391,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of points each process will work with\nsize_t points_per_process = points.size() / size;\nsize_t start_index = rank * points_per_process;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_process;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process counts the points in its range\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.041664896,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0439877634,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0218742796,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01265532135,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00728415995,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003877181325,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00263926099375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00159063108125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00188035940781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00244227321953,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00058870087266,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this rank will handle\nsize_t points_per_rank = points.size() / size;\nsize_t start_index = rank * points_per_rank;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_rank;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0417075642,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0438595814,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0219465982,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01260337985,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007163098475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003431735425,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00258444778125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00242128609688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00173457722187,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00138571057734,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00069811569258,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process computes its local bin counts\nfor (size_t i = rank; i < points.size(); i += size) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0416752978,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0451833946,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0240158286,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01346604295,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.009156255725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00475490365,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00375567315625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00463971127812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00178726161094,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00218600869844,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106629841602,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of points each process will work on\nsize_t points_per_process = points.size() / size;\nsize_t start_index = rank * points_per_process;\nsize_t end_index = (rank == size - 1) ? points.size() : (rank + 1) * points_per_process;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Count the points in each quadrant for the local portion of data\nfor (size_t i = start_index; i < end_index; ++i) {\n    const auto& point = points[i];\n    if (point.x > 0 && point.y > 0) {\n        local_bins[0]++;\n    } else if (point.x < 0 && point.y > 0) {\n        local_bins[1]++;\n    } else if (point.x < 0 && point.y < 0) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.041687062,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0440238376,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0220807933,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01263283245,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00705226975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003500217925,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00290707400625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00177914399687,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00139657630781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00150857660781,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00066132214883,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "24_histogram_count_quartile",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Use MPI to compute in parallel. Assume that MPI has already been initialized.\n   Every rank has a complete copy of x. The result is stored in bins on rank 0.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {",
        "translation_prompt": "// Serial implementation of countQuartiles\n// /* Count the number of doubles in the vector x that have a fractional part \n//    in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n//    Examples:\n// \n//    input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n//    output: [2, 1, 2, 2]\n// \n//    input: [1.9, 0.2, 0.6, 10.1, 7.4]\n//    output: [2, 1, 1, 1]\n// */\n// void countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {\n// for (double num : x) {\n//         double fractional_part = num - std::floor(num);\n//         if (fractional_part < 0.25) {\n//             bins[0]++;\n//         } else if (fractional_part < 0.5) {\n//             bins[1]++;\n//         } else if (fractional_part < 0.75) {\n//             bins[2]++;\n//         } else {\n//             bins[3]++;\n//         }\n//     }\n// }\n\n// MPI implementation of countQuartiles\n#include <mpi.h>\n\n/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Use MPI to compute in parallel. Assume that MPI has already been initialized.\n   Every rank has a complete copy of x. The result is stored in bins on rank 0.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(std::vector<double> const& x, std::array<size_t, 4> &bins) {\nfor (double num : x) {\n        double fractional_part = num - std::floor(num);\n        if (fractional_part < 0.25) {\n            bins[0]++;\n        } else if (fractional_part < 0.5) {\n            bins[1]++;\n        } else if (fractional_part < 0.75) {\n            bins[2]++;\n        } else {\n            bins[3]++;\n        }\n    }\n}",
        "translation_function_name": "countQuartiles",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its partial counts\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the array that this rank will process\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    double num = x[i];\n    double fractional_part = num - std::floor(num);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all partial counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633698094,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0784517662,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0391881827,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02166527055,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01148916055,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053308889625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00340205256875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00165866345,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103454949687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00072989748203,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071946530469,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    double num = x[i];\n    double fractional_part = num - std::floor(num);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0634101632,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0784146604,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392114703,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0217079677,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011445685175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005338859225,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00317730434375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163639961875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107930480781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078429375078,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00075955698867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the start and end indices for each process\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\n// Count the quartiles in the local chunk\nfor (size_t i = start_index; i < end_index; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633153254,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.078248463,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392274353,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02171616625,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011352421775,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005487168625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00327798846875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158018250938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00095213276094,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00061141367891,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00086220776953,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the number of elements each process will work on\nsize_t num_elements_per_proc = x.size() / size;\nsize_t start_index = rank * num_elements_per_proc;\nsize_t end_index = (rank == size - 1) ? x.size() : (rank + 1) * num_elements_per_proc;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0634415882,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0784790154,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392171842,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02197086235,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011387989425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053729739625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00325505845625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156147752812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00092330799219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00063220984297,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00080053344258,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the vector each process will work on\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\n// Count quartiles in the local chunk\nfor (size_t i = start; i < end; ++i) {\n    double num = x[i];\n    double fractional_part = num - std::floor(num);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633193248,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0785078454,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0391752976,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0216523401,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011432826825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005467982725,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003194849975,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00160865964375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00104466579531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00060816807266,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008456448707,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local bins\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the range of elements for each process\nsize_t num_elements = x.size();\nsize_t elements_per_proc = num_elements / size;\nsize_t start_index = rank * elements_per_proc;\nsize_t end_index = (rank == size - 1) ? num_elements : (rank + 1) * elements_per_proc;\n\n// Count quartiles in the local range\nfor (size_t i = start_index; i < end_index; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.063425277,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0781749012,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392225987,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02169446805,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0113504652,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053645245625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00342072794375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156313673438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00098597892031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00070959893516,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008566980625,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process computes its local bin counts\nfor (size_t i = rank; i < x.size(); i += size) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633890666,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0786381424,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0394088736,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02180054475,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01179945815,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00633684135,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0054291211,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00174703088125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107303277812,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00069677605,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00097939794883,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0632505294,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0782758084,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392224595,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0215574849,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0113057153,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055514780625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00346880765625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162911270938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00097469299844,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067098428359,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071852774609,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the number of elements each process will work on\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Gather the results at the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0632119988,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0782576124,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392580375,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02171135225,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011380887125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0054814605125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0033675420875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014886320375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094640783906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00062862105547,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071270347422,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    double num = x[i];\n    double fractional_part = num - std::floor(num);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0632612836,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783834022,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0391999542,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0216776814,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011504581175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053814459,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00328816109375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00149030725312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103735664062,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00066716580156,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083879905117,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local bins\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the vector this rank will process\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\n// Count quartiles in the local portion of the vector\nfor (size_t i = start_index; i < end_index; ++i) {\n    double num = x[i];\n    double fractional_part = num - std::floor(num);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root rank\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633266138,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0784105276,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.039174669,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02191670065,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0112691834,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055577458625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00319084119375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162135345625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00095137641719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00063257987188,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00082376246562,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process computes its local bin counts\nfor (size_t i = rank; i < x.size(); i += size) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0632438626,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0787139904,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0394199583,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0217641995,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01147672455,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0072772877,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00377495079375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00187365232812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00115561044531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00072432681719,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00085643546211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will work on\nsize_t local_count = x.size() / size;\nsize_t start_index = rank * local_count;\nsize_t end_index = (rank == size - 1) ? x.size() : (rank + 1) * local_count;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process calculates its local bin counts\nfor (size_t i = start_index; i < end_index; ++i) {\n    double num = x[i];\n    double fractional_part = num - std::floor(num);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.063378984,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0785834938,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0391889076,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02174412935,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0112914627,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053027016875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003326834325,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156563849688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00104491463125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000668896825,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008035890957,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will work on\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * local_n;\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Count the quartiles in the local range\nfor (size_t i = start; i < end; ++i) {\n    double num = x[i];\n    double fractional_part = num - std::floor(num);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the root process\nstd::array<size_t, 4> global_bins = {0, 0, 0, 0};\nMPI_Reduce(local_bins.data(), global_bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n\n// Copy the global result to the output parameter on rank 0\nif (rank == 0) {\n    bins = global_bins;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633578626,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0781995056,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0391390451,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0216577912,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0112866897,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00564845185,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00327476300625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00161498174062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00093215095,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00064446196406,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00079376669688,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Each process computes its local bin counts\nfor (size_t i = rank; i < x.size(); i += size) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633370634,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0788179396,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0394216653,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02178161265,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01143716945,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055435919125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00384436771875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00174863485,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00112723889844,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00084911003438,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094729348398,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the vector each process will work on\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\n// Count quartiles in the local chunk\nfor (size_t i = start; i < end; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633094896,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783573766,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392238623,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0216391323,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01141188855,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00541245155,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030702851,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001636590075,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00099279598594,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067420364297,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00085245526289,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the portion of the vector each process will work on\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : start + chunk_size;\n\n// Count quartiles for the local chunk\nfor (size_t i = start; i < end; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.063404284,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0784482132,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392357873,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.021628601,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0114102231,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005325238075,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032328553375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00153094208438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00228790039219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00081303008047,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071791530859,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the number of elements each process will work on\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\n// Count quartiles in the local chunk\nfor (size_t i = start_index; i < end_index; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0632566226,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783216052,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0391845775,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02160954885,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011303101825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053344027875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00321114288125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016177071,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00095913819375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00071237247969,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000846354075,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the number of elements each process will work on\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\n// Count quartiles in the local chunk\nfor (size_t i = start; i < end; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Reduce the local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0633688574,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783895208,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392213796,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0216377013,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01131984945,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00542989215,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00315870424375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00155472175938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094904997969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00064487926719,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078028139844,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 4> local_bins = {0, 0, 0, 0};\n\n// Calculate the number of elements each process will work on\nsize_t num_elements_per_proc = x.size() / size;\nsize_t start_index = rank * num_elements_per_proc;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + num_elements_per_proc;\n\n// Count quartiles in the local range of the vector\nfor (size_t i = start_index; i < end_index; ++i) {\n    double fractional_part = x[i] - std::floor(x[i]);\n    if (fractional_part < 0.25) {\n        local_bins[0]++;\n    } else if (fractional_part < 0.5) {\n        local_bins[1]++;\n    } else if (fractional_part < 0.75) {\n        local_bins[2]++;\n    } else {\n        local_bins[3]++;\n    }\n}\n\n// Gather the results at rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 4, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0632609006,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0783820346,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0391694571,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02163658925,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.011307776475,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053831071625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00320700590625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156006280938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00099603610781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00079748133672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00073861508437,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "20_histogram_pixel_histogram",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Use MPI to count in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of image. The result is stored in bins on rank 0.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {",
        "translation_prompt": "// Serial implementation of pixelCounts\n// /* Count the number of pixels in image with each grayscale intensity.\n//    The vector `image` is a grayscale image with values 0-255.\n//    Store the results in `bins`.\n//    Example:\n//    \n//    input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n//    output: [0, 0, 2, 0, 1, ...]\n// */\n//  void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {\n// for (auto const& pixel : image) {\n//         bins[pixel]++;\n//     }\n// }\n\n// MPI implementation of pixelCounts\n#include <mpi.h>\n\n/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Use MPI to count in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of image. The result is stored in bins on rank 0.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(std::vector<int> const& image, std::array<size_t, 256> &bins) {\nfor (auto const& pixel : image) {\n        bins[pixel]++;\n    }\n}",
        "translation_function_name": "pixelCounts",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local bin counts\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this rank will process\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : start_index + chunk_size;\n\n// Count the pixels in the assigned chunk\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018529918,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018851504,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011933142,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027182179,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00165855365,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006923443125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00079184935625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024846672188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031391925156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00032367223672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00046323296445,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will handle\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018554766,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018613738,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011441683,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00236989015,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001780115,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00070379705,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008576611,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034902972188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030230250781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002877412125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00043727064297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its partial histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will handle\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018541042,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018717212,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011390134,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00271678505,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001704638175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006829646625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078673235,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027710147188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030152369531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024425147656,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00055267791484,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Initialize local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image for this rank\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Count pixels in the local chunk\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018533048,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018724406,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011398569,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023732245,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023785353,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006235497875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00079909249375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028791346563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034717395469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022924283203,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00051195675898,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local bin counts\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the number of elements each process will work on\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : start_index + chunk_size;\n\n// Count the pixels in the assigned chunk\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018517216,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018648986,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011423346,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027642216,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001675097,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007651803125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00081590521875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00032389094062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023624670156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00020909121484,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00049090030078,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will handle\nsize_t chunk_size = image.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? image.size() : start + chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start; i < end; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001849083,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018660586,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011447983,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023821768,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163927105,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006205256875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008994816875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036825612813,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030559414687,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024520860703,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00053517442305,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its partial histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this rank will process\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018471552,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019884224,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011454075,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00252349775,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001808994325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000622924175,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078457973125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00029568585625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026510895938,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034276229609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00055883732344,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its partial histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will handle\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001851878,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018742204,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011520519,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023455958,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00195220635,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007533614875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007717686125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00035041837812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031773422344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025163798203,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00047928835156,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will analyze\nsize_t chunk_size = image.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start; i < end; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001852778,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018997922,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011561993,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002320104,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001774958975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005399259375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009601593875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030336421875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026520029531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023164715469,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00045780868672,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this rank will process\nsize_t chunk_size = image.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? image.size() : start + chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018466804,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018691724,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011603292,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00274522725,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00178260705,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000626141875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00100568139375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028125580937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00032109318437,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022712593437,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00054807003008,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will handle\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : start_index + chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018541364,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018663374,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011439526,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023068411,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001700195425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005640332625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083533086875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00032497100312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027240730156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034378862578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00045891956875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 256> local_bins = {0};\n\n// Each process counts the pixels in its portion of the image\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local bins to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001854958,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018879356,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011406203,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023338549,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001688736725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000611795,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00078508200625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003101802375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028566579219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031173496406,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00049833293789,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will analyze\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001853339,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018788286,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011780427,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00234118605,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00175908995,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000549742675,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008493983125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026434950312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027549983125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022992033047,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00050636630312,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will handle\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018520182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001870738,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001146258,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00235491155,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001733143975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005503240125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000766586225,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000304433375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027825406875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024231098906,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00045361557695,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local bin counts\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this rank will process\nsize_t chunk_size = image.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? image.size() : start + chunk_size;\n\n// Count the pixels in the assigned chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local bin counts to the root process\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018518982,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001867796,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011379666,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00253248745,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001698849325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008369879,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00094968881875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036074352812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00029239811563,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025359566406,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00052847738242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local bin counts\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this rank will process\nsize_t chunk_size = image.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? image.size() : start + chunk_size;\n\n// Count the pixels in the assigned chunk\nfor (size_t i = start; i < end; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001845989,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018732162,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011497981,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023418894,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001688838975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006980446125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00083799121875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00035935252187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027511870469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023844359219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00075308278711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this rank will process\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : (start_index + chunk_size);\n\n// Compute the local histogram\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018509402,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001899662,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011423938,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00232734055,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00185043415,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00050367815,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00077944439375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00029501569375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026599082656,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024757783672,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00050010664687,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this rank will process\nsize_t chunk_size = image.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? image.size() : start_index + chunk_size;\n\n// Count pixels in the local chunk\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018545952,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018830566,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011284012,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00235921695,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016975641,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000689672475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000858365875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00021540060625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00029326365312,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022493158828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00048569829492,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::array<size_t, 256> local_bins = {0};\n\n// Each process counts the pixels in its portion of the image\nsize_t chunk_size = image.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? image.size() : (rank + 1) * chunk_size;\n\nfor (size_t i = start; i < end; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local bins to the global bins on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018488644,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018688074,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011716196,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023414345,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00164989,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007398901,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008070929375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027071595625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00029263543125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026579913047,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005383839543,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute its local histogram\nstd::array<size_t, 256> local_bins = {0};\n\n// Calculate the portion of the image this process will analyze\nsize_t chunk_size = image.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? image.size() : start + chunk_size;\n\n// Compute the local histogram\nfor (size_t i = start; i < end; ++i) {\n    local_bins[image[i]]++;\n}\n\n// Reduce all local histograms into the global histogram on rank 0\nMPI_Reduce(local_bins.data(), bins.data(), 256, MPI_UNSIGNED_LONG, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018530486,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018723024,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011422823,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00235904805,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00166769405,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000582612125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000820659075,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028416434688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027138974844,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026171267266,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00046954082461,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "38_search_find_the_first_even_number",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {",
        "translation_prompt": "// Serial implementation of findFirstEven\n// /* Return the index of the first even number in the vector x.\n//    Examples:\n// \n//    input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n//    output: 6\n// \n//    input: [3, 8, 9, 9, 3, 4, 8, 6]\n//    output: 1\n// */\n// size_t findFirstEven(std::vector<int> const& x) {\n// for (size_t i = 0; i < x.size(); ++i) {\n//     if (x[i] % 2 == 0) {\n//       return i;\n//     }\n//   }\n//   return x.size();\n// }\n\n// MPI implementation of findFirstEven\n#include <mpi.h>\n\n/* Return the index of the first even number in the vector x.\n   Use MPI to parallelize the search. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the index of the first even number in the vector x.\n   Examples:\n\n   input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]\n   output: 6\n\n   input: [3, 8, 9, 9, 3, 4, 8, 6]\n   output: 1\n*/\nsize_t findFirstEven(std::vector<int> const& x) {\nfor (size_t i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      return i;\n    }\n  }\n  return x.size();\n}",
        "translation_function_name": "findFirstEven",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\nsize_t global_index;\nMPI_Allreduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_index;\n} else {\n    return x.size(); // Non-zero ranks return a value that is not used.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003073528,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002539968,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002802212,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134420815,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00182075225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009535512375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00563201685,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00254427404062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00494666908437,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00232232650234,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01715308617344,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the smallest index from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003061384,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000248949,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002896226,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021198088,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001781573625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019914874375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00909617039375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00157237415625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00400640293281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00398980839609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01268813428125,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.00030603,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002486404,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002536542,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001942346,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00156642625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00088218335,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101141528125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004210236,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030521116563,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028347789844,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00053217202734,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the result from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000306569,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002462198,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002836323,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021157837,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001887135225,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001997177375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007982614975,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00197074257812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00510742625156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00269661315703,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0180301633,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its own partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the smallest index from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.00030585,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002506944,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002833118,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00220199115,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00192722745,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015795077875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007943627725,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00332065255,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00401054497344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00241090356016,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01266437034844,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the global index from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000307076,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000245695,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002818067,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021248784,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0017912491,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019921155,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00809018670625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207951055,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0049854752875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00246640892344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01312998498164,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the smallest index from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003060398,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002623824,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002820503,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00239359725,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019029308,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016515074125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.008026795425,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00160307640937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00530876230156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02071040509766,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01317584928906,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index;\n\n// Each process finds the index of the first even number in its portion of the vector\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to find the minimum index globally\nMPI_Allreduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\n// If no even number was found, set the global index to the size of the vector\nif (global_index == x.size()) {\n    if (rank == 0) {\n        return x.size();\n    }\n} else {\n    // If an even number was found, rank 0 will have the correct index\n    if (rank == 0) {\n        return global_index;\n    }\n}\n\n// For ranks other than 0, we can return any value since it will be ignored\nreturn x.size();\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000306908,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002446692,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002842613,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00137268745,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001660438825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001088297725,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058120163,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00241832196563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00434811779062,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00210245577656,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01040765788711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003058578,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002444088,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002777953,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020308399,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015748726,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008125885625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00119118418125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00039330602187,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003428352625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025724364766,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00062273620781,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\nsize_t global_index;\nMPI_Allreduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_index == x.size() ? x.size() : global_index;\n} else {\n    return x.size(); // Non-zero ranks don't need to return the index\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003063702,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002459356,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002925861,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00133641325,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00173140285,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001231563525,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00534019788125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00251542052188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00427889191406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00249320945078,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01331844632461,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the smallest index from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003063508,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002462536,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002858212,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00215192775,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019690393,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001638831575,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007392416,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00213054326563,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0041982987125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00229349011797,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01164168099336,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\nsize_t global_index;\nMPI_Allreduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_index == x.size() ? x.size() : global_index;\n} else {\n    return x.size(); // Non-zero ranks don't need to return the index.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003068176,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002463942,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002816987,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013935047,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00175514745,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008955795,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00576852855,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00277084772812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.004617329425,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00242835483203,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.012219069325,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003058818,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002480594,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000259957,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020722533,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001434659,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000870549625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0010676777875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00043290446875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031116346406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028218921328,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004525598043,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003067796,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002465692,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002519407,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00204817255,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015121291,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007988223125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011838330375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00043062205312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003469151125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024381817266,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00057073655273,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the smallest index from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003066134,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002481052,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002775918,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020825129,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001853085425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001641612075,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0073927337625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00207926109688,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00361379555469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00293859012578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01056883408437,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its partition\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Broadcast the smallest index from rank 0 to all other ranks\nMPI_Bcast(&global_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000306441,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002463922,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004842307,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021708288,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00192151985,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016624317125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00727344905625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00177383118437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0052578439625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00341595664375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01404225191211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\nsize_t global_index;\nMPI_Allreduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_index == x.size() ? x.size() : global_index;\n} else {\n    return x.size(); // Non-zero ranks don't need to return the index\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003065794,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000286267,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002817186,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00155180775,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00177595825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011825411375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0056807561375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.002099052425,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00443742694688,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00711712765781,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01345658216133,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process finds the index of the first even number in its portion of the vector\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to the smallest one on rank 0\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\nreturn global_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003072828,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002452722,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002759017,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020064248,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001558419925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007832907,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130115671875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003980088625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027682444219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00021680321016,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00057133588984,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\nsize_t global_index;\nMPI_Allreduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_index == x.size() ? x.size() : global_index;\n} else {\n    return x.size(); // Non-zero ranks don't need to return the index.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0003064528,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000246723,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003712206,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001629917,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001732300625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001111619425,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00567377755,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00276439657188,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00520133099219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00233131011172,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01051734064844,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_index = x.size();\nsize_t global_index = x.size();\n\n// Each process will check a portion of the vector\nfor (size_t i = rank; i < x.size(); i += size) {\n    if (x[i] % 2 == 0) {\n        local_index = i;\n        break;\n    }\n}\n\n// Reduce all local indices to find the minimum even index\nMPI_Reduce(&local_index, &global_index, 1, MPI_UNSIGNED_LONG, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global index\nif (rank == 0) {\n    return global_index;\n} else {\n    return x.size(); // Other ranks return an invalid index\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000306419,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000245892,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002596554,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0020011385,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00144917665,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0008227101375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011363196625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004170698625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031192360469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022915187578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00047930412344,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "36_search_check_if_array_contains_value",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {",
        "translation_prompt": "// Serial implementation of contains\n// /* Return true if the vector x contains the value `target`. Return false otherwise.\n//    Examples:\n// \n//    input: x=[1, 8, 2, 6, 4, 6], target=3\n//    output: false\n//    \n//    input: x=[1, 8, 2, 6, 4, 6], target=8\n//    output: true\n// */\n// bool contains(std::vector<int> const& x, int target) {\n// return std::find(x.begin(), x.end(), target)!= x.end();\n// }\n\n// MPI implementation of contains\n#include <mpi.h>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(std::vector<int> const& x, int target) {\nreturn std::find(x.begin(), x.end(), target)!= x.end();\n}",
        "translation_function_name": "contains",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will search a part of the vector\nint local_found = 0;\nint global_found = 0;\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\n// Search for the target in the local chunk\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local results into the global result\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Rank 0 will have the final result\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Non-zero ranks do not need to return a meaningful value\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000244138,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000132234,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 8.1127e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007262424,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001592358175,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007489404625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001151829325,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00017150187812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025367155938,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00013753366719,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023828375898,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will search a part of the vector\nint local_found = 0;\nint global_found = 0;\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local_found to global_found on rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002437212,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001446898,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.84361e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007493671,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016093327,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000546629375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011169301,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001803369125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027752207813,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00014713866484,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016900826484,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local results into the global result\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct result\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Other ranks return false, but their value will be ignored\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002430922,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001597198,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.0055e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007250949,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001508367425,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000506351175,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001166629475,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001981032875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028702376719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001333448625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027815510586,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the size of the chunk each process will handle\nint local_size = x.size() / size;\nint start = rank * local_size;\nint end = (rank == size - 1) ? x.size() : start + local_size;\n\n// Each process checks its chunk of the vector\nbool local_contains = false;\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_contains = true;\n        break;\n    }\n}\n\n// Reduce the local results into the global result on rank 0\nbool global_contains;\nMPI_Reduce(&local_contains, &global_contains, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct result\nif (rank == 0) {\n    return global_contains;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002458874,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000133891,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.79532e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007327193,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001532116675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004779894875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00110514495,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00019265761875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031243650156,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012927261797,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00043187923164,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a part of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local found flags into the global found flag\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Other ranks do not need to return a meaningful value\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.000246723,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001358428,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.54575e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00073874865,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001483527125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006516943625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0011414959125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023506076562,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024520395938,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00013918037344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036669284453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local found flags into the global found flag on rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002443262,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001361534,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.73612e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00075141995,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00148198365,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000564662,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106933448125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00017930833125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023396418906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015064433125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034885321172,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks its own portion of the array\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local found flags into the global found flag on rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002437452,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001329458,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.65958e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00097408285,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001580581325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006061395,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00109492603125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016727518125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024404004375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012495383594,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00033048597539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will search a chunk of the vector\nint chunk_size = x.size() / size;\nint start_index = rank * chunk_size;\nint end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\n// Search for the target in the assigned chunk\nbool found_local = false;\nfor (int i = start_index; i < end_index; ++i) {\n    if (x[i] == target) {\n        found_local = true;\n        break;\n    }\n}\n\n// Reduce the local found flags into a global found flag on rank 0\nbool found_global;\nMPI_Reduce(&found_local, &found_global, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct found_global value\nif (rank == 0) {\n    return found_global;\n} else {\n    return false; // Other ranks return false, as they do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002459734,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000137925,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 8.15471e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00077090525,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001531651525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004734093875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163986675625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015467263437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025582508906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00013674340078,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025571400586,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0; // This will be 1 if the target is found by this process, 0 otherwise\nint global_found; // This will be the result gathered from all processes\n\n// Each process checks its portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local_found values into global_found with a logical OR operation\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found;\n} else {\n    return false; // Other ranks return false, as they don't have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002438474,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001328392,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.4628e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007518057,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00148938605,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006177073875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013880269625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016254638437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024226945625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011291750469,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022679650312,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a part of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local found flags into the global found flag\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Non-zero ranks do not need to return a meaningful value\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002456972,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001343822,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.65065e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009458339,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001475947675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004820572125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00093529055,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00017186448438,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00115319370937,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00020018847344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028522189336,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks its portion of the array\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local 'found' flags to a global 'found' flag on rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Non-zero ranks return false by default (their return value is ignored)\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002450358,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001355822,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.60108e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00074458125,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001521782825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000500193125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00141568775625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001680360875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028436724375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011428035313,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00034689143789,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local found flags into the global found flag on rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002442542,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001346144,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.87267e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009675126,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015161263,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000413996,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103176554375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000173622975,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026508778281,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 5.381757187e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028862334102,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local found flags into the global found flag\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Other ranks do not need to return a meaningful value\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002470374,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001333584,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.58804e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009481077,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015641944,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000490181,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001124523525,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00018107319062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002989978375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024517192734,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00030693396367,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0; // Local flag to indicate if the target is found\nint global_found = 0; // Global flag to indicate if the target is found\n\n// Each process checks a portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local found flags into the global found flag\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002448592,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001348792,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.57792e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005954269,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001482009025,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005359001,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00153854260625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001644111375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00028777329375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015680034766,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022212614414,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local results into the global result\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002431582,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001335304,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.76407e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007376856,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001496430925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003602704625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00106824015625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00017206030625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022614667187,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00013423953984,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00032748909727,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0; // This will be 1 if the target is found by this process, 0 otherwise\nint global_found; // This will be the result gathered from all processes\n\n// Calculate the number of elements per process\nint elements_per_proc = x.size() / size;\n\n// Calculate the start and end indices for this process\nint start_idx = rank * elements_per_proc;\nint end_idx = (rank == size - 1) ? x.size() : start_idx + elements_per_proc;\n\n// Search for the target in the local range of this process\nfor (int i = start_idx; i < end_idx; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local_found values into global_found with a logical OR operation\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_LOR, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Non-zero ranks do not need to return a meaningful value here\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002433284,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001320856,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.43544e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0007265885,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001497103975,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000614146625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00124993661875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00019076820937,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00033500347031,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011437747344,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026938449727,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Each process checks a portion of the vector\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local_found flags to a global_found flag on rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Other ranks return false, or could return the value of local_found if needed\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002434752,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001349248,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.7945e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00096251725,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001521789675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005351888,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00096822621875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015905710625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00041392370625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00013758089219,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00037413996211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will work with\nint local_size = x.size() / size;\nint start_index = rank * local_size;\nint end_index = (rank == size - 1) ? x.size() : start_index + local_size;\n\n// Each process checks its range of elements\nbool local_contains = false;\nfor (int i = start_index; i < end_index; ++i) {\n    if (x[i] == target) {\n        local_contains = true;\n        break;\n    }\n}\n\n// Reduce the local results into the global result on rank 0\nbool global_contains;\nMPI_Reduce(&local_contains, &global_contains, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct result\nif (rank == 0) {\n    return global_contains;\n} else {\n    return false; // Other ranks return false by default\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002444566,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001491358,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.55167e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009764353,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001652835525,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000393489175,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001139163525,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024066560312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027379471719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011565467031,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036523392227,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Calculate the number of elements per process\nint local_n = x.size() / size;\nint remainder = x.size() % size;\n\n// Determine the starting and ending indices for this process\nint start = rank * local_n + std::min(rank, remainder);\nint end = start + local_n + (rank < remainder ? 1 : 0);\n\n// Search for the target in the local portion of the vector\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce the local found flags to a global found flag on rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Other ranks do not need to return a meaningful value\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002447592,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001327294,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.61819e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006184225,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00155096135,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006087111125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000947063975,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000171468325,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027516853906,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00010419649531,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027281439336,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_found = 0;\nint global_found = 0;\n\n// Calculate the chunk size for each process\nint chunk_size = x.size() / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? x.size() : start + chunk_size;\n\n// Each process checks its chunk of the vector\nfor (int i = start; i < end; ++i) {\n    if (x[i] == target) {\n        local_found = 1;\n        break;\n    }\n}\n\n// Reduce all local_found flags to rank 0\nMPI_Reduce(&local_found, &global_found, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_found value\nif (rank == 0) {\n    return global_found == 1;\n}\n\n// Non-zero ranks return false, their return value will be ignored\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0002433744,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000132607,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.61398e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0009866782,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014756197,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000630407625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00098834196875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001665167125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022480860625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000304498025,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022120046836,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "39_search_xor_contains",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {",
        "translation_prompt": "// Serial implementation of xorContains\n// /* Return true if `val` is only in one of vectors x or y.\n//    Return false if it is in both or neither.\n//    Examples:\n// \n//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n//    output: true\n// \n//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n//    output: false\n// */\n// bool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {\n// return std::find(x.begin(), x.end(), val)!= x.end() ^\n//          std::find(y.begin(), y.end(), val)!= y.end();\n// }\n\n// MPI implementation of xorContains\n#include <mpi.h>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Return the result on rank 0.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {\nreturn std::find(x.begin(), x.end(), val)!= x.end() ^\n         std::find(y.begin(), y.end(), val)!= y.end();\n}",
        "translation_function_name": "xorContains",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool result = false;\nif (rank == 0) {\n    result = global_result_x ^ global_result_y;\n}\n\nreturn result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.5984e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.9708e-06,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.90065e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003593184,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001693489125,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004115966375,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158604044375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000122169375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025839109219,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012459847812,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012165698594,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\n\n// Each process will now have a pair of booleans indicating if val was found in x and y\nbool results[2] = {found_in_x, found_in_y};\n\n// Reduce all pairs to rank 0 using logical OR operation\nbool global_results[2] = {false, false};\nMPI_Reduce(&results, &global_results, 2, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    // XOR the results to see if val is only in one vector\n    return global_results[0] != global_results[1];\n}\n\n// Non-zero ranks do not need the result\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.5842e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.058e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 3.76305e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003623904,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001506987675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004257305875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015314055,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012275394063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025750406719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002137147125,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00013615581055,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6326e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.03372e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.4869e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003820025,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001583512625,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00047325765,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00176087016875,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001349274375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031905899062,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011633193438,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015538634922,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.5724e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.00688e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.54289e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003628287,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162317535,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000452912,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00154226695625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000107033975,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00035337075,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.609051406e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015752363438,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_x_found = (std::find(x.begin(), x.end(), val) != x.end()) ? 1 : 0;\nint local_y_found = (std::find(y.begin(), y.end(), val) != y.end()) ? 1 : 0;\nint global_x_found, global_y_found;\n\nMPI_Allreduce(&local_x_found, &global_x_found, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\nMPI_Allreduce(&local_y_found, &global_y_found, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\nbool result = (global_x_found > 0) ^ (global_y_found > 0);\n\nif (rank == 0) {\n    return result;\n} else {\n    return false; // Only rank 0 has the correct result, other ranks return false.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.9032e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.4934e-06,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.25754e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004013391,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015150696,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005515182,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003837227925,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00181361013437,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00146207516719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00205976664141,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00818069628047,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\n\n// Reduce the found_in_x and found_in_y to rank 0 using logical OR operation\nbool global_found_in_x, global_found_in_y;\nMPI_Reduce(&found_in_x, &global_found_in_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_found_in_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool result = false;\nif (rank == 0) {\n    // Perform XOR operation on rank 0\n    result = global_found_in_x ^ global_found_in_y;\n}\n\nreturn result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.5802e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.2994e-06,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.48469e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00037588715,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00154841745,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00042166315,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00159997914375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012892450938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022591723125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 8.533637266e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00014986354102,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.592e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.0582e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.69326e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036051955,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158544865,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000457660075,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001431851475,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000111643025,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025654127969,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011889114375,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00014909232344,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.5964e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.0343e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.61083e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005889391,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001571205825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00045610495,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016404898625,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001349726875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027950726875,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00013712933828,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00018980943242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool result = false;\nif (rank == 0) {\n    result = global_result_x ^ global_result_y;\n}\n\nreturn result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6946e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.7184e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.57877e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003514634,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015882615,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004796395625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00180151413125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012842995938,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00026143599375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011434191484,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015414683477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool result = false;\nif (rank == 0) {\n    result = global_result_x ^ global_result_y;\n}\n\nreturn result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6186e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.34114e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.9645e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000367534,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0015873645,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000452550475,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016188985375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011607857812,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00032627080625,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011465259609,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00016616878789,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_x_found = std::find(x.begin(), x.end(), val) != x.end() ? 1 : 0;\nint local_y_found = std::find(y.begin(), y.end(), val) != y.end() ? 1 : 0;\nint global_x_found, global_y_found;\n\nMPI_Allreduce(&local_x_found, &global_x_found, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\nMPI_Allreduce(&local_y_found, &global_y_found, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\nbool result = (global_x_found > 0) ^ (global_y_found > 0);\n\nif (rank == 0) {\n    return result;\n} else {\n    return false; // Only rank 0 has the correct result, other ranks return false\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.837e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.0666e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.91007e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00065086135,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001759445675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004257335625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0034656595125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018892206875,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001363316825,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00181315920625,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00436046644453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_x_found = (std::find(x.begin(), x.end(), val) != x.end()) ? 1 : 0;\nint local_y_found = (std::find(y.begin(), y.end(), val) != y.end()) ? 1 : 0;\n\nint global_x_found;\nint global_y_found;\n\nMPI_Reduce(&local_x_found, &global_x_found, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\nMPI_Reduce(&local_y_found, &global_y_found, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\nbool result = false;\nif (rank == 0) {\n    result = (global_x_found > 0) ^ (global_y_found > 0);\n}\n\nreturn result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.8366e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.13352e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.53366e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0002448669,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001700788925,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004425338,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00143563428125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011675234375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00031881806719,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011228491953,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012926307578,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    return global_result_x ^ global_result_y;\n}\n\n// Non-root ranks do not need the result, but we return false for consistency.\nreturn false;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.632e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.3345e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.68588e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006024332,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001792857725,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005006210875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0016907877125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011200544062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000472396275,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00010619116875,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00018780741289,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6066e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.01692e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.51494e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003638603,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001637464825,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003754470625,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001666559225,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00010892124063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023939832344,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015085252578,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00018441747188,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool local_x_contains = std::find(x.begin(), x.end(), val) != x.end();\nbool local_y_contains = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = local_x_contains ^ local_y_contains;\n\nbool global_x_contains, global_y_contains;\nMPI_Reduce(&local_x_contains, &global_x_contains, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&local_y_contains, &global_y_contains, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool result = false;\nif (rank == 0) {\n    result = global_x_contains ^ global_y_contains;\n}\n\nreturn result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6686e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.07258e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.78583e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036325715,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001583668675,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000439513175,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00149991268125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00011572059063,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00024102844531,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012430505938,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101817161758,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6068e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.96332e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.60661e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00025615365,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00155192935,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.000433611125,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163504698125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012510950625,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027312644375,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015956040469,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00018778407109,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool result = false;\nif (rank == 0) {\n    result = global_result_x ^ global_result_y;\n}\n\nreturn result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6026e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.30522e-05,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.64208e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00063398545,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001777350325,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0004730911,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018088263125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00010372619062,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027784515781,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00015333340078,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00027080534297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\n\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.6162e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.7864e-06,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.26385e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00036128385,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00179014665,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00049804155,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00165865799375,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00012488028125,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00029673856406,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.978733047e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00023430782422,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nbool found_in_x = std::find(x.begin(), x.end(), val) != x.end();\nbool found_in_y = std::find(y.begin(), y.end(), val) != y.end();\nbool local_result = found_in_x ^ found_in_y;\n\nbool global_result_x, global_result_y;\nMPI_Reduce(&found_in_x, &global_result_x, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\nMPI_Reduce(&found_in_y, &global_result_y, 1, MPI_C_BOOL, MPI_LOR, 0, MPI_COMM_WORLD);\n\nbool final_result = false;\nif (rank == 0) {\n    final_result = global_result_x ^ global_result_y;\n}\n\nreturn final_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.5902e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.1894e-06,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 5.44201e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00058226095,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00155653705,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00050020665,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00157070818125,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001193182375,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00022790570469,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 7.750942109e-05,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0001617607668,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint local_x_found = (std::find(x.begin(), x.end(), val) != x.end()) ? 1 : 0;\nint local_y_found = (std::find(y.begin(), y.end(), val) != y.end()) ? 1 : 0;\nint global_x_found, global_y_found;\n\nMPI_Allreduce(&local_x_found, &global_x_found, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\nMPI_Allreduce(&local_y_found, &global_y_found, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);\n\nbool result = (global_x_found > 0) ^ (global_y_found > 0);\n\nif (rank == 0) {\n    return result;\n} else {\n    return false; // Only rank 0 has the correct result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 6.8606e-06,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 9.5338e-06,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.06047e-05,
                        "num_procs": 2
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0003916745,
                        "num_procs": 4
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001757649,
                        "num_procs": 8
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005278002875,
                        "num_procs": 16
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00314522285,
                        "num_procs": 32
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00221211840312,
                        "num_procs": 64
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014362392125,
                        "num_procs": 128
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00162480836016,
                        "num_procs": 256
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00411901661445,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "35_search_search_for_last_struct_by_key",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {",
        "translation_prompt": "// Serial implementation of findLastShortBook\n// struct Book {\n//    std::string title;\n//    int pages;\n// };\n// \n// /* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n// \t Example:\n// \n//    input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n//    output: 2\n// */\n// size_t findLastShortBook(std::vector<Book> const& books) {\n// size_t last_short_book_index = 0;\n//    for (size_t i = 0; i < books.size(); ++i) {\n//       if (books[i].pages < 100) {\n//          last_short_book_index = i;\n//       }\n//    }\n//    return last_short_book_index;\n// }\n\n// MPI implementation of findLastShortBook\n#include <mpi.h>\n\nstruct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use MPI to search in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of books. Return the result on rank 0.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct Book {\n   std::string title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(std::vector<Book> const& books) {\nsize_t last_short_book_index = 0;\n   for (size_t i = 0; i < books.size(); ++i) {\n      if (books[i].pages < 100) {\n         last_short_book_index = i;\n      }\n   }\n   return last_short_book_index;\n}",
        "translation_function_name": "findLastShortBook",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return 0 or an appropriate value indicating they don't have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029879494,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031594522,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00157301787578,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0029888914,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032053526,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00158707848242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0031308384,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031793438,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00150400556289,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0031362848,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032597568,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00185197767695,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce all local indices to the global last short book index on rank 0\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have 0\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0030350058,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032060776,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00177246955977,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0038079758,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00457332,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014784494875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have 0\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.003046307,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032340566,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00185978096094,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its partition\nfor (size_t i = 0; i < books.size(); ++i) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have 0\nif (world_rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks do not have the correct answer\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.003124085,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003209905,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02963620657383,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_last_short_book_index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0032774578,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032319644,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00188961299375,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.003218319,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031803314,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00152925480977,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have an undefined value\nreturn rank == 0 ? global_last_short_book_index : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0031792654,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032123514,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00166349751563,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce all local indices to the global last short book index on rank 0\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have 0\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0030759572,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00321469,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00177288183594,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce to find the maximum index among all processes\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0030806362,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032193166,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00176157303672,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indexes to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return 0 or an appropriate value indicating they do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0030548616,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003174701,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00154697024375,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indexes to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have 0\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return 0 or could return an invalid index if needed\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0031604718,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032392438,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00223023533828,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0030953258,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.003236437,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00150359313242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0033442836,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0039308608,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00167430927305,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0031381582,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032466642,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00151915276406,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book index in its own partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the local indices to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 has the correct index, other ranks will have 0\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks do not have the correct answer\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0026706634,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0032879288,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00163013540391,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_last_short_book_index = 0;\nsize_t global_last_short_book_index = 0;\n\n// Each process finds the last short book in its partition\nfor (size_t i = rank; i < books.size(); i += size) {\n    if (books[i].pages < 100) {\n        local_last_short_book_index = i;\n    }\n}\n\n// Reduce the results to find the global last short book index\nMPI_Reduce(&local_last_short_book_index, &global_last_short_book_index, 1, MPI_UNSIGNED_LONG, MPI_MAX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have an undefined value\nif (rank == 0) {\n    return global_last_short_book_index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0031071188,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0031939742,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00192003673672,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "37_search_find_the_closest_number_to_pi",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {",
        "translation_prompt": "// Serial implementation of findClosestToPi\n// /* Return the index of the value in the vector x that is closest to the math constant PI.\n//    Use M_PI for the value of PI.\n//    Example:\n// \n//    input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n//    output: 1\n// */\n// size_t findClosestToPi(std::vector<double> const& x) {\n// double min_distance = std::numeric_limits<double>::max();\n//   size_t min_index = 0;\n//   for (size_t i = 0; i < x.size(); ++i) {\n//     double distance = std::abs(x[i] - M_PI);\n//     if (distance < min_distance) {\n//       min_distance = distance;\n//       min_index = i;\n//     }\n//   }\n//   return min_index;\n// }\n\n// MPI implementation of findClosestToPi\n#include <mpi.h>\n\n/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Use MPI to search in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Return the index of the value in the vector x that is closest to the math constant PI.\n   Use M_PI for the value of PI.\n   Example:\n\n   input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]\n   output: 1\n*/\nsize_t findClosestToPi(std::vector<double> const& x) {\ndouble min_distance = std::numeric_limits<double>::max();\n  size_t min_index = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n  }\n  return min_index;\n}",
        "translation_function_name": "findClosestToPi",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the local minimum and its index\nstruct {\n  double value;\n  int index;\n} local_min = {local_min_distance, static_cast<int>(local_min_index)}, global_min;\n\n// Reduce to find the global minimum distance and index\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global minimum index\nif (rank == 0) {\n  return static_cast<size_t>(global_min.index);\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013030718,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013750174,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0005690530168,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\n\n// Calculate the portion of the array each process will handle\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\n// Find the local minimum distance and index\nfor (size_t i = start_index; i < end_index; ++i) {\n    double distance = std::abs(x[i] - M_PI);\n    if (distance < local_min_distance) {\n        local_min_distance = distance;\n        local_min_index = i;\n    }\n}\n\n// Prepare a struct to hold the local minimum distance and corresponding index\nstruct {\n    double value;\n    int index;\n} local_min, global_min;\n\nlocal_min.value = local_min_distance;\nlocal_min.index = local_min_index;\n\n// Reduce to find the global minimum distance and index\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min\nif (rank == 0) {\n    return global_min.index;\n} else {\n    return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013015492,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013244646,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00052921705156,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the local minimum and its index\nstruct {\n  double value;\n  int index;\n} local_min = {local_min_distance, static_cast<int>(local_min_index)}, global_min;\n\n// Reduce all local minima to the global minimum on rank 0\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, other ranks will have an undefined value\nif (rank == 0) {\n  return static_cast<size_t>(global_min.index);\n} else {\n  return std::numeric_limits<size_t>::max(); // Undefined for other ranks\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001301477,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013655876,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00060649198711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the minimum distance and corresponding index together\nstruct {\n  double value;\n  int index;\n} local_min, global_min;\n\nlocal_min.value = local_min_distance;\nlocal_min.index = static_cast<int>(local_min_index);\n\n// Reduce all local minima to find the global minimum\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum index to all processes\nint global_min_index;\nMPI_Bcast(&global_min.index, 1, MPI_INT, 0, MPI_COMM_WORLD);\nglobal_min_index = global_min.index;\n\nreturn static_cast<size_t>(global_min_index);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013546072,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013150226,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01673049224648,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the minimum distance and corresponding index together\nstruct {\n  double value;\n  int index;\n} local_min, global_min;\n\nlocal_min.value = local_min_distance;\nlocal_min.index = local_min_index;\n\n// Reduce all local minimums to the global minimum on rank 0\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index, so we broadcast it to all ranks\nsize_t global_min_index = global_min.index;\nMPI_Bcast(&global_min_index, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\nreturn global_min_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013455716,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013139004,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01308083206992,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the local minimum distance and index together\nstruct {\n  double value;\n  int index;\n} local_min, global_min;\n\nlocal_min.value = local_min_distance;\nlocal_min.index = local_min_index;\n\n// Reduce all local minimums to the global minimum on rank 0\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min, so we return the index from rank 0\nif (rank == 0) {\n  return global_min.index;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013038392,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001366381,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00067654796172,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the local minimum and its index\nstruct {\n  double value;\n  int index;\n} local_min = {local_min_distance, static_cast<int>(local_min_index)}, global_min;\n\n// Reduce to find the global minimum distance and corresponding index\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_min\nif (rank == 0) {\n  return static_cast<size_t>(global_min.index);\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013015152,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013682288,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00063451003906,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare the local results for reduction\nstruct {\n  double value;\n  int index;\n} local_data = {local_min_distance, static_cast<int>(local_min_index)}, global_data;\n\n// Reduce to find the global minimum\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\n// Return the result on rank 0\nif (rank == 0) {\n  return static_cast<size_t>(global_data.index);\n} else {\n  return 0; // Other ranks do not need to return the index\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001304044,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00135293,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01567884109297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int rank;\n} local_data = {local_min_distance, rank}, global_data;\n\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nsize_t global_min_index = 0;\nif (rank == 0) {\n  global_min_index = global_data.rank * chunk_size + (global_data.rank == size - 1 ? global_data.rank : 0);\n  for (size_t i = global_data.rank * chunk_size; i < (global_data.rank == size - 1 ? x.size() : (global_data.rank + 1) * chunk_size); ++i) {\n    if (std::abs(x[i] - M_PI) < x[global_min_index] - M_PI) {\n      global_min_index = i;\n    }\n  }\n}\n\nreturn global_min_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013074542,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0110799472,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02105721273398,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int rank;\n} local_data = {local_min_distance, rank}, global_data;\n\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nsize_t global_min_index = 0;\nif (rank == 0) {\n  global_min_index = global_data.rank * chunk_size + (global_data.rank == size - 1 ? global_data.rank : 0);\n  for (size_t i = global_data.rank * chunk_size; i < (global_data.rank == size - 1 ? x.size() : (global_data.rank + 1) * chunk_size); ++i) {\n    if (std::abs(x[i] - M_PI) == global_data.value) {\n      global_min_index = i;\n      break;\n    }\n  }\n}\n\nreturn global_min_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001303136,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00225227,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01586409720195,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int rank;\n} local_data = {local_min_distance, rank}, global_data;\n\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nsize_t global_min_index = 0;\nif (rank == 0) {\n  global_min_index = global_data.rank * chunk_size + (global_data.rank == size - 1 ? global_data.rank : 0);\n  for (size_t i = global_data.rank * chunk_size; i < (global_data.rank == size - 1 ? x.size() : (global_data.rank + 1) * chunk_size); ++i) {\n    if (std::abs(x[i] - M_PI) == global_data.value) {\n      global_min_index = i;\n      break;\n    }\n  }\n}\n\nreturn global_min_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013010904,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021422052,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01979221727461,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the index and distance together\nstruct {\n  double distance;\n  size_t index;\n} local_data, global_data;\n\nlocal_data.distance = local_min_distance;\nlocal_data.index = local_min_index;\n\n// Reduce to find the global minimum distance and corresponding index\nMPI_Reduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct index\nif (rank == 0) {\n  return global_data.index;\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013002784,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0014025234,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0006971091082,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int rank;\n} local_data = {local_min_distance, rank}, global_data;\n\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nsize_t global_min_index = 0;\nif (rank == 0) {\n  global_min_index = global_data.rank * chunk_size + (global_data.rank == size - 1 ? global_data.rank : 0);\n  for (size_t i = global_data.rank * chunk_size; i < (global_data.rank == size - 1 ? x.size() : (global_data.rank + 1) * chunk_size); ++i) {\n    if (std::abs(x[i] - M_PI) == global_data.value) {\n      global_min_index = i;\n      break;\n    }\n  }\n}\n\nreturn global_min_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013023526,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021450806,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01425961059844,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int index;\n} local_data = {local_min_distance, static_cast<int>(local_min_index)}, global_data;\n\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nsize_t global_min_index = static_cast<size_t>(global_data.index);\nreturn (rank == 0) ? global_min_index : 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001304583,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013434278,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01470696862656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int rank;\n} local_min = {local_min_distance, rank}, global_min;\n\nMPI_Allreduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nsize_t global_min_index = 0;\nif (rank == 0) {\n  global_min_index = global_min.rank * chunk_size + (global_min.rank == size - 1 ? global_min.value - start_index : global_min.value);\n}\n\nreturn global_min_index;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0013055328,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0013126982,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int index;\n} local_data = {local_min_distance, static_cast<int>(local_min_index)}, global_data;\n\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return static_cast<size_t>(global_data.index);\n} else {\n  return 0; // Non-zero ranks don't need to return the index.\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013014206,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013361864,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01178124496914,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare the structure for MPI_Reduce\nstruct {\n  double value;\n  int index;\n} local_data = {local_min_distance, static_cast<int>(local_min_index)},\n  global_data;\n\n// Reduce to find the global minimum distance and corresponding index\nMPI_Reduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Broadcast the global minimum index to all processes\nint global_min_index;\nif (rank == 0) {\n  global_min_index = global_data.index;\n}\nMPI_Bcast(&global_min_index, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn static_cast<size_t>(global_min_index);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001338196,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013171768,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the local minimum distance and corresponding index\nstruct {\n  double value;\n  int index;\n} local_min = {local_min_distance, static_cast<int>(local_min_index)}, global_min;\n\n// Reduce all local minimums to the global minimum on rank 0\nMPI_Reduce(&local_min, &global_min, 1, MPI_DOUBLE_INT, MPI_MINLOC, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global minimum index\nif (rank == 0) {\n  return static_cast<size_t>(global_min.index);\n} else {\n  return 0; // Other ranks return a default value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013030656,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013594758,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00064896822734,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t local_min_index = 0;\ndouble local_min_distance = std::numeric_limits<double>::max();\n\n// Each process computes its local minimum\nfor (size_t i = rank; i < x.size(); i += size) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\n// Prepare a struct to hold the index and distance together\nstruct {\n  double distance;\n  size_t index;\n} local_data = {local_min_distance, local_min_index}, global_data;\n\n// Reduce to find the global minimum distance and corresponding index\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\n// Return the result on rank 0\nif (rank == 0) {\n  return global_data.index;\n} else {\n  return 0; // Other ranks do not have a meaningful index to return\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013086444,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001365854,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01937814839453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\ndouble local_min_distance = std::numeric_limits<double>::max();\nsize_t local_min_index = 0;\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : start_index + chunk_size;\n\nfor (size_t i = start_index; i < end_index; ++i) {\n  double distance = std::abs(x[i] - M_PI);\n  if (distance < local_min_distance) {\n    local_min_distance = distance;\n    local_min_index = i;\n  }\n}\n\nstruct {\n  double value;\n  int index;\n} local_data = {local_min_distance, static_cast<int>(local_min_index)}, global_data;\n\nMPI_Allreduce(&local_data, &global_data, 1, MPI_DOUBLE_INT, MPI_MINLOC, MPI_COMM_WORLD);\n\nif (rank == 0) {\n  return static_cast<size_t>(global_data.index);\n}\n\n// Non-zero ranks do not need to return a meaningful value, as the result is only used on rank 0.\nreturn 0;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0013021062,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013131552,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01396874841719,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "08_fft_split_fft",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {",
        "translation_prompt": "// Serial implementation of fft\n// /* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n//    Example:\n// \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n// */\n// void fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {\n// int n = x.size();\n//     if (n == 0) return;\n//     if (n == 1) {\n//         r[0] = x[0].real();\n//         i[0] = x[0].imag();\n//         return;\n//     }\n//     std::vector<std::complex<double>> x_even(n / 2);\n//     std::vector<std::complex<double>> x_odd(n / 2);\n//     for (int i = 0; i < n / 2; i++) {\n//         x_even[i] = x[2 * i];\n//         x_odd[i] = x[2 * i + 1];\n//     }\n//     std::vector<double> r_even(n / 2);\n//     std::vector<double> i_even(n / 2);\n//     std::vector<double> r_odd(n / 2);\n//     std::vector<double> i_odd(n / 2);\n//     fft(x_even, r_even, i_even);\n//     fft(x_odd, r_odd, i_odd);\n//     for (int k = 0; k < n / 2; k++) {\n//         std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n//         r[k] = r_even[k] + z.real();\n//         i[k] = i_even[k] + z.imag();\n//         r[k + n / 2] = r_even[k] - z.real();\n//         i[k + n / 2] = i_even[k] - z.imag();\n//     }\n// }\n\n// MPI implementation of fft\n#include <mpi.h>\n\n/* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the fourier transform of x. Store real part of results in r and imaginary in i.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<double> &r, std::vector<double> &i) {\nint n = x.size();\n    if (n == 0) return;\n    if (n == 1) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n        return;\n    }\n    std::vector<std::complex<double>> x_even(n / 2);\n    std::vector<std::complex<double>> x_odd(n / 2);\n    for (int i = 0; i < n / 2; i++) {\n        x_even[i] = x[2 * i];\n        x_odd[i] = x[2 * i + 1];\n    }\n    std::vector<double> r_even(n / 2);\n    std::vector<double> i_even(n / 2);\n    std::vector<double> r_odd(n / 2);\n    std::vector<double> i_odd(n / 2);\n    fft(x_even, r_even, i_even);\n    fft(x_odd, r_odd, i_odd);\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}",
        "translation_function_name": "fft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = 0; j < n / 2; j++) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n} else {\n    for (int j = 0; j < n / 2; j++) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n}\n\n// Gather results from all processes\nMPI_Allgather(rank < size / 2 ? r_even.data() : r_odd.data(), n / 2, MPI_DOUBLE,\n              rank < size / 2 ? r.data() : r.data() + n / 2, n / 2, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(rank < size / 2 ? i_even.data() : i_odd.data(), n / 2, MPI_DOUBLE,\n              rank < size / 2 ? i.data() : i.data() + n / 2, n / 2, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0814850346,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.020799001,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nfor (int j = rank; j < n / 2; j += size) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine results from even and odd parts\nfor (int k = rank; k < n / 2; k += size) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n\n// Gather the final results on rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : r.data(), n / size, MPI_DOUBLE, r.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : i.data(), n / size, MPI_DOUBLE, i.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0780477256,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1943734694,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.71597482958711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = rank; j < n / 2; j += size / 2) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n    MPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n} else {\n    for (int j = rank - size / 2; j < n / 2; j += size / 2) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n    MPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = 0; j < n / 2; j++) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n} else {\n    for (int j = 0; j < n / 2; j++) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n}\n\n// Gather the results from all processes\nMPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will combine the results\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        double r_even_k = r[k];\n        double i_even_k = i[k];\n        r[k] = r_even_k + z.real();\n        i[k] = i_even_k + z.imag();\n        r[k + n / 2] = r_even_k - z.real();\n        i[k + n / 2] = i_even_k - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0865714974,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.017767135,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = 0; j < n / 2; j++) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n} else {\n    for (int j = 0; j < n / 2; j++) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n}\n\n// Gather the results from all processes\nMPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will combine the results\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0762654682,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0194883534,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nfor (int j = rank; j < n / 2; j += size) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine the results\nfor (int k = rank; k < n / 2; k += size) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n\n// Gather the final results on rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : r.data(), n / size, MPI_DOUBLE, r.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : i.data(), n / size, MPI_DOUBLE, i.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0707634614,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2069106326,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.6420838808082,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = 0; j < n / 2; j++) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n} else {\n    for (int j = 0; j < n / 2; j++) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n}\n\n// Gather the results back to rank 0\nMPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Combine the results on rank 0\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r[k + n / 2], i[k + n / 2]);\n        double real_even = r[k];\n        double imag_even = i[k];\n        r[k] = real_even + z.real();\n        i[k] = imag_even + z.imag();\n        r[k + n / 2] = real_even - z.real();\n        i[k + n / 2] = imag_even - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0766818736,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0213732264,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = rank; j < n / 2; j += size / 2) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n    MPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n} else {\n    for (int j = rank - size / 2; j < n / 2; j += size / 2) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n    MPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\n// Only rank 0 will combine the results\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nfor (int j = rank; j < n / 2; j += size) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine the results\nfor (int k = rank; k < n / 2; k += size) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n\n// Gather the final results on rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : r.data(), n / size, MPI_DOUBLE, r.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : i.data(), n / size, MPI_DOUBLE, i.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.071835229,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1915714654,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.54832863582773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nfor (int j = rank; j < n / 2; j += size) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n// Gather the results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine the results\nfor (int k = rank; k < n / 2; k += size) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n\n// Gather the final results on rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : r.data(), n / size, MPI_DOUBLE, r.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : i.data(), n / size, MPI_DOUBLE, i.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0782486796,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1952328172,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.55128128438125,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = 0; j < n / 2; j++) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n} else {\n    for (int j = 0; j < n / 2; j++) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n}\n\n// Gather the results from all processes\nMPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will combine the results\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        double r_even_k = r[k];\n        double i_even_k = i[k];\n        r[k] = r_even_k + z.real();\n        i[k] = i_even_k + z.imag();\n        r[k + n / 2] = r_even_k - z.real();\n        i[k + n / 2] = i_even_k - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0799806474,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0198250854,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = rank; j < n / 2; j += size / 2) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n    MPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n} else {\n    for (int j = rank - size / 2; j < n / 2; j += size / 2) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n    MPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = 0; j < n / 2; j++) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n} else {\n    for (int j = 0; j < n / 2; j++) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n}\n\n// Gather the results from all processes\nMPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 performs the final combination step\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        double r_even_k = r[k];\n        double i_even_k = i[k];\n        r[k] = r_even_k + z.real();\n        i[k] = i_even_k + z.imag();\n        r[k + n / 2] = r_even_k - z.real();\n        i[k + n / 2] = i_even_k - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0785588314,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.019981609,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nfor (int j = rank; j < n / 2; j += size) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine results from even and odd parts\nfor (int k = rank; k < n / 2; k += size) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n\n// Gather the final results on rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : r.data(), n / size, MPI_DOUBLE, r.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : i.data(), n / size, MPI_DOUBLE, i.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.070627013,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1931778328,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.71854103757656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = rank; j < n / 2; j += size / 2) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n    MPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n} else {\n    for (int j = rank - size / 2; j < n / 2; j += size / 2) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n    MPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nfor (int j = rank; j < n / 2; j += size) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine results from the even and odd parts\nfor (int k = rank; k < n / 2; k += size) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n\n// Gather the final results on rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : r.data(), n / size, MPI_DOUBLE, r.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : i.data(), n / size, MPI_DOUBLE, i.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.071845228,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2024695846,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.64787330878945,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nif (rank < size / 2) {\n    for (int j = rank; j < n / 2; j += size / 2) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r_even, i_even);\n    MPI_Gather(r_even.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_even.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n} else {\n    for (int j = rank - size / 2; j < n / 2; j += size / 2) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r_odd, i_odd);\n    MPI_Gather(r_odd.data(), n / 2, MPI_DOUBLE, r.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(i_odd.data(), n / 2, MPI_DOUBLE, i.data() + n / 2, n / 2, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the input into even and odd indices\nfor (int j = 0; j < n / 2; j++) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls are replaced with MPI communication\nif (rank < size / 2) {\n    // First half of processes handle the even indices\n    fft(x_even, r_even, i_even);\n} else {\n    // Second half of processes handle the odd indices\n    fft(x_odd, r_odd, i_odd);\n}\n\n// Gather the results from all processes\nMPI_Allgather(rank < size / 2 ? r_even.data() : r_odd.data(), n / 2, MPI_DOUBLE, r.data(), n / 2, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(rank < size / 2 ? i_even.data() : i_odd.data(), n / 2, MPI_DOUBLE, i.data(), n / 2, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Only rank 0 will compute the final step of the FFT\nif (rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n\n// Broadcast the final results from rank 0 to all other ranks\nMPI_Bcast(r.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Bcast(i.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0771877584,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.02045777,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\n\nif (rank < size / 2) {\n    for (int j = 0; j < n / 2; j++) {\n        x_even[j] = x[2 * j];\n    }\n    fft(x_even, r, i);\n} else {\n    for (int j = 0; j < n / 2; j++) {\n        x_odd[j] = x[2 * j + 1];\n    }\n    fft(x_odd, r, i);\n}\n\nMPI_Barrier(MPI_COMM_WORLD);\n\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\nif (rank < size / 2) {\n    MPI_Send(r.data(), n / 2, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    MPI_Send(i.data(), n / 2, MPI_DOUBLE, 0, 1, MPI_COMM_WORLD);\n} else {\n    MPI_Send(r.data(), n / 2, MPI_DOUBLE, 0, 2, MPI_COMM_WORLD);\n    MPI_Send(i.data(), n / 2, MPI_DOUBLE, 0, 3, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    MPI_Recv(r_even.data(), n / 2, MPI_DOUBLE, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    MPI_Recv(i_even.data(), n / 2, MPI_DOUBLE, MPI_ANY_SOURCE, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    MPI_Recv(r_odd.data(), n / 2, MPI_DOUBLE, MPI_ANY_SOURCE, 2, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    MPI_Recv(i_odd.data(), n / 2, MPI_DOUBLE, MPI_ANY_SOURCE, 3, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n\n    for (int k = 0; k < n / 2; k++) {\n        std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n        r[k] = r_even[k] + z.real();\n        i[k] = i_even[k] + z.imag();\n        r[k + n / 2] = r_even[k] - z.real();\n        i[k + n / 2] = i_even[k] - z.imag();\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nif (n == 0) return;\nif (n == 1) {\n    if (rank == 0) {\n        r[0] = x[0].real();\n        i[0] = x[0].imag();\n    }\n    return;\n}\n\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nstd::vector<double> r_even(n / 2);\nstd::vector<double> i_even(n / 2);\nstd::vector<double> r_odd(n / 2);\nstd::vector<double> i_odd(n / 2);\n\n// Split the work between even and odd indices\nfor (int j = rank; j < n / 2; j += size) {\n    x_even[j] = x[2 * j];\n    x_odd[j] = x[2 * j + 1];\n}\n\n// Recursive calls\nfft(x_even, r_even, i_even);\nfft(x_odd, r_odd, i_odd);\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_even.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, r_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, i_odd.data(), n / 2 / size, MPI_DOUBLE, MPI_COMM_WORLD);\n\n// Combine results from even and odd parts\nfor (int k = rank; k < n / 2; k += size) {\n    std::complex<double> z = std::polar(1.0, -2 * M_PI * k / n) * std::complex<double>(r_odd[k], i_odd[k]);\n    r[k] = r_even[k] + z.real();\n    i[k] = i_even[k] + z.imag();\n    r[k + n / 2] = r_even[k] - z.real();\n    i[k + n / 2] = i_even[k] - z.imag();\n}\n\n// Gather the partial results to rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : r.data(), n / size, MPI_DOUBLE, r.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : i.data(), n / size, MPI_DOUBLE, i.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0781389426,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2006091902,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.74645089374609,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "07_fft_fft_conjugate",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fftConjugate(std::vector<std::complex<double>> &x) {",
        "translation_prompt": "// Serial implementation of fftConjugate\n// /* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n//    Example:\n// \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n// */\n// void fftConjugate(std::vector<std::complex<double>> &x) {\n// int n = x.size();\n//     int m = 0;\n//     for (int i = 0; i < n; i++) {\n//         int j = i;\n//         for (int k = 0; k < m; k++) {\n//             j = j ^ (1 << k);\n//         }\n//         if (i < j) {\n//             std::complex<double> temp = x[i];\n//             x[i] = x[j];\n//             x[j] = temp;\n//         }\n//         m = std::max(m, __builtin_ctz(j));\n//     }\n//     for (int i = 1; i < n; i *= 2) {\n//         std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n//         for (int j = 0; j < n; j += 2 * i) {\n//             for (int k = 0; k < i; k++) {\n//                 std::complex<double> u = x[j + k];\n//                 std::complex<double> t = w * x[j + k + i];\n//                 x[j + k] = u + t;\n//                 x[j + k + i] = u - t;\n//             }\n//             w = w * w;\n//         }\n//     }\n// }\n\n// MPI implementation of fftConjugate\n#include <mpi.h>\n\n/* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fftConjugate(std::vector<std::complex<double>> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the fourier transform of x in-place. Return the imaginary conjugate of each value.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.41421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fftConjugate(std::vector<std::complex<double>> &x) {\nint n = x.size();\n    int m = 0;\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        for (int k = 0; k < m; k++) {\n            j = j ^ (1 << k);\n        }\n        if (i < j) {\n            std::complex<double> temp = x[i];\n            x[i] = x[j];\n            x[j] = temp;\n        }\n        m = std::max(m, __builtin_ctz(j));\n    }\n    for (int i = 1; i < n; i *= 2) {\n        std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n        for (int j = 0; j < n; j += 2 * i) {\n            for (int k = 0; k < i; k++) {\n                std::complex<double> u = x[j + k];\n                std::complex<double> t = w * x[j + k + i];\n                x[j + k] = u + t;\n                x[j + k + i] = u - t;\n            }\n            w = w * w;\n        }\n    }\n}",
        "translation_function_name": "fftConjugate",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results from all processes to rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0806786482,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0570355758,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\n\n// Bit-reversal permutation\nfor (int i = 0; i < n; ++i) {\n    int j = i;\n    for (int k = 0; k < m; ++k) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::swap(x[i], x[j]);\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\n// Danielson-Lanczos algorithm\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    std::complex<double> w_m = std::pow(w, rank);\n    for (int j = rank * i; j < n; j += size * i) {\n        std::complex<double> w_j = std::pow(w_m, j / i);\n        for (int k = 0; k < i; ++k) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w_j * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w_j *= w_m;\n    }\n    // Synchronize all ranks\n    MPI_Allreduce(MPI_IN_PLACE, x.data(), n, MPI_CXX_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD);\n}\n\n// Gather results on rank 0\nstd::vector<std::complex<double>> result(n);\nMPI_Gather(x.data(), n / size, MPI_CXX_DOUBLE_COMPLEX, result.data(), n / size, MPI_CXX_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 should have the complete result\nif (rank == 0) {\n    for (int i = 0; i < size; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i != 0) {\n                x[j] += all_x[i * n + j];\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0807366676,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0554090308,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n / size * sizeof(std::complex<double>), MPI_BYTE,\n           all_x.data(), n / size * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.081960259,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.055388616,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\n\n// Bit-reversal permutation\nfor (int i = 0; i < n; ++i) {\n    int j = i;\n    for (int k = 0; k < m; ++k) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::swap(x[i], x[j]);\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\n// Danielson-Lanczos section\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    std::complex<double> w_i = std::pow(w, rank);\n    for (int j = rank * i; j < n; j += size * i) {\n        for (int k = 0; k < i; ++k) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w_i * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w_i *= std::pow(w, size);\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> result;\nif (rank == 0) {\n    result.resize(n);\n}\nMPI_Gather(x.data(), n / size, MPI_DOUBLE_COMPLEX, result.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Copy the result back into x if this is rank 0\nif (rank == 0) {\n    x = result;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results from all processes to rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int i = 1; i < size; i++) {\n        for (int j = 0; j < n / size; j++) {\n            int index = i * (n / size) + j;\n            x[index] = all_x[index];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0828861452,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.057484356,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    // Reassemble the final result from the gathered parts\n    for (int i = 1; i < size; i++) {\n        for (int j = 0; j < n / size; j++) {\n            x[i * (n / size) + j] = all_x[i * (n / size) + j];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0800306012,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0552182672,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete transformed array\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0806846848,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.057181561,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Combine results from all ranks\nif (rank == 0) {\n    for (int i = 1; i < size; i++) {\n        for (int j = 0; j < n / size; j++) {\n            int index = i * (n / size) + j;\n            x[index] = all_x[index];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0867892614,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0551391846,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.079696174,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0571566218,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0786091236,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0571790042,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0772702932,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0571713454,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\n\n// Perform the bit-reversal permutation in parallel\nfor (int i = rank; i < n; i += size) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\n// Synchronize all processes before starting the FFT computation\nMPI_Barrier(MPI_COMM_WORLD);\n\n// Perform the FFT computation in parallel\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (2 * i); j < n; j += size * (2 * i)) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n    // Synchronize all processes after each stage of the FFT\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n\n// Gather results from all processes to rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data(), n / size, MPI_DOUBLE_COMPLEX, all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// If rank 0, copy the gathered results back into x\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0872844578,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0585044954,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.02429788053242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete data\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0801911676,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0571031592,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete data\nif (rank == 0) {\n    // Combine the results from all processes\n    for (int i = 1; i < size; i++) {\n        for (int j = 0; j < n / size; j++) {\n            int index = i * (n / size) + j;\n            x[index] = all_x[index];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0812915948,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0551162552,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results from all processes to rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(size * n);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int i = 1; i < size; i++) {\n        for (int j = 0; j < n; j++) {\n            x[j] += all_x[i * n + j];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0805898202,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0553828312,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results from all processes to rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int i = 1; i < size; i++) {\n        for (int j = 0; j < n / size; j++) {\n            int idx = i * (n / size) + j;\n            x[idx] = all_x[idx];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0803173572,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0551638872,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = 0; j < n; j += 2 * i) {\n        if ((j / (2 * i)) % size == rank) { // Only compute the part of the data that this rank is responsible for\n            for (int k = 0; k < i; k++) {\n                std::complex<double> u = x[j + k];\n                std::complex<double> t = w * x[j + k + i];\n                x[j + k] = u + t;\n                x[j + k + i] = u - t;\n            }\n        }\n        w = w * w;\n    }\n    // Synchronize all ranks\n    MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, &x[0], n / size, MPI_COMPLEX, MPI_COMM_WORLD);\n}\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    // Do something with the result on rank 0 if needed\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0816525706,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0558474318,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.65529759286719,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\nMPI_Barrier(MPI_COMM_WORLD);\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n    MPI_Allgather(MPI_IN_PLACE, n / size, MPI_DOUBLE_COMPLEX, &x[0], n / size, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n}\nif (rank == 0) {\n    // Only rank 0 will have the final result\n    for (int i = 0; i < n; ++i) {\n        x[i] = std::conj(x[i]);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0787394948,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0573883564,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint m = 0;\nfor (int i = 0; i < n; i++) {\n    int j = i;\n    for (int k = 0; k < m; k++) {\n        j = j ^ (1 << k);\n    }\n    if (i < j) {\n        std::complex<double> temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n    m = std::max(m, __builtin_ctz(j));\n}\n\nfor (int i = 1; i < n; i *= 2) {\n    std::complex<double> w = std::polar(1.0, -2 * M_PI / i);\n    for (int j = rank * (n / size); j < (rank + 1) * (n / size); j += 2 * i) {\n        for (int k = 0; k < i; k++) {\n            std::complex<double> u = x[j + k];\n            std::complex<double> t = w * x[j + k + i];\n            x[j + k] = u + t;\n            x[j + k + i] = u - t;\n        }\n        w = w * w;\n    }\n}\n\n// Gather results from all processes to rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Combine results on rank 0\nif (rank == 0) {\n    for (int i = 1; i < size; i++) {\n        for (int j = 0; j < n / size; j++) {\n            int idx = i * (n / size) + j;\n            x[idx] = all_x[idx];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0793597564,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0550988726,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "05_fft_inverse_fft",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* forward declare fft. computes fourier transform in-place */\nvoid fft(std::vector<std::complex<double>> &x);\n\n/* Compute the inverse fourier transform of x in-place.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n   \n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n*/\nvoid ifft(std::vector<std::complex<double>> &x) {",
        "translation_prompt": "// Serial implementation of ifft\n// /* forward declare fft. computes fourier transform in-place */\n// void fft(std::vector<std::complex<double>> &x);\n// \n// /* Compute the inverse fourier transform of x in-place.\n//    Example:\n//    \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n// */\n// void ifft(std::vector<std::complex<double>> &x) {\n// \n// // Take conjugate of the complex numbers\n// for (auto &elem : x) {\n//     elem = std::conj(elem);\n// }\n// \n// // Apply fft\n// fft(x);\n// \n// // Take conjugate again\n// for (auto &elem : x) {\n//     elem = std::conj(elem);\n// }\n// \n// // Scale the numbers\n// for (auto &elem : x) {\n//     elem /= static_cast<double>(x.size());\n// }\n// }\n\n// MPI implementation of ifft\n#include <mpi.h>\n\n/* forward declare fft. computes fourier transform in-place */\nvoid fft(std::vector<std::complex<double>> &x);\n\n/* Compute the inverse fourier transform of x in-place.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. The final result is stored on rank 0.\n   Example:\n   \n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n*/\nvoid ifft(std::vector<std::complex<double>> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* forward declare fft. computes fourier transform in-place */\nvoid fft(std::vector<std::complex<double>> &x);\n\n/* Compute the inverse fourier transform of x in-place.\n   Example:\n   \n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]\n*/\nvoid ifft(std::vector<std::complex<double>> &x) {\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nfor (auto &elem : x) {\n    elem /= static_cast<double>(x.size());\n}\n}",
        "translation_function_name": "ifft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\n\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Sum up results at rank 0\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[i + j * n];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.035526414,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0362862884,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07783624579961,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        x[i] = all_x[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0349175254,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0354264858,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07559807627969,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the data among processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Each process scales its portion of the data\nfor (auto &elem : local_x) {\n    elem /= static_cast<double>(n);\n}\n\n// Gather the results back to rank 0\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0357855634,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0365495786,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.06112930808867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Sum up results at rank 0\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[i + j * n];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.033867159,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.034473223,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Sum up results at rank 0\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[j * n + i];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0361932206,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0368112648,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07948082911797,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\nMPI_Gather(x.data(), n / size, MPI_DOUBLE_COMPLEX, all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// If rank 0, copy gathered results back into x\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.033982522,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0371920712,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.04959859576211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Sum up results at rank 0\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[i + j * n];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0351439828,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.036430771,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07897121583242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data(), n / size, MPI_DOUBLE_COMPLEX, all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// If rank 0, copy gathered results back into x\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0360773566,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0369710376,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.05015920268203,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers, but only on rank 0\nif (rank == 0) {\n    for (auto &elem : x) {\n        elem /= static_cast<double>(x.size());\n    }\n}\n\n// Broadcast the result from rank 0 to all other ranks\nMPI_Bcast(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0366023416,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0364177966,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.05840862891914,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Sum up results at rank 0\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[i + j * n];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0381248916,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.038749809,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07854591728828,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data(), n / size, MPI_DOUBLE_COMPLEX,\n           all_x.data(), n / size, MPI_DOUBLE_COMPLEX,\n           0, MPI_COMM_WORLD);\n\n// If rank 0, copy gathered results back into x\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0360101036,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0377941616,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.05074365319805,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n);\n}\n\nMPI_Gather(x.data(), n / size, MPI_DOUBLE_COMPLEX, all_x.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// If rank 0, copy gathered results back to x\nif (rank == 0) {\n    x = all_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0340943908,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0353929392,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.04978984970078,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Sum up results at rank 0\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[i + j * n];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0369773052,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0380584148,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07898257068477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// If rank 0, combine results\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[j * n + i];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0397234728,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0451958984,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07833625510391,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nint local_n = n / size;\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the data among processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Each process scales its portion of the data\nfor (auto &elem : local_x) {\n    elem /= static_cast<double>(n);\n}\n\n// Gather the results back to rank 0\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// rank 0 will handle the remaining elements\nif (rank == 0 && n % size != 0) {\n    for (int i = local_n * size; i < n; ++i) {\n        x[i] /= static_cast<double>(n);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0380399942,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0394951308,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.08469692313906,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Sum up results at rank 0\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[j * n + i];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0359403786,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0367530494,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07976922097461,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the data among processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            0, MPI_COMM_WORLD);\n\n// Each process scales its portion of the data\nfor (auto &elem : local_x) {\n    elem /= static_cast<double>(n);\n}\n\n// Gather the results back to rank 0\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0374916548,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0383383414,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0580759340418,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the data among processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            0, MPI_COMM_WORLD);\n\n// Each process scales its portion of the data\nfor (auto &elem : local_x) {\n    elem /= static_cast<double>(n);\n}\n\n// Gather the results back to rank 0\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0357367296,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.036494347,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.06075913038203,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the data to all processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            0, MPI_COMM_WORLD);\n\n// Each process scales its portion of the data\nfor (auto &elem : local_x) {\n    elem /= static_cast<double>(n);\n}\n\n// Gather the results back to the root process\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0374748612,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0387220052,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.05634745120781,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Take conjugate of the complex numbers\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Apply fft\nfft(x);\n\n// Take conjugate again\nfor (auto &elem : x) {\n    elem = std::conj(elem);\n}\n\n// Scale the numbers\nint n = x.size();\nfor (int i = rank; i < n; i += size) {\n    x[i] /= static_cast<double>(n);\n}\n\n// Gather results at rank 0\nstd::vector<std::complex<double>> all_x;\nif (rank == 0) {\n    all_x.resize(n * size);\n}\n\nMPI_Gather(x.data(), n, MPI_DOUBLE_COMPLEX, all_x.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the complete result\nif (rank == 0) {\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> sum = {0.0, 0.0};\n        for (int j = 0; j < size; ++j) {\n            sum += all_x[i + j * n];\n        }\n        x[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.036160593,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0369916244,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.07953985113477,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "06_fft_dft",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the discrete fourier transform of x. Store the result in output.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {",
        "translation_prompt": "// Serial implementation of dft\n// /* Compute the discrete fourier transform of x. Store the result in output.\n//    Example:\n// \n//    input: [1, 4, 9, 16]\n//    output: [30+0i, -8-12i, -10-0i, -8+12i]\n// */\n// void dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {\n// // TODO: implement this function\n//     output.resize(x.size());\n//     for (int i = 0; i < x.size(); i++) {\n//         output[i] = 0;\n//         for (int j = 0; j < x.size(); j++) {\n//             output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n//         }\n//     }\n// }\n\n// MPI implementation of dft\n#include <mpi.h>\n\n/* Compute the discrete fourier transform of x. Store the result in output.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the discrete fourier transform of x. Store the result in output.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(std::vector<double> const& x, std::vector<std::complex<double>> &output) {\n// TODO: implement this function\n    output.resize(x.size());\n    for (int i = 0; i < x.size(); i++) {\n        output[i] = 0;\n        for (int j = 0; j < x.size(); j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / x.size()));\n        }\n    }\n}",
        "translation_function_name": "dft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector x to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the DFT for the assigned portion\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial DFT results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// If n is not divisible by size, handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Broadcast the final output to all processes\nMPI_Bcast(output.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0845482388,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1159122918,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00678610278945,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Calculate the portion of the DFT that each process is responsible for\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Perform the partial DFT computation\nfor (int i = start; i < end; i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX,\n              &output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.084421336,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1184710406,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Distribute work among processes\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX, &output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.084463744,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.118137337,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the local DFT\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial DFT results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Handle the remainder if n is not divisible by size\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Broadcast the final results to all processes\nMPI_Bcast(output.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.084526528,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1158116802,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00632637455234,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Distribute the work among processes\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Compute a portion of the DFT\nfor (int i = start; i < end; i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX, &output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.084410141,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1184503954,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Distribute work among processes\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Compute the local DFT\nfor (int i = start; i < end; i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX, &local_output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n\n// Copy local output to the final output\nfor (int i = 0; i < n; i++) {\n    output[i] = local_output[i];\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0842864962,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1185613902,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00962033940664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the DFT for the assigned portion\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX, output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Handle the remainder if n is not divisible by size\nif (n % size != 0 && rank == 0) {\n    for (int i = n - n % size; i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Broadcast the final result to all processes\nMPI_Bcast(output.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0845409312,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1162718962,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.01381772237344,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\nstd::vector<std::complex<double>> local_output(n);\nstd::fill(local_output.begin(), local_output.end(), std::complex<double>(0, 0));\n\n// Calculate the portion of the DFT that this process is responsible for\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX, &output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0844237524,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1185182728,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the local DFT\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial DFT results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only the root process should have the complete result\nif (rank == 0) {\n    // Combine the partial results\n    for (int i = 1; i < size; i++) {\n        for (int j = i * (n / size); j < (i + 1) * (n / size); j++) {\n            output[j] = local_output[j];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0843699254,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1156536294,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00179463563398,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\nstd::vector<std::complex<double>> local_output(n, 0);\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\nMPI_Allreduce(MPI_IN_PLACE, local_output.data(), n, MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD);\n\noutput = local_output;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0845961366,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.118520083,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the DFT for the assigned portion\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Handle the remaining elements if n is not divisible by size\nif (n % size != 0 && rank == 0) {\n    for (int i = n - n % size; i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Broadcast the remaining elements to all processes\nMPI_Bcast(output.data() + n - n % size, n % size * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0844645752,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1174847796,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00138304112773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Distribute the work among processes\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\n// Compute the local DFT\nfor (int i = start; i < end; i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX, &output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.084418128,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1187458354,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the DFT for the assigned portion\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX, output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Handle the remainder if n is not divisible by size\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Sum up the partial results from all processes\nMPI_Allreduce(MPI_IN_PLACE, output.data(), n, MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0845147282,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1157873986,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.01485230545937,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the local DFT\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial DFT results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// If the number of processes does not evenly divide the data size, handle the remainder\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Broadcast the complete DFT result to all processes\nMPI_Bcast(output.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0845933598,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1158613856,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00760928709258,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\n    int rank, size;\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    int n = x.size();\n    output.resize(n);\n    std::vector<std::complex<double>> local_output(n);\n\n    // Each process computes its portion of the DFT\n    for (int i = rank; i < n; i += size) {\n        local_output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n\n    // Gather all partial DFT results to the root process\n    MPI_Allreduce(MPI_IN_PLACE, local_output.data(), n, MPI_CXX_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD);\n\n    // Copy the local output to the final output\n    if (rank == 0) {\n        output = local_output;\n    }\n\n    // Ensure all processes have the final output\n    MPI_Bcast(output.data(), n, MPI_CXX_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.08433415,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1188766858,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01308117211563,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n, 0);\n\n// Calculate the portion of the DFT that each process is responsible for\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX, &output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0843610386,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1185262144,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the DFT for the assigned portion\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Handle the remainder if n is not divisible by size\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Broadcast the final output to all processes\nMPI_Bcast(output.data(), n, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0845352022,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1158547352,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00684722028477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\nstd::vector<std::complex<double>> local_output(n);\n\n// Scatter the input vector to all processes\nstd::vector<double> local_x(n);\nMPI_Scatter(x.data(), n / size, MPI_DOUBLE, local_x.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Compute the DFT for the assigned portion\nfor (int i = rank * (n / size); i < (rank + 1) * (n / size); i++) {\n    local_output[i] = 0;\n    for (int j = 0; j < n; j++) {\n        local_output[i] += local_x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial DFT results from all processes\nMPI_Gather(local_output.data() + rank * (n / size), n / size, MPI_DOUBLE_COMPLEX,\n           output.data(), n / size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Handle the remainder if n is not divisible by size\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; i++) {\n        output[i] = 0;\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n\n// Broadcast the remaining parts to all processes\nif (remainder > 0) {\n    MPI_Bcast(output.data() + n - remainder, remainder, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0845662886,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1177800772,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00172646591367,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\nstd::vector<std::complex<double>> local_output(n);\nstd::fill(local_output.begin(), local_output.end(), std::complex<double>(0, 0));\n\n// Calculate the portion of the DFT that this process is responsible for\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nfor (int i = start; i < end; i++) {\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Allgather(MPI_IN_PLACE, local_n, MPI_DOUBLE_COMPLEX, &output[0], local_n, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * local_n; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.084296968,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1183986666,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\nstd::vector<std::complex<double>> local_output(n);\nstd::fill(local_output.begin(), local_output.end(), 0);\n\n// Calculate the portion of the DFT that each process is responsible for\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\nfor (int i = start; i < end; i++) {\n    for (int j = 0; j < n; j++) {\n        local_output[i] += x[j] * std::exp(std::complex<double>(0, -2 * M_PI * i * j / n));\n    }\n}\n\n// Gather the partial results from all processes\nMPI_Allgather(MPI_IN_PLACE, chunk_size, MPI_DOUBLE_COMPLEX,\n              &local_output[0], chunk_size, MPI_DOUBLE_COMPLEX, MPI_COMM_WORLD);\n\n// Copy the results to the output vector\noutput = local_output;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.084591897,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11805506,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01184253586602,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "09_fft_fft_out_of_place",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute the fourier transform of x. Store the result in output.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {",
        "translation_prompt": "// Serial implementation of fft\n// /* Compute the fourier transform of x. Store the result in output.\n//    Example:\n// \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n// */\n// void fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {\n// int n = x.size();\n//     output.resize(n);\n// \n//     // base case\n//     if (n == 1) {\n//         output[0] = x[0];\n//         return;\n//     }\n// \n//     // radix 2 Cooley-Tukey FFT\n//     // decompose x into even and odd parts\n//     std::vector<std::complex<double>> x_even(n/2);\n//     std::vector<std::complex<double>> x_odd(n/2);\n//     for (int k = 0; k < n/2; k++) {\n//         x_even[k] = x[2*k];\n//         x_odd[k] = x[2*k + 1];\n//     }\n// \n//     // recursively compute FFTs of even and odd parts\n//     std::vector<std::complex<double>> y_even(n/2);\n//     std::vector<std::complex<double>> y_odd(n/2);\n//     fft(x_even, y_even);\n//     fft(x_odd, y_odd);\n// \n//     // combine results\n//     for (int k = 0; k < n/2; k++) {\n//         double kth = -2 * M_PI * k / n;\n//         output[k] = y_even[k] + std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n//         output[k + n/2] = y_even[k] - std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n//     }\n// }\n\n// MPI implementation of fft\n#include <mpi.h>\n\n/* Compute the fourier transform of x. Store the result in output.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute the fourier transform of x. Store the result in output.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(std::vector<std::complex<double>> const& x, std::vector<std::complex<double>> &output) {\nint n = x.size();\n    output.resize(n);\n\n    // base case\n    if (n == 1) {\n        output[0] = x[0];\n        return;\n    }\n\n    // radix 2 Cooley-Tukey FFT\n    // decompose x into even and odd parts\n    std::vector<std::complex<double>> x_even(n/2);\n    std::vector<std::complex<double>> x_odd(n/2);\n    for (int k = 0; k < n/2; k++) {\n        x_even[k] = x[2*k];\n        x_odd[k] = x[2*k + 1];\n    }\n\n    // recursively compute FFTs of even and odd parts\n    std::vector<std::complex<double>> y_even(n/2);\n    std::vector<std::complex<double>> y_odd(n/2);\n    fft(x_even, y_even);\n    fft(x_odd, y_odd);\n\n    // combine results\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        output[k] = y_even[k] + std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n        output[k + n/2] = y_even[k] - std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    }\n}",
        "translation_function_name": "fft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// allocate space for the results of the even and odd FFTs\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// compute FFTs of even and odd parts in parallel\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    if (rank == 0) {\n        output[k] = y_even[k] + twiddle_factor;\n    } else if (rank == 1) {\n        output[k] = y_even[k] - twiddle_factor;\n    }\n}\n\n// gather results from both processes\nif (rank == 0) {\n    MPI_Recv(output.data() + n/2, n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Send(output.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        x_even[k] = x[2*k];\n        x_odd[k] = x[2*k + 1];\n    }\n    MPI_Send(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    fft(x_even, y_even);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Recv(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n\n// combine results\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// allocate space for the results of the even and odd FFTs\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// compute FFTs of even and odd parts in parallel\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// combine results\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// allocate space for the results of the FFTs\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// distribute the work among MPI processes\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// combine results\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// allocate space for the results of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// distribute the work among MPI processes\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// combine results\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\nif (rank == 0) {\n    MPI_Send(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    fft(x_even, y_even);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Recv(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    if (rank == 0) {\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n\n// Gather results at root\nMPI_Gather(rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\nif (n == 1) {\n    if (rank == 0) {\n        output[0] = x[0];\n    }\n    return;\n}\n\n// Allocate space for even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// Scatter the even and odd parts to all processes\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        x_even[k] = x[2*k];\n        x_odd[k] = x[2*k + 1];\n    }\n}\nMPI_Scatter(x_even.data(), n/2/size, MPI_DOUBLE_COMPLEX, &x_even[n/2/size*rank], n/2/size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\nMPI_Scatter(x_odd.data(), n/2/size, MPI_DOUBLE_COMPLEX, &x_odd[n/2/size*rank], n/2/size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Recursively compute FFTs of even and odd parts\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n// Gather the results from all processes\nMPI_Gather(&y_even[n/2/size*rank], n/2/size, MPI_DOUBLE_COMPLEX, y_even.data(), n/2/size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\nMPI_Gather(&y_odd[n/2/size*rank], n/2/size, MPI_DOUBLE_COMPLEX, y_odd.data(), n/2/size, MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Combine results only in the root process\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0812162212,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1965467368,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.83744133944883,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\nif (rank == 0) {\n    MPI_Send(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    fft(x_even, y_even);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Recv(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    if (rank == 0) {\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n\n// Gather results at root\nMPI_Gather(rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// allocate space for the results of the even and odd FFTs\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// distribute the work among MPI processes\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    if (rank == 0) {\n        output[k] = y_even[k] + t;\n    } else if (rank == 1) {\n        output[k] = y_even[k] - t;\n    }\n}\n\n// gather results from all processes\nif (rank == 0) {\n    MPI_Recv(output.data() + n/2, n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Send(output.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// allocate space for the results of the FFTs of the even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// compute FFTs of even and odd parts in parallel\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    if (rank == 0) {\n        output[k] = y_even[k] + twiddle_factor;\n    } else if (rank == 1) {\n        output[k] = y_even[k] - twiddle_factor;\n    }\n}\n\n// Gather results from both processes\nif (rank == 0) {\n    MPI_Recv(output.data() + n/2, n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Send(output.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\nif (rank == 0) {\n    MPI_Send(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    fft(x_even, y_even);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Recv(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    if (rank == 0) {\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n\n// Gather results at the root\nMPI_Gather(rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// allocate space for the results of the even and odd FFTs\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// only compute FFTs if we are in the correct process\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// synchronize processes\nMPI_Barrier(MPI_COMM_WORLD);\n\n// broadcast the results of the even FFT to all processes\nMPI_Bcast(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// combine results\nfor (int k = rank * (n/2) / size; k < (rank + 1) * (n/2) / size; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> t = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    output[k] = y_even[k] + t;\n    output[k + n/2] = y_even[k] - t;\n}\n\n// gather the partial results from all processes\nstd::vector<std::complex<double>> temp_output(n);\nMPI_Gather(output.data() + rank * (n/2) / size, (n/2) / size * sizeof(std::complex<double>), MPI_BYTE,\n           temp_output.data(), (n/2) / size * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// only the root process should copy the results back to the output vector\nif (rank == 0) {\n    output = temp_output;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\n// Get the rank and size\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// Split the task between MPI processes\nif (world_rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), y_even.size() * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), y_odd.size() * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (world_rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), y_odd.size() * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), y_even.size() * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// Combine results only on the root process\nif (world_rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> exp_term = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n        output[k] = y_even[k] + exp_term;\n        output[k + n/2] = y_even[k] - exp_term;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\n// Get the rank and size from the MPI environment\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// Divide the work among processes\nif (rank == 0) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    MPI_Recv(y_even.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n    if (rank == 0) {\n        output[k] = y_even[k] + twiddle_factor;\n    } else if (rank == 1) {\n        output[k] = y_even[k] - twiddle_factor;\n    }\n}\n\n// Gather results from all processes\nMPI_Gather(output.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, output.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the full output, so broadcast it to all processes\nMPI_Bcast(output.data(), n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\n// Get the rank and size\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\nint half_n = n / 2;\nstd::vector<std::complex<double>> x_even(half_n);\nstd::vector<std::complex<double>> x_odd(half_n);\n\nif (world_rank == 0) {\n    // Decompose x into even and odd parts\n    for (int k = 0; k < half_n; k++) {\n        x_even[k] = x[2 * k];\n        x_odd[k] = x[2 * k + 1];\n    }\n}\n\n// Broadcast even and odd parts to all processes\nMPI_Bcast(x_even.data(), half_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\nMPI_Bcast(x_odd.data(), half_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(half_n);\nstd::vector<std::complex<double>> y_odd(half_n);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n// Combine results\nfor (int k = world_rank; k < half_n; k += world_size) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    output[k] = y_even[k] + twiddle_factor * y_odd[k];\n    output[k + half_n] = y_even[k] - twiddle_factor * y_odd[k];\n}\n\n// Gather results from all processes\nMPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, output.data(), half_n * sizeof(std::complex<double>), MPI_BYTE, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0797063716,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1611588434,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\noutput.resize(n);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\nif (rank == 0) {\n    MPI_Send(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    fft(x_even, y_even);\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    MPI_Recv(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n\n// combine results\nfor (int k = 0; k < n/2; k++) {\n    double kth = -2 * M_PI * k / n;\n    std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n    if (rank == 0) {\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n\n// Gather results at root\nMPI_Gather(rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           rank == 0 ? output.data() : nullptr, n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\n// Get the rank and size\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n / 2);\nstd::vector<std::complex<double>> x_odd(n / 2);\nif (world_rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        x_even[k] = x[2 * k];\n        x_odd[k] = x[2 * k + 1];\n    }\n}\n\n// distribute the even and odd parts to all processes\nMPI_Bcast(x_even.data(), n / 2 * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\nMPI_Bcast(x_odd.data(), n / 2 * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n / 2);\nstd::vector<std::complex<double>> y_odd(n / 2);\nfft(x_even, y_even);\nfft(x_odd, y_odd);\n\n// gather the results from all processes\nMPI_Gather(y_even.data(), n / 2 * sizeof(std::complex<double>), MPI_BYTE, y_even.data(), n / 2 * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\nMPI_Gather(y_odd.data(), n / 2 * sizeof(std::complex<double>), MPI_BYTE, y_odd.data(), n / 2 * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// combine results\nif (world_rank == 0) {\n    for (int k = 0; k < n / 2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> exp_term = std::complex<double>(cos(kth), sin(kth)) * y_odd[k];\n        output[k] = y_even[k] + exp_term;\n        output[k + n / 2] = y_even[k] - exp_term;\n    }\n}\n\n// broadcast the final output to all processes\nMPI_Bcast(output.data(), n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0869702404,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.176691145,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\n// Get the rank and size\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// Split the work between processes\nif (world_rank < world_size / 2) {\n    fft(x_even, y_even);\n    MPI_Send(y_even.data(), y_even.size() * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n    if (world_rank == 0) {\n        for (int i = 1; i < world_size / 2; i++) {\n            MPI_Recv(&y_even[(n/2/world_size)*i], (n/2/world_size) * sizeof(std::complex<double>), MPI_BYTE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n} else {\n    fft(x_odd, y_odd);\n    MPI_Send(y_odd.data(), y_odd.size() * sizeof(std::complex<double>), MPI_BYTE, 0, 1, MPI_COMM_WORLD);\n    if (world_rank == 0) {\n        for (int i = world_size / 2; i < world_size; i++) {\n            MPI_Recv(&y_odd[(n/2/world_size)*(i - world_size / 2)], (n/2/world_size) * sizeof(std::complex<double>), MPI_BYTE, i, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n}\n\n// Only the root process will combine the results\nif (world_rank == 0) {\n    // combine results\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n\n// Broadcast the results to all processes\nMPI_Bcast(output.data(), output.size() * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\n// Get the rank and size from the MPI environment\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\n// Use MPI to divide the task among processes\nif (rank == 0) {\n    // Send x_odd to process 1\n    MPI_Send(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    fft(x_even, y_even);\n    // Receive y_odd from process 1\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (rank == 1) {\n    // Receive x_odd from process 0\n    MPI_Recv(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    fft(x_odd, y_odd);\n    // Send y_odd to process 0\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n\n// Only the master process combines results\nif (rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint n = x.size();\noutput.resize(n);\n\n// Get the rank and size\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n// base case\nif (n == 1) {\n    output[0] = x[0];\n    return;\n}\n\n// radix 2 Cooley-Tukey FFT\n// decompose x into even and odd parts\nstd::vector<std::complex<double>> x_even(n/2);\nstd::vector<std::complex<double>> x_odd(n/2);\nfor (int k = 0; k < n/2; k++) {\n    x_even[k] = x[2*k];\n    x_odd[k] = x[2*k + 1];\n}\n\n// recursively compute FFTs of even and odd parts\nstd::vector<std::complex<double>> y_even(n/2);\nstd::vector<std::complex<double>> y_odd(n/2);\n\nif (world_rank == 0) {\n    // Send the odd part to process 1\n    MPI_Send(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD);\n    fft(x_even, y_even);\n    // Receive the transformed odd part from process 1\n    MPI_Recv(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (world_rank == 1) {\n    // Receive the odd part from process 0\n    MPI_Recv(x_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    fft(x_odd, y_odd);\n    // Send the transformed odd part back to process 0\n    MPI_Send(y_odd.data(), n/2 * sizeof(std::complex<double>), MPI_BYTE, 0, 0, MPI_COMM_WORLD);\n}\n\n// Only process 0 will combine results\nif (world_rank == 0) {\n    for (int k = 0; k < n/2; k++) {\n        double kth = -2 * M_PI * k / n;\n        std::complex<double> twiddle_factor = std::complex<double>(cos(kth), sin(kth));\n        output[k] = y_even[k] + twiddle_factor * y_odd[k];\n        output[k + n/2] = y_even[k] - twiddle_factor * y_odd[k];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "03_dense_la_axpy",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Store the result in z on rank 0.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {",
        "translation_prompt": "// Serial implementation of axpy\n// /* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n//    Example:\n//    \n//    input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n//    output: z=[2, -6, 5, 17]\n// */\n// void axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {\n// for (int i = 0; i < x.size(); ++i) {\n//     z[i] = alpha*x[i] + y[i];\n//   }\n// }\n\n// MPI implementation of axpy\n#include <mpi.h>\n\n/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x and y. Store the result in z on rank 0.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {\nfor (int i = 0; i < x.size(); ++i) {\n    z[i] = alpha*x[i] + y[i];\n  }\n}",
        "translation_function_name": "axpy",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    if (idx < n) {\n        local_z[i] = alpha * x[idx] + y[idx];\n    }\n}\n\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If n is not divisible by size, handle the remaining elements\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0210803324,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0462402984,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00585772607461,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the axpy operation\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0159799864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0398687856,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00588102997539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = 0; i < local_n; ++i) {\n    int global_index = rank * local_n + i;\n    local_z[i] = alpha * x[global_index] + y[global_index];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0183951136,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0419209216,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00688475141758,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = 0; i < local_n; ++i) {\n    int global_index = rank * local_n + i;\n    local_z[i] = alpha * x[global_index] + y[global_index];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0159350416,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.039861632,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00553589338984,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the axpy operation\nfor (int i = rank * local_n; i < (rank + 1) * local_n; ++i) {\n    local_z[i - rank * local_n] = alpha * x[i] + y[i];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If n is not divisible by size, handle the remaining elements\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0157028512,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.039306163,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00540298200352,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = rank * local_n; i < (rank + 1) * local_n; ++i) {\n    local_z[i - rank * local_n] = alpha * x[i] + y[i];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If n is not divisible by size, handle the remaining elements\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0183288288,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0425187404,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00654353558477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\nfor (int i = 0; i < local_n; ++i) {\n    int global_index = rank * local_n + i;\n    if (global_index < n) {\n        local_z[i] = alpha * x[global_index] + y[global_index];\n    }\n}\n\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the remaining elements if n is not divisible by size\nif (rank == 0 && n % size != 0) {\n    for (int i = size * local_n; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.015852082,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.041494349,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00551987185469,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather all partial results to the root process\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0158061498,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392097676,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00561929682656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the axpy operation\nfor (int i = rank * local_n; i < (rank + 1) * local_n; ++i) {\n    local_z[i - rank * local_n] = alpha * x[i] + y[i];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0157264276,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0394450302,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00534140448242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\nfor (int i = 0; i < local_n; ++i) {\n    int global_index = rank * local_n + i;\n    local_z[i] = alpha * x[global_index] + y[global_index];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0159142728,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.039646349,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00537117230781,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0160685852,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0393855406,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0119561139082,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = 0; i < local_n; ++i) {\n    int global_index = rank * local_n + i;\n    local_z[i] = alpha * x[global_index] + y[global_index];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.015747199,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0399105036,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00535950625156,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.01580096,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0403715106,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00569877920547,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the axpy operation\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.015583591,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0392418336,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00536375502812,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of z\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    if (idx < n) {\n        local_z[i] = alpha * x[idx] + y[idx];\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0159125132,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0413775938,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00592990483438,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the result\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0156769988,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0395862132,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00565086206406,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\nfor (int i = 0; i < local_n; ++i) {\n    int global_index = rank * local_n + i;\n    if (global_index < n) {\n        local_z[i] = alpha * x[global_index] + y[global_index];\n    }\n}\n\nif (rank == 0) {\n    z.resize(n);\n}\n\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the remaining elements if n is not divisible by size\nif (rank == 0 && n % size != 0) {\n    for (int i = size * local_n; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0160438206,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.042028522,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00581890564766,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the axpy operation\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.01580524,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0398081268,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00533144915742,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size; // Assuming n is divisible by size for simplicity\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of the z vector\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    local_z[i] = alpha * x[idx] + y[idx];\n}\n\n// Gather all portions of the z vector at rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0158506474,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0395361514,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00574633672109,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_n = n / size;\nstd::vector<double> local_z(local_n);\n\n// Compute the local portion of z\nfor (int i = 0; i < local_n; ++i) {\n    int idx = rank * local_n + i;\n    if (idx < n) {\n        local_z[i] = alpha * x[idx] + y[idx];\n    }\n}\n\n// Gather all portions of z to rank 0\nif (rank == 0) {\n    z.resize(n);\n}\nMPI_Gather(local_z.data(), local_n, MPI_DOUBLE, z.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nint remainder = n % size;\nif (remainder > 0 && rank == 0) {\n    for (int i = n - remainder; i < n; ++i) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0158266182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.042367241,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0061685890625,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "01_dense_la_solve",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Solve the linear system Ax=b for x.\n   A is an NxN matrix in row-major. x and b have N elements.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and b. Store the result in x on rank 0.\n   Example:\n   \n   input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n   output: x=[3, 1, 2]\n*/\nvoid solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {",
        "translation_prompt": "// Serial implementation of solveLinearSystem\n// /* Solve the linear system Ax=b for x.\n//    A is an NxN matrix in row-major. x and b have N elements.\n//    Example:\n//    \n//    input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n//    output: x=[3, 1, 2]\n// */\n// void solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {\n// // check if the input is valid\n//     if (A.size()!= N * N) {\n//         throw std::invalid_argument(\"A must be a NxN matrix\");\n//     }\n//     if (b.size()!= N) {\n//         throw std::invalid_argument(\"b must have N elements\");\n//     }\n//     // create a copy of A\n//     std::vector<double> A_copy(A);\n//     // create a copy of b\n//     std::vector<double> b_copy(b);\n//     // perform Gaussian elimination\n//     for (size_t i = 0; i < N; i++) {\n//         // find the pivot row and swap it with the current row\n//         size_t pivot_row = i;\n//         for (size_t j = i + 1; j < N; j++) {\n//             if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n//                 pivot_row = j;\n//             }\n//         }\n//         if (pivot_row!= i) {\n//             // swap the current row with the pivot row\n//             for (size_t j = 0; j < N; j++) {\n//                 std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n//             }\n//             std::swap(b_copy[i], b_copy[pivot_row]);\n//         }\n//         // eliminate the current row\n//         for (size_t j = i + 1; j < N; j++) {\n//             double factor = A_copy[j * N + i] / A_copy[i * N + i];\n//             for (size_t k = 0; k < N; k++) {\n//                 A_copy[j * N + k] -= factor * A_copy[i * N + k];\n//             }\n//             b_copy[j] -= factor * b_copy[i];\n//         }\n//     }\n//     // back substitution\n//     x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n//     for (size_t i = N - 2; i < N; i--) {\n//         double sum = 0;\n//         for (size_t j = i + 1; j < N; j++) {\n//             sum += A_copy[i * N + j] * x[j];\n//         }\n//         x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n//     }\n// }\n\n// MPI implementation of solveLinearSystem\n#include <mpi.h>\n\n/* Solve the linear system Ax=b for x.\n   A is an NxN matrix in row-major. x and b have N elements.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and b. Store the result in x on rank 0.\n   Example:\n   \n   input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n   output: x=[3, 1, 2]\n*/\nvoid solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Solve the linear system Ax=b for x.\n   A is an NxN matrix in row-major. x and b have N elements.\n   Example:\n   \n   input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]\n   output: x=[3, 1, 2]\n*/\nvoid solveLinearSystem(std::vector<double> const& A, std::vector<double> const& b, std::vector<double> &x, size_t N) {\n// check if the input is valid\n    if (A.size()!= N * N) {\n        throw std::invalid_argument(\"A must be a NxN matrix\");\n    }\n    if (b.size()!= N) {\n        throw std::invalid_argument(\"b must have N elements\");\n    }\n    // create a copy of A\n    std::vector<double> A_copy(A);\n    // create a copy of b\n    std::vector<double> b_copy(b);\n    // perform Gaussian elimination\n    for (size_t i = 0; i < N; i++) {\n        // find the pivot row and swap it with the current row\n        size_t pivot_row = i;\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n                pivot_row = j;\n            }\n        }\n        if (pivot_row!= i) {\n            // swap the current row with the pivot row\n            for (size_t j = 0; j < N; j++) {\n                std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n            }\n            std::swap(b_copy[i], b_copy[pivot_row]);\n        }\n        // eliminate the current row\n        for (size_t j = i + 1; j < N; j++) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    // back substitution\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (size_t i = N - 2; i < N; i--) {\n        double sum = 0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}",
        "translation_function_name": "solveLinearSystem",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.101191047,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1259023002,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        // Find the pivot row\n        size_t pivot_row = i;\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n                pivot_row = j;\n            }\n        }\n        // Swap the pivot row with the current row if needed\n        if (pivot_row != i) {\n            for (size_t j = 0; j < N; j++) {\n                std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n            }\n            std::swap(b_copy[i], b_copy[pivot_row]);\n        }\n    }\n    // Broadcast the pivot row to all processes\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // Perform elimination in parallel\n    for (size_t j = i + 1 + rank; j < N; j += size) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = 0; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n    // Synchronize all processes\n    MPI_Barrier(MPI_COMM_WORLD);\n    // Gather the updated rows of A and b to rank 0\n    MPI_Gather(MPI_IN_PLACE, N, MPI_DOUBLE, &A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(MPI_IN_PLACE, 1, MPI_DOUBLE, &b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    // Back substitution\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (size_t i = N - 2; i < N; i--) {\n        double sum = 0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n// Broadcast the result to all processes\nMPI_Bcast(x.data(), N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1002502732,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1757697286,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1019963958,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1255466314,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\nstd::vector<double> local_x(N, 0.0);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    for (size_t j = i + 1; j < N; j++) {\n        double temp_value = std::abs(A_copy[j * N + i]);\n        if (temp_value > pivot_value) {\n            pivot_row = j;\n            pivot_value = temp_value;\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (rank == j % size) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    local_x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * local_x[j];\n        }\n        local_x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n    x = local_x;\n}\nMPI_Bcast(x.data(), N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1262300692,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1762705216,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.54417184529492,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            double temp_value = std::abs(A_copy[j * N + i]);\n            if (temp_value > pivot_value) {\n                pivot_row = j;\n                pivot_value = temp_value;\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = i; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1010238488,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1100329524,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    double pivot_value;\n    size_t pivot_row = i;\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n                pivot_row = j;\n            }\n        }\n        pivot_value = A_copy[pivot_row * N + i];\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&pivot_value, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (rank == j % size) {\n            double factor = A_copy[j * N + i] / pivot_value;\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1254813162,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1248784478,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = i; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    MPI_Bcast(&A_copy[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, rank, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i + 1], N - i - 1, MPI_DOUBLE, rank, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1014780376,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13053101,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1014035798,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1256558344,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.10081748,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1256254298,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = i; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1021679734,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1099402154,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\nif (x.size() != N) {\n    throw std::invalid_argument(\"x must have N elements\");\n}\n\n// create a copy of A and b\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    int global_pivot_row = pivot_row;\n\n    // find the pivot row in the current rank\n    for (size_t j = i + 1; j < N; j++) {\n        if (std::abs(A_copy[j * N + i]) > pivot_value) {\n            pivot_row = j;\n            pivot_value = std::abs(A_copy[j * N + i]);\n        }\n    }\n\n    // all ranks send their local pivot to rank 0\n    struct {\n        double value;\n        int rank;\n    } local_pivot = {pivot_value, rank}, global_pivot;\n\n    // rank 0 finds the global pivot row\n    MPI_Allreduce(&local_pivot, &global_pivot, 1, MPI_DOUBLE_INT, MPI_MAXLOC, MPI_COMM_WORLD);\n\n    // broadcast the global pivot row to all ranks\n    MPI_Bcast(&global_pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // swap the rows if necessary\n    if (global_pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[global_pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[global_pivot_row]);\n    }\n\n    // broadcast the pivot row A and b to all ranks\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // eliminate the current row\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n\n// back substitution\nif (rank == 0) {\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.101161944,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.128740851,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.81033735781406,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1010998584,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1248525524,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = i; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1007473218,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.109499321,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.102996579,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.125944588,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        // Find the pivot row\n        size_t pivot_row = i;\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > std::abs(A_copy[pivot_row * N + i])) {\n                pivot_row = j;\n            }\n        }\n        // Swap the pivot row with the current row\n        if (pivot_row != i) {\n            for (size_t j = 0; j < N; j++) {\n                std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n            }\n            std::swap(b_copy[i], b_copy[pivot_row]);\n        }\n    }\n    // Broadcast the pivot row to all processes\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    // Gather the results of elimination back to the root process\n    MPI_Gather(MPI_IN_PLACE, N, MPI_DOUBLE, &A_copy[i + 1], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Gather(MPI_IN_PLACE, 1, MPI_DOUBLE, &b_copy[i + 1], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n\nif (rank == 0) {\n    // Back substitution\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.124559474,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11950975,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = i; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1010140342,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1097586754,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n\n// create a copy of A and b\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    // find the pivot row in all processes\n    for (size_t j = i + 1; j < N; j++) {\n        double value = std::abs(A_copy[j * N + i]);\n        if (value > pivot_value) {\n            pivot_row = j;\n            pivot_value = value;\n        }\n    }\n\n    // broadcast pivot row to all processes\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (pivot_row != i) {\n        // swap the current row with the pivot row\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n\n    // broadcast the new rows to all processes\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    // eliminate the current row\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n\n    // gather the results from all processes\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\n// back substitution\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.101794123,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.125355092,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                pivot_row = j;\n                pivot_value = std::abs(A_copy[j * N + i]);\n            }\n        }\n    }\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n    MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            double factor = A_copy[j * N + i] / A_copy[i * N + i];\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[i * N + k];\n            }\n            b_copy[j] -= factor * b_copy[i];\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Bcast(&A_copy[j * N], N, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[j], 1, MPI_DOUBLE, j % size, MPI_COMM_WORLD);\n    }\n}\n\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1014186328,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.125603205,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// check if the input is valid\nif (A.size() != N * N) {\n    throw std::invalid_argument(\"A must be a NxN matrix\");\n}\nif (b.size() != N) {\n    throw std::invalid_argument(\"b must have N elements\");\n}\n\n// create a copy of A and b\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\n// perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    // Broadcast pivot row\n    MPI_Bcast(&pivot_row, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&pivot_value, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&A_copy[pivot_row * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Bcast(&b_copy[pivot_row], 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (rank == j % size) {\n            double factor = A_copy[j * N + i] / pivot_value;\n            for (size_t k = 0; k < N; k++) {\n                A_copy[j * N + k] -= factor * A_copy[pivot_row * N + k];\n            }\n            b_copy[j] -= factor * b_copy[pivot_row];\n        }\n    }\n    // Synchronize all ranks\n    MPI_Barrier(MPI_COMM_WORLD);\n    // Gather updated rows of A and b to all ranks\n    MPI_Allgather(MPI_IN_PLACE, N, MPI_DOUBLE, &A_copy[i * N], N, MPI_DOUBLE, MPI_COMM_WORLD);\n    MPI_Allgather(MPI_IN_PLACE, 1, MPI_DOUBLE, &b_copy[i], 1, MPI_DOUBLE, MPI_COMM_WORLD);\n}\n\n// back substitution\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1253933032,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1169174356,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<double> A_copy(A);\nstd::vector<double> b_copy(b);\n\n// Perform Gaussian elimination\nfor (size_t i = 0; i < N; i++) {\n    int pivot_row = i;\n    double pivot_value = std::abs(A_copy[i * N + i]);\n    int pivot_owner = rank;\n\n    // Find the global pivot row\n    for (int r = 0; r < size; ++r) {\n        double local_pivot_value;\n        int local_pivot_row;\n        if (r == rank) {\n            for (size_t j = i + 1; j < N; j++) {\n                if (std::abs(A_copy[j * N + i]) > pivot_value) {\n                    pivot_row = j;\n                    pivot_value = std::abs(A_copy[j * N + i]);\n                }\n            }\n            local_pivot_value = pivot_value;\n            local_pivot_row = pivot_row;\n        }\n        MPI_Bcast(&local_pivot_value, 1, MPI_DOUBLE, r, MPI_COMM_WORLD);\n        MPI_Bcast(&local_pivot_row, 1, MPI_INT, r, MPI_COMM_WORLD);\n        if (local_pivot_value > pivot_value) {\n            pivot_value = local_pivot_value;\n            pivot_row = local_pivot_row;\n            pivot_owner = r;\n        }\n    }\n\n    // Broadcast the pivot row\n    if (pivot_owner == rank) {\n        MPI_Bcast(&A_copy[pivot_row * N], N, MPI_DOUBLE, rank, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[pivot_row], 1, MPI_DOUBLE, rank, MPI_COMM_WORLD);\n    } else {\n        MPI_Bcast(&A_copy[i * N], N, MPI_DOUBLE, pivot_owner, MPI_COMM_WORLD);\n        MPI_Bcast(&b_copy[i], 1, MPI_DOUBLE, pivot_owner, MPI_COMM_WORLD);\n    }\n\n    // Swap the pivot row with the current row\n    if (pivot_row != i) {\n        for (size_t j = 0; j < N; j++) {\n            std::swap(A_copy[i * N + j], A_copy[pivot_row * N + j]);\n        }\n        std::swap(b_copy[i], b_copy[pivot_row]);\n    }\n\n    // Eliminate the current row\n    for (size_t j = i + 1; j < N; j++) {\n        double factor = A_copy[j * N + i] / A_copy[i * N + i];\n        for (size_t k = i; k < N; k++) {\n            A_copy[j * N + k] -= factor * A_copy[i * N + k];\n        }\n        b_copy[j] -= factor * b_copy[i];\n    }\n}\n\n// Back substitution\nif (rank == 0) {\n    x.resize(N);\n    x[N - 1] = b_copy[N - 1] / A_copy[(N - 1) * N + (N - 1)];\n    for (int i = N - 2; i >= 0; i--) {\n        double sum = 0.0;\n        for (size_t j = i + 1; j < N; j++) {\n            sum += A_copy[i * N + j] * x[j];\n        }\n        x[i] = (b_copy[i] - sum) / A_copy[i * N + i];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1005453004,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.128296334,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "02_dense_la_gemm",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and B. Store the result in C on rank 0.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {",
        "translation_prompt": "// Serial implementation of gemm\n// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n//    Example:\n// \n//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n//    output: C=[[9, 5], [4, 2]]\n// */\n// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {\n// for (size_t i = 0; i < M; ++i) {\n//         for (size_t j = 0; j < N; ++j) {\n//             double sum = 0;\n//             for (size_t k = 0; k < K; ++k) {\n//                 sum += A[i * K + k] * B[k * N + j];\n//             }\n//             C[i * N + j] = sum;\n//         }\n//     }\n// }\n\n// MPI implementation of gemm\n#include <mpi.h>\n\n/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and B. Store the result in C on rank 0.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {\nfor (size_t i = 0; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}",
        "translation_function_name": "gemm",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : (rank + 1) * rows_per_process;\n\nstd::vector<double> C_partial(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_partial[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the computed results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(C_partial.data(), rows_per_process * N, MPI_DOUBLE,\n           C.data(), rows_per_process * N, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// If the number of rows is not evenly divisible by the number of processes\n// The last process computes the remaining rows\nif (rank == size - 1 && M % size != 0) {\n    for (size_t i = end_row; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n\n// Ensure the last process's additional rows are received by the root process\nif (M % size != 0 && rank == 0) {\n    MPI_Recv(C.data() + end_row * N, (M - end_row) * N, MPI_DOUBLE, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (M % size != 0 && rank == size - 1) {\n    MPI_Send(C_partial.data() + (rows_per_process * N), (M - end_row) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.043790826,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4267424618,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131313883125,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &C_local[0], rows_per_process * N, MPI_DOUBLE,\n           &C[0], rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If the number of rows is not evenly divisible by the number of processes,\n// handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = rows_per_process * size; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0438885424,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.4267379032,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1 ? M - rows_per_process * i : rows_per_process) * N;\n    displs[i] = rows_per_process * i * N;\n}\n\nMPI_Gatherv(C_local.data(), rows_per_process * N, MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0438044462,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4258896322,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00400443157266,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : (rank + 1) * rows_per_process;\n\nstd::vector<double> C_partial(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_partial[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(C_partial.data(), rows_per_process * N, MPI_DOUBLE, \n           C.data(), rows_per_process * N, MPI_DOUBLE, \n           0, MPI_COMM_WORLD);\n\n// If the number of rows is not evenly divisible by the number of processes,\n// the last process computes the remaining rows\nif (rank == 0 && M % size != 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0438044102,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4200891508,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00128434894727,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(C_local.data(), rows_per_process * N, MPI_DOUBLE, \n           rank == 0 ? C.data() : nullptr, rows_per_process * N, MPI_DOUBLE, \n           0, MPI_COMM_WORLD);\n\n// If the number of processes does not evenly divide the number of rows,\n// the last process computes the remaining rows\nif (rank == 0 && M % size != 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0439237046,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4268712596,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00125717071328,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t extra_rows = M % size;\nsize_t start_row = rank * rows_per_process + std::min(static_cast<size_t>(rank), extra_rows);\nsize_t end_row = start_row + rows_per_process + (rank < extra_rows ? 1 : 0);\n\n// Allocate memory for the local result\nstd::vector<double> C_local((end_row - start_row) * N, 0);\n\n// Perform the multiplication for the assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    // Prepare the receive counts and displacements for Gatherv\n    std::vector<int> recvcounts(size);\n    std::vector<int> displs(size);\n\n    for (int i = 0; i < size; ++i) {\n        size_t rows = rows_per_process + (i < extra_rows ? 1 : 0);\n        recvcounts[i] = rows * N;\n        displs[i] = (i * rows_per_process + std::min(static_cast<size_t>(i), extra_rows)) * N;\n    }\n\n    MPI_Gatherv(C_local.data(), C_local.size(), MPI_DOUBLE, C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n} else {\n    // Other processes just send their data\n    MPI_Gatherv(C_local.data(), C_local.size(), MPI_DOUBLE, nullptr, nullptr, nullptr, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0281799962,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4241205804,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00311716542539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(C_local.data(), rows_per_process * N, MPI_DOUBLE,\n           C.data(), rows_per_process * N, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// If the number of rows is not evenly divisible by the number of processes,\n// the last process computes the remaining rows\nif (rank == 0 && M % size != 0) {\n    for (size_t i = rows_per_process * size; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.04381922,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4230830356,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131814878164,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : (rank + 1) * rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the computed results from all processes to rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for Gatherv\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1 ? M - i * rows_per_process : rows_per_process) * N;\n    displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(C_local.data(), rows_per_process * N, MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0438578058,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4278099474,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00309631116406,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? (M - i * rows_per_process) * N : rows_per_process * N;\n    displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(C_local.data(), recvcounts[rank], MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.043890413,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4242529874,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00362349129531,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : C_local.data(), rows_per_process * N, MPI_DOUBLE,\n           C.data(), rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If the number of rows is not evenly divisible by the number of processes,\n// the last process computes the remaining rows\nif (rank == size - 1 && M % size != 0) {\n    for (size_t i = end_row; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n\n// Ensure the last process's additional rows are received by the root process\nif (M % size != 0 && rank == 0) {\n    MPI_Recv(C.data() + end_row * N, (M - end_row) * N, MPI_DOUBLE, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (M % size != 0 && rank == size - 1) {\n    MPI_Send(C_local.data() + (rows_per_process * N), (M - end_row) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0439167826,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.428652301,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : (rank + 1) * rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &C_local[0], rows_per_process * N, MPI_DOUBLE,\n           &C[0], rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0438237456,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.42643785,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t extra_rows = M % size;\nsize_t start_row = rank * rows_per_process + std::min(static_cast<size_t>(rank), extra_rows);\nsize_t end_row = start_row + rows_per_process + (rank < extra_rows ? 1 : 0);\n\nstd::vector<double> C_local((end_row - start_row) * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results on rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for each process\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i < extra_rows) ? (rows_per_process + 1) * N : rows_per_process * N;\n    displs[i] = (i * rows_per_process + std::min(i, static_cast<int>(extra_rows))) * N;\n}\n\nMPI_Gatherv(C_local.data(), recvcounts[rank], MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0437704352,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4270462958,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00301632272969,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : C_local.data(), rows_per_process * N, MPI_DOUBLE,\n           C.data(), rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If the number of rows is not evenly divisible by the number of processes,\n// the last process computes the remaining rows\nif (rank == 0 && M % size != 0) {\n    for (size_t i = rows_per_process * size; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0437461936,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.4257421644,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_partial(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_partial[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? (M - rows_per_process * i) * N : rows_per_process * N;\n    displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(C_partial.data(), rows_per_process * N, MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0437590778,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4273566036,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00274321637773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_partial(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_partial[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the partial results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &C_partial.front(), rows_per_process * N, MPI_DOUBLE,\n           rank == 0 ? &C.front() : nullptr, rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If the number of processes does not evenly divide the number of rows,\n// the last process computes the remaining rows\nif (rank == 0 && M % size != 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            double sum = 0;\n            for (size_t k = 0; k < K; ++k) {\n                sum += A[i * K + k] * B[k * N + j];\n            }\n            C[i * N + j] = sum;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.043839435,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.4237624058,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_partial(rows_per_process * N, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_partial[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? (M - rows_per_process * i) * N : rows_per_process * N;\n    displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(C_partial.data(), recvcounts[rank], MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0437997844,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4269134708,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00355627553672,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t extra_rows = M % size;\nsize_t start_row = rank * rows_per_process + std::min(static_cast<size_t>(rank), extra_rows);\nsize_t end_row = start_row + rows_per_process + (rank < extra_rows ? 1 : 0);\n\nstd::vector<double> C_local((end_row - start_row) * N, 0);\n\n// Each process computes its assigned rows of C\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = rows_per_process * N;\n    if (i < extra_rows) {\n        recvcounts[i] += N;\n    }\n    displs[i] = (i * rows_per_process + std::min(static_cast<size_t>(i), extra_rows)) * N;\n}\n\nMPI_Gatherv(C_local.data(), recvcounts[rank], MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0438520166,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4284199406,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00361233982695,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t extra_rows = M % size;\nsize_t start_row = rank * rows_per_process + std::min(static_cast<size_t>(rank), extra_rows);\nsize_t end_row = start_row + rows_per_process + (rank < extra_rows ? 1 : 0);\n\nstd::vector<double> C_local((end_row - start_row) * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    size_t rows_for_rank = rows_per_process + (i < extra_rows ? 1 : 0);\n    recvcounts[i] = rows_for_rank * N;\n    displs[i] = (i * rows_per_process + std::min(static_cast<size_t>(i), extra_rows)) * N;\n}\n\nMPI_Gatherv(C_local.data(), recvcounts[rank], MPI_DOUBLE,\n             rank == 0 ? C.data() : nullptr, recvcounts.data(), displs.data(), MPI_DOUBLE,\n             0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0437453778,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4269575942,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00366159582969,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t extra_rows = M % size;\nsize_t start_row = rank * rows_per_process + std::min(static_cast<size_t>(rank), extra_rows);\nsize_t end_row = start_row + rows_per_process + (rank < extra_rows ? 1 : 0);\n\nstd::vector<double> C_local((end_row - start_row) * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather results at rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> sendcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate send counts and displacements for each rank\nfor (int i = 0; i < size; ++i) {\n    sendcounts[i] = (i < extra_rows) ? (rows_per_process + 1) * N : rows_per_process * N;\n    displs[i] = (i * rows_per_process + std::min(static_cast<size_t>(i), extra_rows)) * N;\n}\n\nMPI_Gatherv(C_local.data(), sendcounts[rank], MPI_DOUBLE,\n            C.data(), sendcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.043860952,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4250396374,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00372784546523,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> C_local(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        double sum = 0;\n        for (size_t k = 0; k < K; ++k) {\n            sum += A[i * K + k] * B[k * N + j];\n        }\n        C_local[(i - start_row) * N + j] = sum;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    C.resize(M * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        recvcounts[i] = (i == size - 1 ? M - rows_per_process * i : rows_per_process) * N;\n        displs[i] = rows_per_process * i * N;\n    }\n}\n\nMPI_Gatherv(C_local.data(), rows_per_process * N, MPI_DOUBLE,\n            C.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0438077892,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.4244180554,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00337301555703,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "04_dense_la_gemv",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and x. Store the result in y on rank 0.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {",
        "translation_prompt": "// Serial implementation of gemv\n// /* Multiply the matrix A by the vector x. Store the results in the vector y.\n//    A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n//    Example:\n// \n//    input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n//    output: y=[1, -3]\n// */\n// void gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {\n// for (size_t i = 0; i < M; ++i) {\n//         double sum = 0;\n//         for (size_t j = 0; j < N; ++j) {\n//             sum += A[i * N + j] * x[j];\n//         }\n//         y[i] = sum;\n//     }\n// }\n\n// MPI implementation of gemv\n#include <mpi.h>\n\n/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A and x. Store the result in y on rank 0.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {\nfor (size_t i = 0; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}",
        "translation_function_name": "gemv",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process, 0.0);\n\n// Each process computes its portion of the matrix-vector multiplication\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather all partial results to the root process\nif (rank == 0) {\n    y.resize(M, 0.0);\n}\n\n// Create a receive counts array for uneven distribution\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate receive counts and displacements for uneven distributions\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? M - i * rows_per_process : rows_per_process;\n    displs[i] = i * rows_per_process;\n}\n\nMPI_Gatherv(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319572832,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.031881863,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00080375977773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE,\n           y.data(), rows_per_process, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// If M is not evenly divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = rows_per_process * size; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0332888764,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.035442112,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00102850527656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\n// Each process computes its portion of the matrix-vector multiplication\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0320078802,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0319101398,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00101089195742,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process, 0.0);\n\n// Each process computes its portion of the matrix-vector multiplication\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather all partial results to the root process\nif (rank == 0) {\n    y.resize(M, 0.0);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, the last process computes the remaining rows\nif (rank == size - 1 && M % size != 0) {\n    for (size_t i = end_row; i < M; ++i) {\n        double sum = 0.0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319815826,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0318709122,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00104679343555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not evenly divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319761406,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0318704176,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00099678954297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.031962186,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0318979116,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00095262079297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.031909413,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0318805664,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00098318775313,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the partial results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? M - i * rows_per_process : rows_per_process;\n    displs[i] = i * rows_per_process;\n}\n\nMPI_Gatherv(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319273148,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0335682282,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00075566930039,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0335247694,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0325474548,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103221569102,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t remaining_rows = M % size;\n\n// Determine the starting and ending indices for each process\nsize_t start_row = rank * local_rows + std::min(static_cast<size_t>(rank), remaining_rows);\nsize_t end_row = start_row + local_rows + (rank < remaining_rows ? 1 : 0);\n\nstd::vector<double> local_y(end_row - start_row, 0.0);\n\n// Perform the matrix-vector multiplication for the local rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M, 0.0);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = local_rows + (i < remaining_rows ? 1 : 0);\n    displs[i] = i * local_rows + std::min(static_cast<size_t>(i), remaining_rows);\n}\n\nMPI_Gatherv(local_y.data(), local_y.size(), MPI_DOUBLE, y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319448234,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0319165362,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00088016448438,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0318888864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.032986625,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00119523056289,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t remaining_rows = M % size;\n\n// Determine the starting and ending indices for each process\nsize_t start_row = rank * local_rows + std::min(static_cast<size_t>(rank), remaining_rows);\nsize_t end_row = start_row + local_rows + (rank < remaining_rows ? 1 : 0);\n\nstd::vector<double> local_y(end_row - start_row, 0.0);\n\n// Perform the matrix-vector multiplication for the local rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M, 0.0);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = local_rows + (i < remaining_rows ? 1 : 0);\n    displs[i] = i * local_rows + std::min(static_cast<size_t>(i), remaining_rows);\n}\n\nMPI_Gatherv(local_y.data(), local_y.size(), MPI_DOUBLE,\n            y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0320109918,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320597538,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00074968903203,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319926454,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0350784098,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00092833961875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319694896,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0319200308,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00096921929297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\n// Buffer to store the local results\nstd::vector<double> local_y(rows_per_process, 0);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M, 0);\n}\n\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &local_y[0], rows_per_process, MPI_DOUBLE,\n           &y[0], rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not evenly divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = rows_per_process * size; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0319372638,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0318628198,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319853362,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0318666228,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00103425411367,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\n// Each process computes its portion of the y vector\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the computed portions of the y vector at the root process\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE, y.data(), rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = rows_per_process * size; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319680876,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0320061828,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00115515943984,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_proc = M / size;\nsize_t start_row = rank * rows_per_proc;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_proc;\n\nstd::vector<double> local_y(rows_per_proc);\n\n// Each process computes its assigned rows\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for Gatherv\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? M - i * rows_per_proc : rows_per_proc;\n    displs[i] = i * rows_per_proc;\n}\n\nMPI_Gatherv(local_y.data(), rows_per_proc, MPI_DOUBLE,\n            y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319714858,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0319039948,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00076905765898,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = M / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? M : start_row + rows_per_process;\n\nstd::vector<double> local_y(rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M);\n}\n\nMPI_Gather(local_y.data(), rows_per_process, MPI_DOUBLE,\n           y.data(), rows_per_process, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// If M is not divisible by size, handle the remaining rows\nif (M % size != 0 && rank == 0) {\n    for (size_t i = rows_per_process * size; i < M; ++i) {\n        double sum = 0;\n        for (size_t j = 0; j < N; ++j) {\n            sum += A[i * N + j] * x[j];\n        }\n        y[i] = sum;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0319863818,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0318708322,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00107185998789,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t local_rows = M / size;\nsize_t remaining_rows = M % size;\n\n// Determine the starting and ending indices for each process\nsize_t start_row = rank * local_rows + std::min(static_cast<size_t>(rank), remaining_rows);\nsize_t end_row = start_row + local_rows + (rank < remaining_rows ? 1 : 0);\n\nstd::vector<double> local_y(end_row - start_row, 0.0);\n\n// Each process computes its portion of the matrix-vector multiplication\nfor (size_t i = start_row; i < end_row; ++i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < N; ++j) {\n        sum += A[i * N + j] * x[j];\n    }\n    local_y[i - start_row] = sum;\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    y.resize(M, 0.0);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = local_rows + (i < remaining_rows ? 1 : 0);\n    displs[i] = i * local_rows + std::min(static_cast<size_t>(i), remaining_rows);\n}\n\nMPI_Gatherv(local_y.data(), local_y.size(), MPI_DOUBLE,\n            y.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0332087754,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0336209646,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00076976318594,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "00_dense_la_lu_decomp",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   Store the results for L and U into the original matrix A. \n   A is an NxN matrix stored in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. Store the result in A on rank 0.\n   Example:\n\n   input: [[4, 3], [6, 3]]\n   output: [[4, 3], [1.5, -1.5]]\n*/\nvoid luFactorize(std::vector<double> &A, size_t N) {",
        "translation_prompt": "// Serial implementation of luFactorize\n// /* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n//    Store the results for L and U into the original matrix A. \n//    A is an NxN matrix stored in row-major.\n//    Example:\n// \n//    input: [[4, 3], [6, 3]]\n//    output: [[4, 3], [1.5, -1.5]]\n// */\n// void luFactorize(std::vector<double> &A, size_t N) {\n// for (size_t i = 0; i < N; i++) {\n//     for (size_t j = i + 1; j < N; j++) {\n//       A[j * N + i] = A[j * N + i] / A[i * N + i];\n//       for (size_t k = i + 1; k < N; k++) {\n//         A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n//       }\n//     }\n//   }\n// }\n\n// MPI implementation of luFactorize\n#include <mpi.h>\n\n/* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   Store the results for L and U into the original matrix A. \n   A is an NxN matrix stored in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of A. Store the result in A on rank 0.\n   Example:\n\n   input: [[4, 3], [6, 3]]\n   output: [[4, 3], [1.5, -1.5]]\n*/\nvoid luFactorize(std::vector<double> &A, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.\n   Store the results for L and U into the original matrix A. \n   A is an NxN matrix stored in row-major.\n   Example:\n\n   input: [[4, 3], [6, 3]]\n   output: [[4, 3], [1.5, -1.5]]\n*/\nvoid luFactorize(std::vector<double> &A, size_t N) {\nfor (size_t i = 0; i < N; i++) {\n    for (size_t j = i + 1; j < N; j++) {\n      A[j * N + i] = A[j * N + i] / A[i * N + i];\n      for (size_t k = i + 1; k < N; k++) {\n        A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n      }\n    }\n  }\n}",
        "translation_function_name": "luFactorize",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    size_t chunk_size = N / size;\n    size_t start = rank * chunk_size + (rank >= N % size ? N % size : rank);\n    size_t end = start + chunk_size + (rank < N % size);\n\n    for (size_t j = i + 1; j < N; j++) {\n        for (size_t k = start; k < end; k++) {\n            if (k > i) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    for (size_t j = i + 1; j < N; j++) {\n        MPI_Reduce(rank == 0 ? MPI_IN_PLACE : &A[j * N + start], &A[j * N + start], end - start, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0999344874,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3207038554,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.18213246364414,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n    for (size_t j = local_start; j < local_end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    for (int r = 0; r < size; r++) {\n        if (rank == r) {\n            MPI_Bcast(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, r, MPI_COMM_WORLD);\n        } else {\n            MPI_Bcast(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, r, MPI_COMM_WORLD);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n\nif (rank != 0) {\n    MPI_Send(&A[0], N * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    std::vector<double> temp(N * N);\n    for (int r = 1; r < size; r++) {\n        MPI_Recv(&temp[0], N * N, MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        int local_start = (N / size) * r;\n        int local_end = (r == size - 1) ? N : local_start + (N / size);\n        for (size_t j = local_start; j < local_end; j++) {\n            for (size_t k = 0; k < N; k++) {\n                A[j * N + k] = temp[j * N + k];\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0991552334,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1082073366,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n    for (size_t j = local_start; j < local_end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    }\n    if (rank == 0) {\n        for (int src = 1; src < size; src++) {\n            int src_local_start = (N / size) * src;\n            int src_local_end = (src == size - 1) ? N : src_local_start + (N / size);\n            MPI_Recv(&A[src_local_start * N], (src_local_end - src_local_start) * N, MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\nif (rank == 0) {\n    for (size_t i = 0; i < N; i++) {\n        for (size_t j = 0; j < i; j++) {\n            A[i * N + j] = 0.0;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0991109828,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1076091012,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n    for (size_t j = local_start; j < local_end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    for (int r = 1; r < size; r++) {\n        if (rank == r) {\n            MPI_Send(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n        if (rank == 0) {\n            MPI_Recv(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\nif (rank != 0) {\n    A.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1000182252,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1085427658,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    // Broadcast the pivot row to all processes\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        // Only update rows that this process is responsible for\n        if ((j % size) == rank) {\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    // Gather the updated rows from all processes to rank 0\n    for (size_t j = i + 1; j < N; j++) {\n        if ((j % size) == rank) {\n            MPI_Send(&A[j * N], N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n        if (rank == 0) {\n            MPI_Status status;\n            if ((j % size) != 0) {\n                MPI_Recv(&A[j * N], N, MPI_DOUBLE, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);\n            }\n        }\n    }\n}\n\n// Make sure rank 0 has the complete final matrix\nif (rank != 0) {\n    MPI_Send(&A[0], N * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    MPI_Status status;\n    for (int src = 1; src < size; src++) {\n        MPI_Recv(&A[0], N * N, MPI_DOUBLE, src, 0, MPI_COMM_WORLD, &status);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.09902883,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.3419966146,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if ((j % size) == rank) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    } else {\n        for (int src = 1; src < size; src++) {\n            if ((N % size) > src || N > size) {\n                size_t start = ((i + 1) + src) % size == 0 ? (i + 1) + src : ((i + 1) + size) / size * size + src;\n                MPI_Recv(&A[start * N], N * (N - start), MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    }\n}\n\nif (rank != 0) {\n    A.clear();\n    A.resize(N * N, 0);\n}\nMPI_Bcast(A.data(), N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0995986104,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1076440308,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n    if (rank != 0) {\n        local_start = std::max(local_start, i + 1);\n    }\n\n    for (size_t j = local_start; j < local_end; j++) {\n        for (size_t k = i + 1; k < N; k++) {\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    } else {\n        for (int src = 1; src < size; src++) {\n            int src_local_start = (N / size) * src;\n            int src_local_end = (src == size - 1) ? N : src_local_start + (N / size);\n            MPI_Recv(&A[src_local_start * N], (src_local_end - src_local_start) * N, MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\nif (rank == 0) {\n    // Rank 0 now has the complete LU factorized matrix\n}\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    size_t chunk_size = N / size;\n    size_t start = rank * chunk_size + (rank >= N % size ? N % size : rank);\n    size_t end = start + chunk_size + (rank < N % size);\n\n    for (size_t j = i + 1; j < N; j++) {\n        for (size_t k = start; k < end; k++) {\n            if (k > i) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    for (size_t j = start; j < end; j++) {\n        MPI_Reduce(rank == 0 ? MPI_IN_PLACE : &A[j * N + i + 1], &A[j * N + i + 1], N - i - 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1010200314,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.3692575304,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.27895011076484,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n\n    for (size_t j = local_start; j < local_end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    }\n    if (rank == 0) {\n        for (int src = 1; src < size; src++) {\n            int src_local_start = (N / size) * src;\n            int src_local_end = (src == size - 1) ? N : src_local_start + (N / size);\n            MPI_Recv(&A[src_local_start * N], (src_local_end - src_local_start) * N, MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n\nif (rank != 0) {\n    A.clear();\n    A.resize(N * N, 0.0);\n}\nMPI_Bcast(A.data(), N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1000771964,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1317746452,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 2.10802622673477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    size_t chunk_size = N / size;\n    size_t start = rank * chunk_size + (rank >= N % size ? N % size : rank);\n    size_t end = start + chunk_size + (rank < N % size);\n\n    for (size_t j = i + 1; j < N; j++) {\n        for (size_t k = start; k < end; k++) {\n            if (k > i) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    for (size_t k = start; k < end; k++) {\n        if (k > i) {\n            MPI_Reduce(rank == 0 ? MPI_IN_PLACE : &A[(i + 1) * N + k], &A[(i + 1) * N + k], N - i - 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n        }\n    }\n}\nif (rank != 0) {\n    A.clear();\n}\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0992302096,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.392845063,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n\n    for (size_t j = local_start; j < local_end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    } else {\n        for (int src = 1; src < size; src++) {\n            local_start = (N / size) * src;\n            local_end = (src == size - 1) ? N : local_start + (N / size);\n            MPI_Recv(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\nif (rank == 0) {\n    // Rank 0 now has the complete LU factorized matrix\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0996027378,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.108638341,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1 + rank; j < N; j += size) {\n        for (size_t k = i + 1; k < N; k++) {\n            A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    }\n    if (rank == 0) {\n        for (int src = 1; src < size; src++) {\n            MPI_Recv(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n    MPI_Bcast(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.123378182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1319148544,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    size_t chunk_size = N / size;\n    size_t start = rank * chunk_size + (rank >= N % size ? N % size : rank);\n    size_t end = start + chunk_size + (rank < N % size);\n\n    for (size_t j = start; j < end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n\n    for (size_t j = start; j < end; j++) {\n        MPI_Reduce(rank == 0 ? MPI_IN_PLACE : &A[j * N], &A[j * N], N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1007077034,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1230406534,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.34615429597383,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    } else {\n        for (int src = 1; src < size; src++) {\n            if ((i + 1) % size == src) {\n                MPI_Recv(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    }\n}\n\nif (rank != 0) {\n    A.assign(N * N, 0);\n}\nMPI_Bcast(&A[0], N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.098994124,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1080117008,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n    for (size_t j = local_start; j < local_end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    for (int r = 1; r < size; r++) {\n        if (rank == r) {\n            MPI_Send(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n        if (rank == 0) {\n            MPI_Recv(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n\nif (rank != 0) {\n    A.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1233968442,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1313853212,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    // Broadcast the pivot row to all processes\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) { // Each process works on different rows\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n\n    // Gather the updated rows from all processes to rank 0\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            MPI_Send(&A[j * N], N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n        }\n        if (rank == 0) {\n            MPI_Status status;\n            if (j % size != 0) {\n                MPI_Recv(&A[j * N], N, MPI_DOUBLE, j % size, 0, MPI_COMM_WORLD, &status);\n            }\n        }\n    }\n}\n\n// Synchronize all processes before leaving the function\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0995104444,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 2.1799491092,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.0895401027832,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N + i], N - i, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if ((j % size) == rank) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Gather(&A[(i + 1) * N], N * (N - i - 1) / size, MPI_DOUBLE, NULL, N * (N - i - 1) / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    } else {\n        std::vector<double> temp(N * (N - i - 1));\n        MPI_Gather(MPI_IN_PLACE, N * (N - i - 1) / size, MPI_DOUBLE, temp.data(), N * (N - i - 1) / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n        for (size_t j = 1; j < size; j++) {\n            for (size_t k = i + 1; k < N; k++) {\n                if ((k % size) == j) {\n                    std::copy(temp.begin() + (k - i - 1) * N / size, temp.begin() + (k - i) * N / size, &A[k * N]);\n                }\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0998412206,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.2043699602,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 3.02964466552617,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    int local_start = (N / size) * rank;\n    int local_end = (rank == size - 1) ? N : local_start + (N / size);\n    for (size_t j = local_start; j < local_end; j++) {\n        if (j > i) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] -= A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    for (int r = 0; r < size; r++) {\n        if (rank == r) {\n            MPI_Bcast(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, r, MPI_COMM_WORLD);\n        } else {\n            MPI_Bcast(&A[local_start * N], (local_end - local_start) * N, MPI_DOUBLE, r, MPI_COMM_WORLD);\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n\nif (rank != 0) {\n    MPI_Send(&A[0], N * N, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n} else {\n    for (int i = 1; i < size; i++) {\n        MPI_Recv(&A[0], N * N, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0992935782,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1071076748,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] = A[j * N + i] / A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n    for (size_t j = i + 1; j < N; j++) {\n        if (j % size == rank) {\n            for (size_t k = i + 1; k < N; k++) {\n                A[j * N + k] = A[j * N + k] - A[j * N + i] * A[i * N + k];\n            }\n        }\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n    if (rank != 0) {\n        MPI_Send(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    } else {\n        for (int src = 1; src < size; src++) {\n            if ((i + 1) < N) {\n                MPI_Recv(&A[(i + 1) * N], N * (N - i - 1), MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n            }\n        }\n    }\n}\n\nif (rank != 0) {\n    A.clear();\n    A.resize(N * N, 0);\n}\nMPI_Bcast(&A[0], N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.099324144,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1074209026,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nfor (size_t i = 0; i < N; i++) {\n    if (rank == 0) {\n        for (size_t j = i + 1; j < N; j++) {\n            A[j * N + i] /= A[i * N + i];\n        }\n    }\n    MPI_Bcast(&A[i * N], N, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n    MPI_Barrier(MPI_COMM_WORLD);\n\n    size_t chunk_size = (N - (i + 1) + size - 1) / size;\n    size_t start = (i + 1) + rank * chunk_size;\n    size_t end = std::min(start + chunk_size, N);\n\n    for (size_t j = start; j < end; j++) {\n        for (size_t k = i + 1; k < N; k++) {\n            A[j * N + k] -= A[j * N + i] * A[i * N + k];\n        }\n    }\n\n    for (size_t j = start; j < end; j++) {\n        MPI_Reduce(rank == 0 ? MPI_IN_PLACE : &A[j * N], &A[j * N], N, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n    }\n    MPI_Barrier(MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1232075284,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1144591908,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "42_sort_sorted_ranks",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* For each value in the vector x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every process has a complete copy of x. Store the result in ranks on process 0.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {",
        "translation_prompt": "// Serial implementation of ranks\n// /* For each value in the vector x compute its index in the sorted vector.\n//    Store the results in `ranks`.\n//    Examples:\n// \n//    input: [3.1, 2.8, 9.1, 0.4, 3.14]\n//    output: [2, 1, 4, 0, 3]\n//  \n//    input: [100, 7.6, 16.1, 18, 7.6]\n//    output: [4, 0, 1, 2, 3]\n// */\n// void ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {\n// std::vector<float> sorted = x;\n//     std::sort(sorted.begin(), sorted.end());\n//     ranks.resize(x.size());\n//     for (size_t i = 0; i < x.size(); ++i) {\n//         ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n//     }\n// }\n\n// MPI implementation of ranks\n#include <mpi.h>\n\n/* For each value in the vector x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every process has a complete copy of x. Store the result in ranks on process 0.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* For each value in the vector x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(std::vector<float> const& x, std::vector<size_t> &ranks) {\nstd::vector<float> sorted = x;\n    std::sort(sorted.begin(), sorted.end());\n    ranks.resize(x.size());\n    for (size_t i = 0; i < x.size(); ++i) {\n        ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n}",
        "translation_function_name": "ranks",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Each process will compute a part of the ranks\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nstd::vector<size_t> local_ranks(chunk_size);\n\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the computed ranks at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gather(local_ranks.data(), chunk_size, MPI_UNSIGNED_LONG, ranks.data(), chunk_size, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n// If the number of processes does not evenly divide the number of elements,\n// the last process computes the remaining elements\nif (rank == 0 && x.size() % size != 0) {\n    for (size_t i = size * chunk_size; i < x.size(); ++i) {\n        ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.012672798,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0280399628,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01124473708359,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::vector<size_t> local_ranks(x.size());\n\n// Sort the vector on all processes\nstd::sort(sorted.begin(), sorted.end());\n\n// Divide the work among processes\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : start + chunk_size;\n\n// Calculate local ranks\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nstd::vector<size_t> recv_counts(size);\nstd::vector<size_t> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recv_counts[i] = (i == size - 1) ? x.size() - i * chunk_size : chunk_size;\n    displs[i] = i * chunk_size;\n}\n\n// Only process 0 needs the memory for the final ranks\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gatherv(local_ranks.data() + start, recv_counts[rank], MPI_UNSIGNED_LONG,\n            ranks.data(), recv_counts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Each process computes a portion of the ranks\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nstd::vector<size_t> local_ranks(chunk_size);\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_ranks[i - start_index] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the computed ranks at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * chunk_size : chunk_size;\n    displs[i] = i * chunk_size;\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0128507162,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0282303014,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01934220630898,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Determine the number of elements each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Local ranks computation\nstd::vector<size_t> local_ranks(local_n);\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the local ranks at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate receive counts and displacements for Gatherv\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * local_n : local_n;\n    displs[i] = i * local_n;\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0127389678,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0281472888,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01750003153828,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Determine the portion of the array each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Local ranks computation\nstd::vector<size_t> local_ranks(local_n);\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the local ranks at the root process\nstd::vector<size_t> gathered_ranks;\nif (rank == 0) {\n    gathered_ranks.resize(x.size());\n}\n\nMPI_Gather(local_ranks.data(), local_n, MPI_UNSIGNED_LONG, gathered_ranks.data(), local_n, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n// If not the last process, send the remaining elements\nif (rank == size - 1) {\n    size_t remaining = x.size() % size;\n    std::vector<size_t> last_ranks(remaining);\n    for (size_t i = end; i < x.size(); ++i) {\n        last_ranks[i - end] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n    MPI_Send(last_ranks.data(), remaining, MPI_UNSIGNED_LONG, 0, 0, MPI_COMM_WORLD);\n}\n\n// If root process, receive the remaining elements\nif (rank == 0) {\n    size_t remaining = x.size() % size;\n    if (remaining > 0) {\n        MPI_Recv(gathered_ranks.data() + (size - 1) * local_n, remaining, MPI_UNSIGNED_LONG, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n    ranks = std::move(gathered_ranks);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0126352988,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0277624186,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01801067412305,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Each process computes a portion of the ranks\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\nstd::vector<size_t> local_ranks(chunk_size);\n\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nstd::vector<size_t> recv_counts(size);\nstd::vector<size_t> displs(size);\n\n// Calculate receive counts and displacements for gathering the ranks\nfor (int i = 0; i < size; ++i) {\n    recv_counts[i] = (i == size - 1) ? x.size() - i * chunk_size : chunk_size;\n    displs[i] = i * chunk_size;\n}\n\n// Resize ranks vector on root process to receive the gathered results\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recv_counts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Divide the work among processes\nsize_t local_size = x.size() / size;\nsize_t start_index = rank * local_size;\nsize_t end_index = (rank == size - 1) ? x.size() : (rank + 1) * local_size;\n\n// Compute local ranks\nstd::vector<size_t> local_ranks(local_size);\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_ranks[i - start_index] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nstd::vector<size_t> recvcounts(size);\nstd::vector<size_t> displs(size);\n\n// Calculate receive counts and displacements for each process\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * local_size : local_size;\n    displs[i] = i * local_size;\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Determine the portion of the array each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Local ranks computation\nstd::vector<size_t> local_ranks(local_n);\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nstd::vector<size_t> recvcounts(size);\nstd::vector<size_t> displs(size);\n\n// Calculate receive counts and displacements for gathering the ranks\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * local_n : local_n;\n    displs[i] = i * local_n;\n}\n\n// Resize ranks vector on the root process to receive the gathered data\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gatherv(local_ranks.data(), local_n, MPI_UNSIGNED_LONG, ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\nint local_size = x.size() / size;\nint start = rank * local_size;\nint end = (rank == size - 1) ? x.size() : (rank + 1) * local_size;\n\nstd::vector<size_t> local_ranks(local_size);\n\nfor (int i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gather(local_ranks.data(), local_size, MPI_UNSIGNED_LONG, ranks.data(), local_size, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n// Handle the remaining elements if the vector size is not perfectly divisible by the number of processes\nif (rank == 0 && x.size() % size != 0) {\n    for (int i = size * local_size; i < x.size(); ++i) {\n        ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0126998924,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0281906544,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0109913394082,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Calculate the number of elements each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\nstd::vector<size_t> local_ranks(local_n);\n\n// Each process computes its part of the ranks\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * local_n : local_n;\n    displs[i] = i * local_n;\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0127035456,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0282868494,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.017546724225,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Calculate the number of elements each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Each process calculates its part of the ranks\nstd::vector<size_t> local_ranks(local_n);\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * local_n : local_n;\n    displs[i] = i * local_n;\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG, ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.012671068,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0282157934,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02092047506836,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::vector<size_t> local_ranks(x.size());\n\n// Sort the vector in all processes\nstd::sort(sorted.begin(), sorted.end());\n\n// Divide the work among processes\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : start + chunk_size;\n\n// Compute local ranks\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nstd::vector<size_t> gathered_ranks;\nif (rank == 0) {\n    gathered_ranks.resize(x.size() * size);\n}\n\nMPI_Gather(local_ranks.data() + start, chunk_size, MPI_UNSIGNED_LONG,\n           gathered_ranks.data(), chunk_size, MPI_UNSIGNED_LONG,\n           0, MPI_COMM_WORLD);\n\n// Process 0 combines the results\nif (rank == 0) {\n    ranks.resize(x.size());\n    for (int i = 0; i < size; ++i) {\n        size_t offset = i * chunk_size;\n        size_t limit = (i == size - 1) ? x.size() : offset + chunk_size;\n        for (size_t j = offset; j < limit; ++j) {\n            ranks[j] = gathered_ranks[j];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0126867156,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0285229014,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01176945860742,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\nsize_t local_size = x.size() / size;\nsize_t start = rank * local_size;\nsize_t end = (rank == size - 1) ? x.size() : start + local_size;\n\nstd::vector<size_t> local_ranks(local_size);\n\n// Each process computes its part of the ranks\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gather(local_ranks.data(), local_size, MPI_UNSIGNED_LONG, ranks.data(), local_size, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// the last process computes the remainder\nif (rank == size - 1 && x.size() % size != 0) {\n    size_t remainder = x.size() % size;\n    std::vector<size_t> remainder_ranks(remainder);\n    for (size_t i = end; i < x.size(); ++i) {\n        remainder_ranks[i - end] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n    MPI_Send(remainder_ranks.data(), remainder, MPI_UNSIGNED_LONG, 0, 0, MPI_COMM_WORLD);\n}\n\n// Root process receives the remainder if necessary\nif (rank == 0 && x.size() % size != 0) {\n    size_t remainder = x.size() % size;\n    MPI_Recv(ranks.data() + size * local_size, remainder, MPI_UNSIGNED_LONG, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0129672736,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.028338068,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.018561533275,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\nint local_size = x.size() / size;\nint remainder = x.size() % size;\nint start = rank * local_size + std::min(rank, remainder);\nint end = start + local_size + (rank < remainder ? 1 : 0);\n\nstd::vector<size_t> local_ranks(end - start);\n\nfor (int i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nstd::vector<int> recvcounts(size, local_size);\nstd::vector<int> displs(size, 0);\n\nfor (int i = 0; i < remainder; ++i) {\n    recvcounts[i]++;\n}\n\nfor (int i = 1; i < size; ++i) {\n    displs[i] = displs[i - 1] + recvcounts[i - 1];\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0125248212,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0281209254,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01205778311719,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted array to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Calculate the number of elements each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Each process computes its local ranks\nstd::vector<size_t> local_ranks(local_n);\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the local ranks at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gather(local_ranks.data(), local_n, MPI_UNSIGNED_LONG, ranks.data(), local_n, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n// If the number of elements is not evenly divisible by the number of processes,\n// the last process handles the remainder. The root process needs to receive these as well.\nif (rank == 0 && x.size() % size != 0) {\n    size_t remainder_start = size * local_n;\n    size_t remainder = x.size() % size;\n    std::vector<size_t> remainder_ranks(remainder);\n    MPI_Recv(remainder_ranks.data(), remainder, MPI_UNSIGNED_LONG, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    std::copy(remainder_ranks.begin(), remainder_ranks.end(), ranks.begin() + remainder_start);\n}\n\n// If this is the last process and there is a remainder, send the computed ranks to the root process\nif (rank == size - 1 && x.size() % size != 0) {\n    size_t remainder_start = size * local_n;\n    size_t remainder = x.size() % size;\n    std::vector<size_t> remainder_ranks(remainder);\n    for (size_t i = remainder_start; i < x.size(); ++i) {\n        remainder_ranks[i - remainder_start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n    MPI_Send(remainder_ranks.data(), remainder, MPI_UNSIGNED_LONG, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.012905355,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0278626572,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01439025986133,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Calculate the number of elements each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Local ranks computation\nstd::vector<size_t> local_ranks(local_n);\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the computed local ranks at the root process\nstd::vector<size_t> recvcounts(size);\nstd::vector<size_t> displs(size);\n\n// Calculate receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * local_n : local_n;\n    displs[i] = i * local_n;\n}\n\n// Only process 0 will have the correct 'ranks' vector after the gather\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Determine the portion of the array each process will handle\nsize_t local_n = x.size() / size;\nsize_t start = rank * local_n;\nsize_t end = (rank == size - 1) ? x.size() : start + local_n;\n\n// Each process computes its local ranks\nstd::vector<size_t> local_ranks(local_n);\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the local ranks at the root process\nstd::vector<size_t> recvcounts(size);\nstd::vector<size_t> displs(size);\n\n// Calculate receive counts and displacements for gathering the ranks\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * local_n : local_n;\n    displs[i] = i * local_n;\n}\n\n// Resize ranks on the root process to receive the gathered data\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Each process computes a portion of the ranks\nsize_t chunk_size = x.size() / size;\nsize_t start_index = rank * chunk_size;\nsize_t end_index = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nstd::vector<size_t> local_ranks(chunk_size);\n\nfor (size_t i = start_index; i < end_index; ++i) {\n    local_ranks[i - start_index] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? x.size() - i * chunk_size : chunk_size;\n    displs[i] = i * chunk_size;\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recvcounts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0127259594,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0283334392,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01970923594687,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Each process calculates a portion of the ranks\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\nstd::vector<size_t> local_ranks(chunk_size);\n\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nstd::vector<size_t> recv_counts(size);\nstd::vector<size_t> displs(size);\n\nif (rank == 0) {\n    ranks.resize(x.size());\n    for (int i = 0; i < size; ++i) {\n        recv_counts[i] = (i == size - 1) ? x.size() - i * chunk_size : chunk_size;\n        displs[i] = i * chunk_size;\n    }\n}\n\nMPI_Gatherv(local_ranks.data(), local_ranks.size(), MPI_UNSIGNED_LONG,\n            ranks.data(), recv_counts.data(), displs.data(), MPI_UNSIGNED_LONG,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<float> sorted = x;\nstd::sort(sorted.begin(), sorted.end());\n\n// Broadcast the sorted vector to all processes\nMPI_Bcast(sorted.data(), sorted.size(), MPI_FLOAT, 0, MPI_COMM_WORLD);\n\n// Each process computes a portion of the ranks\nsize_t chunk_size = x.size() / size;\nsize_t start = rank * chunk_size;\nsize_t end = (rank == size - 1) ? x.size() : (rank + 1) * chunk_size;\n\nstd::vector<size_t> local_ranks(chunk_size);\n\nfor (size_t i = start; i < end; ++i) {\n    local_ranks[i - start] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    ranks.resize(x.size());\n}\n\nMPI_Gather(local_ranks.data(), chunk_size, MPI_UNSIGNED_LONG, ranks.data(), chunk_size, MPI_UNSIGNED_LONG, 0, MPI_COMM_WORLD);\n\n// If the last chunk was not the same size as the others, process 0 needs to compute the remaining part\nif (rank == 0 && x.size() % size != 0) {\n    for (size_t i = size * chunk_size; i < x.size(); ++i) {\n        ranks[i] = std::distance(sorted.begin(), std::lower_bound(sorted.begin(), sorted.end(), x[i]));\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0126695234,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0281180136,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01650609746289,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "44_sort_sort_non-zero_elements",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Sort the vector x in ascending order ignoring elements with value 0.\n   Leave zero valued elements in-place. \n\t Use MPI to sort x in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Store the result in x on rank 0.\n   Example:\n\n   input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n   output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n*/\nvoid sortIgnoreZero(std::vector<int> &x) {",
        "translation_prompt": "// Serial implementation of sortIgnoreZero\n// /* Sort the vector x in ascending order ignoring elements with value 0.\n//    Leave zero valued elements in-place.\n//    Example:\n// \n// \t input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n//    output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n// */\n// void sortIgnoreZero(std::vector<int> &x) {\n// int n = x.size();\n//   int i = 0;\n//   int j = 0;\n//   int k = 0;\n// \n//   while (i < n) {\n//     if (x[i] == 0) {\n//       i++;\n//     } else {\n//       j = i + 1;\n//       while (j < n) {\n//         if (x[j] == 0) {\n//           j++;\n//         } else {\n//           if (x[i] > x[j]) {\n//             k = x[i];\n//             x[i] = x[j];\n//             x[j] = k;\n//           }\n//           j++;\n//         }\n//       }\n//       i++;\n//     }\n//   }\n// }\n\n// MPI implementation of sortIgnoreZero\n#include <mpi.h>\n\n/* Sort the vector x in ascending order ignoring elements with value 0.\n   Leave zero valued elements in-place. \n\t Use MPI to sort x in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of x. Store the result in x on rank 0.\n   Example:\n\n   input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n   output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n*/\nvoid sortIgnoreZero(std::vector<int> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Sort the vector x in ascending order ignoring elements with value 0.\n   Leave zero valued elements in-place.\n   Example:\n\n\t input: [8, 4, 0, 9, 8, 0, 1, -1, 7]\n   output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]\n*/\nvoid sortIgnoreZero(std::vector<int> &x) {\nint n = x.size();\n  int i = 0;\n  int j = 0;\n  int k = 0;\n\n  while (i < n) {\n    if (x[i] == 0) {\n      i++;\n    } else {\n      j = i + 1;\n      while (j < n) {\n        if (x[j] == 0) {\n          j++;\n        } else {\n          if (x[i] > x[j]) {\n            k = x[i];\n            x[i] = x[j];\n            x[j] = k;\n          }\n          j++;\n        }\n      }\n      i++;\n    }\n  }\n}",
        "translation_function_name": "sortIgnoreZero",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather the counts of non-zero elements from each process\nint localCount = nonZeroElements.size();\nMPI_Gather(&localCount, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the non-zero elements\nint totalNonZero = 0;\nif (rank == 0) {\n    displs[0] = 0;\n    for (int i = 1; i < size; ++i) {\n        displs[i] = displs[i - 1] + recvCounts[i - 1];\n    }\n    totalNonZero = displs[size - 1] + recvCounts[size - 1];\n}\n\n// Gather all non-zero elements to rank 0\nstd::vector<int> gatheredNonZeroElements(totalNonZero);\nMPI_Gatherv(nonZeroElements.data(), localCount, MPI_INT,\n            gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Rank 0 sorts the non-zero elements\nif (rank == 0) {\n    std::sort(gatheredNonZeroElements.begin(), gatheredNonZeroElements.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localCount, MPI_INT,\n             0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nint nonZeroIndex = 0;\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElements[nonZeroIndex++];\n    }\n}\n\n// Synchronize all processes before returning\nMPI_Barrier(MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018361472,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018553048,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.79636146321406,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsAll;\n\n// Gather non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather all non-zero elements at rank 0\nint localCount = nonZeroElements.size();\nstd::vector<int> recvCounts(size);\nMPI_Gather(&localCount, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint totalNonZero = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZero;\n        totalNonZero += recvCounts[i];\n    }\n    nonZeroElementsAll.resize(totalNonZero);\n}\n\nMPI_Gatherv(nonZeroElements.data(), localCount, MPI_INT,\n            nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Rank 0 sorts the non-zero elements\nif (rank == 0) {\n    std::sort(nonZeroElementsAll.begin(), nonZeroElementsAll.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localCount, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nauto it = nonZeroElements.begin();\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = *it;\n        ++it;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0017928696,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019130696,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.77333254193477,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsSorted;\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort the non-zero elements locally\nstd::sort(nonZeroElements.begin(), nonZeroElements.end());\n\n// Gather the sizes of the sorted non-zero elements from all processes\nint localSize = nonZeroElements.size();\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the sorted non-zero elements\nif (rank == 0) {\n    displs[0] = 0;\n    for (int i = 1; i < size; ++i) {\n        displs[i] = displs[i - 1] + recvCounts[i - 1];\n    }\n    nonZeroElementsSorted.resize(displs[size - 1] + recvCounts[size - 1]);\n}\n\n// Gather the sorted non-zero elements at rank 0\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            nonZeroElementsSorted.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements at rank 0\nif (rank == 0) {\n    int currentIndex = 0;\n    for (int i = 0; i < n; ++i) {\n        if (x[i] != 0) {\n            x[i] = nonZeroElementsSorted[currentIndex++];\n        }\n    }\n}\n\n// Broadcast the sorted array to all processes\nMPI_Bcast(x.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.001834596,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018571206,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03101496898281,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsAll;\n\n// Collect non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather all non-zero elements at root\nint localSize = nonZeroElements.size();\nstd::vector<int> recvCounts(size);\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint totalNonZero = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZero;\n        totalNonZero += recvCounts[i];\n    }\n    nonZeroElementsAll.resize(totalNonZero);\n}\n\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Sort all non-zero elements at root\nif (rank == 0) {\n    std::sort(nonZeroElementsAll.begin(), nonZeroElementsAll.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localSize, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nint sortedIndex = 0;\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElements[sortedIndex++];\n    }\n}\n\n// Synchronize the sorted vector across all ranks\nMPI_Bcast(x.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0017928076,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018554116,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.78738190088555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsSorted;\n\n// Extract non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort non-zero elements in parallel\nif (rank == 0) {\n    // Calculate the number of elements each process will sort\n    int elementsPerProc = nonZeroElements.size() / size;\n    int remainingElements = nonZeroElements.size() % size;\n    std::vector<int> sendCounts(size);\n    std::vector<int> displs(size);\n\n    int currentDispl = 0;\n    for (int i = 0; i < size; ++i) {\n        sendCounts[i] = elementsPerProc + (i < remainingElements ? 1 : 0);\n        displs[i] = currentDispl;\n        currentDispl += sendCounts[i];\n    }\n\n    nonZeroElementsSorted.resize(nonZeroElements.size());\n\n    // Scatter the non-zero elements to all processes\n    std::vector<int> localElements(sendCounts[rank]);\n    MPI_Scatterv(nonZeroElements.data(), sendCounts.data(), displs.data(), MPI_INT,\n                 localElements.data(), sendCounts[rank], MPI_INT, 0, MPI_COMM_WORLD);\n\n    // Each process sorts its chunk of data\n    std::sort(localElements.begin(), localElements.end());\n\n    // Gather the sorted chunks back at the root\n    MPI_Gatherv(localElements.data(), sendCounts[rank], MPI_INT,\n                nonZeroElementsSorted.data(), sendCounts.data(), displs.data(), MPI_INT,\n                0, MPI_COMM_WORLD);\n} else {\n    // Receive the count of elements to sort\n    int localCount;\n    MPI_Scatter(NULL, 0, MPI_INT, &localCount, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // Receive the elements to sort\n    std::vector<int> localElements(localCount);\n    MPI_Scatterv(NULL, NULL, NULL, MPI_INT, localElements.data(), localCount, MPI_INT, 0, MPI_COMM_WORLD);\n\n    // Sort the local elements\n    std::sort(localElements.begin(), localElements.end());\n\n    // Send the sorted data back to the root\n    MPI_Gatherv(localElements.data(), localCount, MPI_INT, NULL, NULL, NULL, MPI_INT, 0, MPI_COMM_WORLD);\n}\n\n// Merge the sorted non-zero elements back into the original vector on rank 0\nif (rank == 0) {\n    int sortedIndex = 0;\n    for (int i = 0; i < n; ++i) {\n        if (x[i] != 0) {\n            x[i] = nonZeroElementsSorted[sortedIndex++];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018368884,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019495062,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsSorted;\n\n// Collect non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort non-zero elements in parallel\nstd::sort(nonZeroElements.begin(), nonZeroElements.end());\n\n// Gather sorted non-zero elements at rank 0\nif (rank == 0) {\n    nonZeroElementsSorted.resize(nonZeroElements.size() * size);\n}\nMPI_Gather(nonZeroElements.data(), nonZeroElements.size(), MPI_INT, \n           nonZeroElementsSorted.data(), nonZeroElements.size(), MPI_INT, \n           0, MPI_COMM_WORLD);\n\n// Merge sorted non-zero elements at rank 0\nif (rank == 0) {\n    std::vector<int> merged;\n    std::vector<int> indices(size, 0);\n    while (merged.size() < nonZeroElementsSorted.size()) {\n        int minVal = INT_MAX;\n        int minIdx = -1;\n        for (int i = 0; i < size; ++i) {\n            if (indices[i] < nonZeroElements.size() && \n                nonZeroElementsSorted[i * nonZeroElements.size() + indices[i]] < minVal) {\n                minVal = nonZeroElementsSorted[i * nonZeroElements.size() + indices[i]];\n                minIdx = i;\n            }\n        }\n        if (minIdx != -1) {\n            merged.push_back(minVal);\n            indices[minIdx]++;\n        }\n    }\n\n    // Place sorted non-zero elements back into x, preserving zeros\n    int nonZeroIndex = 0;\n    for (int i = 0; i < n; ++i) {\n        if (x[i] != 0) {\n            x[i] = merged[nonZeroIndex++];\n        }\n    }\n}\n\n// Broadcast the sorted array from rank 0 to all other ranks\nMPI_Bcast(x.data(), x.size(), MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018329292,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019691852,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 7.48428754909687,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroSorted;\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort the non-zero elements locally\nstd::sort(nonZeroElements.begin(), nonZeroElements.end());\n\n// Gather the sizes of the sorted non-zero elements from all processes\nint localSize = nonZeroElements.size();\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the sorted non-zero elements\nint totalNonZero = 0;\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZero;\n        totalNonZero += recvCounts[i];\n    }\n    nonZeroSorted.resize(totalNonZero);\n}\n\n// Gather the sorted non-zero elements at rank 0\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            nonZeroSorted.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Rank 0 merges the sorted non-zero elements back into the original vector\nif (rank == 0) {\n    int currentIndex = 0;\n    for (int i = 0; i < n; ++i) {\n        if (x[i] != 0) {\n            x[i] = nonZeroSorted[currentIndex++];\n        }\n    }\n}\n\n// Broadcast the sorted vector from rank 0 to all other ranks\nMPI_Bcast(x.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0018384356,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001861627,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02947398813711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsAll;\n\n// Collect all non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather all non-zero elements at root\nint localSize = nonZeroElements.size();\nstd::vector<int> recvCounts(size);\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint totalNonZero = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZero;\n        totalNonZero += recvCounts[i];\n    }\n    nonZeroElementsAll.resize(totalNonZero);\n}\n\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT, nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Sort all non-zero elements at root\nif (rank == 0) {\n    std::sort(nonZeroElementsAll.begin(), nonZeroElementsAll.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT, nonZeroElements.data(), localSize, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into x\nint sortedIndex = 0;\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElements[sortedIndex++];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001784047,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001904668,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.7848041435332,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Extract non-zero elements and sort them separately\nstd::vector<int> nonZeroElements;\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort non-zero elements using MPI\nstd::vector<int> localNonZero(nonZeroElements.size() / size);\nMPI_Scatter(nonZeroElements.data(), localNonZero.size(), MPI_INT, \n            localNonZero.data(), localNonZero.size(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Sort local portion\nstd::sort(localNonZero.begin(), localNonZero.end());\n\n// Gather the sorted subarrays at root\nstd::vector<int> gatheredNonZero;\nif (rank == 0) {\n    gatheredNonZero.resize(nonZeroElements.size());\n}\nMPI_Gather(localNonZero.data(), localNonZero.size(), MPI_INT,\n           gatheredNonZero.data(), localNonZero.size(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Merge the sorted subarrays at root\nif (rank == 0) {\n    std::vector<int> sortedNonZero = gatheredNonZero;\n    std::sort(sortedNonZero.begin(), sortedNonZero.end());\n\n    // Merge the sorted non-zero elements back into the original vector\n    int nonZeroIndex = 0;\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] != 0) {\n            x[i] = sortedNonZero[nonZeroIndex++];\n        }\n    }\n}\n\n// Broadcast the sorted array to all processes\nMPI_Bcast(x.data(), x.size(), MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018320774,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0021213258,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.01467741866758,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsAll;\n\n// Collect non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather all non-zero elements at root\nint localSize = nonZeroElements.size();\nstd::vector<int> recvCounts(size);\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint totalNonZeroElements = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZeroElements;\n        totalNonZeroElements += recvCounts[i];\n    }\n    nonZeroElementsAll.resize(totalNonZeroElements);\n}\n\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Sort non-zero elements at root\nif (rank == 0) {\n    std::sort(nonZeroElementsAll.begin(), nonZeroElementsAll.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localSize, MPI_INT,\n             0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nauto it = nonZeroElements.begin();\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = *it;\n        ++it;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001788844,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018990814,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.77270284157383,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\n// Each process will gather non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather the counts of non-zero elements from all processes\nint localCount = nonZeroElements.size();\nMPI_Gather(&localCount, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the non-zero elements\nint totalNonZero = 0;\nif (rank == 0) {\n    displs[0] = 0;\n    for (int i = 1; i < size; ++i) {\n        displs[i] = displs[i - 1] + recvCounts[i - 1];\n    }\n    totalNonZero = displs[size - 1] + recvCounts[size - 1];\n}\n\n// Gather all non-zero elements to rank 0\nstd::vector<int> gatheredNonZeroElements(totalNonZero);\nMPI_Gatherv(nonZeroElements.data(), localCount, MPI_INT,\n            gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Rank 0 sorts the non-zero elements\nif (rank == 0) {\n    std::sort(gatheredNonZeroElements.begin(), gatheredNonZeroElements.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localCount, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nauto itNonZero = nonZeroElements.begin();\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = *itNonZero;\n        ++itNonZero;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001797326,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018521274,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.77962501827773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsAll;\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather the sizes of non-zero element arrays from all processes\nstd::vector<int> counts(size);\nint localSize = nonZeroElements.size();\nMPI_Gather(&localSize, 1, MPI_INT, counts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the non-zero elements\nstd::vector<int> displs(size, 0);\nstd::partial_sum(counts.begin(), counts.end() - 1, displs.begin() + 1);\n\n// Allocate space to receive all non-zero elements on rank 0\nif (rank == 0) {\n    nonZeroElementsAll.resize(std::accumulate(counts.begin(), counts.end(), 0));\n}\n\n// Gather all non-zero elements to rank 0\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            nonZeroElementsAll.data(), counts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Rank 0 sorts the non-zero elements\nif (rank == 0) {\n    std::sort(nonZeroElementsAll.begin(), nonZeroElementsAll.end());\n}\n\n// Broadcast the sorted non-zero elements to all processes\nMPI_Bcast(nonZeroElementsAll.data(), nonZeroElementsAll.size(), MPI_INT, 0, MPI_COMM_WORLD);\n\n// Each process inserts the sorted non-zero elements back into x\nint sortedIndex = 0;\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElementsAll[sortedIndex++];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018310654,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0018606312,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsAll;\n\n// Extract non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather all non-zero elements at root\nint localSize = nonZeroElements.size();\nstd::vector<int> recvCounts(size);\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint totalNonZeroElements = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZeroElements;\n        totalNonZeroElements += recvCounts[i];\n    }\n    nonZeroElementsAll.resize(totalNonZeroElements);\n}\n\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Sort non-zero elements at root\nif (rank == 0) {\n    std::sort(nonZeroElementsAll.begin(), nonZeroElementsAll.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(nonZeroElementsAll.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localSize, MPI_INT,\n             0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nint sortedIndex = 0;\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElements[sortedIndex++];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0017919434,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00190259,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.77991066185508,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Extract non-zero elements and sort them separately\nstd::vector<int> nonZeroElements;\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather all non-zero elements at root\nstd::vector<int> gatheredElements;\nint localCount = nonZeroElements.size();\nstd::vector<int> recvCounts(size);\nMPI_Gather(&localCount, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint totalNonZero = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZero;\n        totalNonZero += recvCounts[i];\n    }\n    gatheredElements.resize(totalNonZero);\n}\n\nMPI_Gatherv(nonZeroElements.data(), localCount, MPI_INT,\n            gatheredElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Only rank 0 sorts the gathered elements\nif (rank == 0) {\n    std::sort(gatheredElements.begin(), gatheredElements.end());\n}\n\n// Scatter the sorted elements back to all processes\nMPI_Scatterv(gatheredElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localCount, MPI_INT,\n             0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nint nonZeroIndex = 0;\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElements[nonZeroIndex++];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018363454,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019142078,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.78901836795469,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroElementsAll;\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort the non-zero elements locally\nstd::sort(nonZeroElements.begin(), nonZeroElements.end());\n\n// Gather the counts of non-zero elements from each process\nstd::vector<int> counts(size);\nint localCount = nonZeroElements.size();\nMPI_Gather(&localCount, 1, MPI_INT, counts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for the gathered non-zero elements\nstd::vector<int> displs(size);\nint totalNonZeroElements = 0;\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZeroElements;\n        totalNonZeroElements += counts[i];\n    }\n    nonZeroElementsAll.resize(totalNonZeroElements);\n}\n\n// Gather all non-zero elements to rank 0\nMPI_Gatherv(nonZeroElements.data(), localCount, MPI_INT,\n            nonZeroElementsAll.data(), counts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Rank 0 merges the sorted non-zero elements\nif (rank == 0) {\n    std::vector<int> mergedNonZeroElements;\n    std::merge(nonZeroElementsAll.begin(), nonZeroElementsAll.end(),\n               nonZeroElements.begin(), nonZeroElements.end(),\n               std::back_inserter(mergedNonZeroElements));\n\n    // Insert the sorted non-zero elements back into the original vector\n    for (int i = 0, j = 0; i < n; ++i) {\n        if (x[i] != 0) {\n            x[i] = mergedNonZeroElements[j++];\n        }\n    }\n}\n\n// Broadcast the sorted vector from rank 0 to all other ranks\nMPI_Bcast(x.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018048482,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0019375336,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> nonZeroSorted;\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort the non-zero elements locally\nstd::sort(nonZeroElements.begin(), nonZeroElements.end());\n\n// Gather the sizes of non-zero elements from each process\nint localSize = nonZeroElements.size();\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the sorted non-zero elements\nif (rank == 0) {\n    displs[0] = 0;\n    for (int i = 1; i < size; ++i) {\n        displs[i] = displs[i - 1] + recvCounts[i - 1];\n    }\n    nonZeroSorted.resize(displs[size - 1] + recvCounts[size - 1]);\n}\n\n// Gather the sorted non-zero elements at rank 0\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            nonZeroSorted.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements at rank 0\nif (rank == 0) {\n    int *mergedArray = new int[n];\n    int currentIndex = 0;\n    for (int i = 0; i < n; ++i) {\n        if (x[i] == 0) {\n            mergedArray[i] = 0;\n        } else {\n            mergedArray[i] = nonZeroSorted[currentIndex++];\n        }\n    }\n    // Copy the merged array back to x\n    for (int i = 0; i < n; ++i) {\n        x[i] = mergedArray[i];\n    }\n    delete[] mergedArray;\n}\n\n// Broadcast the sorted array to all processes\nMPI_Bcast(x.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0017994558,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0019527246,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.03639540660742,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather the sizes of non-zero elements from all processes\nint localSize = nonZeroElements.size();\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the non-zero elements\nint sum = 0;\nfor (int i = 0; i < size; ++i) {\n    displs[i] = sum;\n    sum += recvCounts[i];\n}\n\n// Gather all non-zero elements to rank 0\nstd::vector<int> gatheredNonZeroElements(sum);\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Rank 0 sorts the non-zero elements\nif (rank == 0) {\n    std::sort(gatheredNonZeroElements.begin(), gatheredNonZeroElements.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localSize, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nint nonZeroIndex = 0;\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElements[nonZeroIndex++];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0018107774,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001836129,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.78112761738203,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Extract non-zero elements and sort them separately\nstd::vector<int> non_zero_elements;\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] != 0) {\n        non_zero_elements.push_back(x[i]);\n    }\n}\n\n// Sort non-zero elements locally\nstd::sort(non_zero_elements.begin(), non_zero_elements.end());\n\n// Gather sorted non-zero elements at root\nstd::vector<int> gathered_elements;\nint local_count = non_zero_elements.size();\nstd::vector<int> recv_counts(size);\nMPI_Gather(&local_count, 1, MPI_INT, recv_counts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint total_count = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = total_count;\n        total_count += recv_counts[i];\n    }\n    gathered_elements.resize(total_count);\n}\n\nMPI_Gatherv(non_zero_elements.data(), local_count, MPI_INT,\n            gathered_elements.data(), recv_counts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Merge sorted non-zero elements at root\nif (rank == 0) {\n    std::vector<int> merged_elements;\n    std::merge(gathered_elements.begin(), gathered_elements.end(),\n               non_zero_elements.begin(), non_zero_elements.end(),\n               std::back_inserter(merged_elements));\n\n    // Insert sorted non-zero elements back into x\n    auto merge_iter = merged_elements.begin();\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] != 0) {\n            x[i] = *merge_iter;\n            ++merge_iter;\n        }\n    }\n}\n\n// Broadcast the sorted array to all processes\nMPI_Bcast(x.data(), x.size(), MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001832348,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0020069204,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Extract non-zero elements and sort them separately\nstd::vector<int> nonZeroElements;\nfor (int i = 0; i < x.size(); ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Sort non-zero elements locally\nstd::sort(nonZeroElements.begin(), nonZeroElements.end());\n\n// Gather sorted non-zero elements at rank 0\nstd::vector<int> gatheredElements;\nint localSize = nonZeroElements.size();\nstd::vector<int> recvCounts(size);\nMPI_Gather(&localSize, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nint totalNonZeroElements = 0;\nstd::vector<int> displs(size);\nif (rank == 0) {\n    for (int i = 0; i < size; ++i) {\n        displs[i] = totalNonZeroElements;\n        totalNonZeroElements += recvCounts[i];\n    }\n    gatheredElements.resize(totalNonZeroElements);\n}\n\nMPI_Gatherv(nonZeroElements.data(), localSize, MPI_INT,\n            gatheredElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Merge sorted non-zero elements at rank 0\nif (rank == 0) {\n    std::vector<int> sortedNonZeroElements;\n    sortedNonZeroElements.reserve(totalNonZeroElements);\n    std::merge(gatheredElements.begin(), gatheredElements.end(),\n               nonZeroElements.begin(), nonZeroElements.end(),\n               std::back_inserter(sortedNonZeroElements));\n\n    // Insert sorted non-zero elements back into x, preserving zeros\n    auto it = sortedNonZeroElements.begin();\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] != 0) {\n            x[i] = *it;\n            ++it;\n        }\n    }\n}\n\n// Broadcast the sorted vector to all ranks\nMPI_Bcast(x.data(), x.size(), MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0017928676,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0019883976,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> nonZeroElements;\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\n// Each process collects non-zero elements\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        nonZeroElements.push_back(x[i]);\n    }\n}\n\n// Gather the counts of non-zero elements from each process\nint localCount = nonZeroElements.size();\nMPI_Gather(&localCount, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Calculate displacements for gathering the non-zero elements\nint totalNonZero = 0;\nif (rank == 0) {\n    displs[0] = 0;\n    for (int i = 1; i < size; ++i) {\n        displs[i] = displs[i - 1] + recvCounts[i - 1];\n    }\n    totalNonZero = displs[size - 1] + recvCounts[size - 1];\n}\n\n// Gather all non-zero elements to the root process\nstd::vector<int> gatheredNonZeroElements(totalNonZero);\nMPI_Gatherv(nonZeroElements.data(), localCount, MPI_INT,\n            gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n\n// Only the root process sorts the non-zero elements\nif (rank == 0) {\n    std::sort(gatheredNonZeroElements.begin(), gatheredNonZeroElements.end());\n}\n\n// Scatter the sorted non-zero elements back to all processes\nMPI_Scatterv(gatheredNonZeroElements.data(), recvCounts.data(), displs.data(), MPI_INT,\n             nonZeroElements.data(), localCount, MPI_INT, 0, MPI_COMM_WORLD);\n\n// Merge the sorted non-zero elements back into the original vector\nint nonZeroIndex = 0;\nfor (int i = 0; i < n; ++i) {\n    if (x[i] != 0) {\n        x[i] = nonZeroElements[nonZeroIndex++];\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.001833955,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.001868282,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.79719547997188,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "41_sort_k-th_smallest_element",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Find the k-th smallest element of the vector x.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n   \n   input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n   output: 6\n*/\nint findKthSmallest(std::vector<int> const& x, int k) {",
        "translation_prompt": "// Serial implementation of findKthSmallest\n// /* Find the k-th smallest element of the vector x.\n//    Example:\n//    \n//    input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n//    output: 6\n// */\n// int findKthSmallest(std::vector<int> const& x, int k) {\n// int n = x.size();\n//     std::vector<int> y(x);\n//     std::sort(y.begin(), y.end());\n//     return y[k-1];\n// }\n\n// MPI implementation of findKthSmallest\n#include <mpi.h>\n\n/* Find the k-th smallest element of the vector x.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Return the result on rank 0.\n   Example:\n   \n   input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n   output: 6\n*/\nint findKthSmallest(std::vector<int> const& x, int k) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Find the k-th smallest element of the vector x.\n   Example:\n   \n   input: x=[1, 7, 6, 0, 2, 2, 10, 6], k=4\n   output: 6\n*/\nint findKthSmallest(std::vector<int> const& x, int k) {\nint n = x.size();\n    std::vector<int> y(x);\n    std::sort(y.begin(), y.end());\n    return y[k-1];\n}",
        "translation_function_name": "findKthSmallest",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::vector<int> recv_buffer(n);\n\n// Sort the local copy\nstd::sort(local_x.begin(), local_x.end());\n\n// Gather sorted subarrays at root\nMPI_Gather(local_x.data(), n, MPI_INT, recv_buffer.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n\nint kth_smallest = -1;\nif (rank == 0) {\n    // Merge the sorted subarrays\n    std::vector<std::vector<int>> sorted_chunks(size);\n    for (int i = 0; i < size; ++i) {\n        sorted_chunks[i] = std::vector<int>(recv_buffer.begin() + i * n, recv_buffer.begin() + (i + 1) * n);\n    }\n\n    std::vector<int> indices(size, 0);\n    for (int i = 0; i < k; ++i) {\n        int min_value = INT_MAX;\n        int min_index = -1;\n        for (int j = 0; j < size; ++j) {\n            if (indices[j] < n && sorted_chunks[j][indices[j]] < min_value) {\n                min_value = sorted_chunks[j][indices[j]];\n                min_index = j;\n            }\n        }\n        if (i == k - 1) {\n            kth_smallest = min_value;\n        }\n        indices[min_index]++;\n    }\n}\n\n// Broadcast the k-th smallest element to all processes\nMPI_Bcast(&kth_smallest, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn kth_smallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0065798572,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0072135296,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::sort(local_x.begin(), local_x.end());\n\nint local_k = k;\nint global_kth_value;\nint step = n / size;\nint start = rank * step;\nint end = (rank == size - 1) ? n : start + step;\nstd::vector<int> candidates;\n\nfor (int i = start; i < end; ++i) {\n    candidates.push_back(local_x[i]);\n}\n\nwhile (size > 1) {\n    int partner;\n    if (rank % 2 == 0) {\n        if (rank == size - 1) {\n            break;\n        }\n        partner = rank + 1;\n    } else {\n        partner = rank - 1;\n    }\n\n    int partner_k = local_k;\n    MPI_Status status;\n    MPI_Sendrecv(&local_k, 1, MPI_INT, partner, 0,\n                 &partner_k, 1, MPI_INT, partner, 0,\n                 MPI_COMM_WORLD, &status);\n\n    int recv_size;\n    MPI_Sendrecv(&end, 1, MPI_INT, partner, 0,\n                 &recv_size, 1, MPI_INT, partner, 0,\n                 MPI_COMM_WORLD, &status);\n\n    std::vector<int> recv_buf(recv_size);\n    MPI_Sendrecv(&local_x[start], end - start, MPI_INT, partner, 0,\n                 &recv_buf[0], recv_size, MPI_INT, partner, 0,\n                 MPI_COMM_WORLD, &status);\n\n    std::vector<int> merged;\n    std::merge(candidates.begin(), candidates.end(),\n               recv_buf.begin(), recv_buf.end(),\n               std::back_inserter(merged));\n\n    candidates.clear();\n    if (rank % 2 == 0) {\n        candidates.assign(merged.begin(), merged.begin() + local_k);\n    } else {\n        candidates.assign(merged.begin() + partner_k, merged.end());\n    }\n\n    local_k = (rank % 2 == 0) ? local_k : merged.size() - partner_k;\n    start = 0;\n    end = candidates.size();\n\n    if (rank % 2 == 1) {\n        MPI_Send(&candidates[0], candidates.size(), MPI_INT, rank - 1, 0, MPI_COMM_WORLD);\n    } else if (rank != size - 1) {\n        MPI_Recv(&candidates[0], candidates.size(), MPI_INT, rank + 1, 0, MPI_COMM_WORLD, &status);\n    }\n\n    MPI_Comm new_comm;\n    MPI_Comm_split(MPI_COMM_WORLD, rank % 2 == 0, rank, &new_comm);\n    MPI_Comm_rank(new_comm, &rank);\n    MPI_Comm_size(new_comm, &size);\n    MPI_Comm_free(&new_comm);\n}\n\nif (rank == 0) {\n    global_kth_value = candidates[local_k - 1];\n}\n\nreturn global_kth_value;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0066543396,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0071404582,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::vector<int> recv_buffer(n);\n\n// Sort the local copy of the array\nstd::sort(local_x.begin(), local_x.end());\n\n// Gather all sorted subarrays at root\nMPI_Gather(local_x.data(), n, MPI_INT, recv_buffer.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n\nint kth_value = -1;\n\nif (rank == 0) {\n    // Merge the received sorted subarrays\n    std::vector<std::vector<int>> all_sorted(size);\n    for (int i = 0; i < size; ++i) {\n        all_sorted[i] = std::vector<int>(recv_buffer.begin() + i * n, recv_buffer.begin() + (i + 1) * n);\n    }\n\n    std::vector<int> indices(size, 0);\n    for (int i = 0; i < k; ++i) {\n        int min_value = INT_MAX;\n        int min_index = -1;\n        for (int j = 0; j < size; ++j) {\n            if (indices[j] < n && all_sorted[j][indices[j]] < min_value) {\n                min_value = all_sorted[j][indices[j]];\n                min_index = j;\n            }\n        }\n        if (i == k - 1) {\n            kth_value = min_value;\n        }\n        indices[min_index]++;\n    }\n}\n\n// Broadcast the k-th smallest value to all processes\nMPI_Bcast(&kth_value, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn kth_value;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0065898382,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.007142033,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::sort(local_x.begin(), local_x.end());\n\nint local_k = k;\nint global_kth_value;\nint step = n / size;\nint start = rank * step;\nint end = (rank == size - 1) ? n : start + step;\nstd::vector<int> candidates;\n\nfor (int i = start; i < end; ++i) {\n    candidates.push_back(local_x[i]);\n}\n\nwhile (size > 1) {\n    int partner;\n    if (rank % 2 == 0) {\n        partner = rank + 1;\n    } else {\n        partner = rank - 1;\n    }\n\n    if (partner < size) {\n        int partner_k = local_k;\n        MPI_Sendrecv(&local_k, 1, MPI_INT, partner, 0,\n                     &partner_k, 1, MPI_INT, partner, 0,\n                     MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n\n        std::vector<int> partner_candidates(partner_k);\n        MPI_Sendrecv(candidates.data(), candidates.size(), MPI_INT, partner, 0,\n                     partner_candidates.data(), partner_candidates.size(), MPI_INT, partner, 0,\n                     MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n\n        if (rank % 2 == 0) {\n            while (candidates.size() > local_k && partner_candidates.size() > 0) {\n                if (candidates.back() > partner_candidates.back()) {\n                    candidates.pop_back();\n                } else {\n                    partner_candidates.pop_back();\n                }\n            }\n        } else {\n            while (candidates.size() > 0 && partner_candidates.size() > partner_k) {\n                if (candidates.front() < partner_candidates.front()) {\n                    candidates.erase(candidates.begin());\n                } else {\n                    partner_candidates.erase(partner_candidates.begin());\n                }\n            }\n        }\n\n        candidates.insert(candidates.end(), partner_candidates.begin(), partner_candidates.end());\n        std::sort(candidates.begin(), candidates.end());\n\n        if (rank % 2 == 0) {\n            if (candidates.size() > local_k) {\n                candidates.resize(local_k);\n            }\n        } else {\n            if (candidates.size() > partner_k) {\n                candidates.erase(candidates.begin(), candidates.begin() + (candidates.size() - partner_k));\n            }\n        }\n    }\n\n    MPI_Comm new_comm;\n    MPI_Comm_split(MPI_COMM_WORLD, rank % 2, rank, &new_comm);\n    MPI_Comm_free(&MPI_COMM_WORLD);\n    MPI_COMM_WORLD = new_comm;\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n}\n\nglobal_kth_value = candidates[local_k - 1];\n\nif (rank == 0) {\n    return global_kth_value;\n} else {\n    return -1; // For non-zero ranks, we return an invalid value as only rank 0 has the correct result.\n}\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_k = k;\nint global_kth_smallest;\nstd::vector<int> y(x);\n\n// Sort the local copy\nstd::sort(y.begin(), y.end());\n\n// Use MPI_Reduce to find the global k-th smallest element\nif (rank == 0) {\n    std::vector<int> recv_buffer(size);\n    MPI_Gather(&y[k - 1], 1, MPI_INT, recv_buffer.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n    std::sort(recv_buffer.begin(), recv_buffer.end());\n    global_kth_smallest = recv_buffer[k - 1];\n} else {\n    MPI_Gather(&y[k - 1], 1, MPI_INT, NULL, 0, MPI_INT, 0, MPI_COMM_WORLD);\n}\n\n// Broadcast the result to all processes\nMPI_Bcast(&global_kth_smallest, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn global_kth_smallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0066104606,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0067551572,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_kth;\nint global_kth;\n\n// Each process sorts the entire array independently\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\n// Each process finds its local kth smallest element\nif (k <= n) {\n    local_kth = y[k - 1];\n} else {\n    local_kth = std::numeric_limits<int>::max();\n}\n\n// Reduce to find the global kth smallest element\nMPI_Reduce(&local_kth, &global_kth, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_kth value\nif (rank == 0) {\n    return global_kth;\n} else {\n    return -1; // Other ranks return a placeholder value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0065647686,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067677184,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0074354307,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_kth;\nint global_kth;\n\n// Each process sorts the entire array independently\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\n// Each process finds its local kth element\nif (k - 1 < n) {\n    local_kth = y[k - 1];\n} else {\n    local_kth = std::numeric_limits<int>::max();\n}\n\n// Reduce to find the global kth smallest element across all processes\nMPI_Reduce(&local_kth, &global_kth, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct kth element, other ranks will have MAX_INT\nif (rank == 0) {\n    return global_kth;\n} else {\n    return std::numeric_limits<int>::max(); // Or handle according to the application's needs\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0066437654,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0068389946,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00741278043711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\nint local_kth;\nif (rank == 0) {\n    local_kth = y[k - 1];\n}\n\n// Broadcast the k-th smallest element from rank 0 to all other ranks\nMPI_Bcast(&local_kth, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn local_kth;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0065733344,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067351394,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00735013487305,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_kth;\nint global_kth;\n\n// Each process sorts the entire array independently\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\n// Each process finds its local kth smallest element\nif (k <= n) {\n    local_kth = y[k - 1];\n} else {\n    local_kth = std::numeric_limits<int>::max();\n}\n\n// Reduce to find the global kth smallest element\nMPI_Reduce(&local_kth, &global_kth, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct global_kth value\nif (rank == 0) {\n    return global_kth;\n} else {\n    return -1; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0066718782,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067924816,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00740154957539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_kth;\nint global_kth;\n\n// Each process sorts the entire array independently\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\n// Each process finds its local kth element\nif (k - 1 < n) {\n    local_kth = y[k - 1];\n} else {\n    local_kth = std::numeric_limits<int>::max();\n}\n\n// Reduce to find the global kth smallest element\nMPI_Reduce(&local_kth, &global_kth, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct kth element\nif (rank == 0) {\n    return global_kth;\n} else {\n    return -1; // Other ranks return an invalid result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0065684114,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067855542,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00733151855508,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\nint local_kth;\nif (rank == 0) {\n    local_kth = y[k - 1];\n}\n\n// Broadcast the k-th smallest element from rank 0 to all other ranks\nMPI_Bcast(&local_kth, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn local_kth;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0065858302,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067669372,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0073167508832,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::vector<int> recv_buffer(n);\n\n// Sort the local copy of the array\nstd::sort(local_x.begin(), local_x.end());\n\n// Gather sorted subarrays at root\nMPI_Gather(local_x.data(), n, MPI_INT, recv_buffer.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n\nint kth_value = -1;\nif (rank == 0) {\n    // Merge the received sorted subarrays\n    std::vector<std::vector<int>> sorted_chunks(size);\n    for (int i = 0; i < size; ++i) {\n        sorted_chunks[i] = std::vector<int>(recv_buffer.begin() + i * n, recv_buffer.begin() + (i + 1) * n);\n    }\n\n    std::vector<int> indices(size, 0);\n    for (int i = 0; i < k; ++i) {\n        int min_value = INT_MAX;\n        int min_index = -1;\n        for (int j = 0; j < size; ++j) {\n            if (indices[j] < n && sorted_chunks[j][indices[j]] < min_value) {\n                min_value = sorted_chunks[j][indices[j]];\n                min_index = j;\n            }\n        }\n        kth_value = min_value;\n        indices[min_index]++;\n    }\n}\n\n// Broadcast the k-th smallest value to all processes\nMPI_Bcast(&kth_value, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn kth_value;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0065848188,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0071613316,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_kth;\nint global_kth;\n\n// Each process sorts the entire array independently\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\n// Each process finds its local kth element\nif (k <= n) {\n    local_kth = y[k - 1];\n} else {\n    local_kth = std::numeric_limits<int>::max();\n}\n\n// Reduce to find the global kth smallest element across all processes\nMPI_Reduce(&local_kth, &global_kth, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct kth element\nif (rank == 0) {\n    return global_kth;\n} else {\n    return -1; // Other ranks return an invalid result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.006577689,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067605492,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00745450661133,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nint local_kth;\nint global_kth;\n\n// Each process sorts its own copy of the vector\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\n// Each process finds its local k-th smallest element\nif (k <= n / size * (rank + 1) && k > n / size * rank) {\n    local_kth = y[k - 1 - (n / size * rank)];\n} else {\n    local_kth = (rank == 0) ? y[0] : y[n / size * rank];\n}\n\n// Reduce to find the global k-th smallest element\nMPI_Reduce(&local_kth, &global_kth, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the correct k-th smallest element\nif (rank == 0) {\n    return global_kth;\n} else {\n    return -1; // Other ranks return a placeholder value\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0066335804,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067737642,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.00742252648633,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::sort(local_x.begin(), local_x.end());\n\nint local_k = k;\nint global_kth_value;\nint step = n / size;\nint start = rank * step;\nint end = (rank == size - 1) ? n : start + step;\nstd::vector<int> candidates;\n\nfor (int i = start; i < end; ++i) {\n    candidates.push_back(local_x[i]);\n}\n\nwhile (size > 1) {\n    int partner;\n    if (rank % 2 == 0) {\n        partner = rank + 1;\n    } else {\n        partner = rank - 1;\n    }\n\n    if (partner < 0 || partner >= size) {\n        // This rank doesn't have a partner in this round\n        size /= 2;\n        rank /= 2;\n        continue;\n    }\n\n    std::vector<int> recv_candidates(step);\n    if (rank % 2 == 0) {\n        MPI_Sendrecv(candidates.data(), candidates.size(), MPI_INT, partner, 0,\n                     recv_candidates.data(), recv_candidates.size(), MPI_INT, partner, 0,\n                     MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    } else {\n        MPI_Sendrecv(candidates.data(), candidates.size(), MPI_INT, partner, 0,\n                     recv_candidates.data(), recv_candidates.size(), MPI_INT, partner, 0,\n                     MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n\n    std::vector<int> merged_candidates;\n    std::merge(candidates.begin(), candidates.end(),\n               recv_candidates.begin(), recv_candidates.end(),\n               std::back_inserter(merged_candidates));\n\n    candidates.clear();\n    if (rank % 2 == 0) {\n        candidates.assign(merged_candidates.begin(), merged_candidates.begin() + local_k);\n    } else {\n        candidates.assign(merged_candidates.end() - local_k, merged_candidates.end());\n    }\n\n    size /= 2;\n    rank /= 2;\n    local_k = local_k - (local_k / size);\n}\n\nif (rank == 0) {\n    global_kth_value = candidates.front();\n}\n\nMPI_Bcast(&global_kth_value, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn global_kth_value;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0066060844,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.007108586,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::vector<int> recv_buffer(n);\n\n// Sort the local copy\nstd::sort(local_x.begin(), local_x.end());\n\n// Gather sorted subarrays at root\nMPI_Gather(local_x.data(), n, MPI_INT, recv_buffer.data(), n, MPI_INT, 0, MPI_COMM_WORLD);\n\nint kth_smallest = -1;\nif (rank == 0) {\n    // Merge the sorted subarrays\n    std::vector<std::vector<int>> sorted_chunks(size);\n    for (int i = 0; i < size; ++i) {\n        sorted_chunks[i] = std::vector<int>(recv_buffer.begin() + i * n, recv_buffer.begin() + (i + 1) * n);\n    }\n\n    std::vector<int> indices(size, 0);\n    for (int i = 0; i < k; ++i) {\n        int min_value = INT_MAX;\n        int min_index = -1;\n        // Find the smallest element among the smallest elements of each chunk\n        for (int j = 0; j < size; ++j) {\n            if (indices[j] < n && sorted_chunks[j][indices[j]] < min_value) {\n                min_value = sorted_chunks[j][indices[j]];\n                min_index = j;\n            }\n        }\n        // Increment the index of the chunk that contained the smallest element\n        indices[min_index]++;\n        kth_smallest = min_value;\n    }\n}\n\n// Broadcast the k-th smallest element to all processes\nMPI_Bcast(&kth_smallest, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn kth_smallest;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.006580392,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0071419608,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\nint local_kth;\nif (rank == 0) {\n    local_kth = y[k - 1];\n}\n\n// Broadcast the k-th smallest element from rank 0 to all other ranks\nMPI_Bcast(&local_kth, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn local_kth;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0065798548,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067405934,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00729755754062,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> y(x);\nstd::sort(y.begin(), y.end());\n\nint local_kth;\nif (rank == 0) {\n    local_kth = y[k - 1];\n}\n\n// Broadcast the k-th element from rank 0 to all other ranks\nMPI_Bcast(&local_kth, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\nreturn local_kth;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0065779816,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0067748438,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00736985176328,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::sort(local_x.begin(), local_x.end());\n\nint local_k = k;\nint global_kth_smallest;\nint step = n / size; // Assuming n is divisible by size for simplicity\n\nwhile (step > 0) {\n    int local_kth;\n    if (rank < size - 1) {\n        local_kth = local_x[step - 1];\n    } else {\n        local_kth = local_x[n / size + (n % size) - 1]; // Last rank takes the remainder\n    }\n\n    std::vector<int> gather_kth(size);\n    MPI_Gather(&local_kth, 1, MPI_INT, gather_kth.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    if (rank == 0) {\n        std::nth_element(gather_kth.begin(), gather_kth.begin() + local_k - 1, gather_kth.end());\n        global_kth_smallest = gather_kth[local_k - 1];\n    }\n\n    MPI_Bcast(&global_kth_smallest, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    local_x.erase(std::remove_if(local_x.begin(), local_x.end(),\n                                 [global_kth_smallest](int value) { return value < global_kth_smallest; }),\n                  local_x.end());\n\n    int local_count_less = local_x.size() < local_k ? local_x.size() : 0;\n    int global_count_less;\n    MPI_Reduce(&local_count_less, &global_count_less, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    if (rank == 0) {\n        local_k -= global_count_less;\n    }\n\n    MPI_Bcast(&local_k, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    step /= size;\n}\n\nif (rank == 0) {\n    return global_kth_smallest;\n} else {\n    return -1; // Other ranks do not have the result\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = x.size();\nstd::vector<int> local_x(x);\nstd::sort(local_x.begin(), local_x.end());\n\nint local_k = k;\nint global_result;\nstd::vector<int> candidates(size);\n\nwhile (true) {\n    int pivot = local_x[std::min(local_k - 1, n - 1)];\n    std::vector<int> pivot_candidates(size);\n    MPI_Allgather(&pivot, 1, MPI_INT, pivot_candidates.data(), 1, MPI_INT, MPI_COMM_WORLD);\n\n    int all_pivots_equal = 1;\n    for (int i = 1; i < size; ++i) {\n        if (pivot_candidates[i] != pivot_candidates[0]) {\n            all_pivots_equal = 0;\n            break;\n        }\n    }\n\n    if (all_pivots_equal) {\n        if (rank == 0) {\n            global_result = pivot_candidates[0];\n        }\n        break;\n    }\n\n    int num_smaller = 0;\n    int num_equal = 0;\n    for (int i = 0; i < n; ++i) {\n        if (local_x[i] < pivot) {\n            ++num_smaller;\n        } else if (local_x[i] == pivot) {\n            ++num_equal;\n        }\n    }\n\n    std::vector<int> smaller_counts(size);\n    std::vector<int> equal_counts(size);\n    MPI_Allgather(&num_smaller, 1, MPI_INT, smaller_counts.data(), 1, MPI_INT, MPI_COMM_WORLD);\n    MPI_Allgather(&num_equal, 1, MPI_INT, equal_counts.data(), 1, MPI_INT, MPI_COMM_WORLD);\n\n    int total_smaller = 0;\n    int total_equal = 0;\n    for (int i = 0; i < size; ++i) {\n        total_smaller += smaller_counts[i];\n        total_equal += equal_counts[i];\n    }\n\n    if (k <= total_smaller) {\n        local_x.erase(std::remove_if(local_x.begin(), local_x.end(), [pivot](int value) { return value >= pivot; }), local_x.end());\n        n = local_x.size();\n    } else if (k > total_smaller + total_equal) {\n        local_x.erase(std::remove_if(local_x.begin(), local_x.end(), [pivot](int value) { return value <= pivot; }), local_x.end());\n        n = local_x.size();\n        local_k -= total_smaller + total_equal;\n    } else {\n        if (rank == 0) {\n            global_result = pivot;\n        }\n        break;\n    }\n}\n\nMPI_Bcast(&global_result, 1, MPI_INT, 0, MPI_COMM_WORLD);\nreturn global_result;\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0066098456,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.006785923,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.02413443828828,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "43_sort_sort_an_array_of_structs_by_key",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nstruct Result {\n   int startTime, duration;\n   float value;\n};\n\n/* Sort vector of Result structs by start time in ascending order.\n   Use MPI to sort in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of results. Store the output in results on rank 0.\n   Example:\n   \n   input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n   output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n*/\nvoid sortByStartTime(std::vector<Result> &results) {",
        "translation_prompt": "// Serial implementation of sortByStartTime\n// struct Result {\n//    int startTime, duration;\n//    float value;\n// };\n// \n// /* Sort vector of Result structs by start time in ascending order.\n//    Example:\n//    \n//    input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n//    output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n// */\n// void sortByStartTime(std::vector<Result> &results) {\n// std::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n//       return a.startTime < b.startTime;\n//    });\n// }\n\n// MPI implementation of sortByStartTime\n#include <mpi.h>\n\nstruct Result {\n   int startTime, duration;\n   float value;\n};\n\n/* Sort vector of Result structs by start time in ascending order.\n   Use MPI to sort in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of results. Store the output in results on rank 0.\n   Example:\n   \n   input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n   output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n*/\nvoid sortByStartTime(std::vector<Result> &results) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "struct Result {\n   int startTime, duration;\n   float value;\n};\n\n/* Sort vector of Result structs by start time in ascending order.\n   Example:\n   \n   input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]\n   output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]\n*/\nvoid sortByStartTime(std::vector<Result> &results) {\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n      return a.startTime < b.startTime;\n   });\n}",
        "translation_function_name": "sortByStartTime",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype for the Result struct\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Perform local sort on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nint num_elements = results.size();\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(num_elements * world_size);\n}\n\nMPI_Gather(results.data(), num_elements, mpi_result_type, all_results.data(), num_elements, mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Merge the subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(num_elements * world_size);\n\n    // Use a merge algorithm to merge the subarrays\n    std::vector<std::vector<Result>::iterator> iters;\n    for (int i = 0; i < world_size; ++i) {\n        iters.push_back(all_results.begin() + i * num_elements);\n    }\n\n    while (sorted_results.size() < num_elements * world_size) {\n        auto min_iter = iters.end();\n        for (auto it = iters.begin(); it != iters.end(); ++it) {\n            if (*it != all_results.end() && (min_iter == iters.end() || (**it).startTime < (**min_iter).startTime)) {\n                min_iter = it;\n            }\n        }\n        if (min_iter != iters.end()) {\n            sorted_results.push_back(**min_iter);\n            (*min_iter)++;\n        }\n    }\n\n    // Copy the sorted results back into the original vector\n    results = sorted_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042799092,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0056078522,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a custom MPI datatype for Result\nMPI_Datatype result_type;\nMPI_Datatype type[3] = { MPI_INT, MPI_INT, MPI_FLOAT };\nint blocklen[3] = { 1, 1, 1 };\nMPI_Aint disp[3];\n\ndisp[0] = offsetof(Result, startTime);\ndisp[1] = offsetof(Result, duration);\ndisp[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(3, blocklen, disp, type, &result_type);\nMPI_Type_commit(&result_type);\n\n// Each process sorts its local copy\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(results.size() * world_size);\n}\n\nMPI_Gather(results.data(), results.size(), result_type, all_results.data(), results.size(), result_type, 0, MPI_COMM_WORLD);\n\n// Merge the subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n\n    // Assuming all subarrays are sorted, perform a merge\n    std::vector<std::vector<Result>::iterator> iters;\n    for (int i = 0; i < world_size; ++i) {\n        iters.push_back(all_results.begin() + i * results.size());\n    }\n\n    while (sorted_results.size() < all_results.size()) {\n        Result *min_elem = nullptr;\n        int min_idx = -1;\n        for (int i = 0; i < world_size; ++i) {\n            if (iters[i] != all_results.begin() + (i + 1) * results.size() && (min_elem == nullptr || iters[i]->startTime < min_elem->startTime)) {\n                min_elem = &(*iters[i]);\n                min_idx = i;\n            }\n        }\n        if (min_idx != -1) {\n            sorted_results.push_back(*min_elem);\n            ++iters[min_idx];\n        }\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.004346853,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055345854,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nMPI_Datatype result_type;\nMPI_Datatype type[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nint blocklen[3] = {1, 1, 1};\nMPI_Aint disp[3];\n\ndisp[0] = offsetof(Result, startTime);\ndisp[1] = offsetof(Result, duration);\ndisp[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(3, blocklen, disp, type, &result_type);\nMPI_Type_commit(&result_type);\n\n// Each process sorts its local copy of the results\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(results.size() * world_size);\n}\n\nMPI_Gather(results.data(), results.size(), result_type,\n           all_results.data(), results.size(), result_type,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge and sort the full array\nif (world_rank == 0) {\n    // Merge the sorted subarrays\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n\n    // Assuming all subarrays are sorted, perform a merge\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < all_results.size()) {\n        int min_index = -1;\n        Result min_result;\n        min_result.startTime = INT_MAX;\n\n        for (int i = 0; i < world_size; ++i) {\n            int idx = indices[i];\n            if (idx < results.size()) {\n                Result current_result = all_results[i * results.size() + idx];\n                if (current_result.startTime < min_result.startTime) {\n                    min_result = current_result;\n                    min_index = i;\n                }\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_results.push_back(min_result);\n            indices[min_index]++;\n        }\n    }\n\n    // Copy the sorted results back into the original results vector\n    results = sorted_results;\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042824316,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0056875936,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(world_size * results.size());\n}\nMPI_Gather(results.data(), results.size(), mpi_result_type, all_results.data(), results.size(), mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Merge subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(world_size * results.size());\n    std::vector<std::vector<Result>::iterator> iters;\n    for (int i = 0; i < world_size; ++i) {\n        iters.push_back(all_results.begin() + i * results.size());\n    }\n    \n    while (sorted_results.size() < world_size * results.size()) {\n        Result *min_result = nullptr;\n        int min_idx = -1;\n        for (int i = 0; i < world_size; ++i) {\n            if (iters[i] != all_results.begin() + (i + 1) * results.size() && \n                (min_result == nullptr || iters[i]->startTime < min_result->startTime)) {\n                min_result = &(*iters[i]);\n                min_idx = i;\n            }\n        }\n        if (min_idx != -1) {\n            sorted_results.push_back(*min_result);\n            ++iters[min_idx];\n        }\n    }\n    \n    results.swap(sorted_results);\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042472448,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053798802,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(world_size * results.size());\n}\n\nMPI_Gather(results.data(), results.size(), mpi_result_type, all_results.data(), results.size(), mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Merge the sorted subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n\n    // Perform the merge operation\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < all_results.size()) {\n        int min_index = -1;\n        Result min_value = {INT_MAX, 0, 0.0};\n\n        for (int i = 0; i < world_size; ++i) {\n            int idx = indices[i];\n            if (idx < results.size() && all_results[i * results.size() + idx].startTime < min_value.startTime) {\n                min_index = i;\n                min_value = all_results[i * results.size() + idx];\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_results.push_back(min_value);\n            indices[min_index]++;\n        }\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_results;\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0041995436,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005740575,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Perform local sort on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(world_size * results.size());\n}\n\nMPI_Gather(results.data(), results.size(), mpi_result_type,\n            all_results.data(), results.size(), mpi_result_type,\n            0, MPI_COMM_WORLD);\n\n// Merge subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n\n    // Use a merge algorithm to merge the subarrays\n    std::vector<std::vector<Result>::iterator> iters;\n    for (int i = 0; i < world_size; ++i) {\n        iters.push_back(all_results.begin() + i * results.size());\n    }\n\n    while (sorted_results.size() < all_results.size()) {\n        Result *min_result = nullptr;\n        int min_idx = -1;\n        for (int i = 0; i < world_size; ++i) {\n            if (iters[i] != all_results.begin() + (i + 1) * results.size()) {\n                if (!min_result || iters[i]->startTime < min_result->startTime) {\n                    min_result = &(*iters[i]);\n                    min_idx = i;\n                }\n            }\n        }\n        if (min_idx != -1) {\n            sorted_results.push_back(*min_result);\n            ++iters[min_idx];\n        }\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_results;\n}\n\n// Free the custom MPI type\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0041654178,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005711611,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a custom MPI datatype for the Result struct\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort the local copy of the results\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted vectors at root\nint size = results.size();\nstd::vector<Result> all_results(size * world_size);\nMPI_Gather(results.data(), size, mpi_result_type, all_results.data(), size, mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will sort the full array\nif (world_rank == 0) {\n    std::sort(all_results.begin(), all_results.end(), [](const Result &a, const Result &b) {\n        return a.startTime < b.startTime;\n    });\n\n    // Copy the sorted results back into the original results vector\n    std::copy(all_results.begin(), all_results.begin() + size, results.begin());\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042618954,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0060656356,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a custom MPI datatype for Result\nMPI_Datatype result_type;\nMPI_Datatype type[3] = { MPI_INT, MPI_INT, MPI_FLOAT };\nint blocklen[3] = { 1, 1, 1 };\nMPI_Aint disp[3];\n\ndisp[0] = offsetof(Result, startTime);\ndisp[1] = offsetof(Result, duration);\ndisp[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(3, blocklen, disp, type, &result_type);\nMPI_Type_commit(&result_type);\n\n// Each process sorts its local copy\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(results.size() * world_size);\n}\n\nMPI_Gather(results.data(), results.size(), result_type, all_results.data(), results.size(), result_type, 0, MPI_COMM_WORLD);\n\n// Only rank 0 performs the final merge\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n\n    // Merge the sorted subarrays\n    std::vector<std::vector<Result>::iterator> iters;\n    for (int i = 0; i < world_size; ++i) {\n        iters.push_back(all_results.begin() + i * results.size());\n    }\n\n    while (sorted_results.size() < all_results.size()) {\n        auto min_iter = iters.end();\n        for (auto it = iters.begin(); it != iters.end(); ++it) {\n            if (*it != all_results.end() && (min_iter == iters.end() || (*(*it)).startTime < (*(*min_iter)).startTime)) {\n                min_iter = it;\n            }\n        }\n        if (min_iter != iters.end()) {\n            sorted_results.push_back(**min_iter);\n            (*min_iter)++;\n        }\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042310794,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005475637,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nMPI_Datatype result_type;\nMPI_Datatype type[3] = { MPI_INT, MPI_INT, MPI_FLOAT };\nint blocklen[3] = { 1, 1, 1 };\nMPI_Aint disp[3];\n\ndisp[0] = offsetof(Result, startTime);\ndisp[1] = offsetof(Result, duration);\ndisp[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(3, blocklen, disp, type, &result_type);\nMPI_Type_commit(&result_type);\n\n// Each process sorts its local copy\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(world_size * results.size());\n}\n\nMPI_Gather(results.data(), results.size(), result_type, all_results.data(), results.size(), result_type, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge and sort the full array\nif (world_rank == 0) {\n    // Assuming all subarrays are already sorted, we can use std::merge successively\n    std::vector<Result> merged_results;\n    std::vector<Result> temp;\n\n    auto it = all_results.begin();\n    std::copy(it, it + results.size(), std::back_inserter(merged_results));\n    it += results.size();\n\n    for (int i = 1; i < world_size; ++i) {\n        temp.clear();\n        std::merge(merged_results.begin(), merged_results.end(), it, it + results.size(), std::back_inserter(temp), [](const Result &a, const Result &b) {\n            return a.startTime < b.startTime;\n        });\n        merged_results.swap(temp);\n        it += results.size();\n    }\n\n    // Copy the sorted results back to the original vector\n    results.swap(merged_results);\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042661458,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0052745132,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Each process sorts its local copy\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(world_size * results.size());\n}\n\nMPI_Gather(results.data(), results.size(), mpi_result_type, all_results.data(), results.size(), mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge and have the final sorted array\nif (world_rank == 0) {\n    // Merge the subarrays using a simple merge algorithm, or std::merge for pairs of subarrays\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n\n    // Assuming all subarrays are sorted, we can merge them\n    // This is a simple k-way merge algorithm, which can be optimized\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < all_results.size()) {\n        int min_index = -1;\n        Result min_value;\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < results.size()) {\n                if (min_index == -1 || all_results[i * results.size() + indices[i]].startTime < min_value.startTime) {\n                    min_index = i;\n                    min_value = all_results[i * results.size() + indices[i]];\n                }\n            }\n        }\n        sorted_results.push_back(min_value);\n        indices[min_index]++;\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_results;\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042541174,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0057546308,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted subarrays at root\nint num_elements = results.size();\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(num_elements * world_size);\n}\n\nMPI_Gather(results.data(), num_elements, mpi_result_type, all_results.data(), num_elements, mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Merge the sorted subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(num_elements * world_size);\n\n    // Perform the merge operation\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < num_elements * world_size) {\n        int min_index = -1;\n        Result min_value;\n\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < num_elements) {\n                if (min_index == -1 || all_results[i * num_elements + indices[i]].startTime < min_value.startTime) {\n                    min_index = i;\n                    min_value = all_results[i * num_elements + indices[i]];\n                }\n            }\n        }\n\n        sorted_results.push_back(min_value);\n        indices[min_index]++;\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0041669058,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0057037722,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted sublists to root\nint count = results.size();\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(count * world_size);\n}\n\nMPI_Gather(results.data(), count, mpi_result_type, all_results.data(), count, mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Merge all sublists on root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(count * world_size);\n\n    // Perform the merge operation\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < count * world_size) {\n        int min_index = -1;\n        Result min_value;\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < count) {\n                if (min_index == -1 || all_results[i * count + indices[i]].startTime < min_value.startTime) {\n                    min_index = i;\n                    min_value = all_results[i * count + indices[i]];\n                }\n            }\n        }\n        sorted_results.push_back(min_value);\n        indices[min_index]++;\n    }\n\n    // Copy the sorted results back into the original vector\n    results = sorted_results;\n}\n\n// Clean up the MPI type\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0041639544,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0058970178,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nint num_elements = results.size();\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(num_elements * world_size);\n}\n\nMPI_Gather(results.data(), num_elements, mpi_result_type, all_results.data(), num_elements, mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Merge the sorted subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(num_elements * world_size);\n\n    // Simple k-way merge algorithm\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < num_elements * world_size) {\n        int min_index = -1;\n        Result min_value;\n        min_value.startTime = INT_MAX;\n\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < num_elements && all_results[i * num_elements + indices[i]].startTime < min_value.startTime) {\n                min_index = i;\n                min_value = all_results[i * num_elements + indices[i]];\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_results.push_back(min_value);\n            indices[min_index]++;\n        }\n    }\n\n    results = sorted_results;\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0041666204,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055748148,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n// Define a new MPI datatype to communicate Result structs\nMPI_Datatype result_type;\nMPI_Datatype type[3] = { MPI_INT, MPI_INT, MPI_FLOAT };\nint blocklen[3] = { 1, 1, 1 };\nMPI_Aint disp[3];\n\ndisp[0] = offsetof(Result, startTime);\ndisp[1] = offsetof(Result, duration);\ndisp[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(3, blocklen, disp, type, &result_type);\nMPI_Type_commit(&result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted sublists to root process\nint num_elements = results.size();\nstd::vector<Result> all_results;\nif (rank == 0) {\n    all_results.resize(num_elements * world_size);\n}\n\nMPI_Gather(results.data(), num_elements, result_type, all_results.data(), num_elements, result_type, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge and sort the full list\nif (rank == 0) {\n    // Merge the sublists\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(world_size * num_elements);\n\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < world_size * num_elements) {\n        int min_index = -1;\n        Result min_result;\n        min_result.startTime = INT_MAX;\n\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < num_elements) {\n                Result current_result = all_results[i * num_elements + indices[i]];\n                if (current_result.startTime < min_result.startTime) {\n                    min_result = current_result;\n                    min_index = i;\n                }\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_results.push_back(min_result);\n            indices[min_index]++;\n        }\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0041641878,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005788535,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n// Define a custom MPI datatype for the Result struct\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort the local copy of the results\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted vectors at root\nint size = results.size();\nstd::vector<Result> all_results(size * world_size);\nMPI_Gather(results.data(), size, mpi_result_type, all_results.data(), size, mpi_result_type, 0, MPI_COMM_WORLD);\n\nif (rank == 0) {\n    // Merge the sorted vectors\n    std::vector<Result> sorted_all_results;\n    std::vector<int> index(world_size, 0);\n\n    while (sorted_all_results.size() < all_results.size()) {\n        int min_index = -1;\n        Result min_value = {INT_MAX, 0, 0.0};\n\n        for (int i = 0; i < world_size; ++i) {\n            if (index[i] < size) {\n                Result current = all_results[i * size + index[i]];\n                if (current.startTime < min_value.startTime) {\n                    min_index = i;\n                    min_value = current;\n                }\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_all_results.push_back(min_value);\n            index[min_index]++;\n        }\n    }\n\n    // Copy the sorted results back to the original vector\n    results = sorted_all_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0043588334,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00670765,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate Result structs\nMPI_Datatype MPI_Result;\nint lengths[3] = {1, 1, 1};\nconst MPI_Aint displacements[3] = {offsetof(Result, startTime), offsetof(Result, duration), offsetof(Result, value)};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Type_create_struct(3, lengths, displacements, types, &MPI_Result);\nMPI_Type_commit(&MPI_Result);\n\n// Each process sorts its local copy of the results\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted vectors at root process\nint num_elements = results.size();\nstd::vector<Result> all_results(num_elements * world_size);\nMPI_Gather(results.data(), num_elements, MPI_Result, all_results.data(), num_elements, MPI_Result, 0, MPI_COMM_WORLD);\n\nif (world_rank == 0) {\n    // Merge the sorted vectors at the root process\n    std::vector<Result> sorted_results;\n    std::vector<int> index(world_size, 0);\n\n    while (sorted_results.size() < num_elements * world_size) {\n        int min_index = -1;\n        Result min_value = {INT_MAX, 0, 0.0};\n\n        for (int i = 0; i < world_size; ++i) {\n            if (index[i] < num_elements) {\n                Result current_value = all_results[i * num_elements + index[i]];\n                if (current_value.startTime < min_value.startTime) {\n                    min_value = current_value;\n                    min_index = i;\n                }\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_results.push_back(min_value);\n            index[min_index]++;\n        }\n    }\n\n    // Copy the sorted results back into the original vector\n    results = sorted_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&MPI_Result);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.004177436,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0066486688,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_rank, world_size;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n// Define a new MPI datatype to communicate Result structs\nMPI_Datatype result_type;\nMPI_Datatype type[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nint blocklen[3] = {1, 1, 1};\nMPI_Aint disp[3];\n\ndisp[0] = offsetof(Result, startTime);\ndisp[1] = offsetof(Result, duration);\ndisp[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(3, blocklen, disp, type, &result_type);\nMPI_Type_commit(&result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(world_size * results.size());\n}\n\nMPI_Gather(results.data(), results.size(), result_type, all_results.data(), results.size(), result_type, 0, MPI_COMM_WORLD);\n\n// Merge subarrays at root\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n    std::vector<int> index(world_size, 0);\n\n    while (sorted_results.size() < all_results.size()) {\n        int min_index = -1;\n        Result min_value = {INT_MAX, 0, 0.0};\n\n        for (int i = 0; i < world_size; ++i) {\n            if (index[i] < results.size()) {\n                Result current = all_results[i * results.size() + index[i]];\n                if (current.startTime < min_value.startTime) {\n                    min_value = current;\n                    min_index = i;\n                }\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_results.push_back(min_value);\n            index[min_index]++;\n        }\n    }\n\n    results = sorted_results;\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.004169262,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0055567556,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a custom MPI datatype for Result\nMPI_Datatype result_type;\nMPI_Datatype type[3] = { MPI_INT, MPI_INT, MPI_FLOAT };\nint blocklen[3] = { 1, 1, 1 };\nMPI_Aint disp[3];\n\ndisp[0] = offsetof(Result, startTime);\ndisp[1] = offsetof(Result, duration);\ndisp[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(3, blocklen, disp, type, &result_type);\nMPI_Type_commit(&result_type);\n\n// Each process sorts its local copy\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(results.size() * world_size);\n}\n\nMPI_Gather(results.data(), results.size(), result_type, all_results.data(), results.size(), result_type, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge and have the final sorted array\nif (world_rank == 0) {\n    // Merge the subarrays using a simple merge algorithm, or std::merge for pairs of subarrays\n    std::vector<Result> merged_results;\n    merged_results.reserve(all_results.size());\n\n    // Assuming all subarrays are sorted, we can merge them into the final sorted array\n    auto it = all_results.begin();\n    for (int i = 0; i < world_size; ++i) {\n        std::vector<Result> temp(it, it + results.size());\n        if (merged_results.empty()) {\n            merged_results = temp;\n        } else {\n            std::vector<Result> temp_merged(merged_results.size() + temp.size());\n            std::merge(merged_results.begin(), merged_results.end(), temp.begin(), temp.end(), temp_merged.begin(), [](const Result &a, const Result &b) {\n                return a.startTime < b.startTime;\n            });\n            merged_results = temp_merged;\n        }\n        it += results.size();\n    }\n\n    // Copy the sorted results back to the original vector\n    results = merged_results;\n}\n\n// Free the custom MPI datatype\nMPI_Type_free(&result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042209174,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.005603882,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype to communicate our struct\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Each process sorts its local array\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted subarrays at root\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(world_size * results.size());\n}\n\nMPI_Gather(results.data(), results.size(), mpi_result_type, all_results.data(), results.size(), mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will now merge the results\nif (world_rank == 0) {\n    // Perform the merge operation\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(all_results.size());\n\n    // Assuming all subarrays are sorted, we can use std::merge successively\n    auto it = all_results.begin();\n    for (int i = 0; i < world_size; ++i) {\n        std::vector<Result> temp;\n        std::merge(sorted_results.begin(), sorted_results.end(), it, it + results.size(), std::back_inserter(temp), [](const Result &a, const Result &b) {\n            return a.startTime < b.startTime;\n        });\n        sorted_results.swap(temp);\n        it += results.size();\n    }\n\n    // Copy the sorted results back into the original results vector\n    results.swap(sorted_results);\n}\n\n// Clean up the custom MPI type\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0042496722,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0053016458,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Define a new MPI datatype for the Result struct\nconst int nitems = 3;\nint blocklengths[3] = {1, 1, 1};\nMPI_Datatype types[3] = {MPI_INT, MPI_INT, MPI_FLOAT};\nMPI_Datatype mpi_result_type;\nMPI_Aint offsets[3];\n\noffsets[0] = offsetof(Result, startTime);\noffsets[1] = offsetof(Result, duration);\noffsets[2] = offsetof(Result, value);\n\nMPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_result_type);\nMPI_Type_commit(&mpi_result_type);\n\n// Sort locally on each process\nstd::sort(results.begin(), results.end(), [](const Result &a, const Result &b) {\n    return a.startTime < b.startTime;\n});\n\n// Gather all sorted sublists to root process\nint count = results.size();\nstd::vector<Result> all_results;\nif (world_rank == 0) {\n    all_results.resize(count * world_size);\n}\n\nMPI_Gather(results.data(), count, mpi_result_type, all_results.data(), count, mpi_result_type, 0, MPI_COMM_WORLD);\n\n// Merge the sublists on the root process\nif (world_rank == 0) {\n    std::vector<Result> sorted_results;\n    sorted_results.reserve(count * world_size);\n\n    // Perform the k-way merge\n    std::vector<int> indices(world_size, 0);\n    while (sorted_results.size() < count * world_size) {\n        int min_index = -1;\n        Result min_value;\n        min_value.startTime = INT_MAX;\n\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < count && all_results[i * count + indices[i]].startTime < min_value.startTime) {\n                min_index = i;\n                min_value = all_results[i * count + indices[i]];\n            }\n        }\n\n        if (min_index != -1) {\n            sorted_results.push_back(min_value);\n            indices[min_index]++;\n        }\n    }\n\n    results = sorted_results;\n}\n\n// Clean up the custom MPI datatype\nMPI_Type_free(&mpi_result_type);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0041674148,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0057530994,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "40_sort_sort_an_array_of_complex_numbers_by_magnitude",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Sort the vector x of complex numbers by their magnitude in ascending order.\n   Use MPI to sort in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Store the result in x on rank 0.\n   Example:\n   \n   input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n   output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n*/\nvoid sortComplexByMagnitude(std::vector<std::complex<double>> &x) {",
        "translation_prompt": "// Serial implementation of sortComplexByMagnitude\n// /* Sort the vector x of complex numbers by their magnitude in ascending order.\n//    Example:\n//    \n//    input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n//    output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n// */\n// void sortComplexByMagnitude(std::vector<std::complex<double>> &x) {\n// std::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n//         return std::abs(a) < std::abs(b);\n//     });\n// }\n\n// MPI implementation of sortComplexByMagnitude\n#include <mpi.h>\n\n/* Sort the vector x of complex numbers by their magnitude in ascending order.\n   Use MPI to sort in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of x. Store the result in x on rank 0.\n   Example:\n   \n   input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n   output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n*/\nvoid sortComplexByMagnitude(std::vector<std::complex<double>> &x) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Sort the vector x of complex numbers by their magnitude in ascending order.\n   Example:\n   \n   input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]\n   output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]\n*/\nvoid sortComplexByMagnitude(std::vector<std::complex<double>> &x) {\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n        return std::abs(a) < std::abs(b);\n    });\n}",
        "translation_function_name": "sortComplexByMagnitude",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subarrays at root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size(), MPI_DOUBLE_COMPLEX, all_sorted.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all sorted subarrays\nif (rank == 0) {\n    std::vector<std::complex<double>> merged(x.size());\n    std::vector<int> index(size, 0);\n\n    for (int i = 0; i < x.size(); ++i) {\n        int min_idx = -1;\n        std::complex<double> min_val;\n\n        // Find the smallest element among the heads of all subarrays\n        for (int j = 0; j < size; ++j) {\n            if (index[j] < x.size()) {\n                std::complex<double> val = all_sorted[j * x.size() + index[j]];\n                if (min_idx == -1 || std::abs(val) < std::abs(min_val)) {\n                    min_idx = j;\n                    min_val = val;\n                }\n            }\n        }\n\n        // Add the smallest element to the merged array\n        merged[i] = min_val;\n        index[min_idx]++;\n    }\n\n    // Copy the merged array back into x\n    x = merged;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0797098976,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0819769582,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.09791452990352,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subvectors at root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size(), MPI_DOUBLE_COMPLEX, all_sorted.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all vectors\nif (rank == 0) {\n    std::vector<std::complex<double>> merged;\n    std::vector<size_t> indices(size, 0);\n\n    while (merged.size() < x.size() * size) {\n        std::complex<double> min_val = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int min_idx = -1;\n        for (int i = 0; i < size; ++i) {\n            if (indices[i] < x.size() && std::abs(all_sorted[i * x.size() + indices[i]]) < std::abs(min_val)) {\n                min_val = all_sorted[i * x.size() + indices[i]];\n                min_idx = i;\n            }\n        }\n        merged.push_back(min_val);\n        indices[min_idx]++;\n    }\n\n    // Copy the merged vector back into x\n    x = std::vector<std::complex<double>>(merged.begin(), merged.begin() + x.size());\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.080061722,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0865149736,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will sort\nint n = x.size();\nint local_n = n / size;\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the vector to all processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Sort the local vector\nstd::sort(local_x.begin(), local_x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather the sorted subvectors at the root process\nstd::vector<std::complex<double>> sorted_x;\nif (rank == 0) {\n    sorted_x.resize(n);\n}\n\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           sorted_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the sorted subvectors, which need to be merged\nif (rank == 0) {\n    // Temporary vector to hold the merged result\n    std::vector<std::complex<double>> temp_x(n);\n\n    // Merge the sorted subvectors\n    int* recvcounts = new int[size];\n    int* displs = new int[size];\n    for (int i = 0; i < size; ++i) {\n        recvcounts[i] = (i != size - 1) ? local_n : n - local_n * (size - 1);\n        displs[i] = i * local_n;\n    }\n\n    MPI_Gatherv(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n                temp_x.data(), recvcounts, displs, MPI_BYTE, 0, MPI_COMM_WORLD);\n\n    // Final merge since MPI_Gatherv does not guarantee order\n    std::inplace_merge(temp_x.begin(), temp_x.begin() + local_n * (size - 1), temp_x.end(),\n                       [](std::complex<double> a, std::complex<double> b) {\n                           return std::abs(a) < std::abs(b);\n                       });\n\n    // Copy the sorted data back to the original vector\n    x = temp_x;\n\n    // Clean up\n    delete[] recvcounts;\n    delete[] displs;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will sort\nint n = x.size();\nint local_n = n / size;\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the vector to all processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Sort the local vector\nstd::sort(local_x.begin(), local_x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather the sorted sub-vectors at rank 0\nstd::vector<std::complex<double>> sorted_x;\nif (rank == 0) {\n    sorted_x.resize(n);\n}\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           sorted_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Merge the sorted sub-vectors at rank 0\nif (rank == 0) {\n    std::vector<std::complex<double>> temp_x;\n    std::merge(sorted_x.begin(), sorted_x.begin() + local_n,\n               sorted_x.begin() + local_n, sorted_x.end(),\n               std::back_inserter(temp_x), [](std::complex<double> a, std::complex<double> b) {\n                   return std::abs(a) < std::abs(b);\n               });\n\n    // If there are remaining elements that were not distributed, sort them and merge\n    if (n % size != 0) {\n        std::vector<std::complex<double>> remainder_x(x.begin() + size * local_n, x.end());\n        std::sort(remainder_x.begin(), remainder_x.end(), [](std::complex<double> a, std::complex<double> b) {\n            return std::abs(a) < std::abs(b);\n        });\n        std::merge(temp_x.begin(), temp_x.end(), remainder_x.begin(), remainder_x.end(),\n                   x.begin(), [](std::complex<double> a, std::complex<double> b) {\n                       return std::abs(a) < std::abs(b);\n                   });\n    } else {\n        x = temp_x;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0802161042,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0826021332,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.015353844725,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will sort\nint n = x.size();\nint local_n = n / size;\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the vector to all processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            0, MPI_COMM_WORLD);\n\n// Sort the local vector\nstd::sort(local_x.begin(), local_x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather the sorted subvectors at the root process\nstd::vector<std::complex<double>> sorted_x;\nif (rank == 0) {\n    sorted_x.resize(n);\n}\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           sorted_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Merge the sorted subvectors at the root process\nif (rank == 0) {\n    std::vector<std::complex<double>> temp_x;\n    std::merge(sorted_x.begin(), sorted_x.begin() + local_n,\n               sorted_x.begin() + local_n, sorted_x.end(),\n               std::back_inserter(temp_x), [](std::complex<double> a, std::complex<double> b) {\n                   return std::abs(a) < std::abs(b);\n               });\n    x = temp_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.079750949,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.082776918,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.01713321599102,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted vectors from all processes to rank 0\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           all_sorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all vectors\nif (rank == 0) {\n    std::vector<std::complex<double>> merged;\n    std::vector<size_t> indices(size, 0);\n\n    while (merged.size() < x.size() * size) {\n        std::complex<double> min_val = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int min_idx = -1;\n\n        // Find the smallest element among the heads of all vectors\n        for (int i = 0; i < size; ++i) {\n            if (indices[i] < x.size() && std::abs(all_sorted[i * x.size() + indices[i]]) < std::abs(min_val)) {\n                min_val = all_sorted[i * x.size() + indices[i]];\n                min_idx = i;\n            }\n        }\n\n        // Add the smallest element to the merged vector\n        if (min_idx != -1) {\n            merged.push_back(min_val);\n            indices[min_idx]++;\n        }\n    }\n\n    // Copy the merged sorted vector back into x\n    x = std::vector<std::complex<double>>(merged.begin(), merged.begin() + x.size());\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0796508964,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.086911007,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subarrays at root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\n\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           all_sorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge the results\nif (rank == 0) {\n    std::vector<std::complex<double>> merged(x.size());\n    std::vector<int> index(size, 0);\n\n    for (int i = 0; i < x.size(); ++i) {\n        int min_rank = -1;\n        std::complex<double> min_val;\n\n        // Find the smallest element among the heads of all subarrays\n        for (int r = 0; r < size; ++r) {\n            if (index[r] < x.size()) {\n                std::complex<double> val = all_sorted[r * x.size() + index[r]];\n                if (min_rank == -1 || std::abs(val) < std::abs(min_val)) {\n                    min_rank = r;\n                    min_val = val;\n                }\n            }\n        }\n\n        // Add the smallest element to the merged array\n        merged[i] = min_val;\n        index[min_rank]++;\n    }\n\n    // Copy the merged array back to x\n    x = merged;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.079561469,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0819579554,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.09850156093984,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subarrays at root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size(), MPI_DOUBLE_COMPLEX, all_sorted.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all sorted subarrays\nif (rank == 0) {\n    std::vector<std::complex<double>> merged(x.size());\n    std::vector<int> index(size, 0);\n\n    for (size_t i = 0; i < x.size(); ++i) {\n        std::complex<double> min_val = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int min_idx = -1;\n\n        for (int j = 0; j < size; ++j) {\n            if (index[j] < x.size()) {\n                std::complex<double> val = all_sorted[j * x.size() + index[j]];\n                if (std::abs(val) < std::abs(min_val)) {\n                    min_val = val;\n                    min_idx = j;\n                }\n            }\n        }\n\n        if (min_idx != -1) {\n            merged[i] = min_val;\n            index[min_idx]++;\n        }\n    }\n\n    x = merged;\n}\n\n// Broadcast the sorted array to all processes\nMPI_Bcast(x.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0796150094,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0873206198,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 1.77592251609453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted vectors from all processes to rank 0\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           all_sorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Merge the vectors on rank 0\nif (rank == 0) {\n    std::vector<std::complex<double>> merged;\n    std::vector<std::vector<std::complex<double>>::iterator> its(size);\n    for (int i = 0; i < size; ++i) {\n        its[i] = all_sorted.begin() + i * x.size();\n    }\n\n    while (merged.size() < x.size() * size) {\n        auto min_it = its.begin();\n        for (auto it = its.begin(); it != its.end(); ++it) {\n            if (it != min_it && *it != all_sorted.end() && std::abs(**it) < std::abs(**min_it)) {\n                min_it = it;\n            }\n        }\n        merged.push_back(**min_it);\n        ++(*min_it);\n        if (*min_it == all_sorted.end()) {\n            its.erase(min_it);\n        }\n    }\n\n    x = std::vector<std::complex<double>>(merged.begin(), merged.begin() + x.size());\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.079980257,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0821728374,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subarrays at root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size(), MPI_DOUBLE_COMPLEX, all_sorted.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all sorted subarrays\nif (rank == 0) {\n    std::vector<std::complex<double>> merged(x.size());\n    std::vector<int> index(size, 0); // Index to track the current position in each subarray\n\n    for (int i = 0; i < x.size(); ++i) {\n        std::complex<double> min_val = std::complex<double>(DBL_MAX, DBL_MAX);\n        int min_idx = -1;\n\n        // Find the smallest element among the smallest unmerged elements in each subarray\n        for (int j = 0; j < size; ++j) {\n            if (index[j] < x.size()) {\n                std::complex<double> current_val = all_sorted[j * x.size() + index[j]];\n                if (std::abs(current_val) < std::abs(min_val)) {\n                    min_val = current_val;\n                    min_idx = j;\n                }\n            }\n        }\n\n        // Add the smallest element to the merged array and increment the corresponding index\n        if (min_idx != -1) {\n            merged[i] = min_val;\n            index[min_idx]++;\n        }\n    }\n\n    // Copy the merged array back into x\n    x = merged;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.079019029,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0867904134,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.09870051236016,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted vectors from all processes to rank 0\nstd::vector<std::complex<double>> allSorted;\nif (rank == 0) {\n    allSorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           allSorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Merge the sorted vectors on rank 0\nif (rank == 0) {\n    std::vector<std::complex<double>> merged;\n    std::vector<size_t> indices(size, 0);\n    while (merged.size() < x.size() * size) {\n        std::complex<double> minVal = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int minIdx = -1;\n        for (int i = 0; i < size; ++i) {\n            if (indices[i] < x.size() && std::abs(allSorted[i * x.size() + indices[i]]) < std::abs(minVal)) {\n                minVal = allSorted[i * x.size() + indices[i]];\n                minIdx = i;\n            }\n        }\n        if (minIdx != -1) {\n            merged.push_back(minVal);\n            indices[minIdx]++;\n        }\n    }\n    x = std::vector<std::complex<double>>(merged.begin(), merged.begin() + x.size());\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0796064286,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0868260208,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted vectors from all processes to root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           all_sorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all vectors\nif (rank == 0) {\n    std::vector<std::complex<double>> merged;\n    std::vector<size_t> indices(size, 0);\n\n    while (merged.size() < x.size() * size) {\n        std::complex<double> min_val;\n        int min_index = -1;\n\n        // Find the smallest element among the heads of all vectors\n        for (int i = 0; i < size; ++i) {\n            if (indices[i] < x.size()) {\n                if (min_index == -1 || std::abs(all_sorted[i * x.size() + indices[i]]) < std::abs(min_val)) {\n                    min_val = all_sorted[i * x.size() + indices[i]];\n                    min_index = i;\n                }\n            }\n        }\n\n        // Add the smallest element to the merged vector and increment the index\n        if (min_index != -1) {\n            merged.push_back(min_val);\n            indices[min_index]++;\n        }\n    }\n\n    // Copy the merged vector back to the original vector x\n    x = merged;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0798934206,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0829806774,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subvectors at root\nstd::vector<std::complex<double>> all_sorted;\nif (world_rank == 0) {\n    all_sorted.resize(world_size * x.size());\n}\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           all_sorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all vectors\nif (world_rank == 0) {\n    std::vector<std::complex<double>> merged;\n    merged.reserve(world_size * x.size());\n\n    // Assuming all vectors are sorted, perform a k-way merge\n    std::vector<size_t> indices(world_size, 0);\n    while (merged.size() < all_sorted.size()) {\n        std::complex<double> min_val = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int min_index = -1;\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < x.size()) {\n                std::complex<double> current_val = all_sorted[i * x.size() + indices[i]];\n                if (std::abs(current_val) < std::abs(min_val)) {\n                    min_val = current_val;\n                    min_index = i;\n                }\n            }\n        }\n        if (min_index != -1) {\n            merged.push_back(min_val);\n            indices[min_index]++;\n        }\n    }\n\n    // Copy the merged vector back into x\n    x = merged;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0798090788,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0867384086,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subarrays at root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size(), MPI_DOUBLE_COMPLEX, all_sorted.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all sorted subarrays\nif (rank == 0) {\n    std::vector<std::complex<double>> merged(x.size());\n    std::vector<int> index(size, 0);\n\n    for (int i = 0; i < x.size(); ++i) {\n        std::complex<double> min_val = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int min_idx = -1;\n\n        for (int j = 0; j < size; ++j) {\n            if (index[j] < x.size()) {\n                std::complex<double> val = all_sorted[j * x.size() + index[j]];\n                if (std::abs(val) < std::abs(min_val)) {\n                    min_val = val;\n                    min_idx = j;\n                }\n            }\n        }\n\n        if (min_idx != -1) {\n            merged[i] = min_val;\n            index[min_idx]++;\n        }\n    }\n\n    x = merged;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0796215016,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.087052247,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.10125485077773,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will sort\nint n = x.size();\nint local_n = n / size;\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the vector to all processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            0, MPI_COMM_WORLD);\n\n// Sort the local vector\nstd::sort(local_x.begin(), local_x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather the sorted local vectors at root\nstd::vector<std::complex<double>> sorted_x;\nif (rank == 0) {\n    sorted_x.resize(n);\n}\n\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           sorted_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the sorted parts, now it needs to merge them\nif (rank == 0) {\n    std::vector<std::complex<double>> temp_x(n);\n    std::vector<int> recvcounts(size);\n    std::vector<int> displs(size);\n\n    // Calculate displacements and receive counts for Gatherv\n    for (int i = 0; i < size; ++i) {\n        recvcounts[i] = (i < n % size) ? (local_n + 1) * sizeof(std::complex<double>) : local_n * sizeof(std::complex<double>);\n        displs[i] = (i > 0) ? (displs[i - 1] + recvcounts[i - 1]) : 0;\n    }\n\n    // Gather the unevenly distributed sorted parts\n    MPI_Gatherv(MPI_IN_PLACE, local_n * sizeof(std::complex<double>), MPI_BYTE,\n                sorted_x.data(), recvcounts.data(), displs.data(), MPI_BYTE,\n                0, MPI_COMM_WORLD);\n\n    // Merge the sorted parts\n    int *indices = new int[size]();\n    for (int i = 0; i < n; ++i) {\n        int min_idx = -1;\n        std::complex<double> min_val;\n        for (int j = 0; j < size; ++j) {\n            int idx = indices[j];\n            if (idx < recvcounts[j] / sizeof(std::complex<double>)) {\n                std::complex<double> val = sorted_x[displs[j] / sizeof(std::complex<double>) + idx];\n                if (min_idx == -1 || std::abs(val) < std::abs(min_val)) {\n                    min_idx = j;\n                    min_val = val;\n                }\n            }\n        }\n        temp_x[i] = min_val;\n        indices[min_idx]++;\n    }\n\n    // Copy the sorted vector back to x\n    x = temp_x;\n\n    delete[] indices;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.080020609,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0824007884,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of elements each process will sort\nint n = x.size();\nint local_n = n / size;\nstd::vector<std::complex<double>> local_x(local_n);\n\n// Scatter the vector to all processes\nMPI_Scatter(x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n            local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Sort the local vector\nstd::sort(local_x.begin(), local_x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather the sorted sub-vectors at root\nstd::vector<std::complex<double>> sorted_x;\nif (rank == 0) {\n    sorted_x.resize(n);\n}\nMPI_Gather(local_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE,\n           sorted_x.data(), local_n * sizeof(std::complex<double>), MPI_BYTE, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will have the sorted sub-vectors, which need to be merged\nif (rank == 0) {\n    // Temporary vector to hold the merged result\n    std::vector<std::complex<double>> temp_x(n);\n    std::vector<int> index(size, 0);\n\n    for (int i = 0; i < n; ++i) {\n        std::complex<double> min_val;\n        int min_idx = -1;\n\n        // Find the smallest element among the smallest elements of the sub-vectors\n        for (int j = 0; j < size; ++j) {\n            if (index[j] < local_n) {\n                if (min_idx == -1 || std::abs(sorted_x[j * local_n + index[j]]) < std::abs(min_val)) {\n                    min_val = sorted_x[j * local_n + index[j]];\n                    min_idx = j;\n                }\n            }\n        }\n\n        // Add the smallest element to the merged vector\n        temp_x[i] = min_val;\n        index[min_idx]++;\n    }\n\n    // Copy the merged vector back to the original vector\n    x = temp_x;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0797251484,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0818748848,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.01756254874219,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subvectors at root\nstd::vector<std::complex<double>> all_sorted;\nif (world_rank == 0) {\n    all_sorted.resize(x.size() * world_size);\n}\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           all_sorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge the sorted vectors\nif (world_rank == 0) {\n    std::vector<std::complex<double>> merged(x.size());\n    std::vector<int> index(world_size, 0);\n\n    for (size_t i = 0; i < x.size(); ++i) {\n        int min_idx = -1;\n        std::complex<double> min_val;\n\n        // Find the smallest head element from all subvectors\n        for (int j = 0; j < world_size; ++j) {\n            if (index[j] < x.size()) {\n                std::complex<double> val = all_sorted[j * x.size() + index[j]];\n                if (min_idx == -1 || std::abs(val) < std::abs(min_val)) {\n                    min_idx = j;\n                    min_val = val;\n                }\n            }\n        }\n\n        // Add the smallest element to the merged vector\n        merged[i] = min_val;\n        index[min_idx]++;\n    }\n\n    // Copy the merged vector back to x\n    x = merged;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0798781468,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0819502586,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.09791654519922,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subvectors at root\nstd::vector<std::complex<double>> all_sorted;\nif (rank == 0) {\n    all_sorted.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size(), MPI_DOUBLE_COMPLEX, all_sorted.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge the sorted vectors\nif (rank == 0) {\n    std::vector<std::complex<double>> merged;\n    std::vector<size_t> indices(size, 0);\n\n    // Initialize the merged vector with the correct size\n    merged.resize(x.size() * size);\n\n    // Merge the vectors\n    for (size_t i = 0; i < merged.size(); ++i) {\n        std::complex<double> min_val;\n        int min_idx = -1;\n\n        // Find the smallest element among the smallest elements of the subvectors\n        for (int j = 0; j < size; ++j) {\n            if (indices[j] < x.size()) {\n                std::complex<double> val = all_sorted[j * x.size() + indices[j]];\n                if (min_idx == -1 || std::abs(val) < std::abs(min_val)) {\n                    min_val = val;\n                    min_idx = j;\n                }\n            }\n        }\n\n        // Add the smallest element to the merged vector\n        merged[i] = min_val;\n        indices[min_idx]++;\n    }\n\n    // Copy the merged vector back to x\n    x = std::vector<std::complex<double>>(merged.begin(), merged.begin() + x.size());\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0798696084,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0812143078,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint world_size, world_rank;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n// Each process sorts its local copy of the vector\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subvectors at root\nstd::vector<std::complex<double>> all_sorted;\nif (world_rank == 0) {\n    all_sorted.resize(x.size() * world_size);\n}\nMPI_Gather(x.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           all_sorted.data(), x.size() * sizeof(std::complex<double>), MPI_BYTE,\n           0, MPI_COMM_WORLD);\n\n// Only rank 0 will now merge the sorted vectors\nif (world_rank == 0) {\n    std::vector<std::complex<double>> merged;\n    merged.reserve(x.size() * world_size);\n    std::vector<size_t> indices(world_size, 0);\n\n    while (merged.size() < x.size() * world_size) {\n        std::complex<double> min_val = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int min_idx = -1;\n        for (int i = 0; i < world_size; ++i) {\n            if (indices[i] < x.size()) {\n                std::complex<double> current_val = all_sorted[i * x.size() + indices[i]];\n                if (std::abs(current_val) < std::abs(min_val)) {\n                    min_val = current_val;\n                    min_idx = i;\n                }\n            }\n        }\n        if (min_idx != -1) {\n            merged.push_back(min_val);\n            indices[min_idx]++;\n        }\n    }\n\n    // Copy the merged sorted vector back to x\n    x = std::vector<std::complex<double>>(merged.begin(), merged.begin() + x.size());\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0800109136,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0865676494,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process sorts its local array\nstd::sort(x.begin(), x.end(), [](std::complex<double> a, std::complex<double> b) {\n    return std::abs(a) < std::abs(b);\n});\n\n// Gather sorted subarrays at root\nstd::vector<std::complex<double>> allX;\nif (rank == 0) {\n    allX.resize(x.size() * size);\n}\nMPI_Gather(x.data(), x.size(), MPI_DOUBLE_COMPLEX, allX.data(), x.size(), MPI_DOUBLE_COMPLEX, 0, MPI_COMM_WORLD);\n\n// Only rank 0 will merge all sorted subarrays\nif (rank == 0) {\n    std::vector<std::complex<double>> sortedX;\n    sortedX.reserve(x.size() * size);\n    std::vector<int> index(size, 0);\n\n    while (sortedX.size() < x.size() * size) {\n        std::complex<double> minVal = std::complex<double>(std::numeric_limits<double>::max(), 0);\n        int minIdx = -1;\n        for (int i = 0; i < size; ++i) {\n            if (index[i] < x.size() && std::abs(allX[i * x.size() + index[i]]) < std::abs(minVal)) {\n                minVal = allX[i * x.size() + index[i]];\n                minIdx = i;\n            }\n        }\n        sortedX.push_back(minVal);\n        index[minIdx]++;\n    }\n\n    // Copy the sorted result back into the original vector\n    std::copy(sortedX.begin(), sortedX.end(), x.begin());\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0795809044,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0865699786,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "50_stencil_xor_kernel",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {",
        "translation_prompt": "// Serial implementation of cellsXOR\n// /* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n//    Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n//    input and output are NxN grids of ints in row-major.\n//    Example:\n// \n//    input: [[0, 1, 1, 0],\n//            [1, 0, 0, 0],\n//            [0, 0, 0, 0],\n//            [0, 1, 0, 0]\n//    output: [[0, 0, 1, 1],\n//             [1, 0, 0, 1],\n//             [0, 0, 1, 0],\n//             [1, 0, 1, 0]]\n// */\n// void cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n// for (size_t i = 0; i < N; ++i) {\n//         for (size_t j = 0; j < N; ++j) {\n//             int count = 0;\n//             if (i > 0 && input[i - 1 + j * N] == 1) {\n//                 ++count;\n//             }\n//             if (i < N - 1 && input[i + 1 + j * N] == 1) {\n//                 ++count;\n//             }\n//             if (j > 0 && input[i + (j - 1) * N] == 1) {\n//                 ++count;\n//             }\n//             if (j < N - 1 && input[i + (j + 1) * N] == 1) {\n//                 ++count;\n//             }\n//             if (count == 1) {\n//                 output[i + j * N] = 1;\n//             } else {\n//                 output[i + j * N] = 0;\n//             }\n//         }\n//     }\n// }\n\n// MPI implementation of cellsXOR\n#include <mpi.h>\n\n/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints in row-major.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {\nfor (size_t i = 0; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int count = 0;\n            if (i > 0 && input[i - 1 + j * N] == 1) {\n                ++count;\n            }\n            if (i < N - 1 && input[i + 1 + j * N] == 1) {\n                ++count;\n            }\n            if (j > 0 && input[i + (j - 1) * N] == 1) {\n                ++count;\n            }\n            if (j < N - 1 && input[i + (j + 1) * N] == 1) {\n                ++count;\n            }\n            if (count == 1) {\n                output[i + j * N] = 1;\n            } else {\n                output[i + j * N] = 0;\n            }\n        }\n    }\n}",
        "translation_function_name": "cellsXOR",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t rows_per_rank = N / size;\nsize_t start_row = rank * rows_per_rank;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_rank;\nstd::vector<int> local_output(N * rows_per_rank, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\nif (rank == 0) {\n    output.assign(N * N, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n    for (int r = 1; r < size; ++r) {\n        size_t start = r * rows_per_rank * N;\n        size_t end = (r == size - 1) ? N * N : start + rows_per_rank * N;\n        MPI_Recv(output.data() + start, end - start, MPI_INT, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), local_output.size(), MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0917285384,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1243715634,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00196081075391,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0936838684,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0984549316,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00268327153711,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather results at rank 0\nif (rank == 0) {\n    output = std::vector<int>(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_INT,\n           output.data(), local_output.size(), MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0971112968,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1067633682,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00295895236211,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\nif (rank == 0) {\n    output = std::vector<int>(N * N, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n    for (int p = 1; p < size; ++p) {\n        size_t p_start_row = p * rows_per_process;\n        size_t p_end_row = (p == size - 1) ? N : p_start_row + rows_per_process;\n        MPI_Recv(output.data() + p_start_row * N, N * (p_end_row - p_start_row), MPI_INT, p, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), N * rows_per_process, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0860739348,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1356420622,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00237475316719,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\nif (rank == 0) {\n    output.assign(N * N, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin() + start_row * N);\n    for (int p = 1; p < size; ++p) {\n        size_t p_start_row = p * rows_per_process;\n        size_t p_end_row = (p == size - 1) ? N : p_start_row + rows_per_process;\n        MPI_Recv(output.data() + p_start_row * N, (p_end_row - p_start_row) * N, MPI_INT, p, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), rows_per_process * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.088551279,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1033647558,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00193435247969,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather results at rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0884588748,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0989232312,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00274222806133,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t rows_per_rank = N / size;\nsize_t start_row = rank * rows_per_rank;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_rank;\nstd::vector<int> local_output(N * rows_per_rank, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\nif (rank == 0) {\n    output = std::vector<int>(N * N, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n    for (int r = 1; r < size; ++r) {\n        size_t start = r * rows_per_rank * N;\n        size_t end = (r == size - 1) ? N * N : start + rows_per_rank * N;\n        MPI_Recv(output.data() + start, end - start, MPI_INT, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), local_output.size(), MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0963047792,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1288347488,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00230165097813,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\nif (rank == 0) {\n    // Copy the local output to the final output\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n\n    // Receive results from other processes\n    for (int p = 1; p < size; ++p) {\n        size_t start = p * rows_per_process * N;\n        size_t end = (p == size - 1) ? N * N : start + rows_per_process * N;\n        MPI_Recv(output.data() + start, end - start, MPI_INT, p, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    // Send local results to rank 0\n    MPI_Send(local_output.data(), local_output.size(), MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.088516235,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1231560954,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00132374128242,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0914619622,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1187603224,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00278065409492,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0884516732,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0985482118,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00269449559141,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t rows_per_rank = N / size;\nsize_t start_row = rank * rows_per_rank;\nsize_t end_row = (rank + 1) * rows_per_rank;\n\nif (rank == size - 1) {\n    end_row = N; // Last rank takes the remaining rows\n}\n\nstd::vector<int> local_output(N * rows_per_rank, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\nif (rank == 0) {\n    output.assign(N * N, 0); // Resize and initialize output on rank 0\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n\n    for (int src = 1; src < size; ++src) {\n        size_t src_start_row = src * rows_per_rank;\n        size_t src_end_row = (src + 1) * rows_per_rank;\n        if (src == size - 1) {\n            src_end_row = N;\n        }\n        MPI_Recv(output.data() + src_start_row * N, (src_end_row - src_start_row) * N, MPI_INT, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), rows_per_rank * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.096610493,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1344110444,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00204494899414,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), rows_per_process * N, MPI_INT,\n           output.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not evenly divisible by size, handle the remaining rows\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int count = 0;\n            if (i > 0 && input[(i - 1) * N + j] == 1) {\n                ++count;\n            }\n            if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n                ++count;\n            }\n            if (j > 0 && input[i * N + (j - 1)] == 1) {\n                ++count;\n            }\n            if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n                ++count;\n            }\n            output[i * N + j] = (count == 1) ? 1 : 0;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0958085176,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0982111112,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00259360028672,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t rows_per_rank = N / size;\nsize_t start_row = rank * rows_per_rank;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_rank;\nstd::vector<int> local_output(N * rows_per_rank, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\nif (rank == 0) {\n    output.assign(N * N, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n    for (int r = 1; r < size; ++r) {\n        size_t r_start_row = r * rows_per_rank;\n        size_t r_end_row = (r == size - 1) ? N : r_start_row + rows_per_rank;\n        MPI_Recv(output.data() + r_start_row * N, N * (r_end_row - r_start_row), MPI_INT, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), N * rows_per_rank, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0938850962,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1253900602,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00194716816289,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[i - 1 + j * N] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[i + 1 + j * N] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i + (j - 1) * N] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i + (j + 1) * N] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\nif (rank == 0) {\n    output = std::vector<int>(N * N, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n\n    for (int p = 1; p < size; ++p) {\n        size_t p_start_row = p * rows_per_process;\n        size_t p_end_row = (p == size - 1) ? N : p_start_row + rows_per_process;\n        MPI_Recv(output.data() + p_start_row * N, N * (p_end_row - p_start_row), MPI_INT, p, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), N * rows_per_process, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0903433792,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.189812111,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nsize_t rows_per_rank = N / size;\nsize_t start_row = rank * rows_per_rank;\nsize_t end_row = (rank == size - 1) ? N : (rank + 1) * rows_per_rank;\nstd::vector<int> local_output(N * rows_per_rank);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\nif (rank == 0) {\n    output = std::vector<int>(N * N, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin());\n    for (int r = 1; r < size; ++r) {\n        size_t r_start_row = r * rows_per_rank;\n        size_t r_end_row = (r == size - 1) ? N : (r + 1) * rows_per_rank;\n        MPI_Recv(output.data() + r_start_row * N, (r_end_row - r_start_row) * N, MPI_INT, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), rows_per_rank * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.085897619,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1112181206,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00223773270352,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0884629426,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0982909776,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027565679668,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather results at rank 0\nif (rank == 0) {\n    output = std::vector<int>(N * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? N * (N - i * rows_per_process) : N * rows_per_process;\n    displs[i] = i * N * rows_per_process;\n}\n\nMPI_Gatherv(local_output.data(), N * rows_per_process, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0872176472,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1146381124,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00226921083555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0940588072,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0985775644,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0026277846918,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(N * rows_per_process);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        local_output[(i - start_row) * N + j] = (count == 1) ? 1 : 0;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_INT,\n           output.data(), local_output.size(), MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.091645115,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.098733476,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00277800094297,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int count = 0;\n        if (i > 0 && input[(i - 1) * N + j] == 1) {\n            ++count;\n        }\n        if (i < N - 1 && input[(i + 1) * N + j] == 1) {\n            ++count;\n        }\n        if (j > 0 && input[i * N + (j - 1)] == 1) {\n            ++count;\n        }\n        if (j < N - 1 && input[i * N + (j + 1)] == 1) {\n            ++count;\n        }\n        if (count == 1) {\n            local_output[(i - start_row) * N + j] = 1;\n        } else {\n            local_output[(i - start_row) * N + j] = 0;\n        }\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0885193766,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12083174,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0029759279125,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "54_stencil_game_of_life",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids stored in row-major.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {",
        "translation_prompt": "// Serial implementation of gameOfLife\n// /* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n//    A cell is 1 if it is alive and 0 if it is dead.\n//    If a live cell has fewer than 2 live neighbors then it dies.\n//    If a live cell has 2 or 3 live neighbors then it lives on.\n//    If a live cell has more than 3 live neighbords then it dies.\n//    If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n//    `input` and `output` are NxN grids stored in row-major.\n//    Example:\n// \n//    input:  [[0, 0, 0, 0, 0],\n// \t\t\t\t\t  [0, 1, 0, 0, 0],\n//             [0, 1, 1, 0, 0],\n//             [0, 0, 1, 1, 0],\n//             [0, 1, 0, 0, 0]]\n//    output: [[0, 0, 0, 0, 0],\n// \t\t\t\t\t  [0, 1, 1, 0, 0],\n//             [0, 1, 0, 1, 0],\n//             [0, 0, 0, 1, 0],\n//             [0, 0, 1, 0, 0]]\n// */\n// void gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n// std::vector<int> next(input.size(), 0);\n//   for (size_t i = 0; i < N; ++i) {\n//     for (size_t j = 0; j < N; ++j) {\n//       int count = 0;\n//       for (int x = -1; x <= 1; ++x) {\n//         for (int y = -1; y <= 1; ++y) {\n//           if (x == 0 && y == 0) {\n//             continue;\n//           }\n//           size_t r = (i + x + N) % N;\n//           size_t c = (j + y + N) % N;\n//           count += input[r * N + c];\n//         }\n//       }\n//       if (input[i * N + j] == 1) {\n//         next[i * N + j] = (count == 2 || count == 3);\n//       } else {\n//         next[i * N + j] = (count == 3);\n//       }\n//     }\n//   }\n//   output = next;\n// }\n\n// MPI implementation of gameOfLife\n#include <mpi.h>\n\n/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids stored in row-major.\n   Use MPI to compute in parallel. Assume MPI is already initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids stored in row-major.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(std::vector<int> const& input, std::vector<int> &output, size_t N) {\nstd::vector<int> next(input.size(), 0);\n  for (size_t i = 0; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n      int count = 0;\n      for (int x = -1; x <= 1; ++x) {\n        for (int y = -1; y <= 1; ++y) {\n          if (x == 0 && y == 0) {\n            continue;\n          }\n          size_t r = (i + x + N) % N;\n          size_t c = (j + y + N) % N;\n          count += input[r * N + c];\n        }\n      }\n      if (input[i * N + j] == 1) {\n        next[i * N + j] = (count == 2 || count == 3);\n      } else {\n        next[i * N + j] = (count == 3);\n      }\n    }\n  }\n  output = next;\n}",
        "translation_function_name": "gameOfLife",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(N * N / size, 0);\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\nif (rank == 0) {\n  output = std::vector<int>(N * N, 0);\n}\n\nMPI_Gather(local_next.data(), N * rows_per_process, MPI_INT, output.data(), N * rows_per_process, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.103239336,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1391349138,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00292265630039,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a portion of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_next(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n  counts[i] = (i == size - 1 ? N - i * rows_per_process : rows_per_process) * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_next.data(), rows_per_process * N, MPI_INT,\n            output.data(), counts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1119723966,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1265464588,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00131327490625,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_next(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather results at rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n  counts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_next.data(), rows_per_process * N, MPI_INT,\n            output.data(), counts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1100533864,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1278908834,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00134508503633,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : (rank + 1) * rows_per_process;\n\nstd::vector<int> local_output(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) continue;\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_output[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_output[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for the gather\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_output.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1030388712,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1290477848,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00130069959375,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_next(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather results at rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_next.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1125065618,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1266118118,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00132205433008,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\nstd::vector<int> local_output(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_output[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_output[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for each rank\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_output.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.113150784,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.126198492,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013831147582,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(N * N / size);\n\n// Each process computes its portion of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) continue;\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nMPI_Gather(local_next.data(), N * rows_per_process, MPI_INT,\n           output.data(), N * rows_per_process, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If the number of processes does not evenly divide the number of rows,\n// the last process computes the remaining rows\nif (rank == size - 1 && N % size != 0) {\n  size_t remaining_rows = N - end_row;\n  std::vector<int> last_rows(remaining_rows * N);\n\n  for (size_t i = end_row; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n      int count = 0;\n      for (int x = -1; x <= 1; ++x) {\n        for (int y = -1; y <= 1; ++y) {\n          if (x == 0 && y == 0) continue;\n          size_t r = (i + x + N) % N;\n          size_t c = (j + y + N) % N;\n          count += input[r * N + c];\n        }\n      }\n      if (input[i * N + j] == 1) {\n        last_rows[(i - end_row) * N + j] = (count == 2 || count == 3);\n      } else {\n        last_rows[(i - end_row) * N + j] = (count == 3);\n      }\n    }\n  }\n\n  // Send the remaining rows to rank 0\n  MPI_Send(last_rows.data(), remaining_rows * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n\n// Rank 0 receives the remaining rows if necessary\nif (rank == 0 && N % size != 0) {\n  size_t remaining_rows = N - end_row;\n  std::vector<int> last_rows(remaining_rows * N);\n  MPI_Recv(last_rows.data(), remaining_rows * N, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n  std::copy(last_rows.begin(), last_rows.end(), output.begin() + end_row * N);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1030820286,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.126286636,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027737872457,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(N * N);\nint rows_per_process = N / size;\nint start_row = rank * rows_per_process;\nint end_row = (rank + 1) * rows_per_process;\n\n// Handle the remainder if N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nfor (int i = start_row; i < end_row; ++i) {\n    for (int j = 0; j < N; ++j) {\n        int count = 0;\n        for (int x = -1; x <= 1; ++x) {\n            for (int y = -1; y <= 1; ++y) {\n                if (x == 0 && y == 0) continue;\n                int r = (i + x + N) % N;\n                int c = (j + y + N) % N;\n                count += input[r * N + c];\n            }\n        }\n        if (input[i * N + j] == 1) {\n            local_next[i * N + j] = (count == 2 || count == 3);\n        } else {\n            local_next[i * N + j] = (count == 3);\n        }\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output = std::vector<int>(N * N);\n}\n\nMPI_Gather(local_next.data() + start_row * N, rows_per_process * N, MPI_INT,\n           output.data(), rows_per_process * N, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, handle the remainder separately\nif (N % size != 0 && rank == 0) {\n    for (int i = size * rows_per_process; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            int count = 0;\n            for (int x = -1; x <= 1; ++x) {\n                for (int y = -1; y <= 1; ++y) {\n                    if (x == 0 && y == 0) continue;\n                    int r = (i + x + N) % N;\n                    int c = (j + y + N) % N;\n                    count += input[r * N + c];\n                }\n            }\n            if (input[i * N + j] == 1) {\n                output[i * N + j] = (count == 2 || count == 3);\n            } else {\n                output[i * N + j] = (count == 3);\n            }\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.105060953,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1337531224,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.05535480393281,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(N * N);\nfor (size_t i = rank * (N / size); i < (rank + 1) * (N / size); ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[i * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather results from all processes to rank 0\nif (rank == 0) {\n  output = local_next;\n  std::vector<int> temp(N * N);\n  for (int src = 1; src < size; ++src) {\n    MPI_Recv(temp.data(), N * N, MPI_INT, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    for (size_t i = src * (N / size); i < (src + 1) * (N / size); ++i) {\n      for (size_t j = 0; j < N; ++j) {\n        output[i * N + j] = temp[i * N + j];\n      }\n    }\n  }\n} else {\n  MPI_Send(local_next.data(), N * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1149820046,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1358625302,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.77504022378555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_output(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_output[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_output[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_output.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1063453982,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1264573314,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00149228020586,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_next(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) continue;\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    size_t local_i = i - start_row;\n    if (input[i * N + j] == 1) {\n      local_next[local_i * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[local_i * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n  output = std::vector<int>(N * N, 0);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate receive counts and displacements for Gatherv\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_next.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.106710225,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.133355117,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00242812831406,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a portion of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\nstd::vector<int> local_output(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    size_t local_i = i - start_row;\n    if (input[i * N + j] == 1) {\n      local_output[local_i * N + j] = (count == 2 || count == 3);\n    } else {\n      local_output[local_i * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n  output = std::vector<int>(N * N, 0);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for each rank\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_output.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1073797732,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1349046178,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0023658784875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a portion of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : (rank + 1) * rows_per_process;\n\nstd::vector<int> local_next(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather results from all processes to rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_next.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1082986182,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1314165818,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0013930019168,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a part of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : (rank + 1) * rows_per_process;\n\nstd::vector<int> local_next(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> counts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n  counts[i] = (i == size - 1 ? N - i * rows_per_process : rows_per_process) * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_next.data(), rows_per_process * N, MPI_INT,\n            output.data(), counts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.106417288,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1318080688,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00132512601875,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(N * N);\nint rows_per_process = N / size;\nint start_row = rank * rows_per_process;\nint end_row = (rank + 1) * rows_per_process;\n\n// Handle the remainder if N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nfor (int i = start_row; i < end_row; ++i) {\n    for (int j = 0; j < N; ++j) {\n        int count = 0;\n        for (int x = -1; x <= 1; ++x) {\n            for (int y = -1; y <= 1; ++y) {\n                if (x == 0 && y == 0) {\n                    continue;\n                }\n                int r = (i + x + N) % N;\n                int c = (j + y + N) % N;\n                count += input[r * N + c];\n            }\n        }\n        if (input[i * N + j] == 1) {\n            local_next[i * N + j] = (count == 2 || count == 3);\n        } else {\n            local_next[i * N + j] = (count == 3);\n        }\n    }\n}\n\n// Gather the results from all processes to rank 0\nMPI_Gather(rank == 0 ? MPI_IN_PLACE : &local_next[start_row * N], rows_per_process * N, MPI_INT,\n           &output[0], rows_per_process * N, MPI_INT, 0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the remainder separately\nif (N % size != 0 && rank == 0) {\n    for (int i = size * rows_per_process; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            output[i * N + j] = local_next[i * N + j];\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.1032429918,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.1222200792,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(N * N / size, 0);\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\nif (rank == 0) {\n  output = std::vector<int>(N * N, 0);\n}\n\nMPI_Gather(local_next.data(), N * N / size, MPI_INT, output.data(), N * N / size, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1031613964,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1395893008,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00309924672539,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a portion of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : (rank + 1) * rows_per_process;\n\nstd::vector<int> local_next(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n  recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n  displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_next.data(), rows_per_process * N, MPI_INT,\n            output.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1077773994,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.130393134,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00128589800117,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Each process will compute a portion of the grid\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\nstd::vector<int> local_output(rows_per_process * N, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) continue;\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_output[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_output[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n  output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), rows_per_process * N, MPI_INT,\n           output.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not evenly divisible by size, handle the remaining rows\nif (N % size != 0 && rank == 0) {\n  for (size_t i = size * rows_per_process; i < N; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n      int count = 0;\n      for (int x = -1; x <= 1; ++x) {\n        for (int y = -1; y <= 1; ++y) {\n          if (x == 0 && y == 0) continue;\n          size_t r = (i + x + N) % N;\n          size_t c = (j + y + N) % N;\n          count += input[r * N + c];\n        }\n      }\n      if (input[i * N + j] == 1) {\n        output[i * N + j] = (count == 2 || count == 3);\n      } else {\n        output[i * N + j] = (count == 3);\n      }\n    }\n  }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.111371529,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1252777136,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030495993957,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(input.size(), 0);\nsize_t rows_per_rank = N / size;\nsize_t start_row = rank * rows_per_rank;\nsize_t end_row = (rank == size - 1) ? N : (rank + 1) * rows_per_rank;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[i * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[i * N + j] = (count == 3);\n    }\n  }\n}\n\nif (rank == 0) {\n  output = local_next;\n  std::vector<int> recv_buffer(input.size());\n  for (int src = 1; src < size; ++src) {\n    MPI_Recv(recv_buffer.data(), recv_buffer.size(), MPI_INT, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    size_t recv_start_row = src * rows_per_rank;\n    size_t recv_end_row = (src == size - 1) ? N : (src + 1) * rows_per_rank;\n    for (size_t i = recv_start_row; i < recv_end_row; ++i) {\n      for (size_t j = 0; j < N; ++j) {\n        output[i * N + j] = recv_buffer[i * N + j];\n      }\n    }\n  }\n} else {\n  MPI_Send(local_next.data(), local_next.size(), MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1084034818,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1338367406,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 1.81171839931992,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nstd::vector<int> local_next(N * N / size, 0);\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\nfor (size_t i = start_row; i < end_row; ++i) {\n  for (size_t j = 0; j < N; ++j) {\n    int count = 0;\n    for (int x = -1; x <= 1; ++x) {\n      for (int y = -1; y <= 1; ++y) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        size_t r = (i + x + N) % N;\n        size_t c = (j + y + N) % N;\n        count += input[r * N + c];\n      }\n    }\n    if (input[i * N + j] == 1) {\n      local_next[(i - start_row) * N + j] = (count == 2 || count == 3);\n    } else {\n      local_next[(i - start_row) * N + j] = (count == 3);\n    }\n  }\n}\n\nif (rank == 0) {\n  output = std::vector<int>(N * N, 0);\n}\n\nMPI_Gather(local_next.data(), N * rows_per_process, MPI_INT, output.data(), N * rows_per_process, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.1063168088,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1416479402,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0027316047832,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "52_stencil_1d_jacobi_3-point_stencil",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(std::vector<double> const& input, std::vector<double> &output) {",
        "translation_prompt": "// Serial implementation of jacobi1D\n// /* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n//    Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n//    i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n//    Replace with 0 when reading past the boundaries of `input`.\n//    Example:\n// \n//    input: [9, -6, -1, 2, 3]\n//    output: [1, 2/3, -5/3, 4/3, 5/3]\n// */\n// void jacobi1D(std::vector<double> const& input, std::vector<double> &output) {\n// // YOUR CODE HERE\n//     for (int i = 1; i < input.size() - 1; i++) {\n//         output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n//     }\n// }\n\n// MPI implementation of jacobi1D\n#include <mpi.h>\n\n/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(std::vector<double> const& input, std::vector<double> &output) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(std::vector<double> const& input, std::vector<double> &output) {\n// YOUR CODE HERE\n    for (int i = 1; i < input.size() - 1; i++) {\n        output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n    }\n}",
        "translation_function_name": "jacobi1D",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * (n / size);\nint local_end = (rank == size - 1) ? n : (rank + 1) * (n / size);\n\nfor (int i = local_start; i < local_end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3;\n}\n\n// Gather the results to rank 0\nMPI_Gather(local_output.data() + local_start, local_end - local_start, MPI_DOUBLE,\n           output.data() + local_start, local_end - local_start, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Handle the case where n is not divisible by size\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; i++) {\n        double left = (i == 0) ? 0 : input[i - 1];\n        double right = (i == n - 1) ? 0 : input[i + 1];\n        output[i] = (left + input[i] + right) / 3;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0238688488,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0474790072,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11412924748008,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * (n / size);\nint local_end = (rank == size - 1) ? n : (rank + 1) * (n / size);\n\nfor (int i = local_start; i < local_end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3;\n}\n\n// Gather the results on rank 0\nMPI_Gather(local_output.data(), n / size, MPI_DOUBLE,\n           output.data(), n / size, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; ++i) {\n        double left = (i == 0) ? 0 : input[i - 1];\n        double right = (i == n - 1) ? 0 : input[i + 1];\n        output[i] = (left + input[i] + right) / 3;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0239213538,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0478513922,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.11378384905273,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * n / size;\nint local_end = (rank + 1) * n / size;\n\n// Handle the case where n is not divisible by size\nif (rank == size - 1) {\n    local_end = n;\n}\n\nfor (int i = local_start; i < local_end; i++) {\n    double left = (i == 0) ? 0.0 : input[i - 1];\n    double right = (i == n - 1) ? 0.0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3.0;\n}\n\n// Gather the results to rank 0\nMPI_Gather(local_output.data() + local_start, local_end - local_start, MPI_DOUBLE,\n           output.data(), local_end - local_start, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.026004343,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0508132886,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * (n / size);\nint local_end = (rank == size - 1) ? n : (rank + 1) * (n / size);\n\nfor (int i = local_start; i < local_end; i++) {\n    double left = (i == 0) ? 0.0 : input[i - 1];\n    double right = (i == n - 1) ? 0.0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3.0;\n}\n\n// Gather the results to rank 0\nMPI_Gather(local_output.data(), n / size, MPI_DOUBLE, output.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If n is not evenly divisible by size, handle the remaining elements\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; i++) {\n        double left = (i == 0) ? 0.0 : input[i - 1];\n        double right = (i == n - 1) ? 0.0 : input[i + 1];\n        output[i] = (left + input[i] + right) / 3.0;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.025004768,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0491328282,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.11386926945234,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * (n / size);\nint local_end = (rank == size - 1) ? n : (rank + 1) * (n / size);\n\nfor (int i = std::max(local_start, 1); i < std::min(local_end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n\n// Handle the case where n is not divisible by size\nif (n % size != 0 && rank == size - 1) {\n    for (int i = local_end; i < n - 1; i++) {\n        local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n    }\n}\n\n// Gather the results from all processes to rank 0\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_output[0], &output[0], n, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0241203036,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.025606819,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n);\n\n// Compute the local portion of the output\nint local_start = rank * (n / size);\nint local_end = (rank == size - 1) ? n : (rank + 1) * (n / size);\n\nfor (int i = local_start; i < local_end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3;\n}\n\n// Gather the results on rank 0\nMPI_Gather(local_output.data() + local_start, local_end - local_start, MPI_DOUBLE,\n           output.data(), local_end - local_start, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If the number of processes does not divide the array size evenly,\n// handle the remaining elements\nif (rank == 0 && n % size != 0) {\n    for (int i = size * (n / size); i < n; i++) {\n        double left = (i == 0) ? 0 : input[i - 1];\n        double right = (i == n - 1) ? 0 : input[i + 1];\n        output[i] = (left + input[i] + right) / 3;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.02542997,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0499768084,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11444689996758,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0);\n\n// Compute the local portion of the output\nint local_start = rank * (n / size);\nint local_end = (rank == size - 1) ? n : (rank + 1) * (n / size);\n\nfor (int i = std::max(local_start, 1); i < std::min(local_end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n\n// Handle boundaries if necessary\nif (rank == 0) {\n    local_output[0] = (input[0] + input[1]) / 3;\n}\nif (rank == size - 1) {\n    local_output[n - 1] = (input[n - 2] + input[n - 1]) / 3;\n}\n\n// Gather the results to rank 0\nMPI_Gather(local_output.data(), n, MPI_DOUBLE, output.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If not rank 0, clear the output vector\nif (rank != 0) {\n    output.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0239170832,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.037196649,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute only the portion of the data for which this rank is responsible\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Handle the case where n is not divisible by size\nif (n % size != 0 && rank == size - 1) {\n    end = n;\n}\n\nfor (int i = start; i < end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3;\n}\n\n// Gather results from all ranks to rank 0\nMPI_Gather(local_output.data() + start, chunk_size, MPI_DOUBLE,\n           output.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the case where n is not divisible by size\nif (n % size != 0 && rank == 0) {\n    int remaining = n - (chunk_size * size);\n    MPI_Gather(MPI_IN_PLACE, remaining, MPI_DOUBLE,\n               output.data() + (chunk_size * size), remaining, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0267500004,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047602767,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11523959949023,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nint local_n = n / size;\nint start = rank * local_n;\nint end = (rank == size - 1) ? n : start + local_n;\n\nstd::vector<double> local_output(local_n);\n\nfor (int i = start; i < end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i - start] = (left + input[i] + right) / 3;\n}\n\nif (rank == 0) {\n    output = std::vector<double>(n, 0);\n    std::copy(local_output.begin(), local_output.end(), output.begin() + start);\n    for (int i = 1; i < size; i++) {\n        int recv_start = i * local_n;\n        int recv_end = (i == size - 1) ? n : recv_start + local_n;\n        MPI_Recv(output.data() + recv_start, recv_end - recv_start, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), local_output.size(), MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0262618472,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0648949156,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.14450746577656,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * n / size;\nint local_end = (rank + 1) * n / size;\n\n// Handle the case where the number of processes does not evenly divide the array size\nif (rank == size - 1) {\n    local_end = n;\n}\n\nfor (int i = std::max(local_start, 1); i < std::min(local_end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3.0;\n}\n\n// Gather the results at the root process\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_output[0], &output[0], n, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0238828488,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0256239612,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute only the portion of the output that this rank is responsible for\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Handle the case where the number of elements is not divisible by the number of processes\nif (n % size != 0 && rank == size - 1) {\n    end += n % size;\n}\n\nfor (int i = start; i < end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3;\n}\n\n// Gather the results from all ranks to rank 0\nMPI_Gather(local_output.data() + start, chunk_size, MPI_DOUBLE,\n           output.data(), chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the case where the number of elements is not divisible by the number of processes\nif (n % size != 0) {\n    if (rank == 0) {\n        MPI_Recv(output.data() + size * chunk_size, n % size, MPI_DOUBLE, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    } else if (rank == size - 1) {\n        MPI_Send(local_output.data() + start, n % size, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0241405458,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0480851106,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.11461507816016,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0);\n\n// Compute the local output values\nint start = rank * (n / size) + std::min(rank, n % size);\nint end = (rank + 1) * (n / size) + std::min(rank + 1, n % size);\n\nfor (int i = start; i < end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i] = (left + input[i] + right) / 3;\n}\n\n// Gather the results to rank 0\nMPI_Gather(local_output.data(), n / size, MPI_DOUBLE, output.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the remainder if n is not divisible by size\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; ++i) {\n        double left = (i == 0) ? 0 : input[i - 1];\n        double right = (i == n - 1) ? 0 : input[i + 1];\n        output[i] = (left + input[i] + right) / 3;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.024295912,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.047770643,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.11403801336719,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * n / size;\nint local_end = (rank + 1) * n / size;\n\nfor (int i = std::max(local_start, 1); i < std::min(local_end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n\n// Gather the results on rank 0\nMPI_Reduce(local_output.data(), output.data(), n, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0238554454,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0373139332,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.37247440984609,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nint local_n = n / size; // Assume n is divisible by size for simplicity\nint start = rank * local_n;\nint end = start + local_n;\n\n// Temporary vector to store local computations\nstd::vector<double> local_output(local_n);\n\n// Compute local portion of jacobi\nfor (int i = start; i < end; i++) {\n    double left = (i == 0) ? 0 : input[i - 1];\n    double right = (i == n - 1) ? 0 : input[i + 1];\n    local_output[i - start] = (left + input[i] + right) / 3;\n}\n\n// Gather results at rank 0\nMPI_Gather(local_output.data(), local_n, MPI_DOUBLE, output.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024125424,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0478961446,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00515462792266,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * n / size;\nint local_end = (rank + 1) * n / size;\n\nfor (int i = std::max(local_start, 1); i < std::min(local_end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3.0;\n}\n\n// Gather the results to rank 0\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_output[0], &output[0], n, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0239359994,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0253397712,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * n / size;\nint local_end = (rank + 1) * n / size;\n\nif (rank == 0) {\n    local_output[0] = (0 + input[0] + input[1]) / 3;\n    local_start = 1;\n}\nif (rank == size - 1) {\n    local_end = n - 1;\n    local_output[n - 1] = (input[n - 2] + input[n - 1] + 0) / 3;\n}\n\nfor (int i = local_start; i < local_end; i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n\n// Gather the results from all processes to rank 0\nMPI_Gather(local_output.data(), n / size, MPI_DOUBLE,\n           output.data(), n / size, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the remaining elements if n is not divisible by size\nif (n % size != 0 && rank == 0) {\n    for (int i = size * (n / size); i < n; ++i) {\n        output[i] = (input[i - 1] + input[i] + (i + 1 < n ? input[i + 1] : 0)) / 3;\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0241256342,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0369983864,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute only the portion of the array that this rank is responsible for\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\nfor (int i = std::max(start, 1); i < std::min(end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n\n// Gather the results from all ranks to rank 0\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_output[0], &output[0], n, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.023997794,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0254269054,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n);\n\n// Compute the local portion of the output\nint local_start = rank * n / size;\nint local_end = (rank + 1) * n / size;\n\nfor (int i = std::max(local_start, 1); i < std::min(local_end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n\n// Handle the boundaries\nif (rank == 0) {\n    local_output[0] = (input[0] + input[1]) / 3;\n}\nif (rank == size - 1) {\n    local_output[n - 1] = (input[n - 2] + input[n - 1]) / 3;\n}\n\n// Gather the results at rank 0\nMPI_Gather(local_output.data() + local_start, local_end - local_start, MPI_DOUBLE,\n           output.data(), local_end - local_start, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0237109304,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0368233674,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute the local portion of the output\nint local_start = rank * n / size;\nint local_end = (rank + 1) * n / size;\n\nfor (int i = std::max(local_start, 1); i < std::min(local_end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n}\n\n// Handle boundaries\nif (rank == 0) {\n    local_output[0] = (input[0] + input[1]) / 3;\n}\nif (rank == size - 1) {\n    local_output[n - 1] = (input[n - 2] + input[n - 1]) / 3;\n}\n\n// Gather the results to rank 0\nMPI_Gather(local_output.data(), n, MPI_DOUBLE, output.data(), n, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// If not rank 0, clear the output vector\nif (rank != 0) {\n    output.clear();\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": false,
                "are_any_valid": true,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0237117372,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0368997306,
                        "num_procs": 1
                    },
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": null,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\nint n = input.size();\nstd::vector<double> local_output(n, 0.0);\n\n// Compute only the portion of the data this rank is responsible for\nint chunk_size = n / size;\nint start = rank * chunk_size;\nint end = (rank == size - 1) ? n : start + chunk_size;\n\n// Handle the case where the number of processes does not evenly divide the array size\nif (rank == size - 1) {\n    end = n;\n}\n\n// Compute the local results\nfor (int i = std::max(start, 1); i < std::min(end, n - 1); i++) {\n    local_output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3.0;\n}\n\n// Gather the results at the root process\nMPI_Reduce(rank == 0 ? MPI_IN_PLACE : &local_output[0], &output[0], n, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": 0.0238333866,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": false,
                        "runtime": 0.0252213006,
                        "num_procs": 1
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "51_stencil_edge_kernel",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\nconst int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images stored in row-major.\n   Store the output of the computation in imageOut.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of imageIn. The result is stored in imageOut on rank 0.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {",
        "translation_prompt": "// Serial implementation of convolveKernel\n// const int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n// \n// /* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n//    the dot product of itself and its neighbors with the edge kernel.\n//    Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n//    imageIn and imageOut are NxN grayscale images stored in row-major.\n//    Store the output of the computation in imageOut.\n//    Example:\n// \n//    input: [[112, 118, 141, 152],\n//            [93, 101, 119, 203],\n//            [45, 17, 16, 232],\n//            [82, 31, 49, 101]]\n//    output: [[255, 255, 255, 255],\n//             [255, 147, 0, 255],\n//             [36, 0, 0, 255],\n//             [255, 39, 0, 255]]\n// */\n// void convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {\n// for (size_t i = 0; i < N; ++i) {\n//         for (size_t j = 0; j < N; ++j) {\n//             int sum = 0;\n//             for (int k = -1; k <= 1; ++k) {\n//                 for (int l = -1; l <= 1; ++l) {\n//                     int x = i + k;\n//                     int y = j + l;\n//                     if (x >= 0 && x < N && y >= 0 && y < N) {\n//                         sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n//                     }\n//                 }\n//             }\n//             imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n//         }\n//     }\n// }\n\n// MPI implementation of convolveKernel\n#include <mpi.h>\n\nconst int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images stored in row-major.\n   Store the output of the computation in imageOut.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of imageIn. The result is stored in imageOut on rank 0.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "const int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images stored in row-major.\n   Store the output of the computation in imageOut.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(std::vector<int> const& imageIn, std::vector<int> &imageOut, size_t N) {\nfor (size_t i = 0; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int sum = 0;\n            for (int k = -1; k <= 1; ++k) {\n                for (int l = -1; l <= 1; ++l) {\n                    int x = i + k;\n                    int y = j + l;\n                    if (x >= 0 && x < N && y >= 0 && y < N) {\n                        sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                    }\n                }\n            }\n            imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n        }\n    }\n}",
        "translation_function_name": "convolveKernel",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rowsPerProcess = N / size;\nsize_t startRow = rank * rowsPerProcess;\nsize_t endRow = (rank + 1) * rowsPerProcess;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    endRow = N;\n}\n\nstd::vector<int> localOut(N * rowsPerProcess);\n\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localOut[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(localOut.data(), N * rowsPerProcess, MPI_INT,\n           imageOut.data(), N * rowsPerProcess, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2421006834,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1444326766,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00323132888516,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for each rank\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n    displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_imageOut.data(), rows_per_process * N, MPI_INT,\n            imageOut.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.240062914,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1448801064,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00150440161367,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// Handle the case where N is not divisible by size\n// The last process may have more rows to send\nif (rank == size - 1 && N % size != 0) {\n    size_t extra_rows = N - end_row;\n    MPI_Send(local_imageOut.data() + rows_per_process * N, extra_rows * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else if (rank == 0 && N % size != 0) {\n    size_t extra_rows = N - end_row;\n    std::vector<int> extra_data(extra_rows * N);\n    MPI_Recv(extra_data.data(), extra_rows * N, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    std::copy(extra_data.begin(), extra_data.end(), imageOut.begin() + rows_per_process * size * N);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2204210588,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1415168096,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00292664223945,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    imageOut = std::vector<int>(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    size_t remaining_rows = N - (rows_per_process * size);\n    size_t start_of_remaining = rows_per_process * size * N;\n    MPI_Gatherv(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL,\n                imageOut.data() + start_of_remaining, &remaining_rows, &start_of_remaining, MPI_INT,\n                0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process and the starting row\nsize_t rowsPerProcess = N / size;\nsize_t startRow = rank * rowsPerProcess;\nsize_t endRow = (rank == size - 1) ? N : startRow + rowsPerProcess;\n\nstd::vector<int> localResult(rowsPerProcess * N);\n\n// Perform convolution on the rows assigned to this process\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localResult[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nstd::vector<int> recvCounts(size);\nstd::vector<int> displs(size);\n\nfor (int i = 0; i < size; ++i) {\n    recvCounts[i] = (i == size - 1 ? N - i * rowsPerProcess : rowsPerProcess) * N;\n    displs[i] = i * rowsPerProcess * N;\n}\n\nMPI_Gatherv(localResult.data(), rowsPerProcess * N, MPI_INT,\n            imageOut.data(), recvCounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2414879146,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.154660402,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00141785559336,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int sum = 0;\n            for (int k = -1; k <= 1; ++k) {\n                for (int l = -1; l <= 1; ++l) {\n                    int x = i + k;\n                    int y = j + l;\n                    if (x >= 0 && x < N && y >= 0 && y < N) {\n                        sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                    }\n                }\n            }\n            imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2425381226,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1418194774,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00291876670195,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rowsPerProcess = N / size;\nsize_t startRow = rank * rowsPerProcess;\nsize_t endRow = (rank + 1) * rowsPerProcess;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    endRow = N;\n}\n\nstd::vector<int> localOut(N * rowsPerProcess);\n\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localOut[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(localOut.data(), N * rowsPerProcess, MPI_INT,\n           imageOut.data(), N * rowsPerProcess, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2432024184,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1441778758,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00301117224453,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rowsPerProcess = N / size;\nsize_t startRow = rank * rowsPerProcess;\nsize_t endRow = (rank + 1) * rowsPerProcess;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    endRow = N;\n}\n\nstd::vector<int> localOut(N * rowsPerProcess);\n\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localOut[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\nif (rank == 0) {\n    imageOut = std::vector<int>(N * N, 0);\n}\n\n// Gather the results from all processes to rank 0\nMPI_Gather(localOut.data(), N * rowsPerProcess, MPI_INT, imageOut.data(), N * rowsPerProcess, MPI_INT, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.231956396,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1590128928,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00275731765742,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rowsPerProc = N / size;\nsize_t startRow = rank * rowsPerProc;\nsize_t endRow = (rank + 1) * rowsPerProc;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    endRow = N;\n}\n\nstd::vector<int> localOut(N * rowsPerProc);\n\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localOut[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    imageOut = std::vector<int>(N * N);\n}\n\nMPI_Gather(localOut.data(), N * rowsPerProc, MPI_INT, \n           imageOut.data(), N * rowsPerProc, MPI_INT, \n           0, MPI_COMM_WORLD);\n\n// Handle the case where N is not divisible by size\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rowsPerProc; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int sum = 0;\n            for (int k = -1; k <= 1; ++k) {\n                for (int l = -1; l <= 1; ++l) {\n                    int x = i + k;\n                    int y = j + l;\n                    if (x >= 0 && x < N && y >= 0 && y < N) {\n                        sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                    }\n                }\n            }\n            imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.220765118,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.15878564,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00323051429727,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    size_t remaining_rows = N - (rows_per_process * size);\n    std::vector<int> last_rows(remaining_rows * N);\n    MPI_Recv(last_rows.data(), remaining_rows * N, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    std::copy(last_rows.begin(), last_rows.end(), imageOut.begin() + (rows_per_process * size * N));\n}\nelse if (N % size != 0 && rank == size - 1) {\n    MPI_Send(local_imageOut.data(), rows_per_process * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2174724328,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1413505482,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00299344085078,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    imageOut = std::vector<int>(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, the last process sends its results separately\nif (N % size != 0 && rank == size - 1) {\n    MPI_Send(local_imageOut.data(), (end_row - start_row) * N, MPI_INT, 0, 0, MPI_COMM_WORLD);\n} else if (rank == 0 && N % size != 0) {\n    MPI_Recv(imageOut.data() + rows_per_process * N * (size - 1), (end_row - start_row) * N, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.229463032,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.164657174,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00294340062813,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    size_t remaining_rows = N - (rows_per_process * size);\n    MPI_Recv(imageOut.data() + (rows_per_process * size * N), remaining_rows * N, MPI_INT,\n             size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n}\n\n// If this is the last rank and N is not divisible by size, send the remaining rows to rank 0\nif (N % size != 0 && rank == size - 1) {\n    MPI_Send(local_imageOut.data() + (rows_per_process * N), (end_row - start_row) * N, MPI_INT,\n             0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2394119852,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1488075302,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00283229193867,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    size_t remaining_rows = N - (rows_per_process * size);\n    size_t start_of_remaining = rows_per_process * size * N;\n    MPI_Gatherv(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL,\n                imageOut.data() + start_of_remaining, &remaining_rows, &start_of_remaining,\n                MPI_INT, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": false,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": null
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rowsPerProcess = N / size;\nsize_t startRow = rank * rowsPerProcess;\nsize_t endRow = (rank + 1) * rowsPerProcess;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    endRow = N;\n}\n\nstd::vector<int> localOut(N * rowsPerProcess);\n\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localOut[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(localOut.data(), N * rowsPerProcess, MPI_INT,\n           imageOut.data(), N * rowsPerProcess, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2376702394,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1415752426,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0030317049418,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    size_t remaining_rows = N - (size - 1) * rows_per_process;\n    MPI_Recv(imageOut.data() + (size - 1) * rows_per_process * N, remaining_rows * N, MPI_INT,\n             size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n} else if (N % size != 0 && rank == size - 1) {\n    MPI_Send(local_imageOut.data(), rows_per_process * N, MPI_INT,\n             0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2395921922,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1519145542,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00313167963555,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int sum = 0;\n            for (int k = -1; k <= 1; ++k) {\n                for (int l = -1; l <= 1; ++l) {\n                    int x = i + k;\n                    int y = j + l;\n                    if (x >= 0 && x < N && y >= 0 && y < N) {\n                        sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                    }\n                }\n            }\n            imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2399801508,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1415113042,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00292395592852,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    imageOut.resize(N * N);\n}\n\nMPI_Gather(local_imageOut.data(), rows_per_process * N, MPI_INT,\n           imageOut.data(), rows_per_process * N, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not divisible by size, we need to handle the last few rows separately\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int sum = 0;\n            for (int k = -1; k <= 1; ++k) {\n                for (int l = -1; l <= 1; ++l) {\n                    int x = i + k;\n                    int y = j + l;\n                    if (x >= 0 && x < N && y >= 0 && y < N) {\n                        sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                    }\n                }\n            }\n            imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2390037092,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1417224962,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00350176845664,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rowsPerProcess = N / size;\nsize_t startRow = rank * rowsPerProcess;\nsize_t endRow = (rank + 1) * rowsPerProcess;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    endRow = N;\n}\n\nstd::vector<int> localOut(N * rowsPerProcess);\n\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localOut[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    imageOut = std::vector<int>(N * N);\n}\n\nMPI_Gather(localOut.data(), N * rowsPerProcess, MPI_INT,\n           imageOut.data(), N * rowsPerProcess, MPI_INT,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2314491046,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1586879654,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00307973499844,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<int> local_imageOut(rows_per_process * N);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        local_imageOut[(i - start_row) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    imageOut = std::vector<int>(N * N);\n}\n\nstd::vector<int> recvcounts(size);\nstd::vector<int> displs(size);\n\n// Calculate the receive counts and displacements for Gatherv\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1 ? N - i * rows_per_process : rows_per_process) * N;\n    displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_imageOut.data(), rows_per_process * N, MPI_INT,\n            imageOut.data(), recvcounts.data(), displs.data(), MPI_INT,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.226774362,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1538641742,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00248488996641,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rowsPerProcess = N / size;\nsize_t startRow = rank * rowsPerProcess;\nsize_t endRow = (rank == size - 1) ? N : startRow + rowsPerProcess;\n\nstd::vector<int> localOut(N * rowsPerProcess);\n\nfor (size_t i = startRow; i < endRow; ++i) {\n    for (size_t j = 0; j < N; ++j) {\n        int sum = 0;\n        for (int k = -1; k <= 1; ++k) {\n            for (int l = -1; l <= 1; ++l) {\n                int x = i + k;\n                int y = j + l;\n                if (x >= 0 && x < N && y >= 0 && y < N) {\n                    sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                }\n            }\n        }\n        localOut[(i - startRow) * N + j] = std::max(std::min(sum, 255), 0);\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    imageOut = std::vector<int>(N * N);\n}\n\nMPI_Gather(localOut.data(), N * rowsPerProcess, MPI_INT,\n           imageOut.data(), N * rowsPerProcess, MPI_INT,\n           0, MPI_COMM_WORLD);\n\n// If N is not evenly divisible by size, handle the remaining rows\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rowsPerProcess; i < N; ++i) {\n        for (size_t j = 0; j < N; ++j) {\n            int sum = 0;\n            for (int k = -1; k <= 1; ++k) {\n                for (int l = -1; l <= 1; ++l) {\n                    int x = i + k;\n                    int y = j + l;\n                    if (x >= 0 && x < N && y >= 0 && y < N) {\n                        sum += imageIn[x * N + y] * edgeKernel[k + 1][l + 1];\n                    }\n                }\n            }\n            imageOut[i * N + j] = std::max(std::min(sum, 255), 0);\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.2164311474,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.1599898884,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00290939045625,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "53_stencil_2d_jacobi_5-point_stencil",
        "parallelism_model": "mpi",
        "prompt": "#include <mpi.h>\n\n/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids stored in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {",
        "translation_prompt": "// Serial implementation of jacobi2D\n// /* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n//    Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n//    i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n//    Replace with 0 when reading past the boundaries of `input`.\n//    `input` and `output` are NxN grids stored in row-major.\n//    Example:\n// \n//    input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n//    output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n// */\n// void jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {\n// for (size_t i = 1; i < N - 1; ++i) {\n//     for (size_t j = 1; j < N - 1; ++j) {\n//       output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n//     }\n//   }\n// }\n\n// MPI implementation of jacobi2D\n#include <mpi.h>\n\n/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids stored in row-major.\n   Use MPI to compute in parallel. Assume MPI has already been initialized.\n   Every rank has a complete copy of input. The result is stored in output on rank 0.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {\n",
        "translation_src_model": "serial",
        "translation_dst_model": "mpi",
        "translation_src_example": "/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids stored in row-major.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(std::vector<double> const& input, std::vector<double> &output, size_t N) {\nfor (size_t i = 1; i < N - 1; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n      output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n  }\n}",
        "translation_function_name": "jacobi2D",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = i * N + j;\n        double top = (i == 0) ? 0 : input[idx - N];\n        double bottom = (i == N - 1) ? 0 : input[idx + N];\n        double left = (j == 0) ? 0 : input[idx - 1];\n        double right = (j == N - 1) ? 0 : input[idx + 1];\n        double center = input[idx];\n        local_output[(i - start_row) * N + j] = (top + bottom + left + right + center) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_DOUBLE, output.data(), local_output.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024308658,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0375691218,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00533302896797,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        local_output[(i - start_row) * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output = std::vector<double>(N * N, 0);\n    // Copy the local results to the output\n    std::copy(local_output.begin(), local_output.end(), output.begin() + start_row * N);\n    for (int i = 1; i < size; ++i) {\n        size_t recv_start_row = i * rows_per_process;\n        size_t recv_end_row = (i == size - 1) ? N : recv_start_row + rows_per_process;\n        MPI_Recv(output.data() + recv_start_row * N, N * (recv_end_row - recv_start_row), MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    // Send the local results to rank 0\n    MPI_Send(local_output.data(), N * rows_per_process, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.0516880656,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<double> local_output(N * rows_per_process, 0.0);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        double top = (i > 0) ? input[(i - 1) * N + j] : 0.0;\n        double bottom = (i < N - 1) ? input[(i + 1) * N + j] : 0.0;\n        double left = (j > 0) ? input[i * N + j - 1] : 0.0;\n        double right = (j < N - 1) ? input[i * N + j + 1] : 0.0;\n        double center = input[i * N + j];\n        local_output[(i - start_row) * N + j] = (top + bottom + left + right + center) / 5.0;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output.resize(N * N, 0.0);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_DOUBLE, output.data(), local_output.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024306576,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0377663856,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00535836372695,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        double top = (i > 0) ? input[(i - 1) * N + j] : 0;\n        double bottom = (i < N - 1) ? input[(i + 1) * N + j] : 0;\n        double left = input[i * N + j - 1];\n        double right = input[i * N + j + 1];\n        double center = input[i * N + j];\n        local_output[(i - start_row) * N + j] = (top + bottom + left + right + center) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output = std::vector<double>(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE,\n           output.data(), N * rows_per_process, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.02388012,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0520103356,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00545128815312,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows to be processed by each rank\nsize_t rows_per_rank = N / size;\nsize_t start_row = rank * rows_per_rank;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_rank;\n\nstd::vector<double> local_output(N * rows_per_rank, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results from all ranks\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_DOUBLE, output.data(), local_output.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.024295277,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0375253884,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00549144535,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        local_output[(i - start_row) * N + j] = (\n            input[(i > 0 ? i - 1 : i) * N + j] +\n            input[(i < N - 1 ? i + 1 : i) * N + j] +\n            input[i * N + (j > 0 ? j - 1 : j)] +\n            input[i * N + (j < N - 1 ? j + 1 : j)] +\n            input[i * N + j]\n        ) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output = local_output;\n    for (int src = 1; src < size; ++src) {\n        size_t src_start_row = src * rows_per_process;\n        size_t src_end_row = (src == size - 1) ? N : src_start_row + rows_per_process;\n        MPI_Recv(output.data() + src_start_row * N, N * (src_end_row - src_start_row), MPI_DOUBLE, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    MPI_Send(local_output.data(), N * rows_per_process, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0246082096,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0374720958,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.04422122302227,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local output\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j; // Local index for the local_output\n        local_output[idx] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output = std::vector<double>(N * N, 0); // Make sure output is the right size\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for each rank\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1) ? (N - i * rows_per_process) * N : rows_per_process * N;\n    displs[i] = i * rows_per_process * N;\n}\n\n// Gather the local outputs to the global output\nMPI_Gatherv(local_output.data(), rows_per_process * N, MPI_DOUBLE,\n            output.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.052161466,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t local_i = i - start_row;\n        local_output[local_i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output = std::vector<double>(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_DOUBLE, output.data(), local_output.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the boundaries if necessary\nif (rank == 0) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[j] = (input[j - 1] + input[j + 1] + input[N + j]) / 5;\n        output[(N - 1) * N + j] = (input[(N - 2) * N + j] + input[(N - 1) * N + j - 1] + input[(N - 1) * N + j + 1]) / 5;\n    }\n    for (size_t i = 1; i < N - 1; ++i) {\n        output[i * N] = (input[(i - 1) * N] + input[(i + 1) * N] + input[i * N + 1]) / 5;\n        output[i * N + N - 1] = (input[i * N + N - 2] + input[(i - 1) * N + N - 1] + input[(i + 1) * N + N - 1]) / 5;\n    }\n    output[0] = (input[1] + input[N]) / 5;\n    output[N - 1] = (input[N - 2] + input[2 * N - 1]) / 5;\n    output[(N - 1) * N] = (input[(N - 2) * N] + input[(N - 1) * N + 1]) / 5;\n    output[N * N - 1] = (input[N * N - 2] + input[(N - 1) * N - 1]) / 5;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.0521088134,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local output\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (\n            input[(i == 0 ? i : i - 1) * N + j] +\n            input[(i == N - 1 ? i : i + 1) * N + j] +\n            input[i * N + (j == 0 ? j : j - 1)] +\n            input[i * N + (j == N - 1 ? j : j + 1)] +\n            input[i * N + j]\n        ) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output = std::vector<double>(N * N, 0);\n}\n\nstd::vector<int> recvcounts(size, 0);\nstd::vector<int> displs(size, 0);\n\n// Calculate the receive counts and displacements for each rank\nfor (int i = 0; i < size; ++i) {\n    recvcounts[i] = (i == size - 1 ? N - i * rows_per_process : rows_per_process) * N;\n    displs[i] = i * rows_per_process * N;\n}\n\nMPI_Gatherv(local_output.data(), rows_per_process * N, MPI_DOUBLE,\n            output.data(), recvcounts.data(), displs.data(), MPI_DOUBLE,\n            0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.02379823,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.051877424,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.13401761889258,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (\n            input[(i > 0 ? i - 1 : i) * N + j] +\n            input[(i < N - 1 ? i + 1 : i) * N + j] +\n            input[i * N + (j > 0 ? j - 1 : j)] +\n            input[i * N + (j < N - 1 ? j + 1 : j)] +\n            input[i * N + j]\n        ) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output = std::vector<double>(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE,\n           output.data(), N * rows_per_process, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0240771884,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0516735502,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00585458100391,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE, output.data(), N * rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the boundaries if necessary\nif (rank == 0) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[j] = (input[j - 1] + input[j + 1] + input[N + j]) / 5; // Top boundary\n        output[(N - 1) * N + j] = (input[(N - 2) * N + j] + input[(N - 1) * N + j - 1] + input[(N - 1) * N + j + 1]) / 5; // Bottom boundary\n    }\n    for (size_t i = 1; i < N - 1; ++i) {\n        output[i * N] = (input[(i - 1) * N] + input[(i + 1) * N] + input[i * N + 1]) / 5; // Left boundary\n        output[i * N + N - 1] = (input[i * N + N - 2] + input[(i - 1) * N + N - 1] + input[(i + 1) * N + N - 1]) / 5; // Right boundary\n    }\n    // Corners\n    output[0] = (input[1] + input[N]) / 5; // Top-left corner\n    output[N - 1] = (input[N - 2] + input[2 * N - 1]) / 5; // Top-right corner\n    output[(N - 1) * N] = (input[(N - 2) * N] + input[(N - 1) * N + 1]) / 5; // Bottom-left corner\n    output[N * N - 1] = (input[N * (N - 1) - 1] + input[N * N - 2]) / 5; // Bottom-right corner\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.0374826884,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE, output.data(), N * rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the case where N is not divisible by size\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < N; ++i) {\n        for (size_t j = 1; j < N - 1; ++j) {\n            output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.0374845698,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_DOUBLE, output.data(), local_output.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.0375064592,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will work on\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        double top = (i == 0) ? 0 : input[(i - 1) * N + j];\n        double bottom = (i == N - 1) ? 0 : input[(i + 1) * N + j];\n        double left = input[i * N + j - 1];\n        double right = input[i * N + j + 1];\n        double center = input[i * N + j];\n        local_output[idx] = (top + bottom + left + right + center) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE,\n           output.data(), N * rows_per_process, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Handle the case where N is not divisible by size\nif (N % size != 0 && rank == 0) {\n    for (size_t i = size * rows_per_process; i < N; ++i) {\n        for (size_t j = 1; j < N - 1; ++j) {\n            output[i * N + j] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0243238674,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0375772084,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00546801499336,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE, output.data(), N * rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n\n// Handle the boundaries\nif (rank == 0) {\n    // Top boundary\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[j] = (input[j - 1] + input[j + 1] + input[N + j]) / 5;\n    }\n    // Bottom boundary\n    for (size_t j = 1; j < N - 1; ++j) {\n        output[(N - 1) * N + j] = (input[(N - 2) * N + j] + input[(N - 1) * N + j - 1] + input[(N - 1) * N + j + 1]) / 5;\n    }\n    // Left and right boundaries\n    for (size_t i = 1; i < N - 1; ++i) {\n        output[i * N] = (input[(i - 1) * N] + input[(i + 1) * N] + input[i * N + 1]) / 5;\n        output[i * N + N - 1] = (input[(i - 1) * N + N - 1] + input[(i + 1) * N + N - 1] + input[i * N + N - 2]) / 5;\n    }\n    // Corners\n    output[0] = (input[1] + input[N]) / 5;\n    output[N - 1] = (input[N - 2] + input[2 * N - 1]) / 5;\n    output[(N - 1) * N] = (input[(N - 2) * N] + input[(N - 1) * N + 1]) / 5;\n    output[N * N - 1] = (input[N * (N - 1) - 1] + input[N * N - 2]) / 5;\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.0381161982,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows each process will compute\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\n// Compute the local results\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        local_output[(i - start_row) * N + j] = (\n            input[(i ? i - 1 : i) * N + j] +\n            input[(i + 1 < N ? i + 1 : i) * N + j] +\n            input[i * N + (j ? j - 1 : j)] +\n            input[i * N + (j + 1 < N ? j + 1 : j)] +\n            input[i * N + j]\n        ) / 5;\n    }\n}\n\n// Gather the results at the root process\nif (rank == 0) {\n    output = std::vector<double>(N * N, 0);\n    // Copy the local output of rank 0 to the final output\n    std::copy(local_output.begin(), local_output.end(), output.begin() + start_row * N);\n    \n    // Receive results from other processes\n    for (int r = 1; r < size; ++r) {\n        size_t r_start_row = r * rows_per_process;\n        size_t r_end_row = (r == size - 1) ? N : r_start_row + rows_per_process;\n        MPI_Recv(output.data() + r_start_row * N, N * (r_end_row - r_start_row), MPI_DOUBLE, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n    }\n} else {\n    // Send local results to the root process\n    MPI_Send(local_output.data(), N * rows_per_process, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0237681402,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0607847604,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.12912164100117,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank == size - 1) ? N : start_row + rows_per_process;\n\nstd::vector<double> local_output(N * rows_per_process, 0.0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (\n            input[(i > 0 ? i - 1 : i) * N + j] +\n            input[(i < N - 1 ? i + 1 : i) * N + j] +\n            input[i * N + (j > 0 ? j - 1 : j)] +\n            input[i * N + (j < N - 1 ? j + 1 : j)] +\n            input[i * N + j]\n        ) / 5.0;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N, 0.0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE,\n           output.data(), N * rows_per_process, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n\n// Handle the case where N is not evenly divisible by size\nif (rank == 0 && N % size != 0) {\n    size_t remaining_rows = N % size;\n    size_t start_remaining = size * rows_per_process;\n    for (size_t i = start_remaining; i < N; ++i) {\n        for (size_t j = 1; j < N - 1; ++j) {\n            output[i * N + j] = (\n                input[(i > 0 ? i - 1 : i) * N + j] +\n                input[(i < N - 1 ? i + 1 : i) * N + j] +\n                input[i * N + (j > 0 ? j - 1 : j)] +\n                input[i * N + (j < N - 1 ? j + 1 : j)] +\n                input[i * N + j]\n            ) / 5.0;\n        }\n    }\n}\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0243330034,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0376698148,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00523075445156,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<double> local_output(N * rows_per_process, 0.0);\n\n// Compute the local portion of the output\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        size_t idx = (i - start_row) * N + j;\n        local_output[idx] = (input[(i - 1) * N + j] + input[(i + 1) * N + j] + input[i * N + j - 1] + input[i * N + j + 1] + input[i * N + j]) / 5;\n    }\n}\n\n// Gather the results at rank 0\nif (rank == 0) {\n    output.resize(N * N, 0.0);\n}\n\nMPI_Gather(local_output.data(), local_output.size(), MPI_DOUBLE, output.data(), local_output.size(), MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": false,
                "did_all_run": false,
                "are_any_valid": false,
                "are_all_valid": false,
                "best_sequential_runtime": null,
                "runs": [
                    {
                        "did_run": false,
                        "is_valid": null,
                        "runtime": 0.037875483,
                        "num_procs": 1
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        double north = (i > 0) ? input[(i - 1) * N + j] : 0;\n        double south = (i < N - 1) ? input[(i + 1) * N + j] : 0;\n        double west = (j > 0) ? input[i * N + j - 1] : 0;\n        double east = (j < N - 1) ? input[i * N + j + 1] : 0;\n        double center = input[i * N + j];\n        local_output[(i - start_row) * N + j] = (north + south + west + east + center) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE, output.data(), N * rows_per_process, MPI_DOUBLE, 0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0242938738,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0378924466,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00536641882578,
                        "num_procs": 512
                    }
                ]
            },
            {
                "generated_output": "\nint rank, size;\nMPI_Comm_rank(MPI_COMM_WORLD, &rank);\nMPI_Comm_size(MPI_COMM_WORLD, &size);\n\n// Calculate the number of rows per process\nsize_t rows_per_process = N / size;\nsize_t start_row = rank * rows_per_process;\nsize_t end_row = (rank + 1) * rows_per_process;\n\n// Handle the case where N is not divisible by size\nif (rank == size - 1) {\n    end_row = N;\n}\n\nstd::vector<double> local_output(N * rows_per_process, 0);\n\nfor (size_t i = start_row; i < end_row; ++i) {\n    for (size_t j = 1; j < N - 1; ++j) {\n        double top = (i > 0) ? input[(i - 1) * N + j] : 0;\n        double bottom = (i < N - 1) ? input[(i + 1) * N + j] : 0;\n        double left = (j > 0) ? input[i * N + j - 1] : 0;\n        double right = (j < N - 1) ? input[i * N + j + 1] : 0;\n        double center = input[i * N + j];\n        local_output[(i - start_row) * N + j] = (top + bottom + left + right + center) / 5;\n    }\n}\n\n// Gather the results from all processes to rank 0\nif (rank == 0) {\n    output.resize(N * N, 0);\n}\n\nMPI_Gather(local_output.data(), N * rows_per_process, MPI_DOUBLE,\n           output.data(), N * rows_per_process, MPI_DOUBLE,\n           0, MPI_COMM_WORLD);\n}",
                "source_write_success": true,
                "did_build": true,
                "is_source_valid": true,
                "did_any_run": true,
                "did_all_run": true,
                "are_any_valid": true,
                "are_all_valid": true,
                "best_sequential_runtime": 0.0266887496,
                "runs": [
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.0378638162,
                        "num_procs": 1
                    },
                    {
                        "did_run": true,
                        "is_valid": true,
                        "runtime": 0.00564786260781,
                        "num_procs": 512
                    }
                ]
            }
        ]
    },
    {
        "problem_type": "geometry",
        "language": "cpp",
        "name": "14_geometry_closest_pair_1d",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\ndouble distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(Kokkos::View<const double*> &x) {",
        "translation_prompt": "// CUDA implementation of closestPair\n// __device__ double distanceBetweenPoints(double x1, double x2) {\n// \treturn fabs(x1 - x2);\n// }\n// \n// /* Compute the distance between the closest two elements in the vector x.\n//    Store the result in distance.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n//    input: [7, 3, 9, 12, 31, 1]\n//    output: 2\n// */\n// __global__ void closestPair(const double *x, size_t N, double *distance) {\n// \n//     int tid = blockIdx.x * blockDim.x + threadIdx.x;\n//     double minDist = DBL_MAX;\n// \n//     for (int i = 0; i < N; i++) {\n//         for (int j = i + 1; j < N; j++) {\n//             double dist = distanceBetweenPoints(x[i], x[j]);\n//             if (dist < minDist) {\n//                 minDist = dist;\n//             }\n//         }\n//     }\n// \n//     distance[tid] = minDist;\n// }\n\n// Kokkos implementation of closestPair\n#include <Kokkos_Core.hpp>\n\ndouble distance(double x1, double x2) {\n\treturn std::abs(x1 - x2);\n}\n\n/* Return the distance between the closest two elements in the vector x.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example: \n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\ndouble closestPair(Kokkos::View<const double*> &x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "__device__ double distanceBetweenPoints(double x1, double x2) {\n\treturn fabs(x1 - x2);\n}\n\n/* Compute the distance between the closest two elements in the vector x.\n   Store the result in distance.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Example:\n\n   input: [7, 3, 9, 12, 31, 1]\n   output: 2\n*/\n__global__ void closestPair(const double *x, size_t N, double *distance) {\n\n    int tid = blockIdx.x * blockDim.x + threadIdx.x;\n    double minDist = DBL_MAX;\n\n    for (int i = 0; i < N; i++) {\n        for (int j = i + 1; j < N; j++) {\n            double dist = distanceBetweenPoints(x[i], x[j]);\n            if (dist < minDist) {\n                minDist = dist;\n            }\n        }\n    }\n\n    distance[tid] = minDist;\n}",
        "translation_function_name": "closestPair",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nstruct MinDistanceFunctor {\n    Kokkos::View<const double*> x;\n    size_t N;\n    MinDistanceFunctor(Kokkos::View<const double*> x_, size_t N_) : x(x_), N(N_) {}\n\n    KOKKOS_INLINE_FUNCTION void operator()(const int i, double& minDist) const {\n        for (size_t j = i + 1; j < N; ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < minDist) {\n                minDist = dist;\n            }\n        }\n    }\n};\n\ndouble minDist = DBL_MAX;\nKokkos::parallel_reduce(\"ClosestPair\", N, MinDistanceFunctor(x, N), Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double min_distance;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), min_distance(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& local_min) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < local_min) {\n                    local_min = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dst, const volatile double& src) const {\n            if (src < dst) dst = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& initial_value) const {\n            initial_value = DBL_MAX;\n        }\n    };\n\n    MinDistance min_distance_functor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), min_distance_functor, Kokkos::Min<double>(min_distance_functor.min_distance));\n    return min_distance_functor.min_distance;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& localMinDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < localMinDist) {\n                    localMinDist = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dest, const volatile double& src) const {\n            if (src < dest) dest = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& initialVal) const {\n            initialVal = DBL_MAX;\n        }\n    };\n\n    double minDist;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\n    double minDist = DBL_MAX;\n    Kokkos::parallel_reduce(\"ClosestPair\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i, double& threadMinDist) {\n        for (size_t j = i + 1; j < x.extent(0); ++j) {\n            double dist = distance(x(i), x(j));\n            if (dist < threadMinDist) {\n                threadMinDist = dist;\n            }\n        }\n    }, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& minDistLocal) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < minDistLocal) {\n                    minDistLocal = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dst, const volatile double& src) const {\n            if (src < dst) dst = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& value) const {\n            value = DBL_MAX;\n        }\n    };\n\n    double minDist;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\nstruct MinDistance {\n    Kokkos::View<const double*> x;\n    double minDist;\n\n    MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n    KOKKOS_INLINE_FUNCTION\n    void operator()(const int i, double& localMinDist) const {\n        for (size_t j = i + 1; j < x.extent(0); ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < localMinDist) {\n                localMinDist = dist;\n            }\n        }\n    }\n\n    KOKKOS_INLINE_FUNCTION\n    void join(volatile double& update, const volatile double& input) const {\n        if (input < update) update = input;\n    }\n\n    KOKKOS_INLINE_FUNCTION\n    void init(double& initial) const {\n        initial = DBL_MAX;\n    }\n};\n\ndouble minDist;\nMinDistance minDistanceFunctor(x);\nKokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\nstruct MinDistanceFunctor {\n    Kokkos::View<const double*> x;\n    size_t N;\n\n    MinDistanceFunctor(Kokkos::View<const double*> x_, size_t N_) : x(x_), N(N_) {}\n\n    KOKKOS_INLINE_FUNCTION void operator()(const int i, double& minDist) const {\n        for (size_t j = i + 1; j < N; ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < minDist) {\n                minDist = dist;\n            }\n        }\n    }\n};\n\ndouble minDist = DBL_MAX;\nKokkos::parallel_reduce(\"ClosestPair\", N, MinDistanceFunctor(x, N), Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\nstruct MinDistanceFunctor {\n    Kokkos::View<const double*> x;\n    size_t N;\n    MinDistanceFunctor(Kokkos::View<const double*> x_, size_t N_) : x(x_), N(N_) {}\n\n    KOKKOS_INLINE_FUNCTION void operator()(const int i, double& minDist) const {\n        for (size_t j = i + 1; j < N; ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < minDist) {\n                minDist = dist;\n            }\n        }\n    }\n};\n\ndouble minDist = DBL_MAX;\nKokkos::parallel_reduce(\"ClosestPair\", N, MinDistanceFunctor(x, N), Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double min_distance;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), min_distance(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& local_min) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < local_min) {\n                    local_min = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dst, const volatile double& src) const {\n            if (src < dst) dst = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& initial_value) const {\n            initial_value = DBL_MAX;\n        }\n    };\n\n    double min_distance;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(min_distance));\n    return min_distance;\n}",
            "\nstruct MinDistanceFunctor {\n    Kokkos::View<const double*> x;\n    double minDist;\n\n    MinDistanceFunctor(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n    KOKKOS_INLINE_FUNCTION\n    void operator()(const int i, double& localMinDist) const {\n        for (size_t j = i + 1; j < x.extent(0); ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < localMinDist) {\n                localMinDist = dist;\n            }\n        }\n    }\n\n    KOKKOS_INLINE_FUNCTION\n    void join(volatile double& update, const volatile double& input) const {\n        if (input < update) update = input;\n    }\n\n    KOKKOS_INLINE_FUNCTION\n    void init(double& update) const {\n        update = DBL_MAX;\n    }\n};\n\ndouble minDist;\nMinDistanceFunctor minDistanceFunctor(x);\nKokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& localMinDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < localMinDist) {\n                    localMinDist = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dst, const volatile double& src) const {\n            if (src < dst) dst = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& initial_value) const {\n            initial_value = DBL_MAX;\n        }\n    };\n\n    double minDist;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& localMinDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < localMinDist) {\n                    localMinDist = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& update, const volatile double& input) const {\n            if (input < update) {\n                update = input;\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& initial) const {\n            initial = DBL_MAX;\n        }\n    };\n\n    double minDist;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\nstruct MinDistanceFunctor {\n    Kokkos::View<const double*> x;\n    size_t N;\n\n    MinDistanceFunctor(Kokkos::View<const double*> x_, size_t N_) : x(x_), N(N_) {}\n\n    KOKKOS_INLINE_FUNCTION void operator()(const int i, double& minDist) const {\n        for (size_t j = i + 1; j < N; ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < minDist) {\n                minDist = dist;\n            }\n        }\n    }\n};\n\ndouble minDist = DBL_MAX;\nKokkos::parallel_reduce(\"ClosestPair\", N, MinDistanceFunctor(x, N), Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& localMinDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < localMinDist) {\n                    localMinDist = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dst, const volatile double& src) const {\n            if (src < dst) dst = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& initial_value) const {\n            initial_value = DBL_MAX;\n        }\n    };\n\n    double minDist;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\nstruct MinDistanceFunctor {\n    Kokkos::View<const double*> x;\n    size_t N;\n    MinDistanceFunctor(Kokkos::View<const double*> x_, size_t N_) : x(x_), N(N_) {}\n\n    KOKKOS_INLINE_FUNCTION void operator()(const int i, double& minDist) const {\n        for (size_t j = i + 1; j < N; ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < minDist) {\n                minDist = dist;\n            }\n        }\n    }\n};\n\ndouble minDist = DBL_MAX;\nKokkos::parallel_reduce(\"ClosestPair\", N, MinDistanceFunctor(x, N), Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& localMinDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < localMinDist) {\n                    localMinDist = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dest, const volatile double& src) const {\n            if (src < dest) dest = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& val) const {\n            val = DBL_MAX;\n        }\n    };\n\n    double minDist;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\nstruct MinDistanceFunctor {\n    Kokkos::View<const double*> x;\n    size_t N;\n    MinDistanceFunctor(Kokkos::View<const double*> x_, size_t N_) : x(x_), N(N_) {}\n\n    KOKKOS_INLINE_FUNCTION void operator()(const int i, double& localMin) const {\n        for (size_t j = i + 1; j < N; ++j) {\n            double dist = std::abs(x(i) - x(j));\n            if (dist < localMin) {\n                localMin = dist;\n            }\n        }\n    }\n};\n\ndouble minDist = DBL_MAX;\nKokkos::parallel_reduce(\"ClosestPair\", N, MinDistanceFunctor(x, N), Kokkos::Min<double>(minDist));\nreturn minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& localMinDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < localMinDist) {\n                    localMinDist = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dest, const volatile double& src) const {\n            if (src < dest) dest = src;\n        }\n    };\n\n    double minDist = DBL_MAX;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        double minDist;\n\n        MinDistance(Kokkos::View<const double*> x_) : x(x_), minDist(DBL_MAX) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& localMinDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < localMinDist) {\n                    localMinDist = dist;\n                }\n            }\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void join(volatile double& dest, const volatile double& src) const {\n            if (src < dest) dest = src;\n        }\n\n        KOKKOS_INLINE_FUNCTION\n        void init(double& val) const {\n            val = DBL_MAX;\n        }\n    };\n\n    double minDist;\n    MinDistance minDistanceFunctor(x);\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), minDistanceFunctor, Kokkos::Min<double>(minDist));\n    return minDist;\n}",
            "\n    struct MinDistance {\n        Kokkos::View<const double*> x;\n        MinDistance(Kokkos::View<const double*> x_) : x(x_) {}\n\n        KOKKOS_INLINE_FUNCTION\n        void operator()(const int i, double& minDist) const {\n            for (size_t j = i + 1; j < x.extent(0); ++j) {\n                double dist = std::abs(x(i) - x(j));\n                if (dist < minDist) {\n                    minDist = dist;\n                }\n            }\n        }\n    };\n\n    double minDist = DBL_MAX;\n    Kokkos::parallel_reduce(\"ClosestPair\", x.extent(0), MinDistance(x), Kokkos::Min<double>(minDist));\n    return minDist;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "15_graph_edge_count",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix. A represents a directed graph.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(Kokkos::View<const int**> &A, size_t N) {",
        "translation_prompt": "// CUDA implementation of edgeCount\n// /* Count the number of edges in the directed graph defined by the adjacency matrix A.\n//    Store the result in numEdges. A represents a directed graph.\n//    A is an NxN adjacency matrix stored in row-major.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n// \t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n//    output: 3\n// */\n// __global__ void edgeCount(const int *A, size_t N, int *numEdges) {\n// int tid = threadIdx.x;\n// \tint bid = blockIdx.x;\n// \tint numThreads = blockDim.x;\n// \tint numBlocks = gridDim.x;\n// \tint start = bid * numThreads + tid;\n// \tint end = (bid + 1) * numThreads;\n// \tint count = 0;\n// \tfor (int i = start; i < end; i++) {\n// \t\tfor (int j = 0; j < N; j++) {\n// \t\t\tif (A[i * N + j] == 1) {\n// \t\t\t\tcount++;\n// \t\t\t}\n// \t\t}\n// \t}\n// \t__syncthreads();\n// \tif (tid == 0) {\n// \t\tatomicAdd(numEdges, count);\n// \t}\n// }\n\n// Kokkos implementation of edgeCount\n#include <Kokkos_Core.hpp>\n\n/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix. A represents a directed graph.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint edgeCount(Kokkos::View<const int**> &A, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Count the number of edges in the directed graph defined by the adjacency matrix A.\n   Store the result in numEdges. A represents a directed graph.\n   A is an NxN adjacency matrix stored in row-major.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\n__global__ void edgeCount(const int *A, size_t N, int *numEdges) {\nint tid = threadIdx.x;\n\tint bid = blockIdx.x;\n\tint numThreads = blockDim.x;\n\tint numBlocks = gridDim.x;\n\tint start = bid * numThreads + tid;\n\tint end = (bid + 1) * numThreads;\n\tint count = 0;\n\tfor (int i = start; i < end; i++) {\n\t\tfor (int j = 0; j < N; j++) {\n\t\t\tif (A[i * N + j] == 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t__syncthreads();\n\tif (tid == 0) {\n\t\tatomicAdd(numEdges, count);\n\t}\n}",
        "translation_function_name": "edgeCount",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A(i, j) == 1) {\n      localCount++;\n    }\n  }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A(i, j) == 1) {\n      localCount++;\n    }\n  }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint totalEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, totalEdges);\nreturn totalEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& thread_sum) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            thread_sum++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint totalEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, totalEdges);\nreturn totalEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint totalEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, totalEdges);\nreturn totalEdges;\n}",
            "\nint totalEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, totalEdges);\nreturn totalEdges;\n}",
            "\nint totalEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& threadSum) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            threadSum++;\n        }\n    }\n}, totalEdges);\nreturn totalEdges;\n}",
            "\nint totalEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, totalEdges);\nreturn totalEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n  for (size_t j = 0; j < N; ++j) {\n    if (A(i, j) == 1) {\n      localCount++;\n    }\n  }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"CountEdges\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}",
            "\nint numEdges = 0;\nKokkos::parallel_reduce(\"edgeCount\", N, KOKKOS_LAMBDA(const int i, int& localCount) {\n    for (size_t j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            localCount++;\n        }\n    }\n}, numEdges);\nreturn numEdges;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "17_graph_highest_degree",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix. A is an undirected graph.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(Kokkos::View<const int**> &A, size_t N) {",
        "translation_prompt": "// CUDA implementation of maxDegree\n// /* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph. \n//    Store the result in maxDegree.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n// \t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n//    output: 3\n// */\n// __global__ void maxDegree(const int *A, size_t N, int *maxDegree) {\n// int tid = threadIdx.x;\n// \tint max = 0;\n// \tfor (int i = tid; i < N; i += blockDim.x) {\n// \t\tint degree = 0;\n// \t\tfor (int j = 0; j < N; j++) {\n// \t\t\tif (A[i * N + j] == 1) {\n// \t\t\t\tdegree++;\n// \t\t\t}\n// \t\t}\n// \t\tif (degree > max) {\n// \t\t\tmax = degree;\n// \t\t}\n// \t}\n// \t__syncthreads();\n// \tatomicMax(maxDegree, max);\n// }\n\n// Kokkos implementation of maxDegree\n#include <Kokkos_Core.hpp>\n\n/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix. A is an undirected graph.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\nint maxDegree(Kokkos::View<const int**> &A, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute the highest node degree in the undirected graph. The graph is defined in the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph. \n   Store the result in maxDegree.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Example:\n\n\t input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]\n   output: 3\n*/\n__global__ void maxDegree(const int *A, size_t N, int *maxDegree) {\nint tid = threadIdx.x;\n\tint max = 0;\n\tfor (int i = tid; i < N; i += blockDim.x) {\n\t\tint degree = 0;\n\t\tfor (int j = 0; j < N; j++) {\n\t\t\tif (A[i * N + j] == 1) {\n\t\t\t\tdegree++;\n\t\t\t}\n\t\t}\n\t\tif (degree > max) {\n\t\t\tmax = degree;\n\t\t}\n\t}\n\t__syncthreads();\n\tatomicMax(maxDegree, max);\n}",
        "translation_function_name": "maxDegree",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& local_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > local_max) {\n        local_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nKokkos::View<int> maxDegreeView(\"maxDegreeView\");\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(maxDegreeView));\nint maxDegree = 0;\nKokkos::deep_copy(maxDegree, maxDegreeView);\nreturn maxDegree;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& lmax) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    lmax = degree > lmax ? degree : lmax;\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nKokkos::View<int> maxDegreeView(\"maxDegree\");\nKokkos::parallel_reduce(\"ComputeMaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(maxDegreeView));\nint maxDegree = 0;\nKokkos::deep_copy(maxDegree, maxDegreeView);\nreturn maxDegree;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& lmax) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    lmax = degree > lmax ? degree : lmax;\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nKokkos::View<int> maxDegree(\"maxDegree\");\nKokkos::parallel_reduce(\"MaxDegreeKernel\", N, KOKKOS_LAMBDA(const int i, int& localMax) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    localMax = degree > localMax ? degree : localMax;\n}, Kokkos::Max<int>(maxDegree));\nint result;\nKokkos::deep_copy(result, maxDegree);\nreturn result;\n}",
            "\nint maxDeg = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(maxDeg));\nreturn maxDeg;\n}",
            "\nKokkos::View<int> maxDegree(\"maxDegree\");\nKokkos::parallel_reduce(\"MaxDegreeKernel\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(maxDegree));\nint result;\nKokkos::deep_copy(result, maxDegree);\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& lmax) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    lmax = degree > lmax ? degree : lmax;\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nint result;\nKokkos::View<int> maxDegree(\"maxDegree\");\nKokkos::parallel_reduce(\"MaxDegreeKernel\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(maxDegree));\nKokkos::deep_copy(result, maxDegree);\nreturn result;\n}",
            "\nint result = 0;\nKokkos::parallel_reduce(\"MaxDegree\", N, KOKKOS_LAMBDA(const int i, int& lmax) {\n    int degree = 0;\n    for (size_t j = 0; j < N; ++j) {\n        degree += A(i, j);\n    }\n    lmax = degree > lmax ? degree : lmax;\n}, Kokkos::Max<int>(result));\nreturn result;\n}",
            "\nKokkos::View<int> maxDegree(\"maxDegree\");\nKokkos::parallel_reduce(\"MaxDegreeKernel\", N, KOKKOS_LAMBDA(const int i, int& thread_max) {\n    int degree = 0;\n    for (int j = 0; j < N; j++) {\n        degree += A(i, j);\n    }\n    if (degree > thread_max) {\n        thread_max = degree;\n    }\n}, Kokkos::Max<int>(maxDegree));\nint result;\nKokkos::deep_copy(result, maxDegree);\nreturn result;\n}"
        ]
    },
    {
        "problem_type": "graph",
        "language": "cpp",
        "name": "19_graph_shortest_path",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix. A is an undirected graph.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(Kokkos::View<const int**> &A, size_t N, int source, int dest) {",
        "translation_prompt": "// CUDA implementation of shortestPathLength\n// /* Compute the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n//    Store the result in pathLength.\n//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n//    Example:\n// \n// \t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n//    output: 2\n// */\n// __global__ void shortestPathLength(const int *A, size_t N, int source, int dest, int *pathLength) {\n// int row = blockIdx.y * blockDim.y + threadIdx.y;\n//     int col = blockIdx.x * blockDim.x + threadIdx.x;\n// \n//     if (row < N && col < N) {\n//         if (row == col) {\n//             pathLength[row] = 0;\n//         } else if (A[row * N + col] == 1) {\n//             pathLength[row] = 1;\n//         } else {\n//             pathLength[row] = INT_MAX;\n//         }\n// \n//         __syncthreads();\n// \n//         for (int k = 0; k < N; ++k) {\n//             if (pathLength[row] + pathLength[k] < pathLength[col]) {\n//                 pathLength[col] = pathLength[row] + pathLength[k];\n//             }\n//             __syncthreads();\n//         }\n//     }\n// \n//     if (row == dest) {\n//         *pathLength = pathLength[row];\n//     }\n// }\n\n// Kokkos implementation of shortestPathLength\n#include <Kokkos_Core.hpp>\n\n/* Return the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix. A is an undirected graph.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\nint shortestPathLength(Kokkos::View<const int**> &A, size_t N, int source, int dest) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute the length of the shortest path from source to dest in the undirected graph defined by the adjacency matrix A.\n   A is an NxN adjacency matrix stored in row-major. A is an undirected graph.\n   Store the result in pathLength.\n   Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n   Example:\n\n\t input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3\n   output: 2\n*/\n__global__ void shortestPathLength(const int *A, size_t N, int source, int dest, int *pathLength) {\nint row = blockIdx.y * blockDim.y + threadIdx.y;\n    int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n    if (row < N && col < N) {\n        if (row == col) {\n            pathLength[row] = 0;\n        } else if (A[row * N + col] == 1) {\n            pathLength[row] = 1;\n        } else {\n            pathLength[row] = INT_MAX;\n        }\n\n        __syncthreads();\n\n        for (int k = 0; k < N; ++k) {\n            if (pathLength[row] + pathLength[k] < pathLength[col]) {\n                pathLength[col] = pathLength[row] + pathLength[k];\n            }\n            __syncthreads();\n        }\n    }\n\n    if (row == dest) {\n        *pathLength = pathLength[row];\n    }\n}",
        "translation_function_name": "shortestPathLength",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    pathLength(i) = (i == source) ? 0 : INT_MAX;\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"ComputeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > A(i, k) + pathLength(k) && A(i, k) != 0) {\n            pathLength(i) = A(i, k) + pathLength(k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(Kokkos::subview(pathLength, dest), result);\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    for (int j = 0; j < N; ++j) {\n        if (i == j) {\n            pathLength(i) = 0;\n        } else if (A(i, j) == 1) {\n            pathLength(i) = 1;\n        }\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(k) + A(i, k)) {\n            pathLength(i) = pathLength(k) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    for (int j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            pathLength(i) = 1;\n        }\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) + pathLength(k) < pathLength(i)) {\n            pathLength(i) = pathLength(i) + pathLength(k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == source) {\n        pathLength(i) = 0;\n    } else {\n        pathLength(i) = INT_MAX;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > A(i, k) + pathLength(k) && A(i, k) != 0) {\n            pathLength(i) = A(i, k) + pathLength(k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(Kokkos::subview(pathLength, dest), result);\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == source) {\n        pathLength(i) = 0;\n    } else {\n        pathLength(i) = INT_MAX;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > A(i, k) + pathLength(k) && A(i, k) != 0) {\n            pathLength(i) = A(i, k) + pathLength(k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(Kokkos::subview(pathLength, dest), result);\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    for (int j = 0; j < N; ++j) {\n        if (i == j) {\n            pathLength(i) = 0;\n        } else if (A(i, j) == 1) {\n            pathLength(i) = 1;\n        }\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        for (int j = 0; j < N; ++j) {\n            if (pathLength(i) + A(i, j) < pathLength(j)) {\n                pathLength(j) = pathLength(i) + A(i, j);\n            }\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"UpdatePathLength\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    for (int j = 0; j < N; ++j) {\n        if (i == j) {\n            pathLength(i) = 0;\n        } else if (A(i, j) == 1) {\n            pathLength(i) = 1;\n        }\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) + pathLength(k) < pathLength(i)) {\n            pathLength(i) = pathLength(i) + pathLength(k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    for (int j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            pathLength(i) = 1;\n        }\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"ComputeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) + pathLength(k) < pathLength(i)) {\n            pathLength(i) = pathLength(i) + pathLength(k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"initializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    for (int j = 0; j < N; ++j) {\n        if (A(i, j) == 1) {\n            pathLength(i) = 1;\n        }\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"computeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) + pathLength(k) < pathLength(i)) {\n            pathLength(i) = pathLength(i) + pathLength(k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"ComputeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"ComputeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"UpdatePathLength\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(k) + A(i, k)) {\n            pathLength(i) = pathLength(k) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"ComputeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}",
            "\nKokkos::View<int*> pathLength(\"pathLength\", N);\nKokkos::deep_copy(pathLength, INT_MAX);\npathLength(source) = 0;\n\nKokkos::parallel_for(\"InitializePathLength\", N, KOKKOS_LAMBDA(const int i) {\n    if (A(source, i) == 1) {\n        pathLength(i) = 1;\n    }\n});\n\nKokkos::fence();\n\nfor (int k = 0; k < N; ++k) {\n    Kokkos::parallel_for(\"ComputeShortestPath\", N, KOKKOS_LAMBDA(const int i) {\n        if (pathLength(i) > pathLength(source) + A(i, k)) {\n            pathLength(i) = pathLength(source) + A(i, k);\n        }\n    });\n    Kokkos::fence();\n}\n\nint result;\nKokkos::deep_copy(result, Kokkos::subview(pathLength, dest));\nreturn result;\n}"
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "28_reduce_smallest_odd_number",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Return the value of the smallest odd number in the vector x.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(Kokkos::View<const int*> const& x) {",
        "translation_prompt": "// CUDA implementation of smallestOdd\n// /* Find the value of the smallest odd number in the vector x. Store it in smallest.\n//    Use CUDA to compute in parallel. The kernel is launched with the same number of threads as elements in x.\n//    Examples:\n// \n//    input: [7, 9, 5, 2, 8, 16, 4, 1]\n//    output: 1\n// \n//    input: [8, 36, 7, 2, 11]\n//    output: 7\n// */\n// __global__ void smallestOdd(const int *x, size_t N, int *smallest) {\n// int thread_id = threadIdx.x;\n//     int block_id = blockIdx.x;\n//     int stride = blockDim.x;\n// \n//     int local_smallest = x[block_id * stride + thread_id];\n//     for (int i = 1; i < stride; i++) {\n//         int value = x[block_id * stride + thread_id + i];\n//         if (value % 2 == 1 && value < local_smallest) {\n//             local_smallest = value;\n//         }\n//     }\n//     if (local_smallest % 2 == 1) {\n//         atomicMin(smallest, local_smallest);\n//     }\n// }\n\n// Kokkos implementation of smallestOdd\n#include <Kokkos_Core.hpp>\n\n/* Return the value of the smallest odd number in the vector x.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\nint smallestOdd(Kokkos::View<const int*> const& x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Find the value of the smallest odd number in the vector x. Store it in smallest.\n   Use CUDA to compute in parallel. The kernel is launched with the same number of threads as elements in x.\n   Examples:\n\n   input: [7, 9, 5, 2, 8, 16, 4, 1]\n   output: 1\n\n   input: [8, 36, 7, 2, 11]\n   output: 7\n*/\n__global__ void smallestOdd(const int *x, size_t N, int *smallest) {\nint thread_id = threadIdx.x;\n    int block_id = blockIdx.x;\n    int stride = blockDim.x;\n\n    int local_smallest = x[block_id * stride + thread_id];\n    for (int i = 1; i < stride; i++) {\n        int value = x[block_id * stride + thread_id + i];\n        if (value % 2 == 1 && value < local_smallest) {\n            local_smallest = value;\n        }\n    }\n    if (local_smallest % 2 == 1) {\n        atomicMin(smallest, local_smallest);\n    }\n}",
        "translation_function_name": "smallestOdd",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"smallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    int value = x(i);\n    if (value % 2 == 1 && value < local_smallest) {\n        local_smallest = value;\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest_odd = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest_odd));\nreturn smallest_odd;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"smallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest_odd = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest_odd));\nreturn smallest_odd;\n}",
            "\nint smallest_odd = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest_odd));\nreturn smallest_odd;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"smallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest;\n}",
            "\nint smallest_odd = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0),\n    KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n        if (x(i) % 2 == 1 && x(i) < local_smallest) {\n            local_smallest = x(i);\n        }\n    },\n    Kokkos::Min<int>(smallest_odd)\n);\nreturn smallest_odd == INT_MAX ? 0 : smallest_odd;\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"smallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 indicates no odd numbers found\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"smallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned if no odd number is found.\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"SmallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest == INT_MAX ? -1 : smallest; // Assuming -1 is returned if no odd number is found\n}",
            "\nint smallest = INT_MAX;\nKokkos::parallel_reduce(\"smallestOdd\", x.extent(0), KOKKOS_LAMBDA(const int& i, int& local_smallest) {\n    if (x(i) % 2 == 1 && x(i) < local_smallest) {\n        local_smallest = x(i);\n    }\n}, Kokkos::Min<int>(smallest));\nreturn smallest == INT_MAX ? -1 : smallest;\n}"
        ]
    },
    {
        "problem_type": "reduce",
        "language": "cpp",
        "name": "27_reduce_average",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Return the average of the vector x.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(Kokkos::View<const double*> const& x) {",
        "translation_prompt": "// CUDA implementation of average\n// /* Compute the average of the vector x. Store the result in average.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n//    Examples:\n//    \n// \t input: [1, 8, 4, 5, 1]\n//    output: 3.8\n// \n//    input: [2, 2, 2, 3]\n//    output: 2.25\n// */\n// __global__ void average(const double *x, size_t N, double *average) {\n// \n//     int tid = blockIdx.x * blockDim.x + threadIdx.x;\n//     double sum = 0.0;\n//     if (tid < N) {\n//         sum = x[tid];\n//     }\n//     sum = atomicAdd(average, sum);\n//     __syncthreads();\n//     if (tid == 0) {\n//         *average /= N;\n//     }\n// }\n\n// Kokkos implementation of average\n#include <Kokkos_Core.hpp>\n\n/* Return the average of the vector x.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\t\t\n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\ndouble average(Kokkos::View<const double*> const& x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute the average of the vector x. Store the result in average.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n   Examples:\n   \n\t input: [1, 8, 4, 5, 1]\n   output: 3.8\n\n   input: [2, 2, 2, 3]\n   output: 2.25\n*/\n__global__ void average(const double *x, size_t N, double *average) {\n\n    int tid = blockIdx.x * blockDim.x + threadIdx.x;\n    double sum = 0.0;\n    if (tid < N) {\n        sum = x[tid];\n    }\n    sum = atomicAdd(average, sum);\n    __syncthreads();\n    if (tid == 0) {\n        *average /= N;\n    }\n}\n",
        "translation_function_name": "average",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\n    double total_sum = 0.0;\n    Kokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int i, double& local_sum) {\n        local_sum += x(i);\n    }, total_sum);\n    return total_sum / x.extent(0);\n}\n",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int i, double& lsum) {\n    lsum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int i, double& lsum) {\n    lsum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& lsum) {\n    lsum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& lsum) {\n    lsum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble total_sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& update) {\n    update += x(i);\n}, total_sum);\nreturn total_sum / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int i, double& lsum) {\n    lsum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int i, double& lsum) {\n    lsum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& lsum) {\n    lsum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& lsum) {\n    lsum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int i, double& lsum) {\n    lsum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble total = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int i, double& lsum) {\n    lsum += x(i);\n}, total);\nreturn total / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}",
            "\ndouble total_sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, total_sum);\nreturn total_sum / x.extent(0);\n}",
            "\ndouble sum = 0.0;\nKokkos::parallel_reduce(\"ComputeAverage\", x.extent(0), KOKKOS_LAMBDA(const int& i, double& local_sum) {\n    local_sum += x(i);\n}, sum);\nreturn sum / x.extent(0);\n}"
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "31_scan_scan_with_min_function",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Replace the i-th element of the array x with the minimum value from indices 0 through i.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(Kokkos::View<float*> &x) {",
        "translation_prompt": "// CUDA implementation of partialMinimums\n// /* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n//    Examples:\n// \n//    input: [8, 6, -1, 7, 3, 4, 4]\n//    output: [8, 6, -1, -1, -1, -1, -1]\n// \n//    input: [5, 4, 6, 4, 3, 6, 1, 1]\n//    output: [5, 4, 4, 4, 3, 3, 1, 1]\n// */\n// __global__ void partialMinimums(float *x, size_t N) {\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (i < N) {\n//         float min = x[i];\n//         for (int j = 0; j < i; j++) {\n//             if (x[j] < min) {\n//                 min = x[j];\n//             }\n//         }\n//         x[i] = min;\n//     }\n// }\n\n// Kokkos implementation of partialMinimums\n#include <Kokkos_Core.hpp>\n\n/* Replace the i-th element of the array x with the minimum value from indices 0 through i.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\nvoid partialMinimums(Kokkos::View<float*> &x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Replace the i-th element of the vector x with the minimum value from indices 0 through i.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n   Examples:\n\n   input: [8, 6, -1, 7, 3, 4, 4]\n   output: [8, 6, -1, -1, -1, -1, -1]\n\n   input: [5, 4, 6, 4, 3, 6, 1, 1]\n   output: [5, 4, 4, 4, 3, 3, 1, 1]\n*/\n__global__ void partialMinimums(float *x, size_t N) {\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < N) {\n        float min = x[i];\n        for (int j = 0; j < i; j++) {\n            if (x[j] < min) {\n                min = x[j];\n            }\n        }\n        x[i] = min;\n    }\n}",
        "translation_function_name": "partialMinimums",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"ComputePartialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}",
            "\nKokkos::parallel_for(\"partialMinimums\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    float min = x(i);\n    for (int j = 0; j < i; j++) {\n        if (x(j) < min) {\n            min = x(j);\n        }\n    }\n    x(i) = min;\n});\n}"
        ]
    },
    {
        "problem_type": "scan",
        "language": "cpp",
        "name": "30_scan_prefix_sum",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute the prefix sum of the vector x into output.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(Kokkos::View<const double*> const& x, Kokkos::View<double*> &output) {",
        "translation_prompt": "// CUDA implementation of prefixSum\n// /* Compute the prefix sum of the vector x into output.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as elements in x.\n//    Example:\n//    \n//    input: [1, 7, 4, 6, 6, 2]\n//    output: [1, 8, 12, 18, 24, 26]\n// */\n// __global__ void prefixSum(const double *x, double *output, size_t N) {\n// int tid = threadIdx.x + blockIdx.x * blockDim.x;\n//     int stride = blockDim.x * gridDim.x;\n// \n//     for (size_t i = tid; i < N; i += stride) {\n//         double sum = 0;\n//         for (size_t j = 0; j <= i; ++j) {\n//             sum += x[j];\n//         }\n//         output[i] = sum;\n//     }\n// }\n\n// Kokkos implementation of prefixSum\n#include <Kokkos_Core.hpp>\n\n/* Compute the prefix sum of the vector x into output.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\nvoid prefixSum(Kokkos::View<const double*> const& x, Kokkos::View<double*> &output) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute the prefix sum of the vector x into output.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as elements in x.\n   Example:\n   \n   input: [1, 7, 4, 6, 6, 2]\n   output: [1, 8, 12, 18, 24, 26]\n*/\n__global__ void prefixSum(const double *x, double *output, size_t N) {\nint tid = threadIdx.x + blockIdx.x * blockDim.x;\n    int stride = blockDim.x * gridDim.x;\n\n    for (size_t i = tid; i < N; i += stride) {\n        double sum = 0;\n        for (size_t j = 0; j <= i; ++j) {\n            sum += x[j];\n        }\n        output[i] = sum;\n    }\n}",
        "translation_function_name": "prefixSum",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_scan(Kokkos::RangePolicy<>(0, x.extent(0)),\n    KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n        update += x(i);\n        if (final) {\n            output(i) = update;\n        }\n    });\n}",
            "\nKokkos::parallel_for(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (int j = 0; j <= i; ++j) {\n        sum += x(j);\n    }\n    output(i) = sum;\n});\n}",
            "\nKokkos::parallel_scan(\"PrefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"PrefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"PrefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"PrefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (int j = 0; j <= i; ++j) {\n        sum += x(j);\n    }\n    output(i) = sum;\n});\n}",
            "\nKokkos::parallel_scan(Kokkos::RangePolicy<>(0, x.extent(0)),\n    KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n        update += x(i);\n        if (final) {\n            output(i) = update;\n        }\n    });\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"PrefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"PrefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (int j = 0; j <= i; ++j) {\n        sum += x(j);\n    }\n    output(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (int j = 0; j <= i; ++j) {\n        sum += x(j);\n    }\n    output(i) = sum;\n});\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}",
            "\nKokkos::parallel_scan(\"prefixSum\", x.extent(0), KOKKOS_LAMBDA(const int i, double& update, const bool final) {\n    update += x(i);\n    if (final) {\n        output(i) = update;\n    }\n});\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "56_transform_negate_odds",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* In the vector x negate the odd values and divide the even values by 2.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(Kokkos::View<int*> &x) {",
        "translation_prompt": "// CUDA implementation of negateOddsAndHalveEvens\n// /* In the vector x negate the odd values and divide the even values by 2.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n//    Example:\n// \n//    input: [16, 11, 12, 14, 1, 0, 5]\n//    output: [8, -11, 6, 7, -1, 0, -5]\n// */\n// __global__ void negateOddsAndHalveEvens(int *x, size_t N) {\n// int idx = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (idx < N) {\n//         if (x[idx] % 2 == 0) {\n//             x[idx] /= 2;\n//         } else {\n//             x[idx] = -x[idx];\n//         }\n//     }\n// }\n\n// Kokkos implementation of negateOddsAndHalveEvens\n#include <Kokkos_Core.hpp>\n\n/* In the vector x negate the odd values and divide the even values by 2.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\nvoid negateOddsAndHalveEvens(Kokkos::View<int*> &x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* In the vector x negate the odd values and divide the even values by 2.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n   Example:\n\n   input: [16, 11, 12, 14, 1, 0, 5]\n   output: [8, -11, 6, 7, -1, 0, -5]\n*/\n__global__ void negateOddsAndHalveEvens(int *x, size_t N) {\nint idx = blockIdx.x * blockDim.x + threadIdx.x;\n    if (idx < N) {\n        if (x[idx] % 2 == 0) {\n            x[idx] /= 2;\n        } else {\n            x[idx] = -x[idx];\n        }\n    }\n}",
        "translation_function_name": "negateOddsAndHalveEvens",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}",
            "\nKokkos::parallel_for(\"negateOddsAndHalveEvens\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    if (x(i) % 2 == 0) {\n        x(i) /= 2;\n    } else {\n        x(i) = -x(i);\n    }\n});\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "59_transform_map_function",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\nbool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(Kokkos::View<const int*> const& x, Kokkos::View<bool*> &mask) {",
        "translation_prompt": "// CUDA implementation of mapPowersOfTwo\n// __device__ bool isPowerOfTwo(int x) {\n// \treturn (x > 0) && !(x & (x - 1));\n// }\n// \n// /* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as elements in x.\n//    Example:\n// \n//    input: [8, 0, 9, 7, 15, 64, 3]\n//    output: [true, false, false, false, false, true, false]\n// */\n// __global__ void mapPowersOfTwo(const int *x, bool *mask, size_t N) {\n// int i = threadIdx.x + blockIdx.x * blockDim.x;\n// \tif (i < N) {\n// \t\tmask[i] = isPowerOfTwo(x[i]);\n// \t}\n// }\n\n// Kokkos implementation of mapPowersOfTwo\n#include <Kokkos_Core.hpp>\n\nbool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\nvoid mapPowersOfTwo(Kokkos::View<const int*> const& x, Kokkos::View<bool*> &mask) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "__device__ bool isPowerOfTwo(int x) {\n\treturn (x > 0) && !(x & (x - 1));\n}\n\n/* Apply the isPowerOfTwo function to every value in x and store the results in mask.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as elements in x.\n   Example:\n\n   input: [8, 0, 9, 7, 15, 64, 3]\n   output: [true, false, false, false, false, true, false]\n*/\n__global__ void mapPowersOfTwo(const int *x, bool *mask, size_t N) {\nint i = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (i < N) {\n\t\tmask[i] = isPowerOfTwo(x[i]);\n\t}\n}",
        "translation_function_name": "mapPowersOfTwo",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}",
            "\nKokkos::parallel_for(\"mapPowersOfTwo\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    mask(i) = isPowerOfTwo(x(i));\n});\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "57_transform_inverse_offset",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Replace every element of the vector x with 1-1/x.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(Kokkos::View<double*> &x) {",
        "translation_prompt": "// CUDA implementation of oneMinusInverse\n// /* Replace every element of the vector x with 1-1/x.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as elements in x.\n//    Example:\n// \n//    input: [2, 4, 1, 12, -2]\n//    output: [0.5, 0.75, 0, 0.91666666, 1.5]\n// */\n// __global__ void oneMinusInverse(double *x, size_t N) {\n// int idx = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (idx < N) {\n//         x[idx] = 1.0 - 1.0 / x[idx];\n//     }\n// }\n\n// Kokkos implementation of oneMinusInverse\n#include <Kokkos_Core.hpp>\n\n/* Replace every element of the vector x with 1-1/x.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\nvoid oneMinusInverse(Kokkos::View<double*> &x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Replace every element of the vector x with 1-1/x.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as elements in x.\n   Example:\n\n   input: [2, 4, 1, 12, -2]\n   output: [0.5, 0.75, 0, 0.91666666, 1.5]\n*/\n__global__ void oneMinusInverse(double *x, size_t N) {\nint idx = blockIdx.x * blockDim.x + threadIdx.x;\n    if (idx < N) {\n        x[idx] = 1.0 - 1.0 / x[idx];\n    }\n}",
        "translation_function_name": "oneMinusInverse",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    x(idx) = 1.0 - 1.0 / x(idx);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}",
            "\nKokkos::parallel_for(\"oneMinusInverse\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = 1.0 - 1.0 / x(i);\n});\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "55_transform_relu",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(Kokkos::View<double*> &x) {",
        "translation_prompt": "// CUDA implementation of relu\n// /* Compute the ReLU function on every element of x. Elements less than zero become zero,\n//    while elements greater than zero stay the same.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n//    Example:\n// \n//    input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n//    output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n// */\n// __global__ void relu(double *x, size_t N) {\n// int idx = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (idx < N) {\n//         x[idx] = max(0.0, x[idx]);\n//     }\n// }\n\n// Kokkos implementation of relu\n#include <Kokkos_Core.hpp>\n\n/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\nvoid relu(Kokkos::View<double*> &x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute the ReLU function on every element of x. Elements less than zero become zero,\n   while elements greater than zero stay the same.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n   Example:\n\n   input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]\n   output: [0, 24.0, 1.2, 0, 0, 0, 4.5]\n*/\n__global__ void relu(double *x, size_t N) {\nint idx = blockIdx.x * blockDim.x + threadIdx.x;\n    if (idx < N) {\n        x[idx] = max(0.0, x[idx]);\n    }\n}",
        "translation_function_name": "relu",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0.0 ? x(i) : 0.0;\n});\n}",
            "\nKokkos::parallel_for(\"ReLU\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) > 0 ? x(i) : 0;\n});\n}"
        ]
    },
    {
        "problem_type": "transform",
        "language": "cpp",
        "name": "58_transform_squaring",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Replace every element of x with the square of its value.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(Kokkos::View<int*> &x) {",
        "translation_prompt": "// CUDA implementation of squareEach\n// /* Replace every element of x with the square of its value.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n//    Example:\n// \n//    input: [5, 1, 2, -4, 8]\n//    output: [25, 1, 4, 16, 64]\n// */\n// __global__ void squareEach(int *x, size_t N) {\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (i < N) {\n//         x[i] = x[i] * x[i];\n//     }\n// }\n\n// Kokkos implementation of squareEach\n#include <Kokkos_Core.hpp>\n\n/* Replace every element of x with the square of its value.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\nvoid squareEach(Kokkos::View<int*> &x) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Replace every element of x with the square of its value.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n   Example:\n\n   input: [5, 1, 2, -4, 8]\n   output: [25, 1, 4, 16, 64]\n*/\n__global__ void squareEach(int *x, size_t N) {\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < N) {\n        x[i] = x[i] * x[i];\n    }\n}",
        "translation_function_name": "squareEach",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"squareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"squareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"squareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}",
            "\nKokkos::parallel_for(\"SquareEach\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    x(i) = x(i) * x(i);\n});\n}"
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "47_sparse_la_spmv",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Use Kokkos to parallelize. Assume Kokkos has already been initialized.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, Kokkos::View<const COOElement*> const& A, Kokkos::View<const double*> const& x, double beta, Kokkos::View<double *> &y, size_t M, size_t N) {",
        "translation_prompt": "// CUDA implementation of spmv\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n//    and A is a sparse matrix stored in COO format with sizeA elements.\n//    A has dimensions MxN, x has N values, and y has M values.\n//    Use CUDA to parallelize. The kernel will be launched with at least sizeA threads.\n//    Example:\n// \n//    input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n//    output: y=[2, 3]\n// */\n// __global__ void spmv(double alpha, const COOElement *A, size_t sizeA, const double *x, double beta, double *y, size_t M, size_t N) {\n// size_t row = blockIdx.x * blockDim.x + threadIdx.x;\n//    if (row < M) {\n//       double sum = 0.0;\n//       for (size_t i = 0; i < sizeA; i++) {\n//          if (A[i].row == row) {\n//             sum += A[i].value * x[A[i].column];\n//          }\n//       }\n//       y[row] = alpha * sum + beta * y[row];\n//    }\n// }\n\n// Kokkos implementation of spmv\n#include <Kokkos_Core.hpp>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format.\n   A has dimensions MxN, x has N values, and y has M values.\n   Use Kokkos to parallelize. Assume Kokkos has already been initialized.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\nvoid spmv(double alpha, Kokkos::View<const COOElement*> const& A, Kokkos::View<const double*> const& x, double beta, Kokkos::View<double *> &y, size_t M, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute y = alpha*A*x + beta*y where alpha and beta are scalars, x and y are vectors,\n   and A is a sparse matrix stored in COO format with sizeA elements.\n   A has dimensions MxN, x has N values, and y has M values.\n   Use CUDA to parallelize. The kernel will be launched with at least sizeA threads.\n   Example:\n\n   input: alpha=0.5 beta=1.0 A=[{0,1,3}, {1,0,-1}] x=[-4, 2] y=[-1,1]\n   output: y=[2, 3]\n*/\n__global__ void spmv(double alpha, const COOElement *A, size_t sizeA, const double *x, double beta, double *y, size_t M, size_t N) {\nsize_t row = blockIdx.x * blockDim.x + threadIdx.x;\n   if (row < M) {\n      double sum = 0.0;\n      for (size_t i = 0; i < sizeA; i++) {\n         if (A[i].row == row) {\n            sum += A[i].value * x[A[i].column];\n         }\n      }\n      y[row] = alpha * sum + beta * y[row];\n   }\n}",
        "translation_function_name": "spmv",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}",
            "\nKokkos::parallel_for(\"spmv\", M, KOKKOS_LAMBDA(const size_t row) {\n    double sum = 0.0;\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            sum += A(i).value * x(A(i).column);\n        }\n    }\n    y(row) = alpha * sum + beta * y(row);\n});\n}"
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "46_sparse_la_spmm",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(Kokkos::View<const COOElement*> &A, Kokkos::View<const COOElement*> &X, Kokkos::View<double**> &Y, size_t M, size_t K, size_t N) {",
        "translation_prompt": "// CUDA implementation of spmm\n// struct COOElement {\n//    size_t row, column;\n//    double value;\n// };\n// \n// /* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format with sizeA elements.\n//    X is a sparse KxN matrix in COO format with sizeX elements. Y is a dense MxN matrix in row-major.\n//    Use CUDA to compute in parallel. The kernel is launched with at least sizeA threads.\n//    Example:\n// \n//    input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n//    output: Y=[{-1,-4}, {1,0}]\n// */\n// __global__ void spmm(const COOElement *A, size_t sizeA, const COOElement *X, size_t sizeX, double *Y, size_t M, size_t K, size_t N) {\n// \n//     int row = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (row < M) {\n//         for (int i = 0; i < sizeA; i++) {\n//             if (A[i].row == row) {\n//                 int col = A[i].column;\n//                 double valA = A[i].value;\n//                 for (int j = 0; j < sizeX; j++) {\n//                     if (X[j].row == col) {\n//                         int colX = X[j].column;\n//                         double valX = X[j].value;\n//                         atomicAdd(&Y[row * N + colX], valA * valX);\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// Kokkos implementation of spmm\n#include <Kokkos_Core.hpp>\n\nstruct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.\n   X is a sparse KxN matrix in COO format. Y is a dense MxN matrix.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\nvoid spmm(Kokkos::View<const COOElement*> &A, Kokkos::View<const COOElement*> &X, Kokkos::View<double**> &Y, size_t M, size_t K, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "struct COOElement {\n   size_t row, column;\n   double value;\n};\n\n/* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format with sizeA elements.\n   X is a sparse KxN matrix in COO format with sizeX elements. Y is a dense MxN matrix in row-major.\n   Use CUDA to compute in parallel. The kernel is launched with at least sizeA threads.\n   Example:\n\n   input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]\n   output: Y=[{-1,-4}, {1,0}]\n*/\n__global__ void spmm(const COOElement *A, size_t sizeA, const COOElement *X, size_t sizeX, double *Y, size_t M, size_t K, size_t N) {\n\n    int row = blockIdx.x * blockDim.x + threadIdx.x;\n    if (row < M) {\n        for (int i = 0; i < sizeA; i++) {\n            if (A[i].row == row) {\n                int col = A[i].column;\n                double valA = A[i].value;\n                for (int j = 0; j < sizeX; j++) {\n                    if (X[j].row == col) {\n                        int colX = X[j].column;\n                        double valX = X[j].value;\n                        atomicAdd(&Y[row * N + colX], valA * valX);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "translation_function_name": "spmm",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.extent(0); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.extent(0); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.extent(0); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.extent(0); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.extent(0); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.extent(0); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.extent(0); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}",
            "\nKokkos::parallel_for(\"spmm\", M, KOKKOS_LAMBDA(const int row) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (A(i).row == row) {\n            int col = A(i).column;\n            double valA = A(i).value;\n            for (size_t j = 0; j < X.size(); j++) {\n                if (X(j).row == col) {\n                    int colX = X(j).column;\n                    double valX = X(j).value;\n                    Kokkos::atomic_add(&Y(row, colX), valA * valX);\n                }\n            }\n        }\n    }\n});\n}"
        ]
    },
    {
        "problem_type": "sparse_la",
        "language": "cpp",
        "name": "48_sparse_la_sparse_axpy",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\nstruct Element {\n\tsize_t index;\n  double value;\n};\n\n/* Compute z = alpha*x+y where x and y are sparse vectors. Store the result in z.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n   \n   input: x=[{5, 12}, {8, 3}, {12, -1}], y=[{3, 1}, {5, -2}, {7, 1}, {8, -3}], alpha=1\n   output: z=[{3, 1}, {5, 10}, {7, 1}, {12, -1}]\n*/\nvoid sparseAxpy(double alpha, Kokkos::View<const Element*> &x, Kokkos::View<const Element*> &y, Kokkos::View<double*> &z) {",
        "translation_prompt": "// CUDA implementation of sparseAxpy\n// struct Element {\n// \tsize_t index;\n//   double value;\n// };\n// \n// /* Compute z = alpha*x+y where x and y are sparse vectors of size Nx and Ny. Store the result in z.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x or y.\n//    Example:\n//    \n//    input: x=[{5, 12}, {8, 3}, {12, -1}], y=[{3, 1}, {5, -2}, {7, 1}, {8, -3}], alpha=1\n//    output: z=[{3, 1}, {5, 10}, {7, 1}, {12, -1}]\n// */\n// __global__ void sparseAxpy(double alpha, const Element *x, const Element *y, double *z, size_t Nx, size_t Ny, size_t N) {\n// size_t i = blockIdx.x * blockDim.x + threadIdx.x;\n// \tif (i < N) {\n// \t\tdouble sum = 0;\n// \t\tfor (size_t j = 0; j < Nx; j++) {\n// \t\t\tif (x[j].index == i) {\n// \t\t\t\tsum += x[j].value;\n// \t\t\t}\n// \t\t}\n// \t\tfor (size_t j = 0; j < Ny; j++) {\n// \t\t\tif (y[j].index == i) {\n// \t\t\t\tsum += y[j].value;\n// \t\t\t}\n// \t\t}\n// \t\tz[i] = alpha * sum;\n// \t}\n// }\n\n// Kokkos implementation of sparseAxpy\n#include <Kokkos_Core.hpp>\n\nstruct Element {\n\tsize_t index;\n  double value;\n};\n\n/* Compute z = alpha*x+y where x and y are sparse vectors. Store the result in z.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n   \n   input: x=[{5, 12}, {8, 3}, {12, -1}], y=[{3, 1}, {5, -2}, {7, 1}, {8, -3}], alpha=1\n   output: z=[{3, 1}, {5, 10}, {7, 1}, {12, -1}]\n*/\nvoid sparseAxpy(double alpha, Kokkos::View<const Element*> &x, Kokkos::View<const Element*> &y, Kokkos::View<double*> &z) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "struct Element {\n\tsize_t index;\n  double value;\n};\n\n/* Compute z = alpha*x+y where x and y are sparse vectors of size Nx and Ny. Store the result in z.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x or y.\n   Example:\n   \n   input: x=[{5, 12}, {8, 3}, {12, -1}], y=[{3, 1}, {5, -2}, {7, 1}, {8, -3}], alpha=1\n   output: z=[{3, 1}, {5, 10}, {7, 1}, {12, -1}]\n*/\n__global__ void sparseAxpy(double alpha, const Element *x, const Element *y, double *z, size_t Nx, size_t Ny, size_t N) {\nsize_t i = blockIdx.x * blockDim.x + threadIdx.x;\n\tif (i < N) {\n\t\tdouble sum = 0;\n\t\tfor (size_t j = 0; j < Nx; j++) {\n\t\t\tif (x[j].index == i) {\n\t\t\t\tsum += x[j].value;\n\t\t\t}\n\t\t}\n\t\tfor (size_t j = 0; j < Ny; j++) {\n\t\t\tif (y[j].index == i) {\n\t\t\t\tsum += y[j].value;\n\t\t\t}\n\t\t}\n\t\tz[i] = alpha * sum;\n\t}\n}",
        "translation_function_name": "sparseAxpy",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n            break; // Assuming indices in x are unique\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n            break; // Assuming indices in y are unique\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = alpha * sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = alpha * sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n  double sum = 0.0;\n  for (size_t j = 0; j < x.extent(0); ++j) {\n    if (x(j).index == i) {\n      sum += alpha * x(j).value;\n    }\n  }\n  for (size_t j = 0; j < y.extent(0); ++j) {\n    if (y(j).index == i) {\n      sum += y(j).value;\n    }\n  }\n  z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const size_t i) {\n  double sum = 0.0;\n  for (size_t j = 0; j < x.extent(0); ++j) {\n    if (x(j).index == i) {\n      sum += alpha * x(j).value;\n    }\n  }\n  for (size_t j = 0; j < y.extent(0); ++j) {\n    if (y(j).index == i) {\n      sum += y(j).value;\n    }\n  }\n  z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n  double sum = 0;\n  for (size_t j = 0; j < x.extent(0); j++) {\n    if (x(j).index == i) {\n      sum += alpha * x(j).value;\n    }\n  }\n  for (size_t j = 0; j < y.extent(0); j++) {\n    if (y(j).index == i) {\n      sum += y(j).value;\n    }\n  }\n  z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n            break; // Assuming indices are unique, we can break after finding the match\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n            break; // Assuming indices are unique, we can break after finding the match\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0;\n    for (size_t j = 0; j < x.extent(0); j++) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); j++) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n        }\n    }\n    z(i) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"sparseAxpy\", z.extent(0), KOKKOS_LAMBDA(const int i) {\n    double sum = 0.0;\n    for (size_t j = 0; j < x.extent(0); ++j) {\n        if (x(j).index == i) {\n            sum += alpha * x(j).value;\n            break; // Assuming indices in x are unique\n        }\n    }\n    for (size_t j = 0; j < y.extent(0); ++j) {\n        if (y(j).index == i) {\n            sum += y(j).value;\n            break; // Assuming indices in y are unique\n        }\n    }\n    z(i) = sum;\n});\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "23_histogram_first_letter_counts",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(Kokkos::View<const char**> const& s, Kokkos::View<size_t[26]> &bins) {",
        "translation_prompt": "// CUDA implementation of firstLetterCounts\n// /* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n//    Assume all strings are in lower case. Store the output in `bins` array.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n//    input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n//    output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n// */\n// __global__ void firstLetterCounts(const char **s, size_t N, size_t bins[26]) {\n// int tid = threadIdx.x;\n//     int bid = blockIdx.x;\n//     int stride = blockDim.x;\n//     int i = bid * stride + tid;\n//     if (i < N) {\n//         char c = s[i][0];\n//         if (c >= 'a' && c <= 'z') {\n//             atomicAdd(&bins[c - 'a'], 1);\n//         }\n//     }\n// }\n\n// Kokkos implementation of firstLetterCounts\n#include <Kokkos_Core.hpp>\n\n/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\nvoid firstLetterCounts(Kokkos::View<const char**> const& s, Kokkos::View<size_t[26]> &bins) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.\n   Assume all strings are in lower case. Store the output in `bins` array.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Example:\n\n   input: [\"dog\", \"cat\", \"xray\", \"cow\", \"code\", \"type\", \"flower\"]\n   output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n*/\n__global__ void firstLetterCounts(const char **s, size_t N, size_t bins[26]) {\nint tid = threadIdx.x;\n    int bid = blockIdx.x;\n    int stride = blockDim.x;\n    int i = bid * stride + tid;\n    if (i < N) {\n        char c = s[i][0];\n        if (c >= 'a' && c <= 'z') {\n            atomicAdd(&bins[c - 'a'], 1);\n        }\n    }\n}",
        "translation_function_name": "firstLetterCounts",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountFirstLetters\", s.extent(0), KOKKOS_LAMBDA(const int i) {\n    char c = s(i)[0];\n    if (c >= 'a' && c <= 'z') {\n        Kokkos::atomic_increment(&bins(c - 'a'));\n    }\n});\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "21_histogram_bin_0-100",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(Kokkos::View<const double*> const& x, Kokkos::View<size_t[10]> &bins) {",
        "translation_prompt": "// CUDA implementation of binsBy10Count\n// /* Vector x contains values between 0 and 100, inclusive. Count the number of\n//    values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n//    Use CUDA to compute in parallel. The kernel is initialized with at least as many threads as values in x.\n//    Example:\n// \n//    input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n//    output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n// */\n// __global__ void binsBy10Count(const double *x, size_t N, size_t bins[10]) {\n// size_t tid = threadIdx.x;\n//     size_t gid = blockIdx.x * blockDim.x + threadIdx.x;\n//     size_t stride = blockDim.x * gridDim.x;\n// \n//     for (size_t i = gid; i < N; i += stride) {\n//         size_t bin = (size_t) (x[i] / 10);\n//         atomicAdd(&bins[bin], 1);\n//     }\n// }\n\n// Kokkos implementation of binsBy10Count\n#include <Kokkos_Core.hpp>\n\n/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\nvoid binsBy10Count(Kokkos::View<const double*> const& x, Kokkos::View<size_t[10]> &bins) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Vector x contains values between 0 and 100, inclusive. Count the number of\n   values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.\n   Use CUDA to compute in parallel. The kernel is initialized with at least as many threads as values in x.\n   Example:\n\n   input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]\n   output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]\n*/\n__global__ void binsBy10Count(const double *x, size_t N, size_t bins[10]) {\nsize_t tid = threadIdx.x;\n    size_t gid = blockIdx.x * blockDim.x + threadIdx.x;\n    size_t stride = blockDim.x * gridDim.x;\n\n    for (size_t i = gid; i < N; i += stride) {\n        size_t bin = (size_t) (x[i] / 10);\n        atomicAdd(&bins[bin], 1);\n    }\n}",
        "translation_function_name": "binsBy10Count",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"binsBy10Count\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"binsBy10Count\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"ComputeBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"binsBy10Count\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountBins\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"binsBy10Count\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    size_t bin = static_cast<size_t>(x(i) / 10);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "22_histogram_count_quadrants",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\nstruct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Use Kokkos to count in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(Kokkos::View<const Point*> const& points, Kokkos::View<size_t[4]> &bins) {",
        "translation_prompt": "// CUDA implementation of countQuadrants\n// struct Point {\n//    double x, y;\n// };\n// \n// /* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n//    Store the counts in `bins`.\n//    Use CUDA to count in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n//    input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n//    output: [3, 1, 0, 2]\n// */\n// __global__ void countQuadrants(const Point *points, size_t N, size_t bins[4]) {\n// int i = threadIdx.x;\n//     if (i < N) {\n//         double x = points[i].x;\n//         double y = points[i].y;\n//         if (x >= 0 && y >= 0) {\n//             atomicAdd(&bins[0], 1);\n//         } else if (x < 0 && y >= 0) {\n//             atomicAdd(&bins[1], 1);\n//         } else if (x < 0 && y < 0) {\n//             atomicAdd(&bins[2], 1);\n//         } else if (x >= 0 && y < 0) {\n//             atomicAdd(&bins[3], 1);\n//         }\n//     }\n// }\n\n// Kokkos implementation of countQuadrants\n#include <Kokkos_Core.hpp>\n\nstruct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Use Kokkos to count in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\nvoid countQuadrants(Kokkos::View<const Point*> const& points, Kokkos::View<size_t[4]> &bins) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "struct Point {\n   double x, y;\n};\n\n/* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.\n   Store the counts in `bins`.\n   Use CUDA to count in parallel. The kernel is launched with at least N threads.\n   Example:\n\n   input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]\n   output: [3, 1, 0, 2]\n*/\n__global__ void countQuadrants(const Point *points, size_t N, size_t bins[4]) {\nint i = threadIdx.x;\n    if (i < N) {\n        double x = points[i].x;\n        double y = points[i].y;\n        if (x >= 0 && y >= 0) {\n            atomicAdd(&bins[0], 1);\n        } else if (x < 0 && y >= 0) {\n            atomicAdd(&bins[1], 1);\n        } else if (x < 0 && y < 0) {\n            atomicAdd(&bins[2], 1);\n        } else if (x >= 0 && y < 0) {\n            atomicAdd(&bins[3], 1);\n        }\n    }\n}",
        "translation_function_name": "countQuadrants",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"CountQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}",
            "\nKokkos::parallel_for(\"countQuadrants\", points.extent(0), KOKKOS_LAMBDA(const int i) {\n    double x = points(i).x;\n    double y = points(i).y;\n    if (x >= 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(0));\n    } else if (x < 0 && y >= 0) {\n        Kokkos::atomic_increment(&bins(1));\n    } else if (x < 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(2));\n    } else if (x >= 0 && y < 0) {\n        Kokkos::atomic_increment(&bins(3));\n    }\n});\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "24_histogram_count_quartile",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Use Kokkos to compute in parallel. Assume that Kokkos has already been initialized.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(Kokkos::View<const double*> const& x, Kokkos::View<size_t[4]> &bins) {",
        "translation_prompt": "// CUDA implementation of countQuartiles\n// /* Count the number of doubles in the vector x that have a fractional part \n//    in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Examples:\n// \n//    input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n//    output: [2, 1, 2, 2]\n// \n//    input: [1.9, 0.2, 0.6, 10.1, 7.4]\n//    output: [2, 1, 1, 1]\n// */\n// __global__ void countQuartiles(const double *x, size_t N, size_t bins[4]) {\n// size_t i = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (i < N) {\n//         double frac = fmod(x[i], 1.0);\n//         if (frac < 0.25)\n//             atomicAdd(&bins[0], 1);\n//         else if (frac < 0.5)\n//             atomicAdd(&bins[1], 1);\n//         else if (frac < 0.75)\n//             atomicAdd(&bins[2], 1);\n//         else\n//             atomicAdd(&bins[3], 1);\n//     }\n// }\n\n// Kokkos implementation of countQuartiles\n#include <Kokkos_Core.hpp>\n\n/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Use Kokkos to compute in parallel. Assume that Kokkos has already been initialized.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\nvoid countQuartiles(Kokkos::View<const double*> const& x, Kokkos::View<size_t[4]> &bins) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Count the number of doubles in the vector x that have a fractional part \n   in [0, 0.25), [0.25, 0.5), [0.5, 0.75), and [0.75, 1). Store the counts in `bins`.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Examples:\n\n   input: [7.8, 4.2, 9.1, 7.6, 0.27, 1.5, 3.8]\n   output: [2, 1, 2, 2]\n\n   input: [1.9, 0.2, 0.6, 10.1, 7.4]\n   output: [2, 1, 1, 1]\n*/\n__global__ void countQuartiles(const double *x, size_t N, size_t bins[4]) {\nsize_t i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < N) {\n        double frac = fmod(x[i], 1.0);\n        if (frac < 0.25)\n            atomicAdd(&bins[0], 1);\n        else if (frac < 0.5)\n            atomicAdd(&bins[1], 1);\n        else if (frac < 0.75)\n            atomicAdd(&bins[2], 1);\n        else\n            atomicAdd(&bins[3], 1);\n    }\n}",
        "translation_function_name": "countQuartiles",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", x.extent(0), KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}",
            "\nKokkos::parallel_for(\"countQuartiles\", N, KOKKOS_LAMBDA(const int i) {\n    double frac = fmod(x(i), 1.0);\n    if (frac < 0.25)\n        Kokkos::atomic_increment(&bins(0));\n    else if (frac < 0.5)\n        Kokkos::atomic_increment(&bins(1));\n    else if (frac < 0.75)\n        Kokkos::atomic_increment(&bins(2));\n    else\n        Kokkos::atomic_increment(&bins(3));\n});\n}"
        ]
    },
    {
        "problem_type": "histogram",
        "language": "cpp",
        "name": "20_histogram_pixel_histogram",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Use Kokkos to count in parallel. Assume Kokkos has already been initialized.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(Kokkos::View<const int*> const& image, Kokkos::View<size_t[256]> &bins) {",
        "translation_prompt": "// CUDA implementation of pixelCounts\n// /* Count the number of pixels in image with each grayscale intensity.\n//    The vector `image` is a grayscale image with values 0-255.\n//    Store the results in `bins`.\n//    Use CUDA to count in parallel. The kernel is launched with at least N threads.\n//    Example:\n//    \n//    input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n//    output: [0, 0, 2, 0, 1, ...]\n// */\n// __global__ void pixelCounts(const int *image, size_t N, size_t bins[256]) {\n// int tid = threadIdx.x;\n//     int gid = blockIdx.x * blockDim.x + threadIdx.x;\n//     int bin = 0;\n//     for (int i = gid; i < N; i += blockDim.x * gridDim.x) {\n//         bin = image[i];\n//         atomicAdd(&bins[bin], 1);\n//     }\n// }\n\n// Kokkos implementation of pixelCounts\n#include <Kokkos_Core.hpp>\n\n/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Use Kokkos to count in parallel. Assume Kokkos has already been initialized.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n void pixelCounts(Kokkos::View<const int*> const& image, Kokkos::View<size_t[256]> &bins) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Count the number of pixels in image with each grayscale intensity.\n   The vector `image` is a grayscale image with values 0-255.\n   Store the results in `bins`.\n   Use CUDA to count in parallel. The kernel is launched with at least N threads.\n   Example:\n   \n   input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]\n   output: [0, 0, 2, 0, 1, ...]\n*/\n__global__ void pixelCounts(const int *image, size_t N, size_t bins[256]) {\nint tid = threadIdx.x;\n    int gid = blockIdx.x * blockDim.x + threadIdx.x;\n    int bin = 0;\n    for (int i = gid; i < N; i += blockDim.x * gridDim.x) {\n        bin = image[i];\n        atomicAdd(&bins[bin], 1);\n    }\n}",
        "translation_function_name": "pixelCounts",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    int bin = image(i);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    int bin = image(i);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"CountPixels\", N, KOKKOS_LAMBDA(const int& i) {\n    int bin = image(i);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"pixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    int bin = image[i];\n    Kokkos::atomic_increment(&bins[bin]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    int bin = image[i];\n    Kokkos::atomic_increment(&bins[bin]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    int bin = image[i];\n    Kokkos::atomic_increment(&bins[bin]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    int bin = image[i];\n    Kokkos::atomic_increment(&bins[bin]);\n});\n}",
            "\nKokkos::parallel_for(\"pixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    int bin = image[i];\n    Kokkos::atomic_increment(&bins[bin]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    int bin = image(i);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"pixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    Kokkos::atomic_increment(&bins[image[i]]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    auto bin = image(i);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"pixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    Kokkos::atomic_increment(&bins[image[i]]);\n});\n}",
            "\nKokkos::parallel_for(\"CountPixels\", N, KOKKOS_LAMBDA(const int& i) {\n    Kokkos::atomic_increment(&bins[image[i]]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    int bin = image(i);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int i) {\n    int bin = image(i);\n    Kokkos::atomic_increment(&bins(bin));\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    int bin = image[i];\n    Kokkos::atomic_increment(&bins[bin]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    auto bin = image(i);\n    Kokkos::atomic_increment(&bins[bin]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    Kokkos::atomic_increment(&bins[image[i]]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", N, KOKKOS_LAMBDA(const int& i) {\n    Kokkos::atomic_increment(&bins[image[i]]);\n});\n}",
            "\nKokkos::parallel_for(\"PixelCounts\", image.size(), KOKKOS_LAMBDA(const int& i) {\n    Kokkos::atomic_increment(&bins[image(i)]);\n});\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "36_search_check_if_array_contains_value",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<const int*> const& x, int target) {",
        "translation_prompt": "// CUDA implementation of contains\n// /* Set `found` to true if the vector x contains the value `target`. Set it to false otherwise.\n//    Use CUDA to search in parallel. The kernel is launched with at least N threads.\n//    Examples:\n// \n//    input: x=[1, 8, 2, 6, 4, 6], target=3\n//    output: false\n//    \n//    input: x=[1, 8, 2, 6, 4, 6], target=8\n//    output: true\n// */\n// __global__ void contains(const int *x, size_t N, int target, bool *found) {\n// // TODO: implement the kernel\n// }\n\n// Kokkos implementation of contains\n#include <Kokkos_Core.hpp>\n\n/* Return true if the vector x contains the value `target`. Return false otherwise.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\nbool contains(Kokkos::View<const int*> const& x, int target) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Set `found` to true if the vector x contains the value `target`. Set it to false otherwise.\n   Use CUDA to search in parallel. The kernel is launched with at least N threads.\n   Examples:\n\n   input: x=[1, 8, 2, 6, 4, 6], target=3\n   output: false\n   \n   input: x=[1, 8, 2, 6, 4, 6], target=8\n   output: true\n*/\n__global__ void contains(const int *x, size_t N, int target, bool *found) {\n// TODO: implement the kernel\n}",
        "translation_function_name": "contains",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& lresult) {\n    if (x(i) == target) {\n        lresult = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"contains_kernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& lresult) {\n    if (x(i) == target) {\n        lresult = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& lresult) {\n    if (x(i) == target) {\n        lresult = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"contains_kernel\", N, KOKKOS_LAMBDA(const int i, bool& lresult) {\n    if (x(i) == target) {\n        lresult = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& lresult) {\n    if (x(i) == target) {\n        lresult = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"ContainsKernel\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n    if (x(i) == target) {\n        update = true;\n    }\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "39_search_xor_contains",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, Kokkos::View<const int*> const& y, int val) {",
        "translation_prompt": "// CUDA implementation of xorContains\n// /* Set `found` to true if `val` is only in one of vectors x or y.\n//    Set it to false if it is in both or neither.\n//    Use CUDA to search in parallel. The kernel is launched with at least N threads.\n//    Examples:\n// \n//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n//    output: true\n// \n//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n//    output: false\n// */\n// __global__ void xorContains(const int *x, const int *y, size_t N, int val, bool *found) {\n// int tid = threadIdx.x;\n//   int i = blockIdx.x * blockDim.x + tid;\n//   int found_local = 0;\n//   while (i < N) {\n//     found_local ^= (x[i] == val) | (y[i] == val);\n//     i += blockDim.x * gridDim.x;\n//   }\n//   __syncthreads();\n//   if (tid == 0) {\n//     *found = found_local;\n//   }\n// }\n\n// Kokkos implementation of xorContains\n#include <Kokkos_Core.hpp>\n\n/* Return true if `val` is only in one of vectors x or y.\n   Return false if it is in both or neither.\n   Use Kokkos to search in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\nbool xorContains(Kokkos::View<const int*> const& x, Kokkos::View<const int*> const& y, int val) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Set `found` to true if `val` is only in one of vectors x or y.\n   Set it to false if it is in both or neither.\n   Use CUDA to search in parallel. The kernel is launched with at least N threads.\n   Examples:\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7\n   output: true\n\n   input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1\n   output: false\n*/\n__global__ void xorContains(const int *x, const int *y, size_t N, int val, bool *found) {\nint tid = threadIdx.x;\n  int i = blockIdx.x * blockDim.x + tid;\n  int found_local = 0;\n  while (i < N) {\n    found_local ^= (x[i] == val) | (y[i] == val);\n    i += blockDim.x * gridDim.x;\n  }\n  __syncthreads();\n  if (tid == 0) {\n    *found = found_local;\n  }\n}",
        "translation_function_name": "xorContains",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nbool result = false;\nKokkos::parallel_reduce(\"XorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  bool in_x = (i < x.extent(0)) && (x(i) == val);\n  bool in_y = (i < y.extent(0)) && (y(i) == val);\n  update ^= in_x != in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n  update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int& i, bool& update) {\n  bool in_x = (i < x.extent(0)) && (x(i) == val);\n  bool in_y = (i < y.extent(0)) && (y(i) == val);\n  update ^= in_x ^ in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"XorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n    update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  bool in_x = (i < x.extent(0)) && (x(i) == val);\n  bool in_y = (i < y.extent(0)) && (y(i) == val);\n  update ^= in_x ^ in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", N, KOKKOS_LAMBDA(const int i, bool& local_found) {\n    local_found ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n    bool in_x = (i < x.extent(0)) && (x(i) == val);\n    bool in_y = (i < y.extent(0)) && (y(i) == val);\n    update ^= in_x ^ in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n  update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int& i, bool& update) {\n    bool in_x = (i < x.extent(0)) && (x(i) == val);\n    bool in_y = (i < y.extent(0)) && (y(i) == val);\n    update ^= in_x != in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", N, KOKKOS_LAMBDA(const int i, bool& thread_found) {\n  thread_found ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  bool in_x = (i < x.extent(0)) && (x(i) == val);\n  bool in_y = (i < y.extent(0)) && (y(i) == val);\n  update ^= in_x != in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n  update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n    update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  bool in_x = (i < x.extent(0)) && (x(i) == val);\n  bool in_y = (i < y.extent(0)) && (y(i) == val);\n  update ^= in_x ^ in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", N, KOKKOS_LAMBDA(const int i, bool& update) {\n  update ^= (x(i) == val) != (y(i) == val);\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int& i, bool& update) {\n  bool in_x = (i < x.extent(0)) && (x(i) == val);\n  bool in_y = (i < y.extent(0)) && (y(i) == val);\n  update ^= in_x != in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}",
            "\nbool result = false;\nKokkos::parallel_reduce(\"xorContains\", x.extent(0), KOKKOS_LAMBDA(const int i, bool& update) {\n  bool in_x = (i < x.extent(0)) && (x(i) == val);\n  bool in_y = (i < y.extent(0)) && (y(i) == val);\n  update ^= in_x ^ in_y;\n}, Kokkos::LAnd<bool>(result));\nreturn result;\n}"
        ]
    },
    {
        "problem_type": "search",
        "language": "cpp",
        "name": "35_search_search_for_last_struct_by_key",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {",
        "translation_prompt": "// CUDA implementation of findLastShortBook\n// struct Book {\n//    const char* title;\n//    int pages;\n// };\n// \n// /* Find the index of the last Book item in the vector books where Book.pages is less than 100.\n//    Store the result in lastShortBookIndex.\n//    Use CUDA to search in parallel. The kernel is launched with one thread for every book element.\n// \t Example:\n// \n//    input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n//    output: 2\n// */\n// __global__ void findLastShortBook(const Book *books, size_t N, size_t *lastShortBookIndex) {\n// \n// // Thread index\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n// \n// // Check if the thread index is within the bounds of the books array\n// if (i < N) {\n//     // Check if the book has less than 100 pages\n//     if (books[i].pages < 100) {\n//         // Use atomicMax to safely find the largest index among all threads\n//         atomicMax((int*)lastShortBookIndex, i);\n//     }\n// }\n// }\n\n// Kokkos implementation of findLastShortBook\n#include <Kokkos_Core.hpp>\n\nstruct Book {\n   const char *title;\n   int pages;\n};\n\n/* Return the index of the last Book item in the vector books where Book.pages is less than 100.\n   Use Kokkos to search in parallel. Assume Kokkos is already initialized.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\nsize_t findLastShortBook(Kokkos::View<const Book*> const& books) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "struct Book {\n   const char* title;\n   int pages;\n};\n\n/* Find the index of the last Book item in the vector books where Book.pages is less than 100.\n   Store the result in lastShortBookIndex.\n   Use CUDA to search in parallel. The kernel is launched with one thread for every book element.\n\t Example:\n\n   input: [{title=\"Green Eggs and Ham\", pages=72}, {title=\"gulliver's travels\", pages=362}, {title=\"Stories of Your Life\", pages=54}, {title=\"Hamilton\", pages=818}]\n   output: 2\n*/\n__global__ void findLastShortBook(const Book *books, size_t N, size_t *lastShortBookIndex) {\n\n// Thread index\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n\n// Check if the thread index is within the bounds of the books array\nif (i < N) {\n    // Check if the book has less than 100 pages\n    if (books[i].pages < 100) {\n        // Use atomicMax to safely find the largest index among all threads\n        atomicMax((int*)lastShortBookIndex, i);\n    }\n}\n}",
        "translation_function_name": "findLastShortBook",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) localMax = i;\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::max();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex == std::numeric_limits<size_t>::max() ? -1 : lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::max();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localIndex) {\n    if (books(i).pages < 100) {\n        if (i < localIndex) {\n            localIndex = i;\n        }\n    }\n}, Kokkos::Min<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex == std::numeric_limits<size_t>::max() ? -1 : lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = -1;\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        localMax = i > localMax ? i : localMax;\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\n// Create a Kokkos::View to store the result\nKokkos::View<size_t, Kokkos::HostSpace> lastShortBookIndex(\"lastShortBookIndex\");\nlastShortBookIndex() = 0;\n\n// Define the lambda to be run in parallel\nauto findLastShortBookLambda = KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        // Use Kokkos::atomic_max to safely find the largest index among all threads\n        Kokkos::atomic_max(&localMax, i);\n    }\n};\n\n// Run the parallel reduction\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), findLastShortBookLambda, Kokkos::Max<size_t>(lastShortBookIndex()));\n\n// Return the result\nreturn lastShortBookIndex();\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = -1;\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int& i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = -1;\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::max();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\n\nif (lastShortBookIndex == std::numeric_limits<size_t>::max()) {\n    // If no short book was found, set the index to an invalid value\n    lastShortBookIndex = -1;\n}\n\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = -1;\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = Kokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) localMax = i;\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\n\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        localMax = i > localMax ? i : localMax;\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::max();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex == std::numeric_limits<size_t>::max() ? -1 : lastShortBookIndex;\n}",
            "\n// Create a Kokkos::View to hold the result\nKokkos::View<size_t, Kokkos::HostSpace> lastShortBookIndex(\"lastShortBookIndex\");\nlastShortBookIndex() = 0; // Initialize with 0, assuming no short books\n\n// Use Kokkos parallel_reduce to find the last short book index\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) localMax = i; // Only update if the current index is greater than the local max\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex()));\n\n// Return the result\nreturn lastShortBookIndex();\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}",
            "\nsize_t lastShortBookIndex = std::numeric_limits<size_t>::min();\nKokkos::parallel_reduce(\"FindLastShortBook\", books.extent(0), KOKKOS_LAMBDA(const int i, size_t& localMax) {\n    if (books(i).pages < 100) {\n        if (i > localMax) {\n            localMax = i;\n        }\n    }\n}, Kokkos::Max<size_t>(lastShortBookIndex));\nreturn lastShortBookIndex;\n}"
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "06_fft_dft",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute the discrete fourier transform of x. Store the result in output.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(Kokkos::View<const double*> &x, Kokkos::View<Kokkos::complex<double>*> &output) {",
        "translation_prompt": "// CUDA implementation of dft\n// /* Compute the discrete fourier transform of x. Store the result in output.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n//    input: [1, 4, 9, 16]\n//    output: [30+0i, -8-12i, -10-0i, -8+12i]\n// */\n// __global__ void dft(const double *x, cuDoubleComplex *output, size_t N) {\n// int tid = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (tid >= N) return;\n// \n//     cuDoubleComplex sum = {0, 0};\n//     for (size_t k = 0; k < N; ++k) {\n//         double angle = -2 * M_PI * tid * k / N;\n//         cuDoubleComplex exp_part = {cos(angle), sin(angle)};\n//         cuDoubleComplex term = cuCmul(exp_part, make_cuDoubleComplex(x[k], 0));\n//         sum = cuCadd(sum, term);\n//     }\n//     output[tid] = sum;\n// }\n\n// Kokkos implementation of dft\n#include <Kokkos_Core.hpp>\n\n/* Compute the discrete fourier transform of x. Store the result in output.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\nvoid dft(Kokkos::View<const double*> &x, Kokkos::View<Kokkos::complex<double>*> &output) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute the discrete fourier transform of x. Store the result in output.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Example:\n\n   input: [1, 4, 9, 16]\n   output: [30+0i, -8-12i, -10-0i, -8+12i]\n*/\n__global__ void dft(const double *x, cuDoubleComplex *output, size_t N) {\nint tid = blockIdx.x * blockDim.x + threadIdx.x;\n    if (tid >= N) return;\n\n    cuDoubleComplex sum = {0, 0};\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        cuDoubleComplex exp_part = {cos(angle), sin(angle)};\n        cuDoubleComplex term = cuCmul(exp_part, make_cuDoubleComplex(x[k], 0));\n        sum = cuCadd(sum, term);\n    }\n    output[tid] = sum;\n}",
        "translation_function_name": "dft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x[k], 0.0);\n        sum += term;\n    }\n    output[tid] = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x[k], 0.0);\n        sum += term;\n    }\n    output[tid] = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x[k], 0.0);\n        sum += term;\n    }\n    output[tid] = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0.0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x[k], 0.0);\n        sum += term;\n    }\n    output[tid] = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const size_t tid) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part(cos(angle), sin(angle));\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"DFT\", N, KOKKOS_LAMBDA(const int tid) {\n    Kokkos::complex<double> sum = {0, 0};\n    for (size_t k = 0; k < N; ++k) {\n        double angle = -2 * M_PI * tid * k / N;\n        Kokkos::complex<double> exp_part = {cos(angle), sin(angle)};\n        Kokkos::complex<double> term = exp_part * Kokkos::complex<double>(x(k), 0);\n        sum += term;\n    }\n    output(tid) = sum;\n});\n}"
        ]
    },
    {
        "problem_type": "fft",
        "language": "cpp",
        "name": "09_fft_fft_out_of_place",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute the fourier transform of x. Store the result in output.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(Kokkos::View<const Kokkos::complex<double>*> &x, Kokkos::View<Kokkos::complex<double>*> &output) {",
        "translation_prompt": "// CUDA implementation of fft\n// /* Compute the fourier transform of x. Store the result in output.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n//    output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n// */\n// __global__ void fft(const cuDoubleComplex *x, cuDoubleComplex *output, size_t N) {\n// int idx = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (idx < N) {\n//         cuDoubleComplex sum = {0, 0};\n//         for (int k = 0; k < N; k++) {\n//             cuDoubleComplex a = x[k];\n//             cuDoubleComplex b = cuCmul(make_cuDoubleComplex(cos(2 * M_PI * idx * k / N), -sin(2 * M_PI * idx * k / N)), a);\n//             sum = cuCadd(sum, b);\n//         }\n//         output[idx] = sum;\n//     }\n// }\n\n// Kokkos implementation of fft\n#include <Kokkos_Core.hpp>\n\n/* Compute the fourier transform of x. Store the result in output.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\nvoid fft(Kokkos::View<const Kokkos::complex<double>*> &x, Kokkos::View<Kokkos::complex<double>*> &output) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute the fourier transform of x. Store the result in output.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Example:\n\n   input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]\n   output: [{4,0}, {1,-2.42421}, {0,0}, {1,-0.414214}, {0,0}, {1,0.414214}, {0,0}, {1,2.41421}]\n*/\n__global__ void fft(const cuDoubleComplex *x, cuDoubleComplex *output, size_t N) {\nint idx = blockIdx.x * blockDim.x + threadIdx.x;\n    if (idx < N) {\n        cuDoubleComplex sum = {0, 0};\n        for (int k = 0; k < N; k++) {\n            cuDoubleComplex a = x[k];\n            cuDoubleComplex b = cuCmul(make_cuDoubleComplex(cos(2 * M_PI * idx * k / N), -sin(2 * M_PI * idx * k / N)), a);\n            sum = cuCadd(sum, b);\n        }\n        output[idx] = sum;\n    }\n}",
        "translation_function_name": "fft",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = -2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum = {0, 0};\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w{cos(angle), -sin(angle)};\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = -2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = -2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = -2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum = {0, 0};\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w = {cos(angle), -sin(angle)};\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum(0.0, 0.0);\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w(cos(angle), -sin(angle));\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"fft\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int idx) {\n    Kokkos::complex<double> sum = {0, 0};\n    for (int k = 0; k < x.extent(0); k++) {\n        double angle = 2 * M_PI * idx * k / x.extent(0);\n        Kokkos::complex<double> w = {cos(angle), -sin(angle)};\n        sum += w * x(k);\n    }\n    output(idx) = sum;\n});\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "03_dense_la_axpy",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, Kokkos::View<const double*> &x, Kokkos::View<const double*> &y, Kokkos::View<double*> &z) {",
        "translation_prompt": "// CUDA implementation of axpy\n// /* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n//    Example:\n//    \n//    input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n//    output: z=[2, -6, 5, 17]\n// */\n// __global__ void axpy(double alpha, const double *x, const double *y, double *z, size_t N) {\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (i < N) {\n//         z[i] = alpha * x[i] + y[i];\n//     }\n// }\n\n// Kokkos implementation of axpy\n#include <Kokkos_Core.hpp>\n\n/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\nvoid axpy(double alpha, Kokkos::View<const double*> &x, Kokkos::View<const double*> &y, Kokkos::View<double*> &z) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute z = alpha*x+y where x and y are vectors. Store the result in z.\n   Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.\n   Example:\n   \n   input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2\n   output: z=[2, -6, 5, 17]\n*/\n__global__ void axpy(double alpha, const double *x, const double *y, double *z, size_t N) {\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < N) {\n        z[i] = alpha * x[i] + y[i];\n    }\n}",
        "translation_function_name": "axpy",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", x.extent(0), KOKKOS_LAMBDA(const size_t i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA (const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}",
            "\nKokkos::parallel_for(\"axpy\", Kokkos::RangePolicy<>(0, x.extent(0)), KOKKOS_LAMBDA(const int i) {\n    z(i) = alpha * x(i) + y(i);\n});\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "02_dense_la_gemm",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(Kokkos::View<const double**> &A, Kokkos::View<const double**> &B, Kokkos::View<double**> &C, size_t M, size_t K, size_t N) {",
        "translation_prompt": "// CUDA implementation of gemm\n// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n//    Use CUDA to compute in parallel. The kernel is launched on an MxN grid of threads.\n//    Example:\n// \n//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n//    output: C=[[9, 5], [4, 2]]\n// */\n// __global__ void gemm(const double *A, const double *B, double *C, size_t M, size_t K, size_t N) {\n// int row = blockIdx.x * blockDim.x + threadIdx.x;\n//     int col = blockIdx.y * blockDim.y + threadIdx.y;\n//     double sum = 0;\n//     for (int k = 0; k < K; k++) {\n//         sum += A[row * K + k] * B[k * N + col];\n//     }\n//     C[row * N + col] = sum;\n// }\n\n// Kokkos implementation of gemm\n#include <Kokkos_Core.hpp>\n\n/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\nvoid gemm(Kokkos::View<const double**> &A, Kokkos::View<const double**> &B, Kokkos::View<double**> &C, size_t M, size_t K, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Multiply the matrix A by the matrix B. Store the results in the matrix C.\n   A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.\n   Use CUDA to compute in parallel. The kernel is launched on an MxN grid of threads.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]\n   output: C=[[9, 5], [4, 2]]\n*/\n__global__ void gemm(const double *A, const double *B, double *C, size_t M, size_t K, size_t N) {\nint row = blockIdx.x * blockDim.x + threadIdx.x;\n    int col = blockIdx.y * blockDim.y + threadIdx.y;\n    double sum = 0;\n    for (int k = 0; k < K; k++) {\n        sum += A[row * K + k] * B[k * N + col];\n    }\n    C[row * N + col] = sum;\n}",
        "translation_function_name": "gemm",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (size_t k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemm\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {M, N}), KOKKOS_LAMBDA(const int row, const int col) {\n    double sum = 0.0;\n    for (int k = 0; k < K; ++k) {\n        sum += A(row, k) * B(k, col);\n    }\n    C(row, col) = sum;\n});\n}"
        ]
    },
    {
        "problem_type": "dense_la",
        "language": "cpp",
        "name": "04_dense_la_gemv",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix, x has N elements, and y has M elements.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(Kokkos::View<const double**> &A, Kokkos::View<const double*> &x, Kokkos::View<double*> &y, size_t M, size_t N) {",
        "translation_prompt": "// CUDA implementation of gemv\n// /* Multiply the matrix A by the vector x. Store the results in the vector y.\n//    A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n//    Use CUDA to compute in parallel. The kernel is launched with at least M threads.\n//    Example:\n// \n//    input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n//    output: y=[1, -3]\n// */\n// __global__ void gemv(const double *A, const double *x, double *y, size_t M, size_t N) {\n// int row = blockIdx.x * blockDim.x + threadIdx.x;\n//   if (row < M) {\n//     double sum = 0.0;\n//     for (int col = 0; col < N; ++col) {\n//       sum += A[row * N + col] * x[col];\n//     }\n//     y[row] = sum;\n//   }\n// }\n\n// Kokkos implementation of gemv\n#include <Kokkos_Core.hpp>\n\n/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix, x has N elements, and y has M elements.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\nvoid gemv(Kokkos::View<const double**> &A, Kokkos::View<const double*> &x, Kokkos::View<double*> &y, size_t M, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Multiply the matrix A by the vector x. Store the results in the vector y.\n   A is an MxN matrix stored in row-major, x has N elements, and y has M elements.\n   Use CUDA to compute in parallel. The kernel is launched with at least M threads.\n   Example:\n\n   input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]\n   output: y=[1, -3]\n*/\n__global__ void gemv(const double *A, const double *x, double *y, size_t M, size_t N) {\nint row = blockIdx.x * blockDim.x + threadIdx.x;\n  if (row < M) {\n    double sum = 0.0;\n    for (int col = 0; col < N; ++col) {\n      sum += A[row * N + col] * x[col];\n    }\n    y[row] = sum;\n  }\n}",
        "translation_function_name": "gemv",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"gemv\", M, KOKKOS_LAMBDA(const int row) {\n  double sum = 0.0;\n  for (int col = 0; col < N; ++col) {\n    sum += A(row, col) * x(col);\n  }\n  y(row) = sum;\n});\n}"
        ]
    },
    {
        "problem_type": "sort",
        "language": "cpp",
        "name": "42_sort_sorted_ranks",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* For each value in the array x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(Kokkos::View<const float*> const& x, Kokkos::View<size_t*> &ranks) {",
        "translation_prompt": "// CUDA implementation of ranks\n// /* For each value in the vector x compute its index in the sorted vector.\n//    Store the results in `ranks`.\n//    Use CUDA to compute in parallel. The kernel will be launched with at least as many threads as elements in x.\n//    Examples:\n// \n//    input: [3.1, 2.8, 9.1, 0.4, 3.14]\n//    output: [2, 1, 4, 0, 3]\n//  \n//    input: [100, 7.6, 16.1, 18, 7.6]\n//    output: [4, 0, 1, 2, 3]\n// */\n// __global__ void ranks(const float *x, size_t *ranks, size_t N) {\n// size_t idx = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (idx < N) {\n//         float val = x[idx];\n//         size_t rank = 0;\n//         for (size_t i = 0; i < N; ++i) {\n//             if (x[i] <= val) {\n//                 ++rank;\n//             }\n//         }\n//         ranks[idx] = rank - 1;\n//     }\n// }\n\n// Kokkos implementation of ranks\n#include <Kokkos_Core.hpp>\n\n/* For each value in the array x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\nvoid ranks(Kokkos::View<const float*> const& x, Kokkos::View<size_t*> &ranks) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* For each value in the vector x compute its index in the sorted vector.\n   Store the results in `ranks`.\n   Use CUDA to compute in parallel. The kernel will be launched with at least as many threads as elements in x.\n   Examples:\n\n   input: [3.1, 2.8, 9.1, 0.4, 3.14]\n   output: [2, 1, 4, 0, 3]\n \n   input: [100, 7.6, 16.1, 18, 7.6]\n   output: [4, 0, 1, 2, 3]\n*/\n__global__ void ranks(const float *x, size_t *ranks, size_t N) {\nsize_t idx = blockIdx.x * blockDim.x + threadIdx.x;\n    if (idx < N) {\n        float val = x[idx];\n        size_t rank = 0;\n        for (size_t i = 0; i < N; ++i) {\n            if (x[i] <= val) {\n                ++rank;\n            }\n        }\n        ranks[idx] = rank - 1;\n    }\n}",
        "translation_function_name": "ranks",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"ranks\", x.extent(0), KOKKOS_LAMBDA(const int idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}",
            "\nKokkos::parallel_for(\"compute_ranks\", x.extent(0), KOKKOS_LAMBDA(const size_t idx) {\n    float val = x(idx);\n    size_t rank = 0;\n    for (size_t i = 0; i < x.extent(0); ++i) {\n        if (x(i) < val || (x(i) == val && i < idx)) {\n            ++rank;\n        }\n    }\n    ranks(idx) = rank;\n});\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "50_stencil_xor_kernel",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(Kokkos::View<const int**> &input, Kokkos::View<int**> &output, size_t N) {",
        "translation_prompt": "// CUDA implementation of cellsXOR\n// /* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n//    Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n//    input and output are NxN grids of ints in row-major.\n//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n//    Example:\n// \n//    input: [[0, 1, 1, 0],\n//            [1, 0, 0, 0],\n//            [0, 0, 0, 0],\n//            [0, 1, 0, 0]\n//    output: [[0, 0, 1, 1],\n//             [1, 0, 0, 1],\n//             [0, 0, 1, 0],\n//             [1, 0, 1, 0]]\n// */\n// __global__ void cellsXOR(const int *input, int *output, size_t N) {\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n//     int j = blockIdx.y * blockDim.y + threadIdx.y;\n// \n//     if (i < N && j < N) {\n//         int num_neighbors = 0;\n//         if (i > 0 && input[i - 1 + N * j] == 1) {\n//             num_neighbors++;\n//         }\n//         if (i < N - 1 && input[i + 1 + N * j] == 1) {\n//             num_neighbors++;\n//         }\n//         if (j > 0 && input[i + N * (j - 1)] == 1) {\n//             num_neighbors++;\n//         }\n//         if (j < N - 1 && input[i + N * (j + 1)] == 1) {\n//             num_neighbors++;\n//         }\n//         if (num_neighbors == 1) {\n//             output[i + N * j] = 1;\n//         } else {\n//             output[i + N * j] = 0;\n//         }\n//     }\n// }\n\n// Kokkos implementation of cellsXOR\n#include <Kokkos_Core.hpp>\n\n/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\nvoid cellsXOR(Kokkos::View<const int**> &input, Kokkos::View<int**> &output, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.\n   Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.\n   input and output are NxN grids of ints in row-major.\n   Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n   Example:\n\n   input: [[0, 1, 1, 0],\n           [1, 0, 0, 0],\n           [0, 0, 0, 0],\n           [0, 1, 0, 0]\n   output: [[0, 0, 1, 1],\n            [1, 0, 0, 1],\n            [0, 0, 1, 0],\n            [1, 0, 1, 0]]\n*/\n__global__ void cellsXOR(const int *input, int *output, size_t N) {\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n\n    if (i < N && j < N) {\n        int num_neighbors = 0;\n        if (i > 0 && input[i - 1 + N * j] == 1) {\n            num_neighbors++;\n        }\n        if (i < N - 1 && input[i + 1 + N * j] == 1) {\n            num_neighbors++;\n        }\n        if (j > 0 && input[i + N * (j - 1)] == 1) {\n            num_neighbors++;\n        }\n        if (j < N - 1 && input[i + N * (j + 1)] == 1) {\n            num_neighbors++;\n        }\n        if (num_neighbors == 1) {\n            output[i + N * j] = 1;\n        } else {\n            output[i + N * j] = 0;\n        }\n    }\n}",
        "translation_function_name": "cellsXOR",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}\n",
            "\nKokkos::parallel_for(\"cellsXOR\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int num_neighbors = 0;\n    if (i > 0 && input(i - 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (i < N - 1 && input(i + 1, j) == 1) {\n        num_neighbors++;\n    }\n    if (j > 0 && input(i, j - 1) == 1) {\n        num_neighbors++;\n    }\n    if (j < N - 1 && input(i, j + 1) == 1) {\n        num_neighbors++;\n    }\n    output(i, j) = (num_neighbors == 1) ? 1 : 0;\n});\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "54_stencil_game_of_life",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(Kokkos::View<const int**> &input, Kokkos::View<int**> &output, size_t N) {",
        "translation_prompt": "// CUDA implementation of gameOfLife\n// /* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n//    A cell is 1 if it is alive and 0 if it is dead.\n//    If a live cell has fewer than 2 live neighbors then it dies.\n//    If a live cell has 2 or 3 live neighbors then it lives on.\n//    If a live cell has more than 3 live neighbords then it dies.\n//    If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n//    `input` and `output` are NxN grids stored in row-major.\n//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n//    Example:\n// \n//    input:  [[0, 0, 0, 0, 0],\n// \t\t\t\t\t  [0, 1, 0, 0, 0],\n//             [0, 1, 1, 0, 0],\n//             [0, 0, 1, 1, 0],\n//             [0, 1, 0, 0, 0]]\n//    output: [[0, 0, 0, 0, 0],\n// \t\t\t\t\t  [0, 1, 1, 0, 0],\n//             [0, 1, 0, 1, 0],\n//             [0, 0, 0, 1, 0],\n//             [0, 0, 1, 0, 0]]\n// */\n// __global__ void gameOfLife(const int *input, int *output, size_t N) {\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n//   int j = blockIdx.y * blockDim.y + threadIdx.y;\n// \n//   if (i < N && j < N) {\n//     int neighbors = 0;\n//     for (int x = -1; x <= 1; x++) {\n//       for (int y = -1; y <= 1; y++) {\n//         if (x == 0 && y == 0) {\n//           continue;\n//         }\n//         int neighbor_i = i + x;\n//         int neighbor_j = j + y;\n//         if (neighbor_i < 0 || neighbor_i >= N || neighbor_j < 0 || neighbor_j >= N) {\n//           continue;\n//         }\n//         neighbors += input[neighbor_i * N + neighbor_j];\n//       }\n//     }\n//     output[i * N + j] = input[i * N + j];\n//     if (input[i * N + j] == 1) {\n//       if (neighbors < 2 || neighbors > 3) {\n//         output[i * N + j] = 0;\n//       }\n//     } else {\n//       if (neighbors == 3) {\n//         output[i * N + j] = 1;\n//       }\n//     }\n//   }\n// }\n\n// Kokkos implementation of gameOfLife\n#include <Kokkos_Core.hpp>\n\n/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids.\n   Use Kokkos to compute in parallel. Assume Kokkos is already initialized.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\nvoid gameOfLife(Kokkos::View<const int**> &input, Kokkos::View<int**> &output, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Simulate one generation of Game of Life on `input`. Store the results in `output`.\n   A cell is 1 if it is alive and 0 if it is dead.\n   If a live cell has fewer than 2 live neighbors then it dies.\n   If a live cell has 2 or 3 live neighbors then it lives on.\n   If a live cell has more than 3 live neighbords then it dies.\n   If a cell is dead and has exactly 3 live neighbors then it becomes alive.\n   `input` and `output` are NxN grids stored in row-major.\n   Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n   Example:\n\n   input:  [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 0, 0, 0],\n            [0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 0],\n            [0, 1, 0, 0, 0]]\n   output: [[0, 0, 0, 0, 0],\n\t\t\t\t\t  [0, 1, 1, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0]]\n*/\n__global__ void gameOfLife(const int *input, int *output, size_t N) {\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n  int j = blockIdx.y * blockDim.y + threadIdx.y;\n\n  if (i < N && j < N) {\n    int neighbors = 0;\n    for (int x = -1; x <= 1; x++) {\n      for (int y = -1; y <= 1; y++) {\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        int neighbor_i = i + x;\n        int neighbor_j = j + y;\n        if (neighbor_i < 0 || neighbor_i >= N || neighbor_j < 0 || neighbor_j >= N) {\n          continue;\n        }\n        neighbors += input[neighbor_i * N + neighbor_j];\n      }\n    }\n    output[i * N + j] = input[i * N + j];\n    if (input[i * N + j] == 1) {\n      if (neighbors < 2 || neighbors > 3) {\n        output[i * N + j] = 0;\n      }\n    } else {\n      if (neighbors == 3) {\n        output[i * N + j] = 1;\n      }\n    }\n  }\n}",
        "translation_function_name": "gameOfLife",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      if (x == 0 && y == 0) continue;\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1 && (neighbors < 2 || neighbors > 3)) {\n    output(i, j) = 0;\n  } else if (cell == 0 && neighbors == 3) {\n    output(i, j) = 1;\n  } else {\n    output(i, j) = cell;\n  }\n});\n}",
            "\nKokkos::parallel_for(\"GameOfLife\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int neighbors = 0;\n  for (int x = -1; x <= 1; x++) {\n    for (int y = -1; y <= 1; y++) {\n      if (x == 0 && y == 0) {\n        continue;\n      }\n      int neighbor_i = i + x;\n      int neighbor_j = j + y;\n      if (neighbor_i >= 0 && neighbor_i < N && neighbor_j >= 0 && neighbor_j < N) {\n        neighbors += input(neighbor_i, neighbor_j);\n      }\n    }\n  }\n  int cell = input(i, j);\n  if (cell == 1) {\n    output(i, j) = (neighbors == 2 || neighbors == 3) ? 1 : 0;\n  } else {\n    output(i, j) = (neighbors == 3) ? 1 : 0;\n  }\n});\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "52_stencil_1d_jacobi_3-point_stencil",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(Kokkos::View<const double*> &input, Kokkos::View<double*> &output) {",
        "translation_prompt": "// CUDA implementation of jacobi1D\n// /* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n//    Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n//    i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n//    Replace with 0 when reading past the boundaries of `input`.\n//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n//    Example:\n// \n//    input: [9, -6, -1, 2, 3]\n//    output: [1, 2/3, -5/3, 4/3, 5/3]\n// */\n// __global__ void jacobi1D(const double *input, double *output, size_t N) {\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n//     if (i < N) {\n//         if (i == 0) {\n//             output[i] = (input[i] + input[i + 1]) / 2;\n//         } else if (i == N - 1) {\n//             output[i] = (input[i - 1] + input[i]) / 2;\n//         } else {\n//             output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n//         }\n//     }\n// }\n\n// Kokkos implementation of jacobi1D\n#include <Kokkos_Core.hpp>\n\n/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\nvoid jacobi1D(Kokkos::View<const double*> &input, Kokkos::View<double*> &output) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.\n   i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3\n   Replace with 0 when reading past the boundaries of `input`.\n   Use CUDA to compute in parallel. The kernel is launched with at least N threads.\n   Example:\n\n   input: [9, -6, -1, 2, 3]\n   output: [1, 2/3, -5/3, 4/3, 5/3]\n*/\n__global__ void jacobi1D(const double *input, double *output, size_t N) {\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < N) {\n        if (i == 0) {\n            output[i] = (input[i] + input[i + 1]) / 2;\n        } else if (i == N - 1) {\n            output[i] = (input[i - 1] + input[i]) / 2;\n        } else {\n            output[i] = (input[i - 1] + input[i] + input[i + 1]) / 3;\n        }\n    }\n}",
        "translation_function_name": "jacobi1D",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}",
            "\nKokkos::parallel_for(\"jacobi1D\", N, KOKKOS_LAMBDA(const int i) {\n    if (i == 0) {\n        output(i) = (input(i) + input(i + 1)) / 2;\n    } else if (i == N - 1) {\n        output(i) = (input(i - 1) + input(i)) / 2;\n    } else {\n        output(i) = (input(i - 1) + input(i) + input(i + 1)) / 3;\n    }\n});\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "51_stencil_edge_kernel",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\nconst int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images.\n   Store the output of the computation in imageOut.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(Kokkos::View<const int**> &imageIn, Kokkos::View<int**> &imageOut, size_t N) {",
        "translation_prompt": "// CUDA implementation of convolveKernel\n// __constant__ int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n// \n// /* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n//    the dot product of itself and its neighbors with the edge kernel.\n//    Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n//    imageIn and imageOut are NxN grayscale images stored in row-major.\n//    Store the output of the computation in imageOut.\n//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n//    Example:\n// \n//    input: [[112, 118, 141, 152],\n//            [93, 101, 119, 203],\n//            [45, 17, 16, 232],\n//            [82, 31, 49, 101]]\n//    output: [[255, 255, 255, 255],\n//             [255, 147, 0, 255],\n//             [36, 0, 0, 255],\n//             [255, 39, 0, 255]]\n// */\n// __global__ void convolveKernel(const int *imageIn, int *imageOut, size_t N) {\n// // TODO: implement the kernel\n// }\n\n// Kokkos implementation of convolveKernel\n#include <Kokkos_Core.hpp>\n\nconst int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images.\n   Store the output of the computation in imageOut.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\nvoid convolveKernel(Kokkos::View<const int**> &imageIn, Kokkos::View<int**> &imageOut, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "__constant__ int edgeKernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n\n/* Convolve the edge kernel with a grayscale image. Each pixel will be replaced with\n   the dot product of itself and its neighbors with the edge kernel.\n   Use a value of 0 for pixels outside the image's boundaries and clip outputs between 0 and 255.\n   imageIn and imageOut are NxN grayscale images stored in row-major.\n   Store the output of the computation in imageOut.\n   Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n   Example:\n\n   input: [[112, 118, 141, 152],\n           [93, 101, 119, 203],\n           [45, 17, 16, 232],\n           [82, 31, 49, 101]]\n   output: [[255, 255, 255, 255],\n            [255, 147, 0, 255],\n            [36, 0, 0, 255],\n            [255, 39, 0, 255]]\n*/\n__global__ void convolveKernel(const int *imageIn, int *imageOut, size_t N) {\n// TODO: implement the kernel\n}",
        "translation_function_name": "convolveKernel",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ni = i + ki;\n            int nj = j + kj;\n            if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                sum += imageIn(ni, nj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ni = i + ki;\n            int nj = j + kj;\n            if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                sum += imageIn(ni, nj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < N && jj >= 0 && jj < N) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ni = i + ki;\n            int nj = j + kj;\n            if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                sum += imageIn(ni, nj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    imageOut(i, j) = sum < 0 ? 0 : (sum > 255 ? 255 : sum);\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    imageOut(i, j) = sum < 0 ? 0 : (sum > 255 ? 255 : sum);\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ni = i + ki;\n            int nj = j + kj;\n            if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                sum += imageIn(ni, nj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ni = i + ki;\n            int nj = j + kj;\n            if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                sum += imageIn(ni, nj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n  int sum = 0;\n  for (int ki = -1; ki <= 1; ++ki) {\n    for (int kj = -1; kj <= 1; ++kj) {\n      int ii = i + ki;\n      int jj = j + kj;\n      if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n        sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n      }\n    }\n  }\n  sum = sum < 0 ? 0 : sum;\n  sum = sum > 255 ? 255 : sum;\n  imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolve\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < N && jj >= 0 && jj < N) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ni = i + ki;\n            int nj = j + kj;\n            if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                sum += imageIn(ni, nj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolveKernel\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int m = -1; m <= 1; m++) {\n        for (int n = -1; n <= 1; n++) {\n            int ii = i + m;\n            int jj = j + n;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[m + 1][n + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"convolve\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    int sum = 0;\n    for (int ki = -1; ki <= 1; ++ki) {\n        for (int kj = -1; kj <= 1; ++kj) {\n            int ii = i + ki;\n            int jj = j + kj;\n            if (ii >= 0 && ii < static_cast<int>(N) && jj >= 0 && jj < static_cast<int>(N)) {\n                sum += imageIn(ii, jj) * edgeKernel[ki + 1][kj + 1];\n            }\n        }\n    }\n    sum = sum < 0 ? 0 : sum;\n    sum = sum > 255 ? 255 : sum;\n    imageOut(i, j) = sum;\n});\n}"
        ]
    },
    {
        "problem_type": "stencil",
        "language": "cpp",
        "name": "53_stencil_2d_jacobi_5-point_stencil",
        "parallelism_model": "kokkos",
        "prompt": "#include <Kokkos_Core.hpp>\n\n/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(Kokkos::View<const double**> &input, Kokkos::View<double**> &output, size_t N) {",
        "translation_prompt": "// CUDA implementation of jacobi2D\n// /* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n//    Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n//    i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n//    Replace with 0 when reading past the boundaries of `input`.\n//    `input` and `output` are NxN grids stored in row-major.\n//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n//    Example:\n// \n//    input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n//    output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n// */\n// __global__ void jacobi2D(const double *input, double *output, size_t N) {\n// int i = blockIdx.x * blockDim.x + threadIdx.x;\n//     int j = blockIdx.y * blockDim.y + threadIdx.y;\n//     if (i >= N || j >= N) {\n//         return;\n//     }\n//     int idx = i + j * N;\n//     double sum = 0;\n//     if (i > 0) {\n//         sum += input[idx - 1];\n//     }\n//     if (i < N - 1) {\n//         sum += input[idx + 1];\n//     }\n//     if (j > 0) {\n//         sum += input[idx - N];\n//     }\n//     if (j < N - 1) {\n//         sum += input[idx + N];\n//     }\n//     sum += input[idx];\n//     sum /= 5;\n//     output[idx] = sum;\n// }\n\n// Kokkos implementation of jacobi2D\n#include <Kokkos_Core.hpp>\n\n/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids.\n   Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\nvoid jacobi2D(Kokkos::View<const double**> &input, Kokkos::View<double**> &output, size_t N) {\n",
        "translation_src_model": "cuda",
        "translation_dst_model": "kokkos",
        "translation_src_example": "/* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.\n   Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.\n   i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5\n   Replace with 0 when reading past the boundaries of `input`.\n   `input` and `output` are NxN grids stored in row-major.\n   Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.\n   Example:\n\n   input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]\n   output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]\n*/\n__global__ void jacobi2D(const double *input, double *output, size_t N) {\nint i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n    if (i >= N || j >= N) {\n        return;\n    }\n    int idx = i + j * N;\n    double sum = 0;\n    if (i > 0) {\n        sum += input[idx - 1];\n    }\n    if (i < N - 1) {\n        sum += input[idx + 1];\n    }\n    if (j > 0) {\n        sum += input[idx - N];\n    }\n    if (j < N - 1) {\n        sum += input[idx + N];\n    }\n    sum += input[idx];\n    sum /= 5;\n    output[idx] = sum;\n}",
        "translation_function_name": "jacobi2D",
        "temperature": 0.2,
        "top_p": 0.95,
        "do_sample": true,
        "max_new_tokens": 1024,
        "outputs": [
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i-1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i+1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j-1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j+1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    output(i, j) = sum / 5;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    output(i, j) = sum / 5;\n});\nKokkos::fence();\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}\n",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    output(i, j) = sum / 5;\n});\n}",
            "\nKokkos::parallel_for(\"jacobi2D\", Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {N, N}), KOKKOS_LAMBDA(const int i, const int j) {\n    double sum = 0;\n    if (i > 0) {\n        sum += input(i - 1, j);\n    }\n    if (i < N - 1) {\n        sum += input(i + 1, j);\n    }\n    if (j > 0) {\n        sum += input(i, j - 1);\n    }\n    if (j < N - 1) {\n        sum += input(i, j + 1);\n    }\n    sum += input(i, j);\n    sum /= 5;\n    output(i, j) = sum;\n});\n}"
        ]
    }
]