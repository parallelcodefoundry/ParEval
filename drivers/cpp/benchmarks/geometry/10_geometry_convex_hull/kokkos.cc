// Driver for 10_geometry_convex_hull for Kokkos
// #include <Kokkos_Core.hpp>
//
// struct Point {
//    double x, y;
// };
//
// /* Find the set of points that defined the smallest convex polygon that contains all the points in the vector points. Store the result in `hull`.
//    Use Kokkos to compute in parallel. Assume Kokkos is already initialized.
//    Example:
//
//    input: [{0, 3}, {1, 1}, {2, 2}, {4, 4}, {0, 0}, {1, 2}, {3, 1}, {3, 3}]
//    output: [{0, 3}, {4, 4}, {3, 1}, {0, 0}]
// */
// void convexHull(Kokkos::View<const Point*> &points, Kokkos::View<Point*> &hull) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<Point*> points, hull;
    Kokkos::View<const Point*> pointsConst;

    std::vector<Point> h_points, h_hull;
    std::vector<double> h_x, h_y;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -1000.0, 1000.0);
    fillRand(ctx->h_y, -1000.0, 1000.0);
    ctx->h_hull.resize(0);
    for (size_t i = 0; i < ctx->points.size(); i++) {
        ctx->h_points[i].x = ctx->h_x[i];
        ctx->h_points[i].y = ctx->h_y[i];
    }

    copyVectorToView(ctx->h_points, ctx->points);
    ctx->pointsConst = ctx->points;
    Kokkos::resize(ctx->hull, 0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->h_points.resize(DRIVER_PROBLEM_SIZE);
    ctx->h_x.resize(DRIVER_PROBLEM_SIZE);
    ctx->h_y.resize(DRIVER_PROBLEM_SIZE);

    ctx->points = Kokkos::View<Point*>("points", DRIVER_PROBLEM_SIZE);
    ctx->hull = Kokkos::View<Point*>("hull", 0);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    convexHull(ctx->pointsConst, ctx->hull);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctConvexHull(ctx->h_points, ctx->h_hull);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<Point> h_points(TEST_SIZE), correct(0), h_test(0);
    std::vector<double> x(TEST_SIZE), y(TEST_SIZE);

    Kokkos::View<Point*> points("points", TEST_SIZE);
    Kokkos::View<Point*> test("test", 0);
    Kokkos::View<const Point*> pointsConst = points;

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, -1000.0, 1000.0);
        fillRand(y, -1000.0, 1000.0);
        correct.resize(0);

        for (size_t i = 0; i < h_points.size(); i++) {
            h_points[i].x = x[i];
            h_points[i].y = y[i];
        }

        copyVectorToView(h_points, points);
        pointsConst = points;
        Kokkos::resize(test, 0);

        // compute correct result
        correctConvexHull(h_points, correct);

        // compute test result
        convexHull(pointsConst, test);

        h_test.resize(test.size());
        if (h_test.size() != correct.size()) {
            return false;
        } else {
            copyViewToVector(test, h_test);
            std::sort(h_test.begin(), h_test.end(), [](Point const& a, Point const& b) {
                return a.x < b.x || (a.x == b.x && a.y < b.y);
            });
            std::sort(correct.begin(), correct.end(), [](Point const& a, Point const& b) {
                return a.x < b.x || (a.x == b.x && a.y < b.y);
            });
            for (size_t i = 0; i < correct.size(); i++) {
                if (std::abs(correct[i].x - h_test[i].x) > 1e-6 || std::abs(correct[i].y - h_test[i].y) > 1e-6) {
                    return false;
                }
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
