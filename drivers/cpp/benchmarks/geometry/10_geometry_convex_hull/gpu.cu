// Driver for 10_geometry_convex_hull for CUDA and HIP
// struct Point {
//     double x, y;
// };
//
// /* Find the set of points that defined the smallest convex polygon that contains all the points in the vector points. Store the result in `hull`.
//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as points.
//    Example:
//
//    input: [{0, 3}, {1, 1}, {2, 2}, {4, 4}, {0, 0}, {1, 2}, {3, 1}, {3, 3}]
//    output: [{0, 3}, {4, 4}, {3, 1}, {0, 0}]
// */
// __global__ void convexHull(const Point *points, size_t numPoints, Point *hull, size_t hullSize) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM
#include "baseline.hpp"


struct Context {
    std::vector<Point> h_points, h_hull;
    std::vector<double> h_x, h_y;
    Point *d_points, *d_hull;

    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -1000.0, 1000.0);
    fillRand(ctx->h_y, -1000.0, 1000.0);
    ctx->h_hull.resize(0);
    for (size_t i = 0; i < ctx->N; i++) {
        ctx->h_points[i].x = ctx->h_x[i];
        ctx->h_points[i].y = ctx->h_y[i];
    }

    COPY_H2D(ctx->d_points, ctx->h_points.data(), ctx->N * sizeof(Point));
    FREE(ctx->d_hull);
    ALLOC(ctx->d_hull, ctx->N * sizeof(Point));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_points.resize(ctx->N);
    ctx->h_x.resize(ctx->N);
    ctx->h_y.resize(ctx->N);
    ctx->h_hull.resize(0);
    ALLOC(ctx->d_points, ctx->N * sizeof(Point));
    ALLOC(ctx->d_hull, ctx->N * sizeof(Point));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    convexHull<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_points, ctx->N, ctx->d_hull, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctConvexHull(ctx->h_points, ctx->h_hull);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<Point> points(TEST_SIZE), correct(0), test(TEST_SIZE);
    std::vector<double> x(TEST_SIZE), y(TEST_SIZE);

    Point *d_points, *d_hull;
    ALLOC(d_points, TEST_SIZE * sizeof(Point));
    ALLOC(d_hull, TEST_SIZE * sizeof(Point));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, -1000.0, 1000.0);
        fillRand(y, -1000.0, 1000.0);
        correct.resize(0);
        std::fill(test.begin(), test.end(), Point());

        for (size_t i = 0; i < points.size(); i++) {
            points[i].x = x[i];
            points[i].y = y[i];
        }

        COPY_H2D(d_points, points.data(), TEST_SIZE * sizeof(Point));
        COPY_H2D(d_hull, test.data(), TEST_SIZE * sizeof(Point));

        // compute correct result
        correctConvexHull(points, correct);

        // compute test result
        convexHull<<<gridSize, blockSize>>>(d_points, TEST_SIZE, d_hull, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_hull, TEST_SIZE * sizeof(Point));

        std::sort(correct.begin(), correct.end(), [](Point const& a, Point const& b) {
            return a.x < b.x || (a.x == b.x && a.y < b.y);
        });
        std::sort(test.begin(), test.end(), [](Point const& a, Point const& b) {
            return a.x < b.x || (a.x == b.x && a.y < b.y);
        });
        for (size_t i = 0; i < correct.size(); i++) {
            if (std::abs(correct[i].x - test[i].x) > 1e-6 || std::abs(correct[i].y - test[i].y) > 1e-6) {
                FREE(d_points);
                FREE(d_hull);
                return false;
            }
        }
    }

    FREE(d_points);
    FREE(d_hull);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_points);
    FREE(ctx->d_hull);
    delete ctx;
}
