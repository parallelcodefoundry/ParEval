// Driver for 12_geometry_smallest_triangle for Kokkos
// #include <Kokkos_Core.hpp>
//
// struct Point {
//     double x, y;
// };
//
// double triangleArea(Point const& A, Point const& B, Point const& C) {
//   return 0.5 * std::abs( A.x*(B.y-C.y) + B.x*(C.y-A.y) + C.x*(A.y-B.y) );
// }
//
// /* Return the area of the smallest triangle that can be formed by any 3 points.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//
//    input: [{0, 10}, {5, 5}, {1,0}, {-1, 1}, {-10, 0}]
//    output: 5.5
// */
// double smallestArea(Kokkos::View<const Point*> &points) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<Point*> points;
    Kokkos::View<const Point*> pointsConst;

    std::vector<Point> h_points;
    std::vector<double> h_x, h_y;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -1000.0, 1000.0);
    fillRand(ctx->h_y, -1000.0, 1000.0);
    for (size_t i = 0; i < ctx->points.size(); i++) {
        ctx->h_points[i].x = ctx->h_x[i];
        ctx->h_points[i].y = ctx->h_y[i];
    }

    copyVectorToView(ctx->h_points, ctx->points);
    ctx->pointsConst = ctx->points;
}

Context *init() {
    Context *ctx = new Context();

    ctx->h_points.resize(DRIVER_PROBLEM_SIZE);
    ctx->h_x.resize(DRIVER_PROBLEM_SIZE);
    ctx->h_y.resize(DRIVER_PROBLEM_SIZE);

    ctx->points = Kokkos::View<Point*>("points", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    double area = smallestArea(ctx->pointsConst);
    (void)area;
}

void NO_OPTIMIZE best(Context *ctx) {
    double area = correctSmallestArea(ctx->h_points);
    (void)area;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<Point> h_points(TEST_SIZE);
    std::vector<double> x(TEST_SIZE), y(TEST_SIZE);
    double correct = 0.0, test = 0.0;

    Kokkos::View<Point*> points("points", TEST_SIZE);
    Kokkos::View<const Point*> pointsConst = points;

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, -1000.0, 1000.0);
        fillRand(y, -1000.0, 1000.0);
        test = 0.0;
        correct = 0.0;

        for (size_t i = 0; i < points.size(); i++) {
            h_points[i].x = x[i];
            h_points[i].y = y[i];
        }

        copyVectorToView(h_points, points);
        pointsConst = points;

        // compute correct result
        correct = correctSmallestArea(h_points);

        // compute test result
        test = smallestArea(pointsConst);

        if (std::abs(correct - test) > 1e-4) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
