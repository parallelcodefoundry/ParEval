// Driver for 13_geometry_closest_pair_2d for Serial, OpenMP, MPI, and MPI+OpenMP
// struct Point {
//     double x, y;
// };
//
// double distance(Point const& p1, Point const& p2) {
//     return std::sqrt(std::pow(p2.x-p1.x, 2) + std::pow(p2.y-p1.y, 2));
// }
//
// /* Return the distance between the closest two points in the vector points.
//    Example:
//
//    input: [{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}]
//    output: 1.41421
// */
// double closestPair(std::vector<Point> const& points) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    std::vector<Point> points;
    std::vector<double> x, y;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -1000.0, 1000.0);
    fillRand(ctx->y, -1000.0, 1000.0);
    BCAST(ctx->x, DOUBLE);
    BCAST(ctx->y, DOUBLE);

    for (size_t i = 0; i < ctx->points.size(); i++) {
        ctx->points[i].x = ctx->x[i];
        ctx->points[i].y = ctx->y[i];
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->points.resize(DRIVER_PROBLEM_SIZE);
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->y.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    double distance = closestPair(ctx->points);
    (void)distance;
}

void NO_OPTIMIZE best(Context *ctx) {
    double distance = correctClosestPair(ctx->points);
    (void)distance;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<Point> points(TEST_SIZE);
    std::vector<double> x(TEST_SIZE), y(TEST_SIZE);
    double correct = 0.0, test = 0.0;

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, -1000.0, 1000.0);
        fillRand(y, -1000.0, 1000.0);
        test = 0.0;
        correct = 0.0;
        BCAST(x, DOUBLE);
        BCAST(y, DOUBLE);

        for (size_t i = 0; i < points.size(); i++) {
            points[i].x = x[i];
            points[i].y = y[i];
        }

        // compute correct result
        correct = correctClosestPair(points);

        // compute test result
        test = closestPair(points);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank) && std::abs(correct - test) > 1e-4) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
