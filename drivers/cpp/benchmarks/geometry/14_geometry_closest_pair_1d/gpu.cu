// Driver for 14_geometry_closest_pair_1d for CUDA and HIP
// __device__ double distance(double x1, double x2) {
//     return fabs(x1 - x2);
// }
//
// /* Compute the distance between the closest two elements in the vector x.
//    Store the result in distance.
//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.
//    Example:
//
//    input: [7, 3, 9, 12, 31, 1]
//    output: 2
// */
// __global__ void closestPair(const double *x, size_t N, double *distance) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM
#include "baseline.hpp"


struct Context {
    std::vector<double> h_x;
    double *d_x;
    double *d_distance;

    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -1000.0, 1000.0);

    COPY_H2D(ctx->d_x, ctx->h_x.data(), ctx->N * sizeof(double));
    FREE(ctx->d_distance);
    ALLOC(ctx->d_distance, sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_x.resize(ctx->N);
    ALLOC(ctx->d_x, ctx->N * sizeof(double));
    ALLOC(ctx->d_distance, sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    closestPair<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_x, ctx->N, ctx->d_distance);
}

void NO_OPTIMIZE best(Context *ctx) {
    double distance = correctClosestPair(ctx->h_x);
    (void)distance;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<double> h_x(TEST_SIZE);
    double correct = 0.0, test = 0.0;

    double *d_x, *d_distance;
    ALLOC(d_x, TEST_SIZE * sizeof(double));
    ALLOC(d_distance, sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_x, -1000.0, 1000.0);
        test = 0.0;
        correct = 0.0;

        COPY_H2D(d_x, h_x.data(), TEST_SIZE * sizeof(double));
        COPY_H2D(d_distance, &test, sizeof(double));

        // compute correct result
        correct = correctClosestPair(h_x);

        // compute test result
        closestPair<<<gridSize, blockSize>>>(d_x, TEST_SIZE, d_distance);
        SYNC();

        // copy back
        COPY_D2H(&test, d_distance, sizeof(double));

        if (std::abs(correct - test) > 1e-4) {
            FREE(d_x);
            FREE(d_distance);
            return false;
        }
    }

    FREE(d_x);
    FREE(d_distance);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_x);
    FREE(ctx->d_distance);
    delete ctx;
}
