// Driver for 14_geometry_closest_pair_1d for Kokkos
// #include <Kokkos_Core.hpp>
//
// double distance(double x1, double x2) {
//     return std::abs(x1 - x2);
// }
//
// /* Return the distance between the closest two elements in the vector x.
//    Use Kokkos to compute in parallel. Assume Kokkos is already initialized.
//    Example:
//
//    input: [7, 3, 9, 12, 31, 1]
//    output: 2
// */
// double closestPair(Kokkos::View<const double*> &x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<double*> x;
    Kokkos::View<const double*> xConst;

    std::vector<double> h_x;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -1000.0, 1000.0);

    copyVectorToView(ctx->h_x, ctx->x);
    ctx->xConst = ctx->x;
}

Context *init() {
    Context *ctx = new Context();

    ctx->h_x.resize(DRIVER_PROBLEM_SIZE);

    ctx->x = Kokkos::View<double*>("x", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    double distance = closestPair(ctx->xConst);
    (void)distance;
}

void NO_OPTIMIZE best(Context *ctx) {
    double distance = correctClosestPair(ctx->h_x);
    (void)distance;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> h_x(TEST_SIZE);
    double correct = 0.0, test = 0.0;

    Kokkos::View<double*> x("x", TEST_SIZE);
    Kokkos::View<const double*> xConst = x;

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_x, -1000.0, 1000.0);
        test = 0.0;
        correct = 0.0;

        copyVectorToView(h_x, x);
        xConst = x;

        // compute correct result
        correct = correctClosestPair(h_x);

        // compute test result
        test = closestPair(xConst);

        if (std::abs(correct - test) > 1e-4) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
