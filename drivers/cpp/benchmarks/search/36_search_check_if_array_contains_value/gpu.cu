// Driver for 36_search_check_if_array_contains_value
// /* Set `found` to true if the vector x contains the value `target`. Set it to false otherwise.
//    Use CUDA to search in parallel. The kernel is launched with at least N threads.
//    Examples:
// 
//    input: x=[1, 8, 2, 6, 4, 6], target=3
//    output: false
//    
//    input: x=[1, 8, 2, 6, 4, 6], target=8
//    output: true
// */
// __global__ void contains(const int *x, size_t N, int target, bool *found) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>
#include <cstdio>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM

struct Context {
    int *x;
    bool *found;
    int target;
    size_t N;
    std::vector<int> cpuX;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->cpuX, -50, 50);
    ctx->target = (rand() % 200) - 100;
    COPY_H2D(ctx->x, ctx->cpuX.data(), ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ALLOC(ctx->x, ctx->N * sizeof(int));
    ALLOC(ctx->found, 1 * sizeof(bool));
    ctx->cpuX.resize(ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    contains<<<ctx->gridSize,ctx->blockSize>>>(ctx->x, ctx->N, ctx->target, ctx->found);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctContains(ctx->cpuX, ctx->target);
}

bool validate(Context *ctx) {

    size_t N = 1024;
    int *d_input;
    bool *d_found;

    std::vector<int> input(N);
    ALLOC(d_input, N * sizeof(int));
    ALLOC(d_found, 1 * sizeof(bool));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int TRIAL = 0; TRIAL < numTries; TRIAL += 1) {
        fillRand(input, -50, 50);
        int target = (rand() % 200) - 100;

        COPY_H2D(d_input, input.data(), input.size() * sizeof(int));
        bool foundInit = false;
        COPY_H2D(d_found, &foundInit, 1 * sizeof(bool));

        // compute correct result
        bool correctFound = correctContains(input, target);

        // compute test result
        dim3 blockSize = dim3(1024);
        dim3 gridSize = dim3((N + blockSize.x - 1) / blockSize.x); // at least enough threads
        contains<<<gridSize,blockSize>>>(d_input, N, target, d_found);
        SYNC();

        bool testFound;
        COPY_D2H(&testFound, d_found, 1 * sizeof(bool));
        
        if (correctFound != testFound) {
            FREE(d_input);
            FREE(d_found);
            return false;
        }
    }

    FREE(d_input);
    FREE(d_found);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    FREE(ctx->found);
    delete ctx;
}