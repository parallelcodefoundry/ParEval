// Driver for 37_search_find_the_closest_number_to_pi for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Return the index of the value in the vector x that is closest to the math constant PI.
//    Use M_PI for the value of PI.
//    Use Kokkos to search in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]
//    output: 1
// */
// size_t findClosestToPi(Kokkos::View<const double*> const& x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<double*> x;
    std::vector<double> x_host;
};

void reset(Context *ctx) {
    fillRand(ctx->x_host, -100.0, 100.0);
    fillRandKokkos(ctx->x, -100.0, 100.0);
}

Context *init() {
    Context *ctx = new Context();

    const size_t N = DRIVER_PROBLEM_SIZE;
    ctx->x_host.resize(N);
    ctx->x = Kokkos::View<double*>("x", N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    size_t idx = findClosestToPi(ctx->x);
    (void)idx;
}

void NO_OPTIMIZE best(Context *ctx) {
    size_t idx = correctFindClosestToPi(ctx->x_host);
    (void)idx;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    const size_t numTries = 10;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        std::vector<double> input(TEST_SIZE);
        fillRand(input, 100.0, 1000.0);
        input[rand() % TEST_SIZE] = 10.0; // make sure there is a value close to PI
        Kokkos::View<double*> inputView("input", TEST_SIZE);
        copyVectorToView(input, inputView);

        // compute correct result
        size_t correct = correctFindClosestToPi(input);

        // compute test result
        size_t test = findClosestToPi(inputView);
        
        if (test != correct) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
