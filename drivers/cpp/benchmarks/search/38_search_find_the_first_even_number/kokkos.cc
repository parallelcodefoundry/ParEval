// Driver for 38_search_find_the_first_even_number for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Return the index of the first even number in the vector x.
//    Use Kokkos to parallelize the search. Assume Kokkos has already been initialized.
//    Examples:
// 
//    input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]
//    output: 6
// 
//    input: [3, 8, 9, 9, 3, 4, 8, 6]
//    output: 1
// */
// size_t findFirstEven(Kokkos::View<const int*> const& x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<int*> x;
    std::vector<int> x_host;
};

void reset(Context *ctx) {
    fillRand(ctx->x_host, 1, 20);
    for (int i = 0; i < ctx->x_host.size(); i += 1) {
        ctx->x_host[i] = 2 * ctx->x_host[i] + 1;  // make everything odd
    }
    // make two values in the middle quadrants even
    size_t min = ctx->x_host.size() / 4;
    size_t max = 3 * ctx->x_host.size() / 4;
    ctx->x_host[rand() % (max - min) + min] += 1;
    ctx->x_host[rand() % (max - min) + min] += 1;
    copyVectorToView(ctx->x_host, ctx->x);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->x = Kokkos::View<int*>("x", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    size_t idx = findFirstEven(ctx->x);
    (void)idx;
}

void NO_OPTIMIZE best(Context *ctx) {
    size_t idx = correctFindFirstEven(ctx->x_host);
    (void)idx;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    const size_t numTries = 10;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        std::vector<int> x(TEST_SIZE);
        fillRand(x, 1, 100);
        if (i == 1) {
            for (size_t j = 0; j < 20; j += 1) {
                x[j] = 2 * (rand() % 50) + 1;
            }
        }
        Kokkos::View<int*> xView("x", x.size());
        copyVectorToView(x, xView);

        // compute correct result
        size_t correct = correctFindFirstEven(x);

        // compute test result
        size_t test = findFirstEven(xView);
        
        if (test != correct) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
