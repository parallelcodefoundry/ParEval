// Driver for 39_search_xor_contains for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return true if `val` is only in one of vectors x or y.
//    Return false if it is in both or neither.
//    Examples:
// 
//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=7
//    output: true
// 
//    input: x=[1,8,4,3,2], y=[3,4,4,1,1,7], val=1
//    output: false
// */
// bool xorContains(std::vector<int> const& x, std::vector<int> const& y, int val) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int> x;
    std::vector<int> y;
    int val;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -10000, 10000);
    fillRand(ctx->y, -10000, 10000);
    ctx->val = rand() % 1000;

    BCAST(ctx->x, INT);
    BCAST(ctx->y, INT);
    BCAST_PTR(&ctx->val, 1, INT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->y.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    bool found = xorContains(ctx->x, ctx->y, ctx->val);
    (void)found;
}

void NO_OPTIMIZE best(Context *ctx) {
    bool found = correctXorContains(ctx->x, ctx->y, ctx->val);
    (void)found;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    int rank;
    GET_RANK(rank);

    const size_t numTries = 10;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        std::vector<int> x(TEST_SIZE);
        std::vector<int> y(TEST_SIZE);
        fillRand(x, -100, 100);
        fillRand(y, -100, 100);
        int val = rand() % 200 - 100;
        if (i == 1) {
            x[rand() % x.size()] = val;
            y[rand() % y.size()] = val;
        }
        BCAST(x, INT);
        BCAST(y, INT);
        BCAST_PTR(&val, 1, INT);

        // compute correct result
        bool correct = correctXorContains(x, y, val);

        // compute test result
        bool test = xorContains(x, y, val);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && test != correct) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
