// Driver for 19_graph_shortest_path for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Return the length of the shortest path from source to dest in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
// 	 input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]], source=0, dest=3
//    output: 2
// */
// int shortestPathLength(Kokkos::View<const int**> &A, size_t N, int source, int dest) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<int**> A;
    Kokkos::View<const int**> A_const;
    std::vector<int> A_host;
    size_t N;
    int source, dest;
};

void randomConnectedUndirectedGraph(std::vector<int> &A, size_t N) {
    std::vector<int> nodes(N);
    std::iota(nodes.begin(), nodes.end(), 0);
    std::random_shuffle(nodes.begin(), nodes.end());

    for (int i = 0; i < N-1; i += 1) {
        A[nodes[i] * N + nodes[i+1]] = 1;
        A[nodes[i+1] * N + nodes[i]] = 1;
    }

    for (int i = 0; i < N; i += 1) {
        int numEdges = rand() % (N - 1);
        for (int j = 0; j < numEdges; j += 1) {
            int other = rand() % N;
            if (other != i) {
                A[i * N + other] = 1;
                A[other * N + i] = 1;
            }
        }
    }
}

void reset(Context *ctx) {
    randomConnectedUndirectedGraph(ctx->A_host, ctx->N);
    ctx->source = rand() % ctx->N;
    
    do {
        ctx->dest = rand() % ctx->N;
    } while (ctx->dest == ctx->source);

    for (size_t i = 0; i < ctx->N; i += 1) {
        for (size_t j = 0; j < ctx->N; j += 1) {
            ctx->A(i, j) = ctx->A_host[i * ctx->N + j];
        }
    }
    ctx->A_const = ctx->A;
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->A_host.resize(ctx->N * ctx->N);
    ctx->A = Kokkos::View<int**>("A", ctx->N, ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    int sp = shortestPathLength(ctx->A_const, ctx->N, ctx->source, ctx->dest);
    (void)sp;
}

void NO_OPTIMIZE best(Context *ctx) {
    int sp = correctShortestPathLength(ctx->A_host, ctx->N, ctx->source, ctx->dest);
    (void)sp;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 512;

    Kokkos::View<int**> A("A", TEST_SIZE, TEST_SIZE);
    std::vector<int> A_host(TEST_SIZE * TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        randomConnectedUndirectedGraph(A_host, TEST_SIZE);
        int source = rand() % TEST_SIZE;
        int dest;
        do {
            dest = rand() % TEST_SIZE;
        } while (dest == source);

        for (size_t i = 0; i < TEST_SIZE; i += 1) {
            for (size_t j = 0; j < TEST_SIZE; j += 1) {
                A(i, j) = A_host[i * TEST_SIZE + j];
            }
        }
        Kokkos::View<const int**> A_const = A;

        // compute correct result
        int correct = correctShortestPathLength(A_host, TEST_SIZE, source, dest);

        // compute test result
        int test = shortestPathLength(A_const, TEST_SIZE, source, dest);

        // normalize "not-found" results
        if (correct == std::numeric_limits<int>::max() || correct < 0) {
            correct = -1;
        }
        if (test == std::numeric_limits<int>::max() || test < 0) {
            test = -1;
        }
        
        if (correct != test) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
