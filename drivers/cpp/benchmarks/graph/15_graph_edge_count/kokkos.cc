// Driver for 15_graph_edge_count for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int edgeCount(Kokkos::View<const int**> &A, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

void fillRandDirectedGraph(std::vector<int> &A, size_t N) {
    std::fill(A.begin(), A.end(), 0);
    for (int i = 0; i < N; i += 1) {
        for (int j = 0; j < N; j += 1) {
            if (rand() % 2 == 0) {
                A[i * N + j] = 1;
            }
        }
    }
}

struct Context {
    Kokkos::View<int**> A;
    Kokkos::View<const int**> A_const;
    std::vector<int> A_host;
    size_t N;
};

void reset(Context *ctx) {
    fillRandDirectedGraph(ctx->A_host, ctx->N);

    for (int i = 0; i < ctx->N; i += 1) {
        for (int j = 0; j < ctx->N; j += 1) {
            ctx->A(i, j) = ctx->A_host[i * ctx->N + j];
        }
    }
    ctx->A_const = ctx->A;
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->A_host.resize(ctx->N * ctx->N);
    ctx->A = Kokkos::View<int**>("A", ctx->N, ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    edgeCount(ctx->A_const, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctEdgeCount(ctx->A_host, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;

    Kokkos::View<int**> A("A", TEST_SIZE, TEST_SIZE);
    std::vector<int> A_host(TEST_SIZE * TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRandDirectedGraph(A_host, TEST_SIZE);

        for (int i = 0; i < TEST_SIZE; i += 1) {
            for (int j = 0; j < TEST_SIZE; j += 1) {
                A(i, j) = A_host[i * TEST_SIZE + j];
            }
        }
        Kokkos::View<const int**> A_const = A;

        // compute correct result
        int correct = correctEdgeCount(A_host, TEST_SIZE);

        // compute test result
        int test = edgeCount(A_const, TEST_SIZE);
        
        if (correct != test) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
