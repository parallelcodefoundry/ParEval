// Driver for 15_graph_edge_count for CUDA and HIP
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    Store the result in numEdges.
//    A is an NxN adjacency matrix stored in row-major.
//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// __global__ void edgeCount(const int *A, size_t N, int *numEdges) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    int *d_A;
    int *d_numEdges;
    std::vector<int> h_A;
    size_t N;
    dim3 blockSize, gridSize;
};

void fillRandDirectedGraph(std::vector<int> &A, size_t N) {
    std::fill(A.begin(), A.end(), 0);
    for (int i = 0; i < N; i += 1) {
        for (int j = 0; j < N; j += 1) {
            if (rand() % 2 == 0) {
                A[i * N + j] = 1;
            }
        }
    }
}

void reset(Context *ctx) {
    fillRandDirectedGraph(ctx->h_A, ctx->N);
    COPY_H2D(ctx->d_A, ctx->h_A.data(), ctx->N * ctx->N * sizeof(int));
    
    int tmpEdgeCount = 0;
    COPY_H2D(ctx->d_numEdges, &tmpEdgeCount, sizeof(int));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_A.resize(ctx->N * ctx->N);

    ALLOC(ctx->d_A, ctx->N * ctx->N * sizeof(int));
    ALLOC(ctx->d_numEdges, sizeof(int));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    edgeCount<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_A, ctx->N, ctx->d_numEdges);
}

void NO_OPTIMIZE best(Context *ctx) {
    int correct = correctEdgeCount(ctx->h_A, ctx->N);
    (void)correct;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<int> h_A(TEST_SIZE * TEST_SIZE);

    int *d_A, *d_numEdges;

    ALLOC(d_A, TEST_SIZE * TEST_SIZE * sizeof(int));
    ALLOC(d_numEdges, sizeof(int));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRandDirectedGraph(h_A, TEST_SIZE);
        COPY_H2D(d_A, h_A.data(), TEST_SIZE * TEST_SIZE * sizeof(int));

        int tmpEdgeCount = 0;
        COPY_H2D(d_numEdges, &tmpEdgeCount, sizeof(int));

        // compute correct result
        int correct = correctEdgeCount(h_A, TEST_SIZE);

        // compute test result
        edgeCount<<<gridSize, blockSize>>>(d_A, TEST_SIZE, d_numEdges);
        SYNC();

        // copy out
        int test = 0;
        COPY_D2H(&test, d_numEdges, sizeof(int));
        
        if (test != correct) {
            FREE(d_A);
            FREE(d_numEdges);
            return false;
        }
    }

    FREE(d_A);
    FREE(d_numEdges);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_A);
    FREE(ctx->d_numEdges);
    delete ctx;
}
