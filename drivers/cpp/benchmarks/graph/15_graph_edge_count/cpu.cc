// Driver for 15_graph_edge_count for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int edgeCount(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int> A;
    size_t N;
};

void fillRandDirectedGraph(std::vector<int> &A, size_t N) {
    std::fill(A.begin(), A.end(), 0);
    for (int i = 0; i < N; i += 1) {
        for (int j = 0; j < N; j += 1) {
            if (rand() % 2 == 0) {
                A[i * N + j] = 1;
            }
        }
    }
}

void reset(Context *ctx) {
    fillRandDirectedGraph(ctx->A, ctx->N);
    BCAST(ctx->A, INT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->A.resize(ctx->N * ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    int ec = edgeCount(ctx->A, ctx->N);
    (void)ec;
}

void NO_OPTIMIZE best(Context *ctx) {
    int ec = correctEdgeCount(ctx->A, ctx->N);
    (void)ec;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;

    std::vector<int> A(TEST_SIZE * TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRandDirectedGraph(A, TEST_SIZE);
        BCAST(A, INT);

        // compute correct result
        int correct = correctEdgeCount(A, TEST_SIZE);

        // compute test result
        int test = edgeCount(A, TEST_SIZE);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && correct != test) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
