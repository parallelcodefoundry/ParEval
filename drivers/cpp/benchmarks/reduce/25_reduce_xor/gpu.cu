// Driver for 25_reduce_xor for CUDA and HIP
// /* Compute the logical XOR reduction of the vector of bools x. Store the result in output.
//    Use CUDA to reduce in parallel. The kernel is launched with at least as many threads as values in x.
//    Example:
//
//    input: [false, false, false, true]
//    output: true
// */
// __global__ void reduceLogicalXOR(const bool *x, size_t N, double *output) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM


#if defined(USE_CUDA)
#include <thrust/device_vector.h>
#include <thrust/copy.h>
#include <thrust/sort.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/iterator/permutation_iterator.h>
#endif

struct Context {
    bool *d_x, *d_output;
    std::vector<bool> h_x;
    bool h_output;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, 0, 1);

    COPY_H2D(ctx->d_x, ctx->h_x.data(), ctx->N * sizeof(bool));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = 100000;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_x.resize(ctx->N);
    ALLOC(ctx->d_x, ctx->N * sizeof(bool));
    ALLOC(ctx->d_output, sizeof(bool));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    reduceLogicalXOR<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_x, ctx->N, ctx->d_output);
}

void best(Context *ctx) {
    ctx->h_output = correctReduceLogicalXOR(ctx->h_x);
    (void) ctx->h_output;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<bool> h_x(TEST_SIZE);
    bool correct, test;

    bool *d_x, *d_test;
    ALLOC(d_x, TEST_SIZE * sizeof(BOOL));
    ALLOC(d_test, sizeof(BOOL));

    const size_t numTries = 5;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_x, 0, 1);

        COPY_H2D(d_x, h_x.data(), TEST_SIZE * sizeof(bool));

        // compute correct result
        correct = correctReduceLogicalXOR(h_x);

        // compute test result
        reduceLogicalXOR<<<gridSize, blockSize>>>(d_x, TEST_SIZE, d_test);
        SYNC();

        // copy back
        COPY_D2H(&test, d_test, sizeof(bool));

        if (correct != test) {
            FREE(d_x);
            FREE(d_test);
            return false;
        }
    }

    FREE(d_x);
    FREE(d_test);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_x);
    FREE(ctx->d_output);
    delete ctx;
}
