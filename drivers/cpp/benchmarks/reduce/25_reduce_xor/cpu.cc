// Driver for 25_reduce_xor for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the logical XOR reduction of the vector of bools x.
//    Example:
//
//    input: [false, false, false, true]
//    output: true
// */
// bool reduceLogicalXOR(std::vector<bool> const& x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<bool> x;
    bool result;
};

void reset(Context *ctx) {
    fillRand(ctx->x, 0, 1);
    BCAST(ctx->x, BOOL);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(1 << 18);

    reset(ctx);
    return ctx;
}

void compute(Context *ctx) {
    reduceLogicalXOR(ctx->x);
}

void best(Context *ctx) {
    correctReduceLogicalXOR(ctx->x);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<bool> x;
    bool correct, test;

    int rank;
    GET_RANK(rank);

    const size_t numTries = 5;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, 0, 1);
        BCAST(x, BOOL);

        // compute correct result
        correct = correctReduceLogicalXOR(x);

        // compute test result
        test = reduceLogicalXOR(x);
        SYNC();

        if (IS_ROOT(rank) && correct != test) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
