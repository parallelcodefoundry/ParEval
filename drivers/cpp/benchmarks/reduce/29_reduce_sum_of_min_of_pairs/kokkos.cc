// Driver for 29_reduce_sum_of_min_of_pairs for Kokkos
// #include <Kokkos_Core.hpp>
//
// /* Return the sum of the minimum value at each index of vectors x and y for all indices.
//    i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...
//    Use Kokkos to sum in parallel. Assume Kokkos has already been initialized.
//    Example:
//
//    input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]
//    output: 10
// */
// double sumOfMinimumElements(Kokkos::View<const double*> const& x, Kokkos::View<const double*> const& y) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <Kokkos_Core.hpp>
#include <Kokkos_Sort.hpp>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<const int*> x, y;
    Kokkos::View<int*> xNonConst, yNonConst;

    std::vector<int> x_host, y_host;
    int val;
};

void reset(Context *ctx) {
    fillRand(ctx->x_host, 0.0, 100.0);
    fillRand(ctx->y_host, 0.0, 100.0);

    copyVectorToView(ctx->x_host, ctx->xNonConst);
    copyVectorToView(ctx->y_host, ctx->yNonConst);
    ctx->x = ctx->xNonConst;
    ctx->y = ctx->yNonConst;
}

Context *init() {
    Context *ctx = new Context();

    ctx->x_host.resize(1 << 18);
    ctx->y_host.resize(1 << 18);

    ctx->xNonConst = Kokkos::View<int*>("x", 1 << 18);
    ctx->yNonConst = Kokkos::View<int*>("y", 1 << 18);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    ctx->val = smallestOdd(ctx->x, ctx->y);
    (void) ctx->val;
}

void best(Context *ctx) {
    ctx->val = correctSmallestOdd(ctx->x_host, ctx->y_host);
    (void) ctx->val;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<int> x_host(TEST_SIZE), y_host(TEST_SIZE);
    int test, correct;

    Kokkos::View<int*> xNonConst("x", TEST_SIZE), xNonConst("y", TEST_SIZE);
    Kokkos::View<const int*> x, y;

    const size_t numTries = 5;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x_host, 0.0, 100.0);
        fillRand(y_host, 0.0, 100.0);

        copyVectorToView(x_host, xNonConst);
        copyVectorToView(y_host, yNonConst);
        x = xNonConst;
        y = yNonConst;

        // compute correct result
        correct = correctSmallestOdd(x_host, y_host);

        // compute test result
        test = smallestOdd(x, y);

        if (correct != test) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
