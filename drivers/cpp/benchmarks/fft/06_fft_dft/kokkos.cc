// Driver for 06_fft_dft for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Compute the discrete fourier transform of x. Store the result in output.
//    Use Kokkos to compute in parallel. Assume Kokkos is already initialized.
//    Example:
// 
//    input: [1, 4, 9, 16]
//    output: [30+0i, -8-12i, -10-0i, -8+12i]
// */
// void dft(Kokkos::View<const double*> &x, Kokkos::View<Kokkos::complex<double>*> &output) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<double*> x;
    Kokkos::View<const double*> xConst;
    Kokkos::View<Kokkos::complex<double>*> output;

    std::vector<double> x_host;
    std::vector<std::complex<double>> output_host;
};

void reset(Context *ctx) {
    fillRand(ctx->x_host, -1.0, 1.0);
    copyVectorToView(ctx->x_host, ctx->x);
    ctx->xConst = ctx->x;
}

Context *init() {
    Context *ctx = new Context();

    ctx->x_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->output_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->x = Kokkos::View<double*>("xNonConst", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    dft(ctx->xConst, ctx->output);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctDft(ctx->x_host, ctx->output_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> x_host(TEST_SIZE);
    std::vector<std::complex<double>> correct(TEST_SIZE);
    Kokkos::View<double*> x("x", TEST_SIZE);
    Kokkos::View<Kokkos::complex<double>*> test("test", TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(x_host, -1.0, 1.0);
        copyVectorToView(x_host, x);

        // compute correct result
        correctDft(x_host, correct);

        // compute test result
        Kokkos::View<const double*> xConst = x;
        dft(xConst, test);
        
        for (int j = 0; j < TEST_SIZE; j += 1) {
            if (std::abs(correct[j].real() - test(j).real()) > 1e-4 || std::abs(correct[j].imag() - test(j).imag()) > 1e-4) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
