// Driver for 05_fft_inverse_fft for CUDA and HIP
// /* Compute the inverse fourier transform of x in-place.
//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.
//    Example:
//    
//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]
//    output: [{0.5,0}, {0.125,0.301777}, {0,-0}, {0.125,0.0517767}, {0,-0}, {0.125,-0.0517767}, {0,-0}, {0.125,-0.301777}]
// */
// __global__ void ifft(cuDoubleComplex *x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <cuComplex.h>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    DOUBLE_COMPLEX_T *d_x;
    std::vector<DOUBLE_COMPLEX_T> tmp_x;
    std::vector<std::complex<double>> h_x;
    std::vector<double> real, imag;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->real, -1.0, 1.0);
    fillRand(ctx->imag, -1.0, 1.0);

    for (size_t i = 0; i < ctx->N; i += 1) {
        ctx->h_x[i] = std::complex<double>(ctx->real[i], ctx->imag[i]);
        ctx->tmp_x[i] = MAKE_DOUBLE_COMPLEX(ctx->real[i], ctx->imag[i]);
    }

    COPY_H2D(ctx->d_x, ctx->tmp_x.data(), ctx->N * sizeof(DOUBLE_COMPLEX_T));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_x.resize(ctx->N);
    ctx->real.resize(ctx->N);
    ctx->imag.resize(ctx->N);
    ctx->tmp_x.resize(ctx->N);
    ALLOC(ctx->d_x, ctx->N * sizeof(DOUBLE_COMPLEX_T));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    ifft<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctIfft(ctx->h_x);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        std::vector<double> real(TEST_SIZE), imag(TEST_SIZE);
        fillRand(real, -1.0, 1.0);
        fillRand(imag, -1.0, 1.0);

        std::vector<std::complex<double>> h_x(TEST_SIZE);
        std::vector<DOUBLE_COMPLEX_T> tmp_x(TEST_SIZE);
        for (size_t j = 0; j < TEST_SIZE; j += 1) {
            h_x[j] = std::complex<double>(real[j], imag[j]);
            tmp_x[j] = MAKE_DOUBLE_COMPLEX(real[j], imag[j]);
        }

        // set up device memory
        DOUBLE_COMPLEX_T *d_x;
        ALLOC(d_x, TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));
        COPY_H2D(d_x, tmp_x.data(), TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));

        // compute correct result
        correctIfft(h_x);

        // compute test result
        ifft<<<gridSize, blockSize>>>(d_x, TEST_SIZE);
        SYNC();

        // copy result back
        COPY_D2H(tmp_x.data(), d_x, TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));
        FREE(d_x);
        
        for (int j = 0; j < TEST_SIZE; j += 1) {
            auto correct = h_x[j];
            auto test = tmp_x[j];
            if (std::abs(correct.real() - test.x) > 1e-4 || std::abs(correct.imag() - test.y) > 1e-4) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_x);
    delete ctx;
}
