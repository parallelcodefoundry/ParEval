// Driver for 08_fft_split_fft for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Compute the fourier transform of x. Store real part of results in r and imaginary in i.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]
//    output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]
// */
// void fft(Kokkos::View<Kokkos::complex<double>*> const& x, Kokkos::View<double*> &r, Kokkos::View<double*> &i) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<Kokkos::complex<double>*> x;
    Kokkos::View<double*> r, i;
    std::vector<std::complex<double>> x_host;
    std::vector<double> r_host, i_host;
};

void reset(Context *ctx) {
    fillRand(ctx->r_host, -1.0, 1.0);
    fillRand(ctx->i_host, -1.0, 1.0);
    
    for (size_t i = 0; i < ctx->x_host.size(); i += 1) {
        ctx->x_host[i] = std::complex<double>(ctx->r_host[i], ctx->i_host[i]);
        ctx->x(i) = Kokkos::complex<double>(ctx->r_host[i], ctx->i_host[i]);
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->x_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->r_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->i_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->x = Kokkos::View<Kokkos::complex<double>*>("x", DRIVER_PROBLEM_SIZE);
    ctx->r = Kokkos::View<double*>("r", DRIVER_PROBLEM_SIZE);
    ctx->i = Kokkos::View<double*>("i", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    fft(ctx->x, ctx->r, ctx->i);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctFft(ctx->x_host, ctx->r_host, ctx->i_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> r_host(TEST_SIZE), i_host(TEST_SIZE);
    std::vector<std::complex<double>> x_host(TEST_SIZE);
    Kokkos::View<double*> r("r", TEST_SIZE);
    Kokkos::View<double*> i("i", TEST_SIZE);
    Kokkos::View<Kokkos::complex<double>*> x("x", TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int j = 0; j < numTries; j += 1) {
        // set up input
        fillRand(r_host, -1.0, 1.0);
        fillRand(i_host, -1.0, 1.0);

        for (size_t k = 0; k < x_host.size(); k += 1) {
            x_host[k] = std::complex<double>(r_host[k], i_host[k]);
            x(k) = Kokkos::complex<double>(r_host[k], i_host[k]);
        }

        // compute correct result
        correctFft(x_host, r_host, i_host);

        // compute test result
        fft(x, r, i);
        
        for (size_t k = 0; k < r_host.size(); k += 1) {
            if (std::abs(r_host[k] - r(k)) > 1e-4 || std::abs(i_host[k] - i(k)) > 1e-4) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
