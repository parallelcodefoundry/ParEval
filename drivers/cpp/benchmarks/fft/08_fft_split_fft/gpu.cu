// Driver for 08_fft_split_fft for CUDA and HIP
// /* Compute the fourier transform of x. Store real part of results in r and imaginary in i.
//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.
//    Example:
// 
//    input: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]
//    output: r: [4, 1, 0, 1, 0, 1, 0, 1] i: [0, -2.41421, 0, -0.414214, 0, 0.414214, 0, 2.41421]
// */
// __global__ void fft(const cuDoubleComplex *x, double *r, double *i, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <cuComplex.h>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM



struct Context {
    DOUBLE_COMPLEX_T *d_x;
    double *d_r, *d_i;
    std::vector<DOUBLE_COMPLEX_T> tmp_x;
    std::vector<std::complex<double>> h_x;
    std::vector<double> h_r, h_i;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_r, -1.0, 1.0);
    fillRand(ctx->h_i, -1.0, 1.0);

    for (size_t i = 0; i < ctx->N; i += 1) {
        ctx->h_x[i] = std::complex<double>(ctx->h_r[i], ctx->h_i[i]);
        ctx->tmp_x[i] = MAKE_DOUBLE_COMPLEX(ctx->h_r[i], ctx->h_i[i]);
    }

    COPY_H2D(ctx->d_x, ctx->tmp_x.data(), ctx->N * sizeof(DOUBLE_COMPLEX_T));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->tmp_x.resize(ctx->N);
    ctx->h_x.resize(ctx->N);
    ctx->h_r.resize(ctx->N);
    ctx->h_i.resize(ctx->N);

    ALLOC(ctx->d_x, ctx->N * sizeof(DOUBLE_COMPLEX_T));
    ALLOC(ctx->d_r, ctx->N * sizeof(double));
    ALLOC(ctx->d_i, ctx->N * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    fft<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_x, ctx->d_r, ctx->d_i, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctFft(ctx->h_x, ctx->h_r, ctx->h_i);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<double> h_r(TEST_SIZE), h_i(TEST_SIZE), test_r(TEST_SIZE), test_i(TEST_SIZE);
    std::vector<DOUBLE_COMPLEX_T> tmp_x(TEST_SIZE);
    std::vector<std::complex<double>> h_x(TEST_SIZE);
    DOUBLE_COMPLEX_T *d_x;
    double *d_r, *d_i;

    ALLOC(d_x, TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));
    ALLOC(d_r, TEST_SIZE * sizeof(double));
    ALLOC(d_i, TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(h_r, -1.0, 1.0);
        fillRand(h_i, -1.0, 1.0);

        for (size_t j = 0; j < TEST_SIZE; j += 1) {
            h_x[j] = std::complex<double>(h_r[j], h_i[j]);
            tmp_x[j] = MAKE_DOUBLE_COMPLEX(h_r[j], h_i[j]);
        }

        COPY_H2D(d_x, tmp_x.data(), TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));

        // compute correct result
        correctFft(h_x, h_r, h_i);

        // compute test result
        fft<<<gridSize, blockSize>>>(d_x, d_r, d_i, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test_r.data(), d_r, TEST_SIZE * sizeof(double));
        COPY_D2H(test_i.data(), d_i, TEST_SIZE * sizeof(double));
        
        if (!fequal(h_r, test_r) || !fequal(h_i, test_i)) {
            FREE(d_x);
            FREE(d_r);
            FREE(d_i);
            return false;
        }
    }

    FREE(d_x);
    FREE(d_r);
    FREE(d_i);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_x);
    FREE(ctx->d_r);
    FREE(ctx->d_i);
    delete ctx;
}
