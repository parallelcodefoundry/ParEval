// Driver for 22_histogram_count_quadrants for Kokkos
// #include <Kokkos_Core.hpp>
// 
// struct Point {
//    double x, y;
// };
// 
// /* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.
//    Store the counts in `bins`.
//    Use Kokkos to count in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]
//    output: [3, 1, 0, 2]
// */
// void countQuadrants(Kokkos::View<const Point*> const& points, Kokkos::View<size_t[4]> &bins) {
#include <array>
#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<const Point*> points;
    Kokkos::View<Point*> pointsNonConst;
    Kokkos::View<size_t[4]> bins;

    std::vector<Point> points_host;
    std::array<size_t, 4> bins_host;
};

void reset(Context *ctx) {
    for (int i = 0; i < ctx->points_host.size(); i += 1) {
        const double x = (rand() / (double) RAND_MAX) * 2.0 + 1.0;
        const double y = (rand() / (double) RAND_MAX) * 2.0 + 1.0;

        ctx->points_host[i].x = x;
        ctx->points_host[i].y = y;

        ctx->pointsNonConst(i).x = x;
        ctx->pointsNonConst(i).y = y;
    }
    ctx->points = ctx->pointsNonConst;

    ctx->bins_host.fill(0);
    Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), ctx->bins, 0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->points_host.resize(DRIVER_PROBLEM_SIZE);

    ctx->pointsNonConst = Kokkos::View<Point*>("points", DRIVER_PROBLEM_SIZE);
    ctx->bins = Kokkos::View<size_t[4]>("bins");

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    countQuadrants(ctx->points, ctx->bins);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctCountQuadrants(ctx->points_host, ctx->bins_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<Point> points_host(TEST_SIZE);
    std::array<size_t, 4> correct;

    Kokkos::View<Point*> pointsNonConst("points", TEST_SIZE);
    Kokkos::View<size_t[4]> test("bins");

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        for (int j = 0; j < points_host.size(); j += 1) {
            const double x = (rand() / (double) RAND_MAX) * 2.0 + 1.0;
            const double y = (rand() / (double) RAND_MAX) * 2.0 + 1.0;

            points_host[j].x = x;
            points_host[j].y = y;

            pointsNonConst(j).x = x;
            pointsNonConst(j).y = y;
        }
        Kokkos::View<const Point*> points = pointsNonConst;

        correct.fill(0);
        Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), test, 0);

        // compute correct result
        correctCountQuadrants(points_host, correct);

        // compute test result
        countQuadrants(points, test);
        
        for (int j = 0; j < 4; j += 1) {
            if (correct[j] != test(j)) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
