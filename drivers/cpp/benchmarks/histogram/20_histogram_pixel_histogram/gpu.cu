// Driver for 20_histogram_pixel_histogram for CUDA and HIP
// /* Count the number of pixels in image with each grayscale intensity.
//    The vector `image` is a grayscale image with values 0-255.
//    Store the results in `bins`.
//    Use CUDA to count in parallel. The kernel is launched with at least N threads.
//    Example:
//    
//    input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]
//    output: [0, 0, 2, 0, 1, ...]
// */
// __global__ void pixelCounts(const int *image, size_t N, size_t bins[256]) {

#include <array>
#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    int *d_image;
    size_t *d_bins;
    std::vector<int> h_image;
    std::array<size_t, 256> h_bins;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_image, 0, 255);
    ctx->h_bins.fill(0);

    COPY_H2D(ctx->d_image, ctx->h_image.data(), ctx->N * sizeof(int));
    COPY_H2D(ctx->d_bins, ctx->h_bins.data(), 256 * sizeof(size_t));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_image.resize(ctx->N);
    
    ALLOC(ctx->d_image, ctx->N * sizeof(int));
    ALLOC(ctx->d_bins, 256 * sizeof(size_t));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    pixelCounts<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_image, ctx->N, ctx->d_bins);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctPixelCounts(ctx->h_image, ctx->h_bins);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<int> h_image(TEST_SIZE);
    std::array<size_t, 256> correct, test;

    int *d_image;
    size_t *d_bins;
    ALLOC(d_image, TEST_SIZE * sizeof(int));
    ALLOC(d_bins, 256 * sizeof(size_t));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(h_image, 0, 255);
        correct.fill(0);

        COPY_H2D(d_image, h_image.data(), TEST_SIZE * sizeof(int));
        COPY_H2D(d_bins, correct.data(), 256 * sizeof(size_t));

        // compute correct result
        correctPixelCounts(h_image, correct);

        // compute test result
        pixelCounts<<<gridSize, blockSize>>>(d_image, TEST_SIZE, d_bins);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_bins, 256 * sizeof(size_t));
        
        if (!std::equal(correct.begin(), correct.end(), test.begin())) {
            FREE(d_image);
            FREE(d_bins);
            return false;
        }
    }

    FREE(d_image);
    FREE(d_bins);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_image);
    FREE(ctx->d_bins);
    delete ctx;
}
