// Driver for 20_histogram_pixel_histogram for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Count the number of pixels in image with each grayscale intensity.
//    The vector `image` is a grayscale image with values 0-255.
//    Store the results in `bins`.
//    Use Kokkos to count in parallel. Assume Kokkos has already been initialized.
//    Example:
//    
//    input: image=[2, 116, 201, 11, 92, 92, 201, 4, 2]
//    output: [0, 0, 2, 0, 1, ...]
// */
//  void pixelCounts(Kokkos::View<const int*> const& image, Kokkos::View<size_t[256]> &bins) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<const int*> image;
    Kokkos::View<int*> imageNonConst;
    Kokkos::View<size_t[256]> bins;

    std::vector<int> image_host;
    std::array<size_t, 256> bins_host;
};

void reset(Context *ctx) {
    fillRand(ctx->image_host, 0, 255);
    ctx->bins_host.fill(0);

    copyVectorToView(ctx->image_host, ctx->imageNonConst);
    ctx->image = ctx->imageNonConst;
    Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), ctx->bins, 0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->image_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->imageNonConst = Kokkos::View<int*>("imageNonConst", DRIVER_PROBLEM_SIZE);
    ctx->bins = Kokkos::View<size_t[256]>("bins");

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    pixelCounts(ctx->image, ctx->bins);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctPixelCounts(ctx->image_host, ctx->bins_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<int> image_host(TEST_SIZE);
    std::array<size_t, 256> correct;

    Kokkos::View<int*> imageNonConst("imageNonConst", TEST_SIZE);
    Kokkos::View<size_t[256]> test("bins");

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(image_host, 0, 255);
        correct.fill(0);

        copyVectorToView(image_host, imageNonConst);
        Kokkos::View<const int*> image = imageNonConst;
        Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), test, 0);

        // compute correct result
        correctPixelCounts(image_host, correct);

        // compute test result
        pixelCounts(image, test);
        
        for (int j = 0; j < 256; j += 1) {
            if (correct[j] != test(j)) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
