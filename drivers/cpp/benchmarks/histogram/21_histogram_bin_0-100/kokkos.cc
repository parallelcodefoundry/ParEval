// Driver for 21_histogram_bin_0-100 for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Vector x contains values between 0 and 100, inclusive. Count the number of
//    values in [0,10), [10, 20), [20, 30), ... and store the counts in `bins`.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: [7, 32, 95, 12, 39, 32, 11, 71, 70, 66]
//    output: [1, 2, 0, 3, 0, 0, 1, 2, 0, 1]
// */
// void binsBy10Count(Kokkos::View<const double*> const& x, Kokkos::View<size_t[10]> &bins) {

#include <array>
#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<const double*> x;
    Kokkos::View<double*> xNonConst;
    Kokkos::View<size_t[10]> bins;

    std::vector<double> x_host;
    std::array<size_t, 10> bins_host;
};

void reset(Context *ctx) {
    fillRand(ctx->x_host, 0.0, 100.0);
    ctx->bins_host.fill(0);

    copyVectorToView(ctx->x_host, ctx->xNonConst);
    ctx->x = ctx->xNonConst;
    Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), ctx->bins, 0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x_host.resize(DRIVER_PROBLEM_SIZE);

    ctx->xNonConst = Kokkos::View<double*>("x", DRIVER_PROBLEM_SIZE);
    ctx->bins = Kokkos::View<size_t[10]>("bins");

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    binsBy10Count(ctx->x, ctx->bins);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctBinsBy10Count(ctx->x_host, ctx->bins_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> x_host(TEST_SIZE);
    std::array<size_t, 10> correct;

    Kokkos::View<double*> xNonConst("x", TEST_SIZE);
    Kokkos::View<const double*> x;
    Kokkos::View<size_t[10]> test("test");

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(x_host, 0.0, 100.0);
        correct.fill(0);

        copyVectorToView(x_host, xNonConst);
        x = xNonConst;
        Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), test, 0);

        // compute correct result
        correctBinsBy10Count(x_host, correct);

        // compute test result
        binsBy10Count(x, test);
        
        for (int j = 0; j < 10; j += 1) {
            if (correct[j] != test[j]) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
