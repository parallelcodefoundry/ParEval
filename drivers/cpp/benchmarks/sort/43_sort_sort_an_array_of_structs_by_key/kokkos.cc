// Driver for 43_sort_sort_an_array_of_structs_by_key for Kokkos
// #include <Kokkos_Core.hpp>
// 
// struct Result {
//    int startTime, duration;
//    float value;
// };
// 
// /* Sort vector of Result structs by start time in ascending order.
//    Use Kokkos to sort in parallel. Assume Kokkos has already been initialized.
//    Example:
//    
//    input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]
//    output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]
// */
// void sortByStartTime(Kokkos::View<Result*> &results) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <Kokkos_Core.hpp>
#include <Kokkos_Sort.hpp>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {

};

void reset(Context *ctx) {

}

Context *init() {
    Context *ctx = new Context();



    reset(ctx);
    return ctx;
}

void compute(Context *ctx) {

}

void best(Context *ctx) {

}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    const size_t numTries = 5;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input

        // compute correct result

        // compute test result
        
        if () {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
