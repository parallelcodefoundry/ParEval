// Driver for 43_sort_sort_an_array_of_structs_by_key for Kokkos
// #include <Kokkos_Core.hpp>
// 
// struct Result {
//    int startTime, duration;
//    float value;
// };
// 
// /* Sort vector of Result structs by start time in ascending order.
//    Use Kokkos to sort in parallel. Assume Kokkos has already been initialized.
//    Example:
//    
//    input: [{startTime=8, duration=4, value=-1.22}, {startTime=2, duration=10, value=1.0}, {startTime=10, duration=3, value=0.0}]
//    output: [{startTime=2, duration=10, value=1.0}, {startTime=8, duration=4, value=-1.22}, {startTime=10, duration=3, value=0.0}]
// */
// void sortByStartTime(Kokkos::View<Result*> &results) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<Result*> results;
    std::vector<Result> results_host;
};

void reset(Context *ctx) {
    for (int i = 0; i < ctx->results_host.size(); i += 1) {
        ctx->results_host[i].startTime = rand() % 100;
        ctx->results_host[i].duration = rand() % 10 + 1;
        ctx->results_host[i].value = rand() / (float) RAND_MAX * 2.0 - 1.0;

        ctx->results(i).startTime = ctx->results_host[i].startTime;
        ctx->results(i).duration = ctx->results_host[i].duration;
        ctx->results(i).value = ctx->results_host[i].value;
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->results_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->results = Kokkos::View<Result*>("results", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    sortByStartTime(ctx->results);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSortByStartTime(ctx->results_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    Kokkos::View<Result*> results("results", TEST_SIZE);
    std::vector<Result> results_host(TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        for (int i = 0; i < results_host.size(); i += 1) {
            results_host[i].startTime = rand() % 100;
            results_host[i].duration = rand() % 10 + 1;
            results_host[i].value = rand() / (float) RAND_MAX * 2.0 - 1.0;

            results(i).startTime = results_host[i].startTime;
            results(i).duration = results_host[i].duration;
            results(i).value = results_host[i].value;
        }

        // compute correct result
        correctSortByStartTime(results_host);

        // compute test result
        sortByStartTime(results);
        
        for (int i = 0; i < results_host.size(); i += 1) {
            if (results_host[i].startTime != results(i).startTime ||
                results_host[i].duration != results(i).duration ||
                results_host[i].value != results(i).value) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
