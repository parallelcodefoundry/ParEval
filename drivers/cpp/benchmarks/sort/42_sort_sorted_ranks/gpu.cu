// Driver for 42_sort_sorted_ranks for CUDA and HIP
// /* For each value in the vector x compute its index in the sorted vector.
//    Store the results in `ranks`.
//    Use CUDA to compute in parallel. The kernel will be launched with at least as many threads as elements in x.
//    Examples:
// 
//    input: [3.1, 2.8, 9.1, 0.4, 3.14]
//    output: [2, 1, 4, 0, 3]
//  
//    input: [100, 7.6, 16.1, 18, 7.6]
//    output: [4, 0, 1, 2, 3]
// */
// __global__ void ranks(const float *x, size_t *ranks, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


#if defined(USE_CUDA)
#include <thrust/device_vector.h>
#include <thrust/copy.h>
#include <thrust/sort.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/iterator/permutation_iterator.h>
#endif

struct Context {
    float *d_x;
    size_t *d_ranks;
    std::vector<float> h_x;
    std::vector<size_t> h_ranks;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -100.0, 100.0);
    COPY_H2D(ctx->d_x, ctx->h_x.data(), ctx->N * sizeof(float));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_x.resize(ctx->N);
    ctx->h_ranks.resize(ctx->N);

    ALLOC(ctx->d_x, ctx->N * sizeof(float));
    ALLOC(ctx->d_ranks, ctx->N * sizeof(size_t));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    ranks<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_x, ctx->d_ranks, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctRanks(ctx->h_x, ctx->h_ranks);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<float> h_x(TEST_SIZE);
    std::vector<size_t> correct(TEST_SIZE), test(TEST_SIZE);
    float *d_x;
    size_t *h_ranks;

    ALLOC(d_x, TEST_SIZE * sizeof(float));
    ALLOC(h_ranks, TEST_SIZE * sizeof(size_t));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_x, -100.0, 100.0);
        COPY_H2D(d_x, h_x.data(), TEST_SIZE * sizeof(float));

        // compute correct result
        correctRanks(h_x, correct);

        // compute test result
        ranks<<<gridSize, blockSize>>>(d_x, h_ranks, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), h_ranks, TEST_SIZE * sizeof(size_t));
        
        if (!std::equal(correct.begin(), correct.end(), test.begin())) {
            FREE(d_x);
            FREE(h_ranks);
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_x);
    FREE(ctx->d_ranks);
    delete ctx;
}
