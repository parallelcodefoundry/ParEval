// Driver for 40_sort_sort_an_array_of_complex_numbers_by_magnitude for CUDA and HIP
// /* Sort the vector x of complex numbers by their magnitude in ascending order.
//    Use CUDA to sort in parallel. The kernel is launched with at least as many threads as elements in x.
//    Example:
//    
//    input: [3.0-1.0i, 4.5+2.1i, 0.0-1.0i, 1.0-0.0i, 0.5+0.5i]
//    output: [0.5+0.5i, 0.0-1.0i, 1.0-0.0i, 3.0-1.0i, 4.5+2.1i]
// */
// __global__ void sortComplexByMagnitude(cuDoubleComplex *x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <cuComplex.h>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    DOUBLE_COMPLEX_T *d_x;
    std::vector<DOUBLE_COMPLEX_T> tmp_x;
    std::vector<std::complex<double>> h_x;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    for (size_t i = 0; i < ctx->N; i += 1) {
        const double real = (rand() / (double) RAND_MAX) * 100.0;
        const double imag = (rand() / (double) RAND_MAX) * 100.0;
        ctx->h_x[i] = std::complex<double>(real, imag);
        ctx->tmp_x[i] = MAKE_DOUBLE_COMPLEX(real, imag);
    }

    COPY_H2D(ctx->d_x, ctx->tmp_x.data(), ctx->N * sizeof(DOUBLE_COMPLEX_T));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_x.resize(ctx->N);
    ctx->tmp_x.resize(ctx->N);

    ALLOC(ctx->d_x, ctx->N * sizeof(DOUBLE_COMPLEX_T));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    sortComplexByMagnitude<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSortComplexByMagnitude(ctx->h_x);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<std::complex<double>> h_x(TEST_SIZE);
    std::vector<DOUBLE_COMPLEX_T> tmp_x(TEST_SIZE);
    DOUBLE_COMPLEX_T *d_x;
    ALLOC(d_x, TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        for (size_t i = 0; i < TEST_SIZE; i += 1) {
            const double real = (rand() / (double) RAND_MAX) * 100.0;
            const double imag = (rand() / (double) RAND_MAX) * 100.0;
            h_x[i] = std::complex<double>(real, imag);
            tmp_x[i] = MAKE_DOUBLE_COMPLEX(real, imag);
        }
        COPY_H2D(d_x, tmp_x.data(), TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));

        // compute correct result
        correctSortComplexByMagnitude(h_x);

        // compute test result
        sortComplexByMagnitude<<<gridSize, blockSize>>>(d_x, TEST_SIZE);
        SYNC();

        // copy result back
        COPY_D2H(tmp_x.data(), d_x, TEST_SIZE * sizeof(DOUBLE_COMPLEX_T));
        
        for (size_t i = 0; i < TEST_SIZE; i += 1) {
            if (std::abs(h_x[i].real() - tmp_x[i].x) > 1e-4 || std::abs(h_x[i].imag() - tmp_x[i].y) > 1e-4) {
                FREE(d_x);
                return false;
            }
        }
    }
    FREE(d_x);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_x);
    delete ctx;
}
