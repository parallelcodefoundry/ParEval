// Driver for 0_sort_non-zero
// /* Sort the vector x in ascending order ignoring elements with value 0.
//    Leave zero valued elements in-place.
//    Example:
// 
// 	  input: [8, 4, 0, 9, 8, 0, 1, -1, 7]
//    output: [-1, 1, 0, 4, 7, 0, 8, 8, 9]
// */
// void sortIgnoreZero(int *x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    int *x;
    std::vector<int> cpuScratch;
    size_t N;
    dim3 blockSize, gridSize;
};

void fillRandWithZeroes(std::vector<int> &x) {
    // fill x with random values, but set some to zero
    for (int i = 0; i < x.size(); i += 1) {
        x[i] = rand();
        if (rand() % 5) {
            x[i] = 0;
        }
    }
}

void reset(Context *ctx) {
    fillRandWithZeroes(ctx->cpuScratch);
    COPY_H2D(ctx->x, ctx->cpuScratch.data(), ctx->N * sizeof(int));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ALLOC(ctx->x, ctx->N * sizeof(int));
    ctx->cpuScratch.resize(ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    sortIgnoreZero<<<ctx->gridSize,ctx->blockSize>>>(ctx->x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSortIgnoreZero(ctx->cpuScratch);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(TEST_SIZE);
        fillRandWithZeroes(input);

        // compute correct result
        std::vector<int> correctResult = input;
        correctSortIgnoreZero(correctResult);

        // compute test result
        int *testResultDevice;
        ALLOC(testResultDevice, TEST_SIZE * sizeof(int));
        COPY_H2D(testResultDevice, input.data(), TEST_SIZE * sizeof(int));
        sortIgnoreZero<<<gridSize,blockSize>>>(testResultDevice, TEST_SIZE);
        SYNC();

        std::vector<int> testResult(TEST_SIZE);
        COPY_D2H(testResult.data(), testResultDevice, TEST_SIZE * sizeof(int));
        FREE(testResultDevice);
        
        if (!std::equal(correctResult.begin(), correctResult.end(), testResult.begin())) {
            return false;
        }
        
    }

    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    delete ctx;
}


