// Driver for 34_scan_largest_contiguous_subarray_sum for Kokkos
// #include <Kokkos_Core.hpp>
//
// /* Return the largest sum of any contiguous subarray in the vector x.
//    i.e. if x=[−2, 1, −3, 4, −1, 2, 1, −5, 4] then [4, −1, 2, 1] is the contiguous
//    subarray with the largest sum of 6.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//
//    input: [−2, 1, −3, 4, −1, 2, 1, −5, 4]
//    output: 6
// */
// int maximumSubarray(Kokkos::View<int*> const& x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<int*> x;

    std::vector<int> x_host;
};

void reset(Context *ctx) {
    fillRand(ctx->x_host, -100, 100);

    copyVectorToView(ctx->x_host, ctx->x);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x_host.resize(DRIVER_PROBLEM_SIZE);

    ctx->x = Kokkos::View<int*>("x", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    int sum = maximumSubarray(ctx->x);
    (void) sum;
}

void NO_OPTIMIZE best(Context *ctx) {
    int sum = correctMaximumSubarray(ctx->x_host);
    (void) sum;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<int> x_host(TEST_SIZE);

    Kokkos::View<int*> x("x", TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x_host, -100, 100);

        copyVectorToView(x_host, x);

        // compute correct result
        int correct = correctMaximumSubarray(x_host);

        // compute test result
        int test = maximumSubarray(x);

        if (correct != test) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
