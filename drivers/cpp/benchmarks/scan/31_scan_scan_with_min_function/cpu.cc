// Driver for 31_scan_scan_with_min_function for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Replace the i-th element of the vector x with the minimum value from indices 0 through i.
//    Examples:
//
//    input: [8, 6, -1, 7, 3, 4, 4]
//    output: [8, 6, -1, -1, -1, -1, -1]
//
//    input: [5, 4, 6, 4, 3, 6, 1, 1]
//    output: [5, 4, 4, 4, 3, 3, 1, 1]
// */
// void partialMinimums(std::vector<float> &x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<float> x;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -100.0, 100.0);
    BCAST(ctx->x, FLOAT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(1 << 20);

    reset(ctx);
    return ctx;
}

void compute(Context *ctx) {
    partialMinimums(ctx->x);
}

void best(Context *ctx) {
    correctPartialMinimums(ctx->x);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 2048;

    std::vector<float> correct(2048);

    int rank;
    GET_RANK(rank);

    const size_t numTries = 5;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(correct, -100.0, 100.0);

        // compute correct result
        correctPartialMinimums(correct);

        // compute test result
        std::vector<float> test = correct;
        partialMinimums(test);
        SYNC();

        for (int i = 0; i < test.size(); i++) {
            if (std::fabs(correct[i] - test[i]) > 1e-5) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
