// Driver for 31_scan_scan_with_min_function for CUDA and HIP
// /* Replace the i-th element of the vector x with the minimum value from indices 0 through i.
//    Examples:
//
//    input: [8, 6, -1, 7, 3, 4, 4]
//    output: [8, 6, -1, -1, -1, -1, -1]
//
//    input: [5, 4, 6, 4, 3, 6, 1, 1]
//    output: [5, 4, 4, 4, 3, 3, 1, 1]
// */
// void partialMinimums(std::vector<float> &x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM

struct Context {
    float *x;
    std::vector<float> h_x;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -100.0, 100.0);
    COPY_H2D(ctx->x, ctx->h_x.data(), ctx->N * sizeof(float));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ALLOC(ctx->x, ctx->N * sizeof(float));

    ctx->h_x.resize(ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    partialMinimums<<<ctx->gridSize, ctx->blockSize>>>(ctx->x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctPartialMinimums(ctx->h_x);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x);

    std::vector<float> input(TEST_SIZE), correct(TEST_SIZE), test(TEST_SIZE);
    float *testDevice;
    ALLOC(testDevice, TEST_SIZE * sizeof(float));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(input, -100.0, 100.0);
        COPY_H2D(testDevice, input.data(), TEST_SIZE * sizeof(float));

        // compute correct result
        correct = input;
        correctPartialMinimums(correct);

        // compute test result
        partialMinimums<<<gridSize, blockSize>>>(testDevice, TEST_SIZE);
        SYNC();

        COPY_D2H(test.data(), testDevice, TEST_SIZE * sizeof(float));

        if (!fequal(correct, test, 1e-4)) {
            FREE(testDevice);
            return false;
        }

    }

    FREE(testDevice);

    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    delete ctx;
}
