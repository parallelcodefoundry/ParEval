// /* Replace the i-th element of the vector x with the minimum value from indices 0 through i.
//    Examples:
//
//    input: [8, 6, -1, 7, 3, 4, 4]
//    output: [8, 6, -1, -1, -1, -1, -1]
//
//    input: [5, 4, 6, 4, 3, 6, 1, 1]
//    output: [5, 4, 4, 4, 3, 3, 1, 1]
// */
// void partialMinimums(std::vector<float> &x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM


#if defined(USE_CUDA)
#include <thrust/device_vector.h>
#include <thrust/copy.h>
#include <thrust/sort.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/iterator/permutation_iterator.h>
#endif

struct Context {
    float *x;
    size_t N;
    std::vector<float> cpuScratch;
};

void reset(Context *ctx) {
    fillRand(ctx->cpuScratch, -100.0, 100.0);
    COPY_H2D(ctx->x, ctx->cpuScratch.data(), ctx->N * sizeof(float));
}

Context *init() {
    Context *ctx = new Context();
    ctx->N == 100000;
    ALLOC(ctx->x, ctx->N * sizeof(float));
    ctx->cpuScratch.resize(ctx->N);
    reset(ctx);
    return ctx;
}

void compute(Context *ctx) {
    partialMinimums<<<ctx->N,1,0>>>(ctx->x, ctx->N);
}

void best(Context *ctx) {
    correctPartialMinimums(ctx->cpuScratch);
}

bool validate(Context *ctx) {

    const size_t numTries = 5;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<float> correct(2048);
        fillRand(correct, -100.0, 100.0);

        // compute test result
        float *testDevice;
        float *test = malloc(correct.size() * sizeof(float));
        ALLOC(testDevice, correct.size() * sizeof(float));
        COPY_H2D(testDevice, correct.data(), correct.size() * sizeof(float));
        partialMinimums<<<correct.size(),1>>>(testDevice, correct.size());
        SYNC();

        COPY_D2H(test, testDevice, correct.size() * sizeof(float));

        // compute correct result
        correctPartialMinimums(correct);

        for (int i = 0; i < correct.size(); i++) {
            if (std::fabs(correct[i] - test[i]) > 1e-5) {
                free(test);
                FREE(testDevice);
                return false;
            }
        }
        free(test);
        FREE(testDevice);
    }

    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    delete ctx;
}
