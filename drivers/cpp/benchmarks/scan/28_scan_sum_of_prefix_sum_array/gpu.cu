// Driver for 1_scan_sum_of_prefix_sum
// /* Compute the prefix sum array of the vector x and return its sum.
//    Example:
//
//    input: [-7, 2, 1, 9, 4, 8]
//    output: 15
// */
// double sumOfPrefixSum(const double *x, size_t N, double *sum) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM


#if defined(USE_CUDA)
#include <thrust/device_vector.h>
#include <thrust/copy.h>
#include <thrust/sort.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/iterator/permutation_iterator.h>
#endif

struct Context {
                double *x;
                size_t N;
    std::vector<double> cpuScratch;
};

void reset(Context *ctx) {
    fillRand(ctx->cpuScratch, -100.0, 100.0);
                COPY_H2D(ctx->x, ctx->cpuScratch.data(), ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();
                ctx->N == 100000;
                ALLOC(ctx->x, ctx->N * sizeof(double));
    ctx->cpuScratch.resize(ctx->N);
    reset(ctx);
    return ctx;
}

void compute(Context *ctx) {
                __device__ double val;
                sumOfPrefixSum<<<ctx->N,1,0>>>(ctx->x, ctx->N, &val);
}

void best(Context *ctx) {
    double val = correctSumOfPrefixSum(ctx->cpuScratch);
    (void) val;
}

bool validate(Context *ctx) {

    const size_t numTries = 5;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<double> input(2048);
        fillRand(input, -100.0, 100.0);

        // compute correct result
        double correctResult = correctSumOfPrefixSum(input);

        // compute test result
        double *testInputDevice;
        __device__ double testResultDevice;
        double testResult;
        ALLOC(testInputDevice, input.size() * sizeof(double));
        COPY_H2D(testInputDevice, input.data(), input.size() * sizeof(double));
        sumOfPrefixSum<<<input.size(),1>>>(testInputDevice, input.size(), &testResultDevice);
        cudaMemcpyFromSymbol(&testResult, testResultDevice, sizeof(testResult), 0,
                             cudaMemcpyDeviceToHost);

        if (std::fabs(correctResult - testResult) > 1e-5) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
