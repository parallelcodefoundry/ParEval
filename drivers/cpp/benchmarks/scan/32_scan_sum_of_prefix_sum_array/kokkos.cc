// Driver for 32_scan_sum_of_prefix_sum for Kokkos
// /* Compute the prefix sum array of the vector x and return its sum.
//    Example:
//
//    input: [-7, 2, 1, 9, 4, 8]
//    output: 15
// */
// double sumOfPrefixSum(std::vector<double> const& x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    Kokkos::View<double*> x;
    std::vector<double> xVec;
};

void reset(Context *ctx) {
    fillRandKokkos(ctx->x, -100.0, 100.0);
    fillRand(ctx->xVec, -100.0, 100.0);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x = Kokkos::View<double*>("x", DRIVER_PROBLEM_SIZE);
    ctx->xVec.resize(DRIVER_PROBLEM_SIZE);
    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    double val = sumOfPrefixSum(ctx->x);
    (void) val;
}

void NO_OPTIMIZE best(Context *ctx) {
    double val = correctSumOfPrefixSum(ctx->xVec);
    (void) val;
}

bool validate(Context *ctx) {

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<double> input(2048);
        fillRand(input, -100.0, 100.0);

        Kokkos::View<double*> inputView("input", input.size());
        copyVectorToView(input, inputView);

        // compute correct result
        double correctResult = correctSumOfPrefixSum(input);

        // compute test result
        double testResult = sumOfPrefixSum(inputView);

        if (std::fabs(correctResult - testResult) > 1e-5) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
