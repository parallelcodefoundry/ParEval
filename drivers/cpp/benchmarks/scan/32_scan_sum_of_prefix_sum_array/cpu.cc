// Driver for 32_scan_sum_of_prefix_sum for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Compute the prefix sum array of the vector x and return its sum.
//    Example:
//
//    input: [-7, 2, 1, 9, 4, 8]
//    output: 15
// */
// double sumOfPrefixSum(std::vector<double> const& x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<double> x;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -100.0, 100.0);
    BCAST(ctx->x, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    double val = sumOfPrefixSum(ctx->x);
    (void) val;
}

void NO_OPTIMIZE best(Context *ctx) {
    double val = correctSumOfPrefixSum(ctx->x);
    (void) val;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> input(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(input, -100.0, 100.0);
        BCAST(input, DOUBLE);

        // compute correct result
        double correctResult = correctSumOfPrefixSum(input);

        // compute test result
        double testResult = sumOfPrefixSum(input);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank) && std::fabs(correctResult - testResult) > 1e-5) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
