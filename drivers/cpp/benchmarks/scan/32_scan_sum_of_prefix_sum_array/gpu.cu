// Driver for 32_scan_sum_of_prefix_sum for CUDA and HIP
// /* Compute the prefix sum array of the vector x and compute its sum. Store the result in sum.
//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.
//    Example:
//
//    input: [-7, 2, 1, 9, 4, 8]
//    output: 15
// */
// __global__ void sumOfPrefixSum(const double *x, size_t N, double *sum) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM

struct Context {
    double *x;
    double *val;
    std::vector<double> h_x;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -100.0, 100.0);
    COPY_H2D(ctx->x, ctx->h_x.data(), ctx->N * sizeof(double));

    double tmp = 0.0;
    COPY_H2D(ctx->val, &tmp, sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_x.resize(ctx->N);
    ALLOC(ctx->x, ctx->N * sizeof(double));
    ALLOC(ctx->val, sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    sumOfPrefixSum<<<ctx->gridSize, ctx->blockSize>>>(ctx->x, ctx->N, ctx->val);
}

void NO_OPTIMIZE best(Context *ctx) {
    double val = correctSumOfPrefixSum(ctx->h_x);
    (void) val;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(TEST_SIZE);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<double> input(TEST_SIZE);
    double *testInputDevice;
    double *testDevice;
    ALLOC(testInputDevice, TEST_SIZE * sizeof(double));
    ALLOC(testDevice, sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(input, -100.0, 100.0);
        COPY_H2D(testInputDevice, input.data(), TEST_SIZE * sizeof(double));

        double tmp = 0.0;
        COPY_H2D(testDevice, &tmp, sizeof(double));

        // compute correct result
        double correct = correctSumOfPrefixSum(input);

        // compute test result
        sumOfPrefixSum<<<TEST_SIZE,1>>>(testInputDevice, TEST_SIZE, testDevice);
        SYNC();

        // copy back
        double test = 0.0;
        COPY_D2H(&test, testDevice, sizeof(double));

        if (std::fabs(correct - test) > 1e-5) {
            FREE(testInputDevice);
            FREE(testDevice);
            return false;
        }
    }

    FREE(testInputDevice);
    FREE(testDevice);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    FREE(ctx->val);
    delete ctx;
}
