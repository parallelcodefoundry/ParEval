// Driver for 33_scan_reverse_prefix_sum for CUDA and HIP
// /* Compute the reverse prefix sum of the vector x into output.
//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as values in x.
//    Examples:
//
//    input: [1, 7, 4, 6, 6, 2]
//    output: [2, 8, 14, 18, 25, 26]
//
//    input: [3, 3, 7, 1, -2]
//    output: [-2, -1, 6, 9, 12]
// */
// __global__ void reversePrefixSum(const int *x, int *output, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    int *d_x, *d_output;
    std::vector<int> h_x, h_output;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -100, 100);

    COPY_H2D(ctx->d_x, ctx->h_x.data(), ctx->N * sizeof(int));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_x.resize(ctx->N);
    ctx->h_output.resize(ctx->N);
    ALLOC(ctx->d_x, ctx->N * sizeof(int));
    ALLOC(ctx->d_output, ctx->N * sizeof(int));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    reversePrefixSum<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_x, ctx->d_output, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctReversePrefixSum(ctx->h_x, ctx->h_output);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<int> h_x(TEST_SIZE), correct(TEST_SIZE), test(TEST_SIZE);

    int *d_x, *d_output;
    ALLOC(d_x, TEST_SIZE * sizeof(int));
    ALLOC(d_output, TEST_SIZE * sizeof(int));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_x, -100, 100);
	    std::fill(correct.begin(), correct.end(), 0);

        COPY_H2D(d_x, h_x.data(), TEST_SIZE * sizeof(int));
        COPY_H2D(d_output, correct.data(), TEST_SIZE * sizeof(int));

        // compute correct result
        correctReversePrefixSum(h_x, correct);

        // compute test result
        reversePrefixSum<<<gridSize, blockSize>>>(d_x, d_output, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_output, TEST_SIZE * sizeof(int));

        if (!std::equal(correct.begin(), correct.end(), test.begin())) {
            FREE(d_x);
            FREE(d_output);
            return false;
        }
    }

    FREE(d_x);
    FREE(d_output);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_x);
    FREE(ctx->d_output);
    delete ctx;
}
