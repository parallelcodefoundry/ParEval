// Driver for 56_transform_map_function
// __device__ bool isPowerOfTwo(int x) {
//     return (x > 0) && !(x & (x - 1));
// }
// 
// /* Apply the isPowerOfTwo function to every value in x and store the results in mask.
//    Example:
//    
//    input: [8, 0, 9, 7, 15, 64, 3]
//    output: [true, false, false, false, false, true, false]
// */
// __global__ void mapPowersOfTwo(const int *x, bool *mask, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>


#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    int *x;
    bool *mask;
    size_t N;
    std::vector<int> cpuX;
    std::vector<bool> cpuMask;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->cpuX, 1, 1025);
    COPY_H2D(ctx->x, ctx->cpuX.data(), ctx->N * sizeof(int));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ALLOC(ctx->x, ctx->N * sizeof(int));
    ALLOC(ctx->mask, ctx->N * sizeof(bool));

    ctx->cpuX.resize(ctx->N);
    ctx->cpuMask.resize(ctx->N);
    
    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    mapPowersOfTwo<<<ctx->gridSize,ctx->blockSize>>>(ctx->x, ctx->mask, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctMapPowersOfTwo(ctx->cpuX, ctx->cpuMask);
}

bool validate(Context *ctx) {
    const size_t N = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((N + blockSize.x - 1) / blockSize.x); // at least enough threads

    int *d_x;
    bool *d_mask;

    ALLOC(d_x, N * sizeof(int));
    ALLOC(d_mask, N * sizeof(bool));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(N);
        fillRand(input, 1, 1024);
        COPY_H2D(d_x, input.data(), N * sizeof(int));

        // compute correct result
        std::vector<bool> correctResult(N);
        correctMapPowersOfTwo(input, correctResult);

        // compute test result
        mapPowersOfTwo<<<gridSize,blockSize>>>(d_x, d_mask, N);
        SYNC();

        // copy test result back to host
        bool *testResult = new bool[N];
        COPY_D2H(testResult, d_mask, N * sizeof(bool));

        
        if (!std::equal(correctResult.begin(), correctResult.end(), std::next(testResult, 0))) {
            FREE(d_x);
            FREE(d_mask);
            delete[] testResult;
            return false;
        }
        delete[] testResult;
    }

    FREE(d_x);
    FREE(d_mask);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    FREE(ctx->mask);
    delete ctx;
}


