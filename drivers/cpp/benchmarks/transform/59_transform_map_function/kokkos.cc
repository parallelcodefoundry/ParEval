// Driver for 56_transform_map_function
// bool isPowerOfTwo(int x) {
// 	return (x > 0) && !(x & (x - 1));
// }
// 
// /* Apply the isPowerOfTwo function to every value in x and store the results in mask.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: [8, 0, 9, 7, 15, 64, 3]
//    output: [true, false, false, false, false, true, false]
// */
// void mapPowersOfTwo(Kokkos::View<const int*> const& x, Kokkos::View<bool*> &mask) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <Kokkos_Core.hpp>
#include <Kokkos_Sort.hpp>

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<int*> x;
    Kokkos::View<bool*> mask;

    std::vector<int> vecX;
    std::vector<bool> vecMask;
};

void reset(Context *ctx) {
    fillRandKokkos(ctx->x, 1, 1025);
    fillRand(ctx->vecX, 1, 1025);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x = Kokkos::View<int*>("x", DRIVER_PROBLEM_SIZE);
    ctx->mask = Kokkos::View<bool*>("mask", DRIVER_PROBLEM_SIZE);

    ctx->vecX.resize(DRIVER_PROBLEM_SIZE);
    ctx->vecMask.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    mapPowersOfTwo(ctx->x, ctx->mask);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctMapPowersOfTwo(ctx->vecX, ctx->vecMask);
}

bool validate(Context *ctx) {

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> x(1024);
        fillRand(x, 1, 1025);

        // compute correct result
        std::vector<bool> correctMask(x.size());
        correctMapPowersOfTwo(x, correctMask);

        // compute test result
        Kokkos::View<int*> xKokkos("xKokkos", x.size());
        Kokkos::View<bool*> testMaskKokkos("testMaskKokkos", x.size());
        copyVectorToView(x, xKokkos);

        mapPowersOfTwo(xKokkos, testMaskKokkos);

        std::vector<bool> testMaskVec(x.size());
        copyViewToVector(testMaskKokkos, testMaskVec);
        
        if (!std::equal(correctMask.begin(), correctMask.end(), testMaskVec.begin())) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}


