// Driver for 55_transform_squaring
// /* Replace every element of x with the square of its value.
//    Example:
// 
//    input: [5, 1, 2, -4, 8]
//    output: [25, 1, 4, 16, 64]
// */
// void squareEach(std::vector<int> &x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    std::vector<int> x;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -50, 50);
    BCAST(ctx->x, INT);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x.resize(100000);
    reset(ctx);
    return ctx;
}

void compute(Context *ctx) {
    squareEach(ctx->x);
}

void best(Context *ctx) {
    correctSquareEach(ctx->x);
}

bool validate(Context *ctx) {

    int rank;
    GET_RANK(rank);

    const size_t numTries = 5;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(1024);
        fillRand(input, -50, 50);
        BCAST(input, INT);

        // compute correct result
        std::vector<int> correctResult = input;
        correctSquareEach(correctResult);

        // compute test result
        std::vector<int> testResult = input;
        squareEach(testResult);
        SYNC();
        
        if (IS_ROOT(rank) && !std::equal(correctResult.begin(), correctResult.end(), testResult.begin())) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}


