// Driver for 56_transform_map_function
// __device__ bool isPowerOfTwo(int x) {
//     return (x > 0) && !(x & (x - 1));
// }
// 
// /* Apply the isPowerOfTwo function to every value in x and store the results in mask.
//    Example:
//    
//    input: [8, 0, 9, 7, 15, 64, 3]
//    output: [true, false, false, false, false, true, false]
// */
// __global__ void mapPowersOfTwo(const int *x, bool *mask, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "baseline.hpp"
#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM


#if defined(USE_CUDA)
#include <thrust/device_vector.h>
#include <thrust/copy.h>
#include <thrust/sort.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/iterator/permutation_iterator.h>
#endif


struct Context {
    int *x;
    bool *mask;
    size_t N;
    std::vector<int> cpuX;
    std::vector<bool> cpuMask;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->cpuX, 1, 1025);
    COPY_H2D(ctx->x, ctx->cpuX.data(), ctx->N * sizeof(int));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = 100000;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ALLOC(ctx->x, ctx->N * sizeof(int));
    ALLOC(ctx->mask, ctx->N * sizeof(bool));

    ctx->cpuX.resize(ctx->N);
    ctx->cpuMask.resize(ctx->N);
    
    reset(ctx);
    return ctx;
}

void compute(Context *ctx) {
    mapPowersOfTwo<<<ctx->blockSize,ctx->gridSize>>>(ctx->x, ctx->mask, ctx->N);
}

void best(Context *ctx) {
    correctMapPowersOfTwo(ctx->cpuX, ctx->cpuMask);
}

bool validate(Context *ctx) {

    const size_t numTries = 5;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(1024);
        fillRand(input, 1, 1025);

        // compute correct result
        std::vector<bool> correctResult(input.size());
        correctMapPowersOfTwo(input, correctResult);

        // compute test result
        int *inputDevice;
        bool *testResultDevice;
        ALLOC(inputDevice, input.size() * sizeof(int));
        ALLOC(testResultDevice, input.size() * sizeof(bool));
        COPY_H2D(inputDevice, input.data(), input.size() * sizeof(int));
        dim3 blockSize = dim3(1024);
        dim3 gridSize = dim3((input.size() + blockSize.x - 1) / blockSize.x); // at least enough threads
        mapPowersOfTwo<<<blockSize,gridSize>>>(testResultDevice, input.size());
        SYNC();

        std::vector<bool> testResult(input.size());
        COPY_D2H(testResult.data(), testResultDevice, testResult.size() * sizeof(bool));
        
        if (!std::equal(correctResult.begin(), correctResult.end(), testResult.begin())) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    FREE(ctx->mask);
    delete ctx;
}


