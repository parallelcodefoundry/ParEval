// Driver for 0_sort_non-zero
// #include <Kokkos_Core.hpp>
//
// /* In the vector x negate the odd values and divide the even values by 2.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//    
//    input: [16, 11, 12, 14, 1, 0, 5]
//    output: [8, -11, 6, 7, -1, 0, -5]
// */
// void negateOddsAndHalveEvens(Kokkos::View<int*> &x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    Kokkos::View<int*> x;
    std::vector<int> cpuX;
};

void reset(Context *ctx) {
    fillRand(ctx->x, 1, 100);
    fillRand(ctx->cpuX, 1, 100);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x = Kokkos::View<int*>("x", DRIVER_PROBLEM_SIZE);
    ctx->cpuX.resize(DRIVER_PROBLEM_SIZE);
    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    negateOddsAndHalveEvens(ctx->x);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctNegateOddsAndHalveEvens(ctx->cpuX);
}

bool validate(Context *ctx) {

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(1024);
        fillRand(input, 1, 100);

        // compute correct result
        std::vector<int> correctResult = input;
        correctNegateOddsAndHalveEvens(correctResult);

        // compute test result
        Kokkos::View<int*> testResult("testResult", input.size());
        copyVectorToView(input, testResult);
        negateOddsAndHalveEvens(testResult);

        std::vector<int> testResultCpu(input.size());
        copyViewToVector(testResult, testResultCpu);
        
        if (!std::equal(correctResult.begin(), correctResult.end(), testResultCpu.begin())) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}


