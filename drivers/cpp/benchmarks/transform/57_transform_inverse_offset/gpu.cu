// Driver for 54_transform_inverse_offset
// /* Replace every element of the vector x with 1-1/x.
//    Use CUDA to compute in parallel. The kernel is launched with at least as many threads as elements in x.
//    Example:
// 
//    input: [2, 4, 1, 12, -2]
//    output: [0.5, 0.75, 0, 0.91666666, 1.5]
// */
// __global__ void oneMinusInverse(double *x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


#if defined(USE_CUDA)
#include <thrust/device_vector.h>
#include <thrust/copy.h>
#include <thrust/sort.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/iterator/permutation_iterator.h>
#endif


struct Context {
    double *x;
    size_t N;
    std::vector<double> cpuX;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->cpuX, -50.0, 50.0);
    COPY_H2D(ctx->x, ctx->cpuX.data(), ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ALLOC(ctx->x, ctx->N * sizeof(double));
    ctx->cpuX.resize(ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    oneMinusInverse<<<ctx->gridSize,ctx->blockSize>>>(ctx->x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctOneMinusInverse(ctx->cpuX);
}

bool validate(Context *ctx) {

    const size_t TEST_SIZE = 1024;
    const size_t NUM_TRIES = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < NUM_TRIES; i += 1) {
        std::vector<double> input(TEST_SIZE);
        fillRand(input, -50.0, 50.0);

        // compute correct result
        std::vector<double> correctResult = input;
        correctOneMinusInverse(correctResult);

        // compute test result
        double *testResultDevice;
        ALLOC(testResultDevice, input.size() * sizeof(double));
        COPY_H2D(testResultDevice, input.data(), input.size() * sizeof(double));
        dim3 blockSize = dim3(1024);
        dim3 gridSize = dim3((input.size() + blockSize.x - 1) / blockSize.x); // at least enough threads
        oneMinusInverse<<<gridSize,blockSize>>>(testResultDevice, input.size());
        SYNC();

        std::vector<double> testResult(input.size());
        COPY_D2H(testResult.data(), testResultDevice, testResult.size() * sizeof(double));
        
        if (!fequal(correctResult, testResult, 1e-5)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->x);
    delete ctx;
}


