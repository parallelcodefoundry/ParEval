// Driver for 55_transform_relu
// /* Compute the ReLU function on every element of x. Elements less than zero become zero,
//    while elements greater than zero stay the same.
//    Example:
// 
//    input: [-1.8, 24.0, 1.2, 0.0, -5.1, -0.2, 4.5]
//    output: [0, 24.0, 1.2, 0, 0, 0, 4.5]
// */
// void relu(std::vector<double> &x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    std::vector<double> x;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -50.0, 50.0);
    BCAST(ctx->x, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    relu(ctx->x);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctRelu(ctx->x);
}

bool validate(Context *ctx) {

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<double> input(1024);
        fillRand(input, -50.0, 50.0);
        BCAST(input, DOUBLE);

        // compute correct result
        std::vector<double> correctResult = input;
        correctRelu(correctResult);

        // compute test result
        std::vector<double> testResult = input;
        relu(testResult);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && !fequal(correctResult, testResult, 1e-6)) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}


