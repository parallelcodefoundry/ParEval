// Driver for 55_transform_squaring
// /* Replace every element of x with the square of its value.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: [5, 1, 2, -4, 8]
//    output: [25, 1, 4, 16, 64]
// */
// void squareEach(Kokkos::View<int*> &x) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <Kokkos_Core.hpp>
#include <Kokkos_Sort.hpp>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    Kokkos::View<int*> x;
    std::vector<int> vecX;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -50, 50);
    fillRand(ctx->vecX, -50, 50);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x = Kokkos::View<int*>("x", DRIVER_PROBLEM_SIZE);
    ctx->vecX.resize(DRIVER_PROBLEM_SIZE);
    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    squareEach(ctx->x);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSquareEach(ctx->vecX);
}

bool validate(Context *ctx) {

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(1024);
        fillRand(input, -50, 50);

        // compute correct result
        std::vector<int> correctResult = input;
        correctSquareEach(correctResult);

        // compute test result
        Kokkos::View<int*> testResult("testResult", input.size());
        copyVectorToView(input, testResult);
        squareEach(testResult);

        std::vector<int> testResultCpu(input.size());
        copyViewToVector(testResult, testResultCpu);
        
        if (!std::equal(correctResult.begin(), correctResult.end(), testResultCpu.begin())) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}


