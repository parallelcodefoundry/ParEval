// Driver for 49_sparse_la_sparse_lu_decomp for Kokkos
// #include <Kokkos_Core.hpp>
// 
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.
//    A is a sparse NxN matrix stored in COO format.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]
//    output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]
// */
// void luFactorize(Kokkos::View<const COOElement*> &A, Kokkos::View<double**> &L, Kokkos::View<double**> &U, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<COOElement*> A;
    Kokkos::View<double**> L, U;
    Kokkos::View<const COOElement*> A_const;
    std::vector<COOElement> A_host;
    std::vector<double> L_host, U_host;
    size_t N;
};

void sortCOO(std::vector<COOElement> &A) {
    std::sort(A.begin(), A.end(), [](COOElement const& a, COOElement const& b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

bool isCOOEqual(std::vector<COOElement> &a, std::vector<COOElement> &b, double epsilon = 1e-6) {
    if (a.size() != b.size()) {
        return false;
    }
    sortCOO(a);
    sortCOO(b);
    for (int i = 0; i < a.size(); i += 1) {
        if (a[i].row != b[i].row || a[i].column != b[i].column || std::abs(a[i].value - b[i].value) > epsilon) {
            return false;
        }
    }
    return true;
}

void reset(Context *ctx) {
    for (int i = 0; i < ctx->A_host.size(); i += 1) {
        ctx->A_host[i] = {rand() % ctx->N, rand() % ctx->N, (rand() / (double) RAND_MAX) * 20.0 - 10.0};
    }
    sortCOO(ctx->A_host);
    for (int i = 0; i < ctx->A_host.size(); i += 1) {
        ctx->A(i) = ctx->A_host[i];
    }
    ctx->A_const = ctx->A;

    std::fill(ctx->L_host.begin(), ctx->L_host.end(), 0.0);
    std::fill(ctx->U_host.begin(), ctx->U_host.end(), 0.0);

    for (int i = 0; i < ctx->N; i += 1) {
        for (int j = 0; j < ctx->N; j += 1) {
            ctx->L(i, j) = 0.0;
            ctx->U(i, j) = 0.0;
        }
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    const size_t nVal = ctx->N * ctx->N * SPARSE_LA_SPARSITY;
    ctx->A_host.resize(nVal);
    ctx->L_host.resize(ctx->N * ctx->N);
    ctx->U_host.resize(ctx->N * ctx->N);

    ctx->A = Kokkos::View<COOElement*>("A", nVal);
    ctx->L = Kokkos::View<double**>("L", ctx->N, ctx->N);
    ctx->U = Kokkos::View<double**>("U", ctx->N, ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    luFactorize(ctx->A_const, ctx->L, ctx->U, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctLuFactorize(ctx->A_host, ctx->L_host, ctx->U_host, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 64;
    const size_t nVals = SPARSE_LA_SPARSITY * TEST_SIZE * TEST_SIZE;

    Kokkos::View<COOElement*> A("A_test", nVals);
    Kokkos::View<double**> L("L_test", TEST_SIZE, TEST_SIZE);
    Kokkos::View<double**> U("U_test", TEST_SIZE, TEST_SIZE);

    std::vector<COOElement> A_host(nVals);
    std::vector<double> L_host(TEST_SIZE*TEST_SIZE), U_host(TEST_SIZE*TEST_SIZE);
    std::vector<double> L_test(TEST_SIZE*TEST_SIZE), U_test(TEST_SIZE*TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        for (int i = 0; i < nVals; i += 1) {
            A_host[i] = {rand() % TEST_SIZE, rand() % TEST_SIZE, (rand() / (double) RAND_MAX) * 20.0 - 10.0};
        }
        sortCOO(A_host);
        for (int i = 0; i < nVals; i += 1) {
            A(i) = A_host[i];
        }
        Kokkos::View<const COOElement*> A_const = A;

        std::fill(L_host.begin(), L_host.end(), 0.0);
        std::fill(U_host.begin(), U_host.end(), 0.0);

        for (int i = 0; i < TEST_SIZE; i += 1) {
            for (int j = 0; j < TEST_SIZE; j += 1) {
                L(i, j) = 0.0;
                U(i, j) = 0.0;
            }
        }

        // compute correct result
        correctLuFactorize(A_host, L_host, U_host, TEST_SIZE);

        // compute test result
        luFactorize(A_const, L, U, TEST_SIZE);
        
        for (int i = 0; i < TEST_SIZE; i += 1) {
            for (int j = 0; j < TEST_SIZE; j += 1) {
                L_test[i*TEST_SIZE + j] = L(i, j);
                U_test[i*TEST_SIZE + j] = U(i, j);
            }
        }

        if (!fequal(L_host, L_test, 1e-3) || !fequal(U_host, U_test, 1e-3)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
