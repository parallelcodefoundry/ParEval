// Driver for 49_sparse_la_sparse_lu_decomp for CUDA and HIP
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.
//    A is a sparse NxN matrix stored in COO format with sizeA elements.
//    Use CUDA to compute in parallel. The kernel is launched with at least sizeA threads.
//    Example:
// 
//    input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]
//    output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]
// */
// __global__ void luFactorize(const COOElement *A, size_t sizeA, double *L, double *U, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    COOElement *d_A;
    double *d_L, *d_U;
    std::vector<COOElement> h_A;
    std::vector<double> h_L, h_U;
    
    size_t N, sizeA;
    dim3 blockSize, gridSize;
};

void sortCOO(std::vector<COOElement> &A) {
    std::sort(A.begin(), A.end(), [](COOElement const& a, COOElement const& b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

void reset(Context *ctx) {
    for (size_t i = 0; i < ctx->sizeA; i += 1) {
        ctx->h_A[i] = {rand() % ctx->N, rand() % ctx->N, (rand() / (double)RAND_MAX) * 20.0 - 10.0};
    }
    sortCOO(ctx->h_A);

    std::fill(ctx->h_L.begin(), ctx->h_L.end(), 0.0);
    std::fill(ctx->h_U.begin(), ctx->h_U.end(), 0.0);

    COPY_H2D(ctx->d_A, ctx->h_A.data(), ctx->sizeA * sizeof(COOElement));
    COPY_H2D(ctx->d_L, ctx->h_L.data(), ctx->N * ctx->N * sizeof(double));
    COPY_H2D(ctx->d_U, ctx->h_U.data(), ctx->N * ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->sizeA = ctx->N * ctx->N * SPARSE_LA_SPARSITY;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->sizeA + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_A.resize(ctx->sizeA);
    ctx->h_L.resize(ctx->N * ctx->N);
    ctx->h_U.resize(ctx->N * ctx->N);

    ALLOC(ctx->d_A, ctx->sizeA * sizeof(COOElement));
    ALLOC(ctx->d_L, ctx->N * ctx->N * sizeof(double));
    ALLOC(ctx->d_U, ctx->N * ctx->N * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    luFactorize<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_A, ctx->sizeA, ctx->d_L, ctx->d_U, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctLuFactorize(ctx->h_A, ctx->h_L, ctx->h_U, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 64;
    const size_t nVals = TEST_SIZE * TEST_SIZE * SPARSE_LA_SPARSITY;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((nVals + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<COOElement> h_A(nVals);
    std::vector<double> L_correct(TEST_SIZE * TEST_SIZE), U_correct(TEST_SIZE * TEST_SIZE);
    std::vector<double> L_test(TEST_SIZE * TEST_SIZE), U_test(TEST_SIZE * TEST_SIZE);

    COOElement *d_A;
    double *d_L, *d_U;

    ALLOC(d_A, nVals * sizeof(COOElement));
    ALLOC(d_L, TEST_SIZE * TEST_SIZE * sizeof(double));
    ALLOC(d_U, TEST_SIZE * TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        for (size_t i = 0; i < nVals; i += 1) {
            h_A[i] = {rand() % TEST_SIZE, rand() % TEST_SIZE, (rand() / (double)RAND_MAX) * 20.0 - 10.0};
        }
        sortCOO(h_A);

        std::fill(L_correct.begin(), L_correct.end(), 0.0);
        std::fill(U_correct.begin(), U_correct.end(), 0.0);

        COPY_H2D(d_A, h_A.data(), nVals * sizeof(COOElement));
        COPY_H2D(d_L, L_correct.data(), TEST_SIZE * TEST_SIZE * sizeof(double));
        COPY_H2D(d_U, U_correct.data(), TEST_SIZE * TEST_SIZE * sizeof(double));

        // compute correct result
        correctLuFactorize(h_A, L_correct, U_correct, TEST_SIZE);

        // compute test result
        luFactorize<<<gridSize, blockSize>>>(d_A, nVals, d_L, d_U, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(L_test.data(), d_L, TEST_SIZE * TEST_SIZE * sizeof(double));
        COPY_D2H(U_test.data(), d_U, TEST_SIZE * TEST_SIZE * sizeof(double));
        
        if (!fequal(L_correct, L_test, 1e-3) || !fequal(U_correct, U_test, 1e-3)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
