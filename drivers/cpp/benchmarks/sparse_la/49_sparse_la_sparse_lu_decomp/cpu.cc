// Driver for 49_sparse_la_sparse_lu_decomp for Serial, OpenMP, MPI, and MPI+OpenMP
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Factorize the sparse matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.
//    A is a sparse NxN matrix stored in COO format.
//    Example:
// 
//    input: A=[{0,0,4}, {0,1,3}, {1,0,6}, {1,1,3}]
//    output: L=[{0,0,1},{1,0,1.5}, {1,1,1}] U=[{0,0,4}, {0,1,3}, {1,1,-1.5}]
// */
// void luFactorize(std::vector<COOElement> const& A, std::vector<double> &L, std::vector<double> &U, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>
#include <map>
#include <unordered_map>

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    std::vector<COOElement> A;
    std::vector<size_t> rows, columns;
    std::vector<double> values, L, U;
    size_t N;
};

void sortCOO(std::vector<COOElement> &A) {
    std::sort(A.begin(), A.end(), [](COOElement const& a, COOElement const& b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

bool isCOOEqual(std::vector<COOElement> &a, std::vector<COOElement> &b, double epsilon = 1e-6) {
    if (a.size() != b.size()) {
        return false;
    }
    sortCOO(a);
    sortCOO(b);
    for (int i = 0; i < a.size(); i += 1) {
        if (a[i].row != b[i].row || a[i].column != b[i].column || std::abs(a[i].value - b[i].value) > epsilon) {
            return false;
        }
    }
    return true;
}

void reset(Context *ctx) {
    fillRand(ctx->rows, 0UL, ctx->N);
    fillRand(ctx->columns, 0UL, ctx->N);
    fillRand(ctx->values, -10.0, 10.0);
    BCAST(ctx->rows, UNSIGNED_LONG);
    BCAST(ctx->columns, UNSIGNED_LONG);
    BCAST(ctx->values, DOUBLE);

    ctx->A.reserve(ctx->rows.size());
    ctx->A.clear();
    for (int i = 0; i < ctx->rows.size(); i += 1) {
        ctx->A.push_back({ctx->rows[i], ctx->columns[i], ctx->values[i]});
    }
    sortCOO(ctx->A);
    
    std::fill(ctx->L.begin(), ctx->L.end(), 0.0);
    std::fill(ctx->U.begin(), ctx->U.end(), 0.0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    size_t nVals = SPARSE_LA_SPARSITY * ctx->N * ctx->N;
    ctx->rows.resize(nVals);
    ctx->columns.resize(nVals);
    ctx->values.resize(nVals);

    ctx->L.resize(ctx->N * ctx->N);
    ctx->U.resize(ctx->N * ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    luFactorize(ctx->A, ctx->L, ctx->U, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctLuFactorize(ctx->A, ctx->L, ctx->U, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 64;
    const size_t nVals = SPARSE_LA_SPARSITY * TEST_SIZE * TEST_SIZE;

    std::vector<size_t> rows(nVals), columns(nVals);
    std::vector<double> values(nVals);
    std::vector<COOElement> A;
    std::vector<double> L_correct(TEST_SIZE * TEST_SIZE), U_correct(TEST_SIZE * TEST_SIZE);
    std::vector<double> L_test(TEST_SIZE * TEST_SIZE), U_test(TEST_SIZE * TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(rows, 0UL, TEST_SIZE-1);
        fillRand(columns, 0UL, TEST_SIZE-1);
        fillRand(values, -10.0, 10.0);
        BCAST(rows, UNSIGNED_LONG);
        BCAST(columns, UNSIGNED_LONG);
        BCAST(values, DOUBLE);

        A.reserve(rows.size());
        A.clear();
        for (int i = 0; i < rows.size(); i += 1) {
            A.push_back({rows[i], columns[i], values[i]});
        }
        sortCOO(A);

        // compute correct result
        std::fill(L_correct.begin(), L_correct.end(), 0.0);
        std::fill(U_correct.begin(), U_correct.end(), 0.0);
        correctLuFactorize(A, L_correct, U_correct, TEST_SIZE);

        // compute test result
        std::fill(L_test.begin(), L_test.end(), 0.0);
        std::fill(U_test.begin(), U_test.end(), 0.0);
        luFactorize(A, L_test, U_test, TEST_SIZE);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && (!fequal(L_correct, L_test, 1e-3) || !fequal(U_correct, U_test, 1e-3))) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
