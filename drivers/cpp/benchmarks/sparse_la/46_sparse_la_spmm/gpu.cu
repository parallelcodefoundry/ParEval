// Driver for 46_sparse_la_spmm for CUDA and HIP
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format with sizeA elements.
//    X is a sparse KxN matrix in COO format with sizeX elements. Y is a dense MxN matrix in row-major.
//    Use CUDA to compute in parallel. The kernel is launched with at least sizeA threads.
//    Example:
// 
//    input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]
//    output: Y=[{-1,-4}, {1,0}]
// */
// __global__ void spmm(const COOElement *A, size_t sizeA, const COOElement *X, size_t sizeX, double *Y, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    COOElement *d_A, *d_X;
    double *d_Y;
    std::vector<COOElement> h_A, h_X;
    std::vector<double> h_Y;
    size_t M, N, K, sizeA, sizeX;
    dim3 blockSize, gridSize;
};

void sortCOOElements(std::vector<COOElement> &vec) {
    std::sort(vec.begin(), vec.end(), [](const COOElement &a, const COOElement &b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

void reset(Context *ctx) {
    for (size_t i = 0; i < ctx->sizeA; i += 1) {
        ctx->h_A[i] = {rand() % ctx->M, rand() % ctx->K, (rand() / (double)RAND_MAX) * 2.0 - 1.0};
    }
    sortCOOElements(ctx->h_A);

    for (size_t i = 0; i < ctx->sizeX; i += 1) {
        ctx->h_X[i] = {rand() % ctx->K, rand() % ctx->N, (rand() / (double)RAND_MAX) * 2.0 - 1.0};
    }
    sortCOOElements(ctx->h_X);

    std::fill(ctx->h_Y.begin(), ctx->h_Y.end(), 0.0);

    COPY_H2D(ctx->d_A, ctx->h_A.data(), ctx->sizeA * sizeof(COOElement));
    COPY_H2D(ctx->d_X, ctx->h_X.data(), ctx->sizeX * sizeof(COOElement));
    COPY_H2D(ctx->d_Y, ctx->h_Y.data(), ctx->M * ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->M = DRIVER_PROBLEM_SIZE;
    ctx->K = DRIVER_PROBLEM_SIZE / 4;
    ctx->N = DRIVER_PROBLEM_SIZE / 2;
    ctx->sizeA = ctx->M * ctx->K * SPARSE_LA_SPARSITY;
    ctx->sizeX = ctx->K * ctx->N * SPARSE_LA_SPARSITY;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->sizeA + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_A.resize(ctx->sizeA);
    ctx->h_X.resize(ctx->sizeX);
    ctx->h_Y.resize(ctx->M * ctx->N);

    ALLOC(ctx->d_A, ctx->sizeA * sizeof(COOElement));
    ALLOC(ctx->d_X, ctx->sizeX * sizeof(COOElement));
    ALLOC(ctx->d_Y, ctx->M * ctx->N * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    spmm<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_A, ctx->sizeA, ctx->d_X, ctx->sizeX, ctx->d_Y, ctx->M, ctx->K, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSpmm(ctx->h_A, ctx->h_X, ctx->h_Y, ctx->M, ctx->K, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;
    const size_t nVals = TEST_SIZE * TEST_SIZE * SPARSE_LA_SPARSITY;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<COOElement> h_A(nVals), h_X(nVals);
    std::vector<double> h_Y_test(TEST_SIZE * TEST_SIZE), h_Y_correct(TEST_SIZE * TEST_SIZE);

    COOElement *d_A, *d_X;
    double *d_Y;

    ALLOC(d_A, nVals * sizeof(COOElement));
    ALLOC(d_X, nVals * sizeof(COOElement));
    ALLOC(d_Y, TEST_SIZE * TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        for (size_t i = 0; i < nVals; i += 1) {
            h_A[i] = {rand() % TEST_SIZE, rand() % TEST_SIZE, (rand() / (double)RAND_MAX) * 2.0 - 1.0};
        }
        sortCOOElements(h_A);

        for (size_t i = 0; i < nVals; i += 1) {
            h_X[i] = {rand() % TEST_SIZE, rand() % TEST_SIZE, (rand() / (double)RAND_MAX) * 2.0 - 1.0};
        }
        sortCOOElements(h_X);

        std::fill(h_Y_correct.begin(), h_Y_correct.end(), 0.0);

        COPY_H2D(d_A, h_A.data(), nVals * sizeof(COOElement));
        COPY_H2D(d_X, h_X.data(), nVals * sizeof(COOElement));
        COPY_H2D(d_Y, h_Y_correct.data(), TEST_SIZE * TEST_SIZE * sizeof(double));

        // compute correct result
        correctSpmm(h_A, h_X, h_Y_correct, TEST_SIZE, TEST_SIZE, TEST_SIZE);

        // compute test result
        spmm<<<gridSize, blockSize>>>(d_A, nVals, d_X, nVals, d_Y, TEST_SIZE, TEST_SIZE, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(h_Y_test.data(), d_Y, TEST_SIZE * TEST_SIZE * sizeof(double));
        
        if (!fequal(h_Y_test, h_Y_correct, 1e-4)) {
            FREE(d_A);
            FREE(d_X);
            FREE(d_Y);
            return false;
        }
    }
    FREE(d_A);
    FREE(d_X);
    FREE(d_Y);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_A);
    FREE(ctx->d_X);
    FREE(ctx->d_Y);
    delete ctx;
}
