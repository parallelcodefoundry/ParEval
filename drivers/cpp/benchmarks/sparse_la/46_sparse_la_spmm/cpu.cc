// Driver for 46_sparse_la_spmm for Serial, OpenMP, MPI, and MPI+OpenMP
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.
//    X is a sparse KxN matrix in COO format. Y is a dense MxN matrix in row-major.
//    Example:
// 
//    input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]
//    output: Y=[{-1,-4}, {1,0}]
// */
// void spmm(std::vector<COOElement> const& A, std::vector<COOElement> const& X, std::vector<double> &Y, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>
#include <map>
#include <unordered_map>

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    std::vector<size_t> X_rows, X_columns, A_rows, A_columns;
    std::vector<double> X_values, A_values;
    std::vector<double> Y;
    std::vector<COOElement> X, A;
    size_t M, K, N;
};

void sortCOOElements(std::vector<COOElement> &vec) {
    std::sort(vec.begin(), vec.end(), [](const COOElement &a, const COOElement &b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

void reset(Context *ctx) {
    fillRand(ctx->X_rows, 0UL, ctx->K);
    fillRand(ctx->X_columns, 0UL, ctx->N);
    fillRand(ctx->X_values, -1.0, 1.0);

    fillRand(ctx->A_rows, 0UL, ctx->M);
    fillRand(ctx->A_columns, 0UL, ctx->K);
    fillRand(ctx->A_values, -1.0, 1.0);

    BCAST(ctx->X_rows, UNSIGNED_LONG);
    BCAST(ctx->X_columns, UNSIGNED_LONG);
    BCAST(ctx->X_values, DOUBLE);
    BCAST(ctx->A_rows, UNSIGNED_LONG);
    BCAST(ctx->A_columns, UNSIGNED_LONG);
    BCAST(ctx->A_values, DOUBLE);

    std::fill(ctx->Y.begin(), ctx->Y.end(), 0.0); // every rank sets Y to 0

    for (int i = 0; i < ctx->X_rows.size(); i += 1) {
        ctx->X.push_back({ctx->X_rows[i], ctx->X_columns[i], ctx->X_values[i]});
    }
    sortCOOElements(ctx->X);

    for (int i = 0; i < ctx->A_rows.size(); i += 1) {
        ctx->A.push_back({ctx->A_rows[i], ctx->A_columns[i], ctx->A_values[i]});
    }
    sortCOOElements(ctx->A);
}

Context *init() {
    Context *ctx = new Context();

    ctx->M = DRIVER_PROBLEM_SIZE;
    ctx->K = DRIVER_PROBLEM_SIZE / 4;
    ctx->N = DRIVER_PROBLEM_SIZE / 2;
    const size_t nVals_A = ctx->M * ctx->K * SPARSE_LA_SPARSITY;
    const size_t nVals_X = ctx->K * ctx->N * SPARSE_LA_SPARSITY;

    ctx->A.resize(nVals_A);
    ctx->A_rows.resize(nVals_A);
    ctx->A_columns.resize(nVals_A);
    ctx->A_values.resize(nVals_A);

    ctx->X.resize(nVals_X);
    ctx->X_rows.resize(nVals_X);
    ctx->X_columns.resize(nVals_X);
    ctx->X_values.resize(nVals_X);

    ctx->Y.resize(ctx->M * ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    spmm(ctx->A, ctx->X, ctx->Y, ctx->M, ctx->K, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSpmm(ctx->A, ctx->X, ctx->Y, ctx->M, ctx->K, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;
    const size_t nVals_A = TEST_SIZE * TEST_SIZE * SPARSE_LA_SPARSITY;
    const size_t nVals_X = TEST_SIZE * TEST_SIZE * SPARSE_LA_SPARSITY;

    std::vector<size_t> X_rows(nVals_X), X_columns(nVals_X), A_rows(nVals_A), A_columns(nVals_A);
    std::vector<double> X_values(nVals_X), A_values(nVals_A);

    std::vector<COOElement> X(nVals_X), A(nVals_A);
    std::vector<double> correctY(TEST_SIZE * TEST_SIZE), testY(TEST_SIZE * TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(X_rows, 0UL, TEST_SIZE);
        fillRand(X_columns, 0UL, TEST_SIZE);
        fillRand(X_values, -1.0, 1.0);

        fillRand(A_rows, 0UL, TEST_SIZE);
        fillRand(A_columns, 0UL, TEST_SIZE);
        fillRand(A_values, -1.0, 1.0);

        BCAST(X_rows, UNSIGNED_LONG);
        BCAST(X_columns, UNSIGNED_LONG);
        BCAST(X_values, DOUBLE);
        BCAST(A_rows, UNSIGNED_LONG);
        BCAST(A_columns, UNSIGNED_LONG);
        BCAST(A_values, DOUBLE);

        std::fill(correctY.begin(), correctY.end(), 0.0); // every rank sets Y to 0
        std::fill(testY.begin(), testY.end(), 0.0); // every rank sets Y to 0

        for (int i = 0; i < X_rows.size(); i += 1) {
            X[i] = {X_rows[i], X_columns[i], X_values[i]};
        }
        sortCOOElements(X);

        for (int i = 0; i < A_rows.size(); i += 1) {
            A[i] = {A_rows[i], A_columns[i], A_values[i]};
        }
        sortCOOElements(A);

        // compute correct result
        correctSpmm(A, X, correctY, TEST_SIZE, TEST_SIZE, TEST_SIZE);

        // compute test result
        spmm(A, X, testY, TEST_SIZE, TEST_SIZE, TEST_SIZE);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && !fequal(correctY, testY, 1e-4)) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
