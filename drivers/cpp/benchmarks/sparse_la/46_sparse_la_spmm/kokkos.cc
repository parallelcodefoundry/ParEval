// Driver for 46_sparse_la_spmm for Kokkos
// #include <Kokkos_Core.hpp>
// 
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Compute the matrix multiplication Y=AX. A is a sparse MxK matrix in COO format.
//    X is a sparse KxN matrix in COO format. Y is a dense MxN matrix.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: A=[{0,0,-2}, {0,1,1}, {1,1,-1}] X=[{0,1,2}, {1,0,-1}]
//    output: Y=[{-1,-4}, {1,0}]
// */
// void spmm(Kokkos::View<const COOElement*> &A, Kokkos::View<const COOElement*> &X, Kokkos::View<double**> &Y, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<COOElement*> X, A;
    Kokkos::View<double**> Y;
    Kokkos::View<const COOElement*> X_const, A_const;

    std::vector<COOElement> X_host, A_host;
    std::vector<double> Y_host;

    size_t M, K, N;
};

void sortCOOElements(std::vector<COOElement> &vec) {
    std::sort(vec.begin(), vec.end(), [](const COOElement &a, const COOElement &b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

void reset(Context *ctx) {
    for (int i = 0; i < ctx->X_host.size(); i += 1) {
        ctx->X_host[i] = {rand() % ctx->K, rand() % ctx->N, (rand() / (double) RAND_MAX) * 2.0 - 1.0};
    }
    sortCOOElements(ctx->X_host);
    for (int i = 0; i < ctx->X_host.size(); i += 1) {
        ctx->X(i) = ctx->X_host[i];
    }
    ctx->X_const = ctx->X;

    for (int i = 0; i < ctx->A_host.size(); i += 1) {
        ctx->A_host[i] = {rand() % ctx->M, rand() % ctx->K, (rand() / (double) RAND_MAX) * 2.0 - 1.0};
    }
    sortCOOElements(ctx->A_host);
    for (int i = 0; i < ctx->A_host.size(); i += 1) {
        ctx->A(i) = ctx->A_host[i];
    }
    ctx->A_const = ctx->A;

    std::fill(ctx->Y_host.begin(), ctx->Y_host.end(), 0.0);
    for (int i = 0; i < ctx->M; i += 1) {
        for (int j = 0; j < ctx->N; j += 1) {
            ctx->Y(i, j) = 0.0;
        }
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->M = DRIVER_PROBLEM_SIZE;
    ctx->K = DRIVER_PROBLEM_SIZE / 4;
    ctx->N = DRIVER_PROBLEM_SIZE / 2;
    const size_t nVals_A = ctx->M * ctx->K * SPARSE_LA_SPARSITY;
    const size_t nVals_X = ctx->K * ctx->N * SPARSE_LA_SPARSITY;

    ctx->X_host.resize(nVals_X);
    ctx->A_host.resize(nVals_A);
    ctx->Y_host.resize(ctx->M * ctx->N);

    ctx->X = Kokkos::View<COOElement*>("X", nVals_X);
    ctx->A = Kokkos::View<COOElement*>("A", nVals_A);
    ctx->Y = Kokkos::View<double**>("Y", ctx->M, ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    spmm(ctx->A_const, ctx->X_const, ctx->Y, ctx->M, ctx->K, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSpmm(ctx->A_host, ctx->X_host, ctx->Y_host, ctx->M, ctx->K, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;
    const size_t nVals = TEST_SIZE * TEST_SIZE * SPARSE_LA_SPARSITY;

    Kokkos::View<COOElement*> X("X", nVals);
    Kokkos::View<COOElement*> A("A", nVals);
    Kokkos::View<double**> Y("Y", TEST_SIZE, TEST_SIZE);

    std::vector<COOElement> X_host(nVals), A_host(nVals);
    std::vector<double> Y_correct(TEST_SIZE * TEST_SIZE), Y_test(TEST_SIZE * TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        for (int i = 0; i < X_host.size(); i += 1) {
            X_host[i] = {rand() % TEST_SIZE, rand() % TEST_SIZE, (rand() / (double) RAND_MAX) * 2.0 - 1.0};
        }
        sortCOOElements(X_host);
        for (int i = 0; i < X_host.size(); i += 1) {
            X(i) = X_host[i];
        }
        Kokkos::View<const COOElement*> X_const = X;

        for (int i = 0; i < A_host.size(); i += 1) {
            A_host[i] = {rand() % TEST_SIZE, rand() % TEST_SIZE, (rand() / (double) RAND_MAX) * 2.0 - 1.0};
        }
        sortCOOElements(A_host);
        for (int i = 0; i < A_host.size(); i += 1) {
            A(i) = A_host[i];
        }
        Kokkos::View<const COOElement*> A_const = A;

        std::fill(Y_correct.begin(), Y_correct.end(), 0.0);
        for (int i = 0; i < TEST_SIZE; i += 1) {
            for (int j = 0; j < TEST_SIZE; j += 1) {
                Y(i, j) = 0.0;
            }
        }

        // compute correct result
        correctSpmm(A_host, X_host, Y_correct, TEST_SIZE, TEST_SIZE, TEST_SIZE);

        // compute test result
        spmm(A_const, X_const, Y, TEST_SIZE, TEST_SIZE, TEST_SIZE);

        // copy out of view
        for (int i = 0; i < TEST_SIZE; i += 1) {
            for (int j = 0; j < TEST_SIZE; j += 1) {
                Y_test[i * TEST_SIZE + j] = Y(i, j);
            }
        }
        
        if (!fequal(Y_correct, Y_test, 1e-4)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
