// Driver for 45_sparse_la_sparse_solve for Kokkos
// #include <Kokkos_Core.hpp>
// 
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Solve the sparse linear system Ax=b for x.
//    A is a sparse NxN matrix in COO format. x and b are dense vectors with N elements.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//    
//    input: A=[{0,0,1}, {0,1,1}, {1,1,-2}] b=[1,4]
//    output: x=[3,-2]
// */
// void solveLinearSystem(Kokkos::View<const COOElement*> &A, Kokkos::View<const double*> &b, Kokkos::View<double*> &x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    Kokkos::View<COOElement*> A;
    Kokkos::View<double*> b, x;
    Kokkos::View<const COOElement*> A_const;
    Kokkos::View<const double*> b_const;

    std::vector<COOElement> A_host;
    std::vector<double> b_host, x_host;

    size_t N;
};

void sortCOOElements(std::vector<COOElement> &vec) {
    std::sort(vec.begin(), vec.end(), [](const COOElement &a, const COOElement &b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

void createRandomLinearSystem(std::vector<COOElement> &A, std::vector<double> &b, std::vector<double> &x, size_t N) {
    for (int i = 0; i < A.size(); i += 1) {
        A[i] = {rand() % N, rand() % N, (rand() / (double)RAND_MAX) * 20.0 - 10.0};
    }
    sortCOOElements(A);

    fillRand(x, -10.0, 10.0);

    std::fill(b.begin(), b.end(), 0.0);
    for (size_t i = 0; i < A.size(); i += 1) {
        b[A[i].row] += A[i].value * x[A[i].column];
    }

    std::fill(x.begin(), x.end(), 0.0);
}

void reset(Context *ctx) {
    createRandomLinearSystem(ctx->A_host, ctx->b_host, ctx->x_host, ctx->N);

    for (int i = 0; i < ctx->A_host.size(); i += 1) {
        ctx->A(i) = ctx->A_host[i];
    }
    ctx->A_const = ctx->A;

    copyVectorToView(ctx->b_host, ctx->b);
    ctx->b_const = ctx->b;

    copyVectorToView(ctx->x_host, ctx->x);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    const size_t nVals = ctx->N * ctx->N * SPARSE_LA_SPARSITY;

    ctx->A = Kokkos::View<COOElement*>("A", nVals);
    ctx->b = Kokkos::View<double*>("b", ctx->N);
    ctx->x = Kokkos::View<double*>("x", ctx->N);

    ctx->A_host.resize(nVals);
    ctx->b_host.resize(ctx->N);
    ctx->x_host.resize(ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    solveLinearSystem(ctx->A_const, ctx->b_const, ctx->x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSolveLinearSystem(ctx->A_host, ctx->b_host, ctx->x_host, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;
    const size_t nVals = TEST_SIZE * TEST_SIZE * SPARSE_LA_SPARSITY;

    Kokkos::View<COOElement*> A("A", nVals);
    Kokkos::View<double*> b("b", TEST_SIZE);
    Kokkos::View<double*> x("x", TEST_SIZE);

    std::vector<COOElement> A_host(nVals);
    std::vector<double> b_host(TEST_SIZE);
    std::vector<double> x_correct(TEST_SIZE), x_test(TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        createRandomLinearSystem(A_host, b_host, x_correct, TEST_SIZE);

        for (int i = 0; i < A_host.size(); i += 1) {
            A(i) = A_host[i];
        }
        Kokkos::View<const COOElement*> A_const = A;

        copyVectorToView(b_host, b);
        Kokkos::View<const double*> b_const = b;

        copyVectorToView(x_correct, x);

        // compute correct result
        correctSolveLinearSystem(A_host, b_host, x_correct, TEST_SIZE);

        // compute test result
        solveLinearSystem(A_const, b_const, x, TEST_SIZE);

        // copy back
        copyViewToVector(x, x_test);
        
        if (!fequal(x_correct, x_test, 1e-3)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
