// Driver for 45_sparse_la_sparse_solve for CUDA and HIP
// struct COOElement {
//    size_t row, column;
//    double value;
// };
// 
// /* Solve the sparse linear system Ax=b for x.
//    A is a sparse NxN matrix in COO format with sizeA elements. x and b are dense vectors with N elements.
//    Use CUDA to compute in parallel. The kernel is launched with at least sizeA threads.
//    Example:
//    
//    input: A=[{0,0,1}, {0,1,1}, {1,1,-2}] b=[1,4]
//    output: x=[3,-2]
// */
// __global__ void solveLinearSystem(const COOElement *A, size_t sizeA, const double *b, double *x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.cuh"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    COOElement *d_A;
    double *d_b, *d_x;
    std::vector<COOElement> h_A;
    std::vector<double> h_b, h_x;
    size_t N, sizeA;
    dim3 blockSize, gridSize;
};

void sortCOOElements(std::vector<COOElement> &vec) {
    std::sort(vec.begin(), vec.end(), [](const COOElement &a, const COOElement &b) {
        return (a.row == b.row) ? (a.column < b.column) : (a.row < b.row);
    });
}

void createRandomLinearSystem(std::vector<COOElement> &A, std::vector<double> &b, std::vector<double> &x, size_t N) {
    for (int i = 0; i < A.size(); i += 1) {
        A[i] = {rand() % N, rand() % N, (rand() / (double)RAND_MAX) * 20.0 - 10.0};
    }
    sortCOOElements(A);

    fillRand(x, -10.0, 10.0);

    std::fill(b.begin(), b.end(), 0.0);
    for (size_t i = 0; i < A.size(); i += 1) {
        b[A[i].row] += A[i].value * x[A[i].column];
    }

    std::fill(x.begin(), x.end(), 0.0);
}

void reset(Context *ctx) {
    createRandomLinearSystem(ctx->h_A, ctx->h_b, ctx->h_x, ctx->N);

    COPY_H2D(ctx->d_A, ctx->h_A.data(), ctx->sizeA * sizeof(COOElement));
    COPY_H2D(ctx->d_b, ctx->h_b.data(), ctx->N * sizeof(double));
    COPY_H2D(ctx->d_x, ctx->h_x.data(), ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->sizeA = DRIVER_PROBLEM_SIZE * DRIVER_PROBLEM_SIZE * SPARSE_LA_SPARSITY;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->sizeA + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_A.resize(ctx->sizeA);
    ctx->h_b.resize(ctx->N);
    ctx->h_x.resize(ctx->N);

    ALLOC(ctx->d_A, ctx->sizeA * sizeof(COOElement));
    ALLOC(ctx->d_b, ctx->N * sizeof(double));
    ALLOC(ctx->d_x, ctx->N * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    solveLinearSystem<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_A, ctx->sizeA, ctx->d_b, ctx->d_x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSolveLinearSystem(ctx->h_A, ctx->h_b, ctx->h_x, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 128;
    const size_t nVals = TEST_SIZE * TEST_SIZE * SPARSE_LA_SPARSITY;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((nVals + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<COOElement> h_A(nVals);
    std::vector<double> h_b(TEST_SIZE), h_x_correct(TEST_SIZE), h_x_test(TEST_SIZE);

    COOElement *d_A;
    double *d_b, *d_x;
    ALLOC(d_A, nVals * sizeof(COOElement));
    ALLOC(d_b, TEST_SIZE * sizeof(double));
    ALLOC(d_x, TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        createRandomLinearSystem(h_A, h_b, h_x_correct, TEST_SIZE);

        COPY_H2D(d_A, h_A.data(), nVals * sizeof(COOElement));
        COPY_H2D(d_b, h_b.data(), TEST_SIZE * sizeof(double));
        COPY_H2D(d_x, h_x_correct.data(), TEST_SIZE * sizeof(double));

        // compute correct result
        correctSolveLinearSystem(h_A, h_b, h_x_correct, TEST_SIZE);

        // compute test result
        solveLinearSystem<<<gridSize, blockSize>>>(d_A, nVals, d_b, d_x, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(h_x_test.data(), d_x, TEST_SIZE * sizeof(double));
        
        if (!fequal(h_x_correct, h_x_test, 1e-3)) {
            FREE(d_A);
            FREE(d_b);
            FREE(d_x);
            return false;
        }
    }

    FREE(d_A);
    FREE(d_b);
    FREE(d_x);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_A);
    FREE(ctx->d_b);
    FREE(ctx->d_x);
    delete ctx;
}
