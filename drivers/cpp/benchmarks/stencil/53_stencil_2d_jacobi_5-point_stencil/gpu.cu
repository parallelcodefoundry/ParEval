// Driver for 53_stencil_2d_jacobi_5-point_stencil for CUDA and HIP
// /* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.
//    Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.
//    i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5
//    Replace with 0 when reading past the boundaries of `input`.
//    `input` and `output` are NxN grids stored in row-major.
//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.
//    Example:
//
//    input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]
//    output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]
// */
// __global__ void jacobi2D(const double *input, double *output, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM

struct Context {
    std::vector<double> h_input, h_output;
    double *d_input, *d_output;

    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_input, -100.0, 100.0);
    COPY_H2D(ctx->d_input, ctx->h_input.data(), ctx->N * ctx->N);
    std::fill(ctx->h_output.begin(), ctx->h_output.end(), 0);
    COPY_H2D(ctx->d_output, ctx->h_output.data(), ctx->N * ctx->N);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(32,32);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x,
                         (ctx->N + ctx->blockSize.y - 1) / ctx->blockSize.y); // at least enough threads

    ctx->h_input.resize(ctx->N * ctx->N);
    ctx->h_output.resize(ctx->N * ctx->N);
    ALLOC(ctx->d_input, ctx->N * ctx->N * sizeof(double));
    ALLOC(ctx->d_output, ctx->N * ctx->N * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    jacobi2D<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_input, ctx->d_output, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctJacobi2D(ctx->h_input, ctx->h_output, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(32,32);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x,
                         (TEST_SIZE + blockSize.y - 1) / blockSize.y); // at least enough threads

    std::vector<double> h_input(TEST_SIZE * TEST_SIZE), correct(TEST_SIZE * TEST_SIZE), test(TEST_SIZE * TEST_SIZE);

    double *d_input, *d_output;
    ALLOC(d_input, TEST_SIZE * TEST_SIZE * sizeof(double));
    ALLOC(d_output, TEST_SIZE * TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_input, -100.0, 100.0);
        std::fill(test.begin(), test.end(), 0);
        std::fill(correct.begin(), correct.end(), 0);

        COPY_H2D(d_input, h_input.data(), TEST_SIZE * TEST_SIZE * sizeof(double));
        COPY_H2D(d_output, test.data(), TEST_SIZE * TEST_SIZE * sizeof(double));

        // compute correct result
        correctJacobi2D(h_input, correct, TEST_SIZE);

        // compute test result
        jacobi2D<<<gridSize, blockSize>>>(d_input, d_output, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_output, TEST_SIZE * TEST_SIZE * sizeof(double));

        for (size_t i = 1; i < TEST_SIZE - 1; i += 1) {
            for (size_t j = 1; j < TEST_SIZE - 1; j += 1) {
                if (std::abs(correct[i * TEST_SIZE + j] - test[i * TEST_SIZE + j]) > 1e-4) {
                    FREE(d_input);
                    FREE(d_output);
                    return false;
                }
            }
        }
    }

    FREE(d_input);
    FREE(d_output);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_input);
    FREE(ctx->d_output);
    delete ctx;
}
