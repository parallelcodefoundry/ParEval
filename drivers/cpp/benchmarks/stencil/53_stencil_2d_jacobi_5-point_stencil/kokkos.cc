// Driver for 53_stencil_2d_jacobi_5-point_stencil for Kokkos
// #include <Kokkos_Core.hpp>
//
// /* Compute one iteration of a 5-point 2D jacobi stencil on `input`. Store the results in `output`.
//    Each element of `input` will be averaged with its four neighbors and stored in the corresponding element of `output`.
//    i.e. output_{i,j} = (input_{i,j-1} + input_{i,j+1} + input_{i-1,j} + input_{i+1,j} + input_{i,j})/5
//    Replace with 0 when reading past the boundaries of `input`.
//    `input` and `output` are NxN grids.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//
//    input: [[3, 4, 1], [0, 1, 7], [5, 3, 2]]
//    output: [[1.4, 1.8, 2.4],[1.8, 3, 2.2], [1.6, 2.2, 2.4]]
// */
// void jacobi2D(Kokkos::View<const double**> &input, Kokkos::View<double**> &output, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<double**> input, output;
    Kokkos::View<const double**> input_const;
    size_t N;

    std::vector<double> input_host, output_host;
};

void reset(Context *ctx) {
    fillRand(ctx->input_host, -100.0, 100.0);
    std::fill(ctx->output_host.begin(), ctx->output_host.end(), 0);

    for (size_t i = 0; i < ctx->N; i += 1) {
        for (size_t j = 0; j < ctx->N; j += 1) {
            ctx->input(i, j) = ctx->input_host[i * ctx->N + j];
            ctx->output(i, j) = 0;
        }
    }
    ctx->input_const = ctx->input;
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->input_host.resize(ctx->N * ctx->N);
    ctx->output_host.resize(ctx->N * ctx->N);

    ctx->input = Kokkos::View<double**>("input", ctx->N, ctx->N);
    ctx->output = Kokkos::View<double**>("output", ctx->N, ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    jacobi2D(ctx->input_const, ctx->output, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctJacobi2D(ctx->input_host, ctx->output_host, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> input_host(TEST_SIZE * TEST_SIZE), correct(TEST_SIZE * TEST_SIZE);

    Kokkos::View<double**> input("input", TEST_SIZE, TEST_SIZE);
    Kokkos::View<double**> test("test", TEST_SIZE, TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(input_host, -100.0, 100.0);
        std::fill(correct.begin(), correct.end(), 0);

        for (size_t i = 0; i < TEST_SIZE; i += 1) {
            for (size_t j = 0; j < TEST_SIZE; j += 1) {
                input(i, j) = input_host[i * TEST_SIZE + j];
                test(i, j) = 0;
            }
        }
        Kokkos::View<const double**> input_const = input;

        // compute correct result
        correctJacobi2D(input_host, correct, TEST_SIZE);

        // compute test result
        jacobi2D(input_const, test, TEST_SIZE);

        for (size_t i = 1; i < TEST_SIZE-1; i += 1) {
            for (size_t j = 1; j < TEST_SIZE-1; j += 1) {
                if (std::abs(test(i, j) - correct[i * TEST_SIZE + j]) > 1e-4) {
                    return false;
                }
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
