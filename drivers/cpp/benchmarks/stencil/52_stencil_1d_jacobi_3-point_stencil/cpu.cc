// Driver for 52_stencil_1d_jacobi_3-point_stencil for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.
//    Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.
//    i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3
//    Replace with 0 when reading past the boundaries of `input`.
//    Example:
// 
//    input: [9, -6, -1, 2, 3]
//    output: [1, 2/3, -5/3, 4/3, 5/3]
// */
// void jacobi1D(std::vector<double> const& input, std::vector<double> &output) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<double> input, output;
};

void reset(Context *ctx) {
    fillRand(ctx->input, -100.0, 100.0);
    std::fill(ctx->output.begin(), ctx->output.end(), 0);
    BCAST(ctx->input, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();

    ctx->input.resize(DRIVER_PROBLEM_SIZE);
    ctx->output.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    jacobi1D(ctx->input, ctx->output);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctJacobi1D(ctx->input, ctx->output);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> input(TEST_SIZE), correct(TEST_SIZE), test(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(input, -100.0, 100.0);
        std::fill(test.begin(), test.end(), 0);
        std::fill(correct.begin(), correct.end(), 0);
        BCAST(input, DOUBLE);

        // compute correct result
        correctJacobi1D(input, correct);

        // compute test result
        jacobi1D(input, test);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank)) {
            for (size_t i = 1; i < TEST_SIZE-1; i++) {
                if (std::abs(test[i] - correct[i]) > 1e-4) {
                    isCorrect = false;
                    break;
                }
            }
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
