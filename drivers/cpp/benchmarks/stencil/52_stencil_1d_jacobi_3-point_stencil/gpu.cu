// Driver for 52_stencil_1d_jacobi_3-point_stencil for CUDA and HIP
// /* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.
//    Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.
//    i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3
//    Replace with 0 when reading past the boundaries of `input`.
//    Use CUDA to compute in parallel. The kernel is launched with at least N threads.
//    Example:
//
//    input: [9, -6, -1, 2, 3]
//    output: [1, 2/3, -5/3, 4/3, 5/3]
// */
// __global__ void jacobi1D(const double *input, double *output, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    std::vector<double> h_input, h_output;
    double *d_input, *d_output;

    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_input, -100.0, 100.0);
    COPY_H2D(ctx->d_input, ctx->h_input.data(), ctx->N);
    std::fill(ctx->h_output.begin(), ctx->h_output.end(), 0);
    COPY_H2D(ctx->d_output, ctx->h_output.data(), ctx->N);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_input.resize(ctx->N);
    ctx->h_output.resize(ctx->N);
    ALLOC(ctx->d_input, ctx->N * sizeof(double));
    ALLOC(ctx->d_output, ctx->N * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    jacobi1D<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_input, ctx->d_output, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctJacobi1D(ctx->h_input, ctx->h_output);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<double> h_input(TEST_SIZE), correct(TEST_SIZE), test(TEST_SIZE);

    double *d_input, *d_test;
    ALLOC(d_input, TEST_SIZE * sizeof(double));
    ALLOC(d_test, TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_input, -100.0, 100.0);
        std::fill(test.begin(), test.end(), 0);
        std::fill(correct.begin(), correct.end(), 0);

        COPY_H2D(d_input, h_input.data(), TEST_SIZE * sizeof(double));
        COPY_H2D(d_test, test.data(), TEST_SIZE * sizeof(double));

        // compute correct result
        correctJacobi1D(h_input, correct);

        // compute test result
        jacobi1D<<<gridSize, blockSize>>>(d_input, d_test, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_test, TEST_SIZE * sizeof(double));

        for (size_t i = 1; i < TEST_SIZE-1; i += 1) {
            if (std::abs(test[i] - correct[i]) > 1e-4) {
                FREE(d_input);
                FREE(d_test);
                return false;
            }
        }
    }

    FREE(d_input);
    FREE(d_test);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_input);
    FREE(ctx->d_output);
    delete ctx;
}
