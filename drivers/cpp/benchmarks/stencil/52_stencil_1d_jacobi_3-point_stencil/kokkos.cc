// Driver for 52_stencil_1d_jacobi_3-point_stencil for Kokkos
// #include <Kokkos_Core.hpp>
//
// /* Compute one iteration of a 3-point 1D jacobi stencil on `input`. Store the results in `output`.
//    Each element of `input` will be averaged with its two neighbors and stored in the corresponding element of `output`.
//    i.e. output[i] = (input[i-1]+input[i]+input[i+1])/3
//    Replace with 0 when reading past the boundaries of `input`.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//
//    input: [9, -6, -1, 2, 3]
//    output: [1, 2/3, -5/3, 4/3, 5/3]
// */
// void jacobi1D(Kokkos::View<const double*> &input, Kokkos::View<double*> &output) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"
#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<double*> input, output;
    Kokkos::View<const double*> input_const;

    std::vector<double> input_host, output_host;
};

void reset(Context *ctx) {
    fillRand(ctx->input_host, -100.0, 100.0);
    std::fill(ctx->output_host.begin(), ctx->output_host.end(), 0);

    copyVectorToView(ctx->input_host, ctx->input);
    Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), ctx->output, 0);
    ctx->input_const = ctx->input;
}

Context *init() {
    Context *ctx = new Context();

    ctx->input_host.resize(DRIVER_PROBLEM_SIZE);
    ctx->output_host.resize(DRIVER_PROBLEM_SIZE);

    ctx->input = Kokkos::View<double*>("input", DRIVER_PROBLEM_SIZE);
    ctx->output = Kokkos::View<double*>("output", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    jacobi1D(ctx->input_const, ctx->output);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctJacobi1D(ctx->input_host, ctx->output_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> input_host(TEST_SIZE), correct(TEST_SIZE);

    Kokkos::View<double*> input("input", TEST_SIZE);
    Kokkos::View<double*> test("test", TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(input_host, -100.0, 100.0);
        std::fill(correct.begin(), correct.end(), 0);

        copyVectorToView(input_host, input);
        Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), test, 0);
        Kokkos::View<const double*> input_const = input;

        // compute correct result
        correctJacobi1D(input_host, correct);

        // compute test result
        jacobi1D(input_const, test);

        for (size_t i = 1; i < TEST_SIZE-1; i += 1) {
            if (std::abs(test(i) - correct[i]) > 1e-4) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
