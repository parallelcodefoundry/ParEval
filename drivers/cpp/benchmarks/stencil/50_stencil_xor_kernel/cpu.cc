// Driver for 50_stencil_xor_kernel for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Set every cell's value to 1 if it has exactly one neighbor that's a 1. Otherwise set it to 0.
//    Note that we only consider neighbors and not input_{i,j} when computing output_{i,j}.
//    input and output are NxN grids of ints in row-major.
//    Example:
//
//    input: [[0, 1, 1, 0],
//            [1, 0, 0, 0],
//            [0, 0, 0, 0],
//            [0, 1, 0, 0]
//    output: [[0, 0, 1, 1],
//             [1, 0, 0, 1],
//             [0, 0, 1, 0],
//             [1, 0, 1, 0]]
// */
// void cellsXOR(std::vector<int> const& input, std::vector<int> &output, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int> input;
    std::vector<int> output;
    size_t N;
};

void reset(Context *ctx) {
    fillRand(ctx->input, 0, 1);
    std::fill(ctx->output.begin(), ctx->output.end(), 0);
    BCAST(ctx->input, INT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->input.resize(ctx->N * ctx->N);
    ctx->output.resize(ctx->N * ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    cellsXOR(ctx->input, ctx->output, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctCellsXOR(ctx->input, ctx->output, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<int> input, correct, test;

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(input, 0, 1);
        std::fill(test.begin(), test.end(), 0);
        BCAST(input, INT);

        // compute correct result
        correctCellsXOR(input, correct, ctx->N);

        // compute test result
        cellsXOR(input, test, ctx->N);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank) && !std::equal(correct.begin(), correct.end(), test.begin())) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
