// Driver for 54_stencil_game_of_life for CUDA and HIP
// /* Simulate one generation of Game of Life on `input`. Store the results in `output`.
//    A cell is 1 if it is alive and 0 if it is dead.
//    If a live cell has fewer than 2 live neighbors then it dies.
//    If a live cell has 2 or 3 live neighbors then it lives on.
//    If a live cell has more than 3 live neighbords then it dies.
//    If a cell is dead and has exactly 3 live neighbors then it becomes alive.
//    `input` and `output` are NxN grids stored in row-major.
//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.
//    Example:
//
//    input:  [[0, 0, 0, 0, 0],
//             [0, 1, 0, 0, 0],
//             [0, 1, 1, 0, 0],
//             [0, 0, 1, 1, 0],
//             [0, 1, 0, 0, 0]]
//    output: [[0, 0, 0, 0, 0],
//             [0, 1, 1, 0, 0],
//             [0, 1, 0, 1, 0],
//             [0, 0, 0, 1, 0],
//             [0, 0, 1, 0, 0]]
// */
// __global__ void gameOfLife(const int *input, int *output, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM

struct Context {
    std::vector<int> h_input, h_output;
    int *d_input, *d_output;

    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_input, 0, 2);
    COPY_H2D(ctx->d_input, ctx->h_input.data(), ctx->N * ctx->N);
    std::fill(ctx->h_output.begin(), ctx->h_output.end(), 0);
    COPY_H2D(ctx->d_output, ctx->h_output.data(), ctx->N * ctx->N);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(32,32);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x,
                         (ctx->N + ctx->blockSize.y - 1) / ctx->blockSize.y); // at least enough threads

    ctx->h_input.resize(ctx->N * ctx->N);
    ctx->h_output.resize(ctx->N * ctx->N);
    ALLOC(ctx->d_input, ctx->N * ctx->N * sizeof(int));
    ALLOC(ctx->d_output, ctx->N * ctx->N * sizeof(int));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    gameOfLife<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_input, ctx->d_output, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctGameOfLife(ctx->h_input, ctx->h_output, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(32,32);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x,
                         (TEST_SIZE + blockSize.y - 1) / blockSize.y); // at least enough threads

    std::vector<int> h_input(TEST_SIZE * TEST_SIZE), correct(TEST_SIZE * TEST_SIZE), test(TEST_SIZE * TEST_SIZE);

    int *d_input, *d_test;
    ALLOC(d_input, TEST_SIZE * TEST_SIZE * sizeof(int));
    ALLOC(d_test, TEST_SIZE * TEST_SIZE * sizeof(int));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_input, 0, 2);
        std::fill(test.begin(), test.end(), 0);
        std::fill(correct.begin(), correct.end(), 0);

        COPY_H2D(d_input, h_input.data(), TEST_SIZE * TEST_SIZE * sizeof(int));

        // compute correct result
        correctGameOfLife(h_input, correct, TEST_SIZE);

        // compute test result
        gameOfLife<<<gridSize, blockSize>>>(d_input, d_test, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_test, TEST_SIZE * TEST_SIZE * sizeof(int));

        for (size_t i = 1; i < TEST_SIZE - 1; i += 1) {
            for (size_t j = 1; j < TEST_SIZE - 1; j += 1) {
                if (correct[i * TEST_SIZE + j] != test[i * TEST_SIZE + j]) {
                    FREE(d_input);
                    FREE(d_test);
                    return false;
                }
            }
        }
    }

    FREE(d_input);
    FREE(d_test);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_input);
    FREE(ctx->d_output);
    delete ctx;
}
