// Driver for 04_dense_la_gemv for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the vector x. Store the results in the vector y.
//    A is an MxN matrix stored in row-major, x has N elements, and y has M elements.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]
//    output: y=[1, -3]
// */
// void gemv(std::vector<double> const& A, std::vector<double> const& x, std::vector<double> &y, size_t M, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<double> A, x, y;
    size_t M, N;
};

void reset(Context *ctx) {
    fillRand(ctx->A, -10.0, 10.0);
    fillRand(ctx->x, -10.0, 10.0);

    BCAST(ctx->A, DOUBLE);
    BCAST(ctx->x, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();

    ctx->M = DRIVER_PROBLEM_SIZE / 2;
    ctx->N = DRIVER_PROBLEM_SIZE;

    ctx->A.resize(ctx->M * ctx->N);
    ctx->x.resize(ctx->N);
    ctx->y.resize(ctx->M);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    gemv(ctx->A, ctx->x, ctx->y, ctx->M, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctGemv(ctx->A, ctx->x, ctx->y, ctx->M, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> A(TEST_SIZE * TEST_SIZE);
    std::vector<double> x(TEST_SIZE);
    std::vector<double> correct(TEST_SIZE), test(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(A, -10.0, 10.0);
        fillRand(x, -10.0, 10.0);
        BCAST(A, DOUBLE);
        BCAST(x, DOUBLE);

        // compute correct result
        correctGemv(A, x, correct, TEST_SIZE, TEST_SIZE);

        // compute test result
        gemv(A, x, test, TEST_SIZE, TEST_SIZE);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && !fequal(correct, test, 1e-4)) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
