// Driver for 04_dense_la_gemv for CUDA and HIP
// /* Multiply the matrix A by the vector x. Store the results in the vector y.
//    A is an MxN matrix stored in row-major, x has N elements, and y has M elements.
//    Use CUDA to compute in parallel. The kernel is launched with at least M threads.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -3, 1]] x=[2, 1, 0]
//    output: y=[1, -3]
// */
// __global__ void gemv(const double *A, const double *x, double *y, size_t M, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM


struct Context {
    double *d_A, *d_x, *d_y;
    std::vector<double> h_A, h_x, h_y;
    size_t M, N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    fillRand(ctx->h_A, -10.0, 10.0);
    fillRand(ctx->h_x, -10.0, 10.0);

    COPY_H2D(ctx->d_A, ctx->h_A.data(), ctx->M * ctx->N * sizeof(double));
    COPY_H2D(ctx->d_x, ctx->h_x.data(), ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->M = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(1024);
    ctx->gridSize = dim3((ctx->M + ctx->blockSize.x - 1) / ctx->blockSize.x); // at least enough threads

    ctx->h_A.resize(ctx->M * ctx->N);
    ctx->h_x.resize(ctx->N);
    ctx->h_y.resize(ctx->M);

    ALLOC(ctx->d_A, ctx->M * ctx->N * sizeof(double));
    ALLOC(ctx->d_x, ctx->N * sizeof(double));
    ALLOC(ctx->d_y, ctx->M * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    gemv<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_A, ctx->d_x, ctx->d_y, ctx->M, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctGemv(ctx->h_A, ctx->h_x, ctx->h_y, ctx->M, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;
    dim3 blockSize = dim3(1024);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x); // at least enough threads

    std::vector<double> h_A(TEST_SIZE * TEST_SIZE);
    std::vector<double> h_x(TEST_SIZE);
    std::vector<double> correct(TEST_SIZE), test(TEST_SIZE);

    double *d_A, *d_x, *d_y;
    ALLOC(d_A, TEST_SIZE * TEST_SIZE * sizeof(double));
    ALLOC(d_x, TEST_SIZE * sizeof(double));
    ALLOC(d_y, TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_A, -10.0, 10.0);
        fillRand(h_x, -10.0, 10.0);

        COPY_H2D(d_A, h_A.data(), TEST_SIZE * TEST_SIZE * sizeof(double));
        COPY_H2D(d_x, h_x.data(), TEST_SIZE * sizeof(double));

        // compute correct result
        correctGemv(h_A, h_x, correct, TEST_SIZE, TEST_SIZE);

        // compute test result
        gemv<<<gridSize, blockSize>>>(d_A, d_x, d_y, TEST_SIZE, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_y, TEST_SIZE * sizeof(double));
        
        if (!fequal(correct, test, 1e-4)) {
            FREE(d_A);
            FREE(d_x);
            FREE(d_y);
            return false;
        }
    }

    FREE(d_A);
    FREE(d_x);
    FREE(d_y);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_A);
    FREE(ctx->d_x);
    FREE(ctx->d_y);
    delete ctx;
}
