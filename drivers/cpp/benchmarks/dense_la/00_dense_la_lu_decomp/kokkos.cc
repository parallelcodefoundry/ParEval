// Driver for 00_dense_la_lu_decomp for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Factorize the matrix A into A=LU where L is a lower triangular matrix and U is an upper triangular matrix.
//    Store the results for L and U into the original matrix A. 
//    A is an NxN matrix.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
// 
//    input: [[4, 3], [6, 3]]
//    output: [[4, 3], [1.5, -1.5]]
// */
// void luFactorize(Kokkos::View<double**> &A, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<double**> A;
    std::vector<double> A_host;
    size_t N;
};

void reset(Context *ctx) {
    fillRand(ctx->A_host, -10.0, 10.0);
    for (int i = 0; i < ctx->N; i += 1) {
        for (int j = 0; j < ctx->N; j += 1) {
            ctx->A(i, j) = ctx->A_host[i * ctx->N + j];
        }
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->A_host.resize(ctx->N * ctx->N);
    ctx->A = Kokkos::View<double**>("A", ctx->N, ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    luFactorize(ctx->A, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctLuFactorize(ctx->A_host, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 512;

    Kokkos::View<double**> A("A", TEST_SIZE, TEST_SIZE);
    std::vector<double> A_host(TEST_SIZE * TEST_SIZE), A_test(TEST_SIZE * TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(A_host, -10.0, 10.0);
        for (int i = 0; i < TEST_SIZE; i += 1) {
            for (int j = 0; j < TEST_SIZE; j += 1) {
                A(i, j) = A_host[i * TEST_SIZE + j];
            }
        }

        // compute correct result
        correctLuFactorize(A_host, TEST_SIZE);

        // compute test result
        luFactorize(A, TEST_SIZE);
        
        // copy result back to host
        for (int i = 0; i < TEST_SIZE; i += 1) {
            for (int j = 0; j < TEST_SIZE; j += 1) {
                A_test[i * TEST_SIZE + j] = A(i, j);
            }
        }

        if (!fequal(A_host, A_test, 1e-3)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
