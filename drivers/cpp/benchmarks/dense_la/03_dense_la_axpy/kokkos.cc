// Driver for 03_dense_la_axpy for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Compute z = alpha*x+y where x and y are vectors. Store the result in z.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//    
//    input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2
//    output: z=[2, -6, 5, 17]
// */
// void axpy(double alpha, Kokkos::View<const double*> &x, Kokkos::View<const double*> &y, Kokkos::View<double*> &z) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include <Kokkos_Core.hpp>
#include <Kokkos_Sort.hpp>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    double alpha;
    Kokkos::View<double*> x, y, z;
    std::vector<double> x_host, y_host, z_host;
};

void reset(Context *ctx) {
    fillRand(ctx->x_host);
    fillRand(ctx->y_host);

    copyVectorToView(ctx->x_host, ctx->x);
    copyVectorToView(ctx->y_host, ctx->y);
}

Context *init() {
    Context *ctx = new Context();

    ctx->alpha = 2.0;
    ctx->x_host.resize(1 << 18);
    ctx->y_host.resize(1 << 18);
    ctx->z_host.resize(1 << 18);

    ctx->x = Kokkos::View<double*>("x", ctx->x_host.size());
    ctx->y = Kokkos::View<double*>("y", ctx->y_host.size());
    ctx->z = Kokkos::View<double*>("z", ctx->z_host.size());

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    axpy(ctx->alpha, ctx->x, ctx->y, ctx->z);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctAxpy(ctx->alpha, ctx->x_host, ctx->y_host, ctx->z_host);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> x_host(TEST_SIZE), y_host(TEST_SIZE), correct(TEST_SIZE), test(TEST_SIZE);
    double alpha = 2.0;

    Kokkos::View<double*> x("x", TEST_SIZE);
    Kokkos::View<double*> y("y", TEST_SIZE);
    Kokkos::View<double*> z("z", TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x_host, -1.0, 1.0);
        fillRand(y_host, -1.0, 1.0);
        copyVectorToView(x_host, x);
        copyVectorToView(y_host, y);

        // compute correct result
        correctAxpy(alpha, x_host, y_host, correct);

        // compute test result
        axpy(alpha, x, y, z);
        copyViewToVector(z, test);
        
        if (!fequal(correct, test)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
