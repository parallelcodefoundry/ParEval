// Driver for 03_dense_la_axpy for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Compute z = alpha*x+y where x and y are vectors. Store the result in z.
//    Example:
//    
//    input: x=[1, -5, 2, 9] y=[0, 4, 1, -1] alpha=2
//    output: z=[2, -6, 5, 17]
// */
// void axpy(double alpha, std::vector<double> const& x, std::vector<double> const& y, std::vector<double> &z) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    double alpha;
    std::vector<double> x, y, z;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -1.0, 1.0);
    fillRand(ctx->y, -1.0, 1.0);

    BCAST(ctx->x, DOUBLE);
    BCAST(ctx->y, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();

    ctx->alpha = 2.0;
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->y.resize(DRIVER_PROBLEM_SIZE);
    ctx->z.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    axpy(ctx->alpha, ctx->x, ctx->y, ctx->z);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctAxpy(ctx->alpha, ctx->x, ctx->y, ctx->z);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<double> x(TEST_SIZE), y(TEST_SIZE), correct(TEST_SIZE), test(TEST_SIZE);
    double alpha = 2.0;

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, -1.0, 1.0);
        fillRand(y, -1.0, 1.0);
        BCAST(x, DOUBLE);
        BCAST(y, DOUBLE);

        // compute correct result
        correctAxpy(alpha, x, y, correct);

        // compute test result
        axpy(alpha, x, y, test);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && !fequal(correct, test, 1e-6)) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
