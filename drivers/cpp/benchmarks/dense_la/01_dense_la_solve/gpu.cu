// Driver for 01_dense_la_solve for CUDA and HIP
// /* Solve the linear system Ax=b for x.
//    A is an NxN matrix in row-major. x and b have N elements.
//    Use CUDA to compute in parallel. The kernel is launched on an NxN grid of threads.
//    Example:
//    
//    input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]
//    output: x=[3, 1, 2]
// */
// __global__ void solveLinearSystem(const double *A, const double *b, double *x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.cuh"   // code generated by LLM

void createRandomLinearSystem(std::vector<double> &A, std::vector<double> &b, std::vector<double> &x, size_t N) {
    fillRand(A, -10.0, 10.0);
    fillRand(x, -10.0, 10.0);

    std::fill(b.begin(), b.end(), 0.0);
    for (size_t i = 0; i < N; i++) {
        for (size_t j = 0; j < N; j += 1) {
            b[i] += A[i * N + j] * x[j];
        }
    }

    std::fill(x.begin(), x.end(), 0.0);
}

struct Context {
    double *d_A, *d_b, *d_x;
    std::vector<double> h_A, h_b, h_x;
    size_t N;
    dim3 blockSize, gridSize;
};

void reset(Context *ctx) {
    createRandomLinearSystem(ctx->h_A, ctx->h_b, ctx->h_x, ctx->N);

    COPY_H2D(ctx->d_A, ctx->h_A.data(), ctx->N * ctx->N * sizeof(double));
    COPY_H2D(ctx->d_b, ctx->h_b.data(), ctx->N * sizeof(double));
    COPY_H2D(ctx->d_x, ctx->h_x.data(), ctx->N * sizeof(double));
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->blockSize = dim3(32,32);
    ctx->gridSize = dim3((ctx->N + ctx->blockSize.x - 1) / ctx->blockSize.x,
                         (ctx->N + ctx->blockSize.y - 1) / ctx->blockSize.y); // at least enough threads

    ctx->h_A.resize(ctx->N * ctx->N);
    ctx->h_b.resize(ctx->N);
    ctx->h_x.resize(ctx->N);

    ALLOC(ctx->d_A, ctx->N * ctx->N * sizeof(double));
    ALLOC(ctx->d_b, ctx->N * sizeof(double));
    ALLOC(ctx->d_x, ctx->N * sizeof(double));

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    solveLinearSystem<<<ctx->gridSize, ctx->blockSize>>>(ctx->d_A, ctx->d_b, ctx->d_x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSolveLinearSystem(ctx->h_A, ctx->h_b, ctx->h_x, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 512;
    dim3 blockSize = dim3(32,32);
    dim3 gridSize = dim3((TEST_SIZE + blockSize.x - 1) / blockSize.x,
                         (TEST_SIZE + blockSize.y - 1) / blockSize.y); // at least enough threads

    std::vector<double> h_A (TEST_SIZE * TEST_SIZE), h_b (TEST_SIZE), h_x (TEST_SIZE), test (TEST_SIZE);
    double *d_A, *d_b, *d_x;

    ALLOC(d_A, TEST_SIZE * TEST_SIZE * sizeof(double));
    ALLOC(d_b, TEST_SIZE * sizeof(double));
    ALLOC(d_x, TEST_SIZE * sizeof(double));

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        createRandomLinearSystem(h_A, h_b, h_x, TEST_SIZE);

        COPY_H2D(d_A, h_A.data(), TEST_SIZE * TEST_SIZE * sizeof(double));
        COPY_H2D(d_b, h_b.data(), TEST_SIZE * sizeof(double));
        COPY_H2D(d_x, h_x.data(), TEST_SIZE * sizeof(double));

        // compute correct result
        correctSolveLinearSystem(h_A, h_b, h_x, TEST_SIZE);

        // compute test result
        solveLinearSystem<<<gridSize, blockSize>>>(d_A, d_b, d_x, TEST_SIZE);
        SYNC();

        // copy back
        COPY_D2H(test.data(), d_x, TEST_SIZE * sizeof(double));
        
        if (!fequal(h_x, test, 1e-4)) {
            FREE(d_A);
            FREE(d_b);
            FREE(d_x);
            return false;
        }
    }
    FREE(d_A);
    FREE(d_b);
    FREE(d_x);
    return true;
}

void destroy(Context *ctx) {
    FREE(ctx->d_A);
    FREE(ctx->d_b);
    FREE(ctx->d_x);
    delete ctx;
}
