// Driver for 01_dense_la_solve for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Solve the linear system Ax=b for x.
//    A is an NxN matrix. x and b have N elements.
//    Use Kokkos to compute in parallel. Assume Kokkos has already been initialized.
//    Example:
//    
//    input: A=[[1,4,2], [1,2,3], [2,1,3]] b=[11, 11, 13]
//    output: x=[3, 1, 2]
// */
// void solveLinearSystem(Kokkos::View<const double**> &A, Kokkos::View<const double*> &b, Kokkos::View<double*> &x, size_t N) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    Kokkos::View<double**> A;
    Kokkos::View<double*> b, x;
    Kokkos::View<const double**> A_const;
    Kokkos::View<const double*> b_const;

    std::vector<double> A_host, b_host, x_host;
    size_t N;
};

void createRandomLinearSystem(std::vector<double> &A, std::vector<double> &b, std::vector<double> &x, size_t N) {
    fillRand(A, -10.0, 10.0);
    fillRand(x, -10.0, 10.0);

    std::fill(b.begin(), b.end(), 0.0);
    for (size_t i = 0; i < N; i++) {
        for (size_t j = 0; j < N; j += 1) {
            b[i] += A[i * N + j] * x[j];
        }
    }

    std::fill(x.begin(), x.end(), 0.0);
}

void reset(Context *ctx) {
    createRandomLinearSystem(ctx->A_host, ctx->b_host, ctx->x_host, ctx->N);

    for (size_t i = 0; i < ctx->N; i += 1) {
        for (size_t j = 0; j < ctx->N; j += 1) {
            ctx->A(i, j) = ctx->A_host[i * ctx->N + j];
        }
    }
    copyVectorToView(ctx->b_host, ctx->b);
    copyVectorToView(ctx->x_host, ctx->x);

    ctx->A_const = ctx->A;
    ctx->b_const = ctx->b;
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->A_host.resize(ctx->N * ctx->N);
    ctx->b_host.resize(ctx->N);
    ctx->x_host.resize(ctx->N);

    ctx->A = Kokkos::View<double**>("A", ctx->N, ctx->N);
    ctx->b = Kokkos::View<double*>("b", ctx->N);
    ctx->x = Kokkos::View<double*>("x", ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    solveLinearSystem(ctx->A_const, ctx->b_const, ctx->x, ctx->N);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSolveLinearSystem(ctx->A_host, ctx->b_host, ctx->x_host, ctx->N);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 512;

    Kokkos::View<double**> A("A", TEST_SIZE, TEST_SIZE);
    Kokkos::View<double*> b("b", TEST_SIZE);
    Kokkos::View<double*> x("x", TEST_SIZE);

    std::vector<double> A_host(TEST_SIZE * TEST_SIZE);
    std::vector<double> b_host(TEST_SIZE);
    std::vector<double> correct(TEST_SIZE), test(TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        createRandomLinearSystem(A_host, b_host, correct, TEST_SIZE);

        for (size_t i = 0; i < TEST_SIZE; i++) {
            for (size_t j = 0; j < TEST_SIZE; j += 1) {
                A(i, j) = A_host[i * TEST_SIZE + j];
            }
        }
        copyVectorToView(b_host, b);
        copyVectorToView(correct, x);

        Kokkos::View<const double**> A_const = A;
        Kokkos::View<const double*> b_const = b;

        // compute correct result
        correctSolveLinearSystem(A_host, b_host, correct, TEST_SIZE);

        // compute test result
        solveLinearSystem(A_const, b_const, x, TEST_SIZE);
        copyViewToVector(x, test);
        
        if (!fequal(correct, test, 1e-4)) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
